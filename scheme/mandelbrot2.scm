(module f2)

(define (main)
   (let* ((bit-num::byte 0)
          (byte-acc::byte 0)
          (iter::bint 50)
          (limit::double 2.0)
          (tr::double 0.0)
          (ti::double 0.0)
          (w::bint 3000)
          (h::bint w))
      (print "P4 ")
      (print w " " h)
      (do ((y::bint 0 (+fx y 1)))
          ((>=fx y h))
          (do ((x 0 (+fx x 1)))
              ((>=fx x w))
              (let* ((zr::double 0.0)
                     (zi::double 0.0)
                     (cr::double (-fl (*fl 2.0
                                           (/fl (fixnum->flonum x)
                                                (fixnum->flonum w)))
                                      1.5))
                     (ci::double (-fl (*fl 2.0
                                           (/fl (fixnum->flonum y)
                                                (fixnum->flonum h)))
                                      1.0)))
                 (do ((i::bint 0 (+fx i 1)))
                     ((or (>=fx i iter)
                          (>fl (+fl (*fl zr zr)
                                    (*fl zi zi))
                               (*fl limit limit))))
                     (set! tr (+fl (-fl (*fl zr zr)
                                        (*fl zi zi))
                                   cr))
                     (set! ti (+fl (*fl 2.0 (*fl zr zi))
                                   ci))
                     (set! zr tr)
                     (set! zi ti))
                 (if (>fl (+fl (*fl zr zr)
                               (*fl zi zi))
                          (*fl limit limit))
                     (set! byte-acc (bit-or (bit-lsh byte-acc 1) 0))
                     (set! byte-acc (bit-or (bit-lsh byte-acc 1) 1)))
                 (set! bit-num (+fx bit-num 1))
                 (if (=fx bit-num 8)
                     (begin
                        (display (integer->char byte-acc))
                        (set! byte-acc 0)
                        (set! bit-num 0))
                     (if (=fx x (-fx w 1))
                         (begin
                            (set! byte-acc (bit-lsh byte-acc
                                                    (-fx (modulo w 8) 8)))
                            (display (integer->char byte-acc))
                            (set! byte-acc 0)
                            (set! bit-num 0)))))))))

(main) 
