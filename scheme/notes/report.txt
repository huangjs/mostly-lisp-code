


「プログラム言語基礎論レポート」


提出年月日:H19.8.21

大学：電気通信大学

学籍番号：0635010

姓名：黄　澗石




1. delay/force の建築

First, I created a class called 'Promise'. It has three slots --
thunk, isForced and value. Thunk stores the form to be evaluated;
isForced tells whether it's been forced already to avoid duplicated
evaluation; value stores the evaluated form when it's forced for the
first time.

'delay' and 'force' need to agree on the protocol how the delayed
form, which is a Promise object, is encoded. Currently, I wrap the
delayed form with a lambda of no arguments and 'force' simply invoke
the lambda with '(). So 'force' can be implemented as a normal
function.

Also, if the form given to 'force' is not evaluated to a Promise
object, it will do nothing and simply return the object.

e.g.
(force (delay (+ 1 1))) => 2
(force (+ 1 1)) => 2


So here's the code:

Promise.java is a new file.

==== in Promise.java ====

final class Promise {

  public Lambda thunk;
  public boolean isForced;
  public Object value;

  // constructor
  Promise(Object e, Env env) {
    thunk = new Lambda(null, env, (Object)List.nil, List.list(e));
    isForced = false;
  }

  public Object force() {
    if (isForced == true)
      return value;
    else{
      value = thunk.invoke(List.nil);
      isForced = true;
      thunk = null;
      return value;
    }
  }
  
}

And insert these lines to Eval.java:

==== in Eval.java, line 525 ====

  static { Subr.defSpecial("Eval", "delay", 1, 0, false); }
  public static Promise delay(Object arg, Env env) {
    return new Promise(arg, env);
  }

  static { Subr.def("Eval", "force", 1); }
  public static Object force(Object arg) {
    if (arg instanceof Promise) {
      return ((Promise)arg).force();
    }else{
      return arg;
    }
  }

//


==========

And here's the result that runs the examples:


~/src/jakld $ java Eval
Java Application Kumikomi-you-no Lisp Driver (October 19, 2002)
(c) Copyright Taiichi Yuasa, 2002.  All rights reserved.

>(define (foo x)
  (display "x is ")
  (display x)
  (newline)
  x)
foo

>(let ((d (delay (foo 100))))
  (foo 200)
  (force d))
x is 200
x is 100
100

>(let* ((x 100) (d (delay (+ x 1))))
  (let ((x 200))
    (force d)))
101

>(let ((d (delay (foo 100))))
  (foo 200)
  (force d)
  (force d))
x is 200
x is 100
100

//




2. Problem F

The program is a little bit long, I'll paste it with comments.

;;;; accessor and predicates
(define (left tree) (car tree))	
(define (right tree) (cadr tree))
(define (has-no-child? tree) (symbol? tree))

;;;; helper function
;;; similar to common lisp's cadr
(define (my-cadr x)
  (cond ((null? x) '())
        ((null? (cdr x)) '())
        (else (cadr x))))

;;; similar to that of common lisp
(define (remove-duplicates list)
  (let loop ((result '())
             (cursor list)
             (current (car list)))
    (if (null? cursor)
        (reverse result)
        (if (member current result)
            (loop result (cdr cursor) (my-cadr cursor))
            (loop (cons current result)
                  (cdr cursor)
                  (my-cadr cursor))))))

;;; union of two lists/sets
(define (union list1 list2)
  (remove-duplicates (append list1 list2)))

;;; intersection of two lists without duplications
(define (intersection list1 list2)
  (let ((list1 (remove-duplicates list1))
        (list2 (remove-duplicates list2)))
    (let loop ((result '())
               (cursor list1)
               (current (car list1)))
      (if (null? cursor)
          (reverse result)
          (if (member current list2)
              (loop (cons current result)
                    (cdr cursor)
                    (my-cadr cursor))
              (loop result (cdr cursor) (my-cadr cursor)))))))
    
;;; return all the children of a tree, a child is either a leaf or a
;;; tree
(define (all-children tree)
  ;; recursively append
  (if (has-no-child? tree)
      (list tree)
      (append (list tree)
      	      (all-children (left tree))
      	      (all-children (right tree)))))

;;; return the number of children of a tree
(define (count-children tree)
  ;; recursively add
  (if (has-no-child? tree)
      1
      (+ 1
         (count-children (left tree))
         (count-children (right tree)))))

;;; normalized structure has less children number on the left than on
;;; the right, and each of its children is a normalized structure
(define (normalize-structure tree)
  (if (has-no-child? tree)
      tree
      (if (> (count-children (left tree))
             (count-children (right tree)))
          (list (normalize-structure (right tree))
                (normalize-structure (left tree)))
          (list (normalize-structure (left tree))
                (normalize-structure (right tree))))))
      
;;; return all the structures of a tree, with duplications removed and
;;; structure normalized
(define (all-structures tree)
  (map normalize-structure
       (remove-duplicates (all-children tree))))


;;; left-right similarity of a tree
(define (lr-similarity tree)
  (if (has-no-child? tree)
      0
      (let ((left-structure (all-structures (left tree)))
            (right-structure (all-structures (right tree))))
        (/ (length (intersection left-structure right-structure))
           (length (union left-structure right-structure))))))

	   
;;; compare the asymmetricity of two trees, x and y; if x is stronger
;;; than y, return 'greater-than; if x is equal to y by its strength,
;;; return 'equal; otherwise, y is stronger than x, return 'less-than.
(define (compare-asymmetricity x y)
  (let ((lr-similarity-x (lr-similarity x))
        (lr-similarity-y (lr-similarity y)))
    (cond ((< lr-similarity-x lr-similarity-y)
           'greater-than)
          ((> lr-similarity-x lr-similarity-y)
           'less-than)
          ((and (has-no-child? x)
                (has-no-child? y))
           'equal)
          (else
           (let ((children-of-x (list-tree-by-stength (left x) (right x)))
                 (children-of-y (list-tree-by-stength (left y) (right y))))
             (let ((compare-first-children
                    (compare-asymmetricity (car children-of-x)
                                           (car children-of-y))))
               (cond ((eq? compare-first-children 'greater-than)
                      'greater-than)
                     ((eq? compare-first-children 'equal)
                      (compare-asymmetricity (cadr children-of-x)
                                             (cadr children-of-y)))
                     (else 'less-than))))))))

;;; make a list of x y ordered by their strength, stronger one is to
;;; the front, if they're equal, order is reserved.
(define (list-tree-by-stength x y)
  (if (eq? (compare-asymmetricity x y) 'less-than)
      (list y x)
      (list x y)))

;;; type tolerant reverse
(define (my-reverse x)
  (if (list? x)
      (reverse x)
      x))

;;; this is the answer of the problem.
(define (reorder-tree tree)
  (if (has-no-child? tree)
      tree
      (list-tree-by-stength (reorder-tree (left tree))
                            (reorder-tree (right tree)))))


;;; test of the example given by the problem, print #t or #f for each
;;; test
(define (test)
  (let ((inputs '((((x x) x) ((x x) (x (x x))))
                  (((x x) (x x)) ((x x) ((x x) (x x))))
                  (((x x) ((x x) x)) (((x (x x)) x) (x x)))
                  (((x x) x) ((x x) (((((x x) x) x) x) x)))
                  (((x x) x) ((x (x x)) (x (x x))))
                  ((((x (x x)) x) (x ((x x) x))) ((x (x x)) (x x)))
                  ((((x x) x) ((x x) (x (x x)))) (((x x) (x x)) ((x x) ((x x) (x x)))))))
        (outputs '(((x (x x)) ((x x) ((x x) x)))
                   (((x x) ((x x) (x x))) ((x x) (x x)))
                   (((x ((x x) x)) (x x)) ((x x) ((x x) x)))
                   (((x ((x ((x x) x)) x)) (x x)) ((x x) x))
                   ((x (x x)) ((x (x x)) ((x x) x)))
                   (((x (x x)) (x x)) ((x ((x x) x)) ((x (x x)) x)))
                   (((x (x x)) ((x x) ((x x) x))) (((x x) (x x)) (((x x) (x x)) (x x)))))))
    (let loop ((in inputs)
               (out outputs))
      (if (or (null? in) (null? out))
          (newline)
          (begin
            (display (equal? (reorder-tree (car in))
                            (reorder-tree (car out))))
            (loop (cdr in) (cdr out)))))))


;;; test on files, print #t or #f on each test.
(define (test-file input output)
  (let ((in-port (open-input-file input))
        (out-port (open-input-file output)))
    (let loop ((in (read in-port))
               (out (read out-port)))
      (if (or (null? in) (null? out) (eq? in 0) (eq? out 0))
          (newline)
          (begin
            (display (equal? (reorder-tree in)
                             (reorder-tree out)))
            (loop (read in-port) (read out-port)))))))


;;; program entry
(define (main)
  (test-file "F1" "F1.ans")
  (test-file "F2" "F2.ans")
  (test-file "F3" "F3.ans")
  (test-file "F4" "F4.ans"))

(main)


//



And here's the result running the program. (save this file to the
folder where all the input and output files locate, and load the
program).

I compiled the program by Gambit-C scheme, with default declarations
and optimization sets and did the benchmark on a linux machine with a
Core Duo 2 2.6GHz CPU, and 1G MB of memory.

% gsc acm-jp-f.scm
% time gsi acm-jp-f.o1

#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t
#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t#t

real    0m1.727s
user    0m1.716s
sys     0m0.004s


This means I got all the correct answers.

* Remarks:

1) This is a quite naive implementation, mutation + memoization could
greatly improve the performance.

2) Actually, I found a inconsistency between the Spec and the example.

According to the second rule of placing a cell:

#2. For every cell X which is a *right* child cell of some parent
cell, if X has two child cells, the one at *right* has stronger (or
equal) asymmetricity than the one at left.

This means the right child is of the reverse order by strength, which
is opposite to the left child. This conforms to the example graph
shown in the problem. Where the unordered tree and ordered tree of the
graph is:

(((x x) x) ((x x) (x (x x))))
and
((x (x x)) ((x x) ((x x) x)))

So my first implementation of reorder-tree is:

(define (reorder-tree tree)
  (if (has-no-child? tree)
      tree
      (list-tree-by-stength
	(reorder-tree (left tree))
	(my-reverse (reorder-tree (right tree))))))
	 ^^^^^^^^^^

But amusingly, I failed the test, I examined the code again and again
but finally got it right after I deleted my-reverse in the
reorder-tree.

I think either the spec has mistake or the referee's program is wrong.



//

