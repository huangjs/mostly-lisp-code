(define (search-consecutive-prime begin end)
  (define (find previous-prime? current end)
    (cond ((= current end) (not #t))
          (previous-prime? (if (prime? current)
                                 (lambda () ((display (- current 1))
                                             (display current)
                                             #t))
                                 (find (not #t) (+ current 1) end)))
          (else (find (prime? current) (+ current 1) end))))
  (find (prime? begin) begin end))

(define (fast-search-consecutive-prime begin end)
  (define (find previous-prime? current end)
    (cond ((= current end) (not #t))
          (previous-prime? (if (fast-prime? current test-times)
                                 (lambda () ((display (- current 1))
                                             (display current)
                                             #t))
                                 (find (not #t) (+ current 1) end)))
          (else (find (fast-prime? current test-times) (+ current 1) end))))
  (find (fast-prime? begin test-times) begin end))

(define test-times 3)
