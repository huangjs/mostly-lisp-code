(define (make-queue)
  (define queue (cons '() '()))
  (define (front-ptr) (car queue))
  (define (rear-ptr) (cdr queue))
  (define (set-front-ptr! item) (set-car! queue item))
  (define (set-rear-ptr! item) (set-cdr! queue item))
  ;:*------------------------------------------------------ abstract layer
  (define (empty-queue?)
    (null? (front-ptr)))
  (define (front-of-queue)
    (if (empty-queue?)
        (error "FRONT called with an empty queue" queue)
        (car (front-ptr))))
  (define (rest-of-queue)  ;:* a procedure
    (define q (make-queue))
    (cond ((empty-queue?)
           (error "the queue is empty" queue))
          (else
           ((q 'set-front-ptr!) (cdr (front-ptr)))
           ((q 'set-rear-ptr!) (rear-ptr))))
    q)
  (define (rear-of-queue)
    (if (empty-queue?)
        (error "REAR called with an empty queue" queue)
        (car (rear-ptr))))
  (define (insert-queue! item)
    (let ((new-pair (cons item '())))
      (cond ((empty-queue?)
             (set-front-ptr! new-pair)
             (set-rear-ptr! new-pair)
             queue)
            (else
             (set-cdr! (rear-ptr) new-pair)
             (set-rear-ptr! new-pair)
             queue))))
  (define (delete-queue!)
    (cond ((empty-queue?)
           (error "DEQUEUE! called with an empty queue" queue))
          (else
           (set-front-ptr! (cdr (front-ptr)))
           queue)))
  (define (print-queue)
    (cond ((empty-queue?) (display ""))
          (else
           (display (front-of-queue))
           (((rest-of-queue) 'print-queue)))))
  (define (dispatch m)
    (cond ((eq? m 'front-ptr) front-ptr)
          ((eq? m 'rear-ptr) rear-ptr)
          ((eq? m 'set-front-ptr!) set-front-ptr!)
          ((eq? m 'set-rear-ptr!) set-rear-ptr!)
          ;:*-------------------------------------------- abstract layer
          ((eq? m 'empty-queue?) empty-queue?)
          ((eq? m 'front-of-queue) front-of-queue)
          ((eq? m 'rest-of-queue) rest-of-queue)
          ((eq? m 'rear-of-queue) rear-of-queue)
          ((eq? m 'insert-queue!) insert-queue!)
          ((eq? m 'delete-queue!) delete-queue!)
          ((eq? m 'print-queue) print-queue)
          (else (error "Unknown request -- MAKE-QUEUE" m))))
  dispatch)
