
;;;; component: "DEFSTRUCT VEC"


IR1 block 9 start c1
start stack:
  1>     bind SB-C::CLAMBDA (FLET #:CLEANUP-FUN-3) :KIND :CLEANUP
end stack:
successors c2

IR1 block 10 start c2
start stack:
  2>     entry NIL
  3>  4: #:TOPMOST2
  5>     if v4 c6 c7
end stack:
successors c7 c6

IR1 block 13 start c6
start stack:
  6>  8: ':INVALID
  9>     set SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL} v8
end stack:
successors c7

IR1 block 11 start c7
start stack:
  7> 10: 'NIL
end stack:
successors c11

IR1 block 12 start c11
start stack:
 11>     return v10 SB-C::CLAMBDA (FLET #:CLEANUP-FUN-3)
end stack:
successors c12

IR1 block 0 start c13
start stack:
 13>     bind SB-C::CLAMBDA (SB-C::TOP-LEVEL-FORM
                             (LET ((#:TOPMOST2 "#<...>" . "#<...>"))
                               (WHEN "#<...>" . "#<...>")
                               ("#<...>" . "#<...>"))) :KIND :TOPLEVEL
 14> 15: SB-C::CLAMBDA (LET ((#:TOPMOST2 NIL))
                         )
 16> 17: 'NIL
 18>     local combination v15 v17
 19>     bind SB-C::CLAMBDA (LET ((#:TOPMOST2 NIL))
                              ) :KIND :LET
 20> 21: EQ {GLOBAL-FUNCTION}
 22> 23: ':INVALID
 24> 25: SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL}
 26> 27: known combination v21 v23 v25
 28>     if v27 c29 c30
end stack:
successors c30 c29

IR1 block 6 start c29
start stack:
 29> 31: 'NIL
 32>     set SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL} v31
 33> 34: 'T
 35>     set #:TOPMOST2 v34
end stack:
successors c30

IR1 block 1 start c30
start stack:
 30> 36: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 37> 38: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME #:CLEANUP-FUN-3
             :%DEBUG-NAME (FLET #:CLEANUP-FUN-3)
             :KIND :CLEANUP
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS NIL {11C74419}>)
 39>     known combination v36 v38
end stack:
successors c40

IR1 block 2 start c40
start stack:
 40>     entry NIL
 41> 42: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 43> 44: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (#:NEXT6) (#:START7) (#:COUNT8)
                               &REST #:G9))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:NEXT6
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C759A1}> {11C75961}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:START7
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C75A11}> {11C759D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:COUNT8
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C75A81}> {11C75A41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G9
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C75AF1}> {11C75AB1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 3
             :ENTRY-POINTS ((NIL . #) (NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:NEXT6 #:START7 #:COUNT8) {11C76AA1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:NEXT6 #:START7 #:COUNT8 #:N-CONTEXT-10
                                  #:N-COUNT-11) {11C775C9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:NEXT6 #:START7 #:COUNT8
                                  #:G9) {11C75CE1}> {11C75B59}>)
 45>     known combination v42 v44
 46> 47: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
end stack:
successors c48

IR1 block 3 start c48
start stack:
 48>     entry NIL
 49> 50: SB-C::%UNWIND-PROTECT {GLOBAL-FUNCTION}
 51> 52: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 53> 54: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (SB-C::ESCAPE-FUN #:EXIT-TAG-5)
             :KIND :DELETED
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS NIL {11C78D91}>)
 55>     known combination v52 v54
 56> 57: '#<SB-C::NLX-INFO
            :BLOCK #<SB-C::CBLOCK 8 :START c58 {11C78729}>
            :TARGET #<SB-C::CBLOCK 7 :START c59 {11C7CCA9}>
            :INFO #<SB-C::IR2-NLX-INFO
                    :HOME NIL
                    :SAVE-SP #<SB-C:TN t1[S15]>
                    :DYNAMIC-STATE (#<SB-C:TN t2[S14]> #<SB-C:TN t3[S13]>
                                    #<SB-C:TN t4[S12]>)> {11C7CC39}>
 60> 61: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-3)
 62>     known combination v50 v57 v61
 63> 64: SB-C::%CLEANUP-POINT {GLOBAL-FUNCTION}
 65>     known combination v64
 66> 67: SB-KERNEL:ASSERT-SYMBOL-HOME-PACKAGE-UNLOCKED {GLOBAL-FUNCTION}
 68> 69: 'VEC
 70> 71: '"defining ~A as a structure"
 72>     full combination v67 v69 v71
end stack:
successors c73

IR1 block 4 start c73
start stack:
 73> 74: SB-C:%UNWIND-PROTECT-BREAKUP {GLOBAL-FUNCTION}
 75>     known combination v74
 76> 77: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-3)
 78>     local combination v77
end stack:
successors c79

IR1 block 5 start c79
start stack:
 79> 80: 'NIL
 81>     return v80 SB-C::CLAMBDA (SB-C::TOP-LEVEL-FORM
                                   (LET ((#:TOPMOST2 "#<...>" . "#<...>"))
                                     (WHEN "#<...>" . "#<...>")
                                     ("#<...>" . "#<...>")))
end stack:
successors c12

IR1 block 7 start c59
start stack:
 59> 82: SB-C::%NLX-ENTRY {GLOBAL-FUNCTION}
 83> 84: '#<SB-C::NLX-INFO
            :BLOCK #<SB-C::CBLOCK 8 :START c58 {11C78729}>
            :TARGET #<SB-C::CBLOCK 7 :START c59 {11C7CCA9}>
            :INFO #<SB-C::IR2-NLX-INFO
                    :HOME NIL
                    :SAVE-SP #<SB-C:TN t1[S15]>
                    :DYNAMIC-STATE (#<SB-C:TN t2[S14]> #<SB-C:TN t3[S13]>
                                    #<SB-C:TN t4[S12]>)> {11C7CC39}>
 85> 86: known combination v82 v84
end stack:
successors c58

IR1 block 8 start c58
start stack:
 58>     local mv-combination v47 v86
 87>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 88> 89: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-3)
 90>     local combination v89
 91> 92: SB-C:%CONTINUE-UNWIND {GLOBAL-FUNCTION}
 93> 94: #:NEXT6
 95> 96: #:START7
 97> 98: #:COUNT8
 99>     known combination v92 v94 v96 v98
end stack:
successors c12


;;;; IR2 component: "DEFSTRUCT VEC"

entries:
    L1: (SB-C::TOP-LEVEL-FORM
         (LET ((#:TOPMOST2 "#<...>" . "#<...>"))
           (WHEN "#<...>" . "#<...>")
           ("#<...>" . "#<...>")))


TNs: 34 local, 18 temps, 8 constant, 10 env, 0 comp, 8 global.
Wired: 52, Unused: 0. 14 blocks, 100 global conflicts.

IR1 block 16 start c12

    IR2 block NIL start c12

IR1 block 0 start c13

    IR2 block 8 start c13
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    3: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    4: NOTE-ENVIRONMENT-START {#}
    5: MAKE-VALUE-CELL 'NIL!13>t14[ECX] => #:TOPMOST2!15[S11]<t16[EAX]
    6: FAST-SYMBOL-VALUE 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t18[ECX]
                         => t19[EAX]
    7: IF-EQ ':INVALID!20[Const7] t19[EAX] {# NIL}

IR1 block 1 start c30

    IR2 block 6 start c30
    L2:

IR1 block 2 start c40

    IR2 block 5 start c40

IR1 block 3 start c48

    IR2 block 4 start c48
    0: CURRENT-BINDING-POINTER => t2[S14]<t21[EAX]
    1: SAVE-DYNAMIC-STATE => t3[S13]<t22[EAX] t4[S12]<t23[ECX]
    2: CURRENT-STACK-POINTER => t1[S15]
    3: MAKE-UNWIND-BLOCK t24[S5] {#} => t25[ECX]
    4: SET-UNWIND-PROTECT t24[S5]
    5: ALLOCATE-FULL-CALL-FRAME {2} => t26[EBX]
    6: MOVE-ARG 'VEC!27[Const8]>t28[EDX] t26[EBX] => t29[EDX]
    7: MOVE-ARG '"defining ~A as a structure"!30[Const9]>t31[EDI] t26[EBX]
                => t32[EDI]
    8: CALL-NAMED t26[EBX] t33[Const10]>t34[EAX] t29[EDX] t32[EDI] {# 2 0 NIL}

IR1 block 4 start c73

    IR2 block 3 start c73
    0: UNLINK-UNWIND-PROTECT
    1: CURRENT-FP => t35[EDX]
    2: ALLOCATE-FRAME {#} => t36[ECX] t37[IGNORE-ME]
    3: MOVE-ARG #:TOPMOST2!15[S11]>t38[EAX] t36[ECX] => t39[EAX]
    4: MOVE-ARG t35[EDX] t36[ECX] => t40[S0]
    5: KNOWN-CALL-LOCAL t36[ECX] t37[IGNORE-ME] t39[EAX] t40[S0]
                        {# # #}
                        => t41[EAX]

IR1 block 5 start c79

    IR2 block 2 start c79
    0: MOVE 'NIL!13 => t42[EDX]
    1: RETURN-SINGLE t7[S0] t11[S1] t42[EDX]

IR1 block 6 start c29

    IR2 block 7 start c29
    L3:
    0: SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t43[ECX]
           'NIL!13>t44[EDX]

    1: VALUE-CELL-SET #:TOPMOST2!15[S11]>t45[EAX] 'T!46>t47[ECX]
    2: BRANCH {#}

IR1 block 7 start c59

    IR2 block 1 start c59
    0: UWP-ENTRY {#} => t48[EDX] t49[EBX] t50[ECX]
    1: MOVE t48[EDX] => t51[S2]<t52[EDX]
    2: MOVE t49[EBX] => t53[S3]<t54[EBX]
    3: MOVE t50[ECX] => t55[S4]<t56[ECX]
    4: RESTORE-DYNAMIC-STATE t3[S13]>t57[ECX] t4[S12]>t58[EDX]
    5: UNBIND-TO-HERE t2[S14]>t59[ESI]

IR1 block 8 start c58

    IR2 block 0 start c58
    0: CURRENT-FP => t60[EDX]
    1: ALLOCATE-FRAME {#} => t61[ECX] t62[IGNORE-ME]
    2: MOVE-ARG #:TOPMOST2!15[S11]>t63[EAX] t61[ECX] => t39[EAX]
    3: MOVE-ARG t60[EDX] t61[ECX] => t40[S0]
    4: KNOWN-CALL-LOCAL t61[ECX] t62[IGNORE-ME] t39[EAX] t40[S0]
                        {# # #}
                        => t41[EAX]
    5: UNWIND t51[S2]>t64[EAX] t53[S3]>t65[EBX] t55[S4]>t66[ECX]

IR1 block 9 start c1

    IR2 block 13 start c1
    L4:
    0: SAP-MOVE t67[S1]>t68[ECX] => t69[S1]<t70[ECX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 10 start c2

    IR2 block 12 start c2 ..

assembly code for #<SB-C:COMPONENT :NAME "DEFSTRUCT VEC" {11C7AD39}>

in the elsewhere segment:
L5:
in the regular segment:
L6:
in the elsewhere segment:
L7:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L8:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-64]
L9:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

VOP MAKE-VALUE-CELL 'NIL!13>t14[ECX] => #:TOPMOST2!15[S11]<t16[EAX] 
        MOV     #<TN t14[ECX]>, 134217739
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t16[EAX]>, 8
        FS-SEGMENT-PREFIX
        ADD     #<TN t16[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t16[EAX]>, DWORD PTR [+36]
        JMP     BE, L11
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L12
L11:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t16[EAX]>
        SUB     #<TN t16[EAX]>, 8
L12:
        MOV     DWORD PTR [EAX+0], 314
        LEA     #<TN t16[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-3], #<TN t14[ECX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L13
        BREAK   9
L13:
        MOV     #<TN #:TOPMOST2!15[S11]>, #<TN t16[EAX]>

VOP FAST-SYMBOL-VALUE 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t18[ECX]
                      => t19[EAX] 
        MOV     #<TN t18[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t19[EAX]>, DWORD PTR [ECX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t19[EAX]>, DWORD PTR [EAX+0]
        CMP     #<TN t19[EAX]>, 90
        JMP     NE, L14
        MOV     #<TN t19[EAX]>, DWORD PTR [ECX-3]
L14:

VOP IF-EQ ':INVALID!20[Const7] t19[EAX] {# NIL} 
        CMP     #<TN ':INVALID!20[Const7]>, #<TN t19[EAX]>
        JMP     E, L3

L2:
L15:
L16:

VOP CURRENT-BINDING-POINTER => t2[S14]<t21[EAX] 
        FS-SEGMENT-PREFIX
        MOV     #<TN t21[EAX]>, DWORD PTR [+12]
        MOV     #<TN t2[S14]>, #<TN t21[EAX]>

VOP SAVE-DYNAMIC-STATE => t3[S13]<t22[EAX] t4[S12]<t23[ECX] 
        MOV     #<TN t22[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     #<TN t22[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t23[ECX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     #<TN t23[ECX]>, DWORD PTR [ECX+0]
        MOV     #<TN t3[S13]>, #<TN t22[EAX]>
        MOV     #<TN t4[S12]>, #<TN t23[ECX]>

VOP CURRENT-STACK-POINTER => t1[S15] 
        MOV     #<TN t1[S15]>, #<TN t71[ESP]>

VOP MAKE-UNWIND-BLOCK t24[S5] {#} => t25[ECX] 
        LEA     #<TN t25[ECX]>, DWORD PTR [EBP-44]
        MOV     #<TN t72[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t72[EAX]>, DWORD PTR [EAX+0]
        MOV     DWORD PTR [ECX+0], #<TN t72[EAX]>
        MOV     DWORD PTR [ECX+4], #<TN t73[EBP]>
        MOV     DWORD PTR [ECX+8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L17)

VOP SET-UNWIND-PROTECT t24[S5] 
        LEA     #<TN t74[EAX]>, DWORD PTR [EBP-44]
        MOV     #<TN t75[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t74[EAX]>

VOP ALLOCATE-FULL-CALL-FRAME {2} => t26[EBX] 
        MOV     #<TN t26[EBX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 12

VOP MOVE-ARG 'VEC!27[Const8]>t28[EDX] t26[EBX] => t29[EDX] 
        MOV     #<TN t28[EDX]>, #<TN 'VEC!27[Const8]>

VOP MOVE-ARG '"defining ~A as a structure"!30[Const9]>t31[EDI] t26[EBX]
             => t32[EDI] 
        MOV     #<TN t31[EDI]>, #<TN '"defining ~A as a structure"!30[Const9]>

VOP CALL-NAMED t26[EBX] t33[Const10]>t34[EAX] t29[EDX] t32[EDI] {# 2 0 NIL} 
        MOV     #<TN t34[EAX]>, #<TN t33[Const10]>
L18:
        MOV     #<TN t76[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t73[EBP]>
        MOV     #<TN t73[EBP]>, #<TN t26[EBX]>
L19:
L20:
        CALL    DWORD PTR [EAX+5]
L21:
        JMP     NC, L22
        MOV     #<TN t71[ESP]>, #<TN t77[EBX]>
L22:
L23:

L24:

VOP UNLINK-UNWIND-PROTECT 
        MOV     #<TN t78[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t78[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t78[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t79[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t78[EAX]>

VOP CURRENT-FP => t35[EDX] 
        MOV     #<TN t35[EDX]>, #<TN t73[EBP]>

VOP ALLOCATE-FRAME {#} => t36[ECX] t37[IGNORE-ME] 
        MOV     #<TN t36[ECX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 64

VOP MOVE-ARG #:TOPMOST2!15[S11]>t38[EAX] t36[ECX] => t39[EAX] 
        MOV     #<TN t39[EAX]>, #<TN #:TOPMOST2!15[S11]>

VOP MOVE-ARG t35[EDX] t36[ECX] => t40[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t35[EDX]>

VOP KNOWN-CALL-LOCAL t36[ECX] t37[IGNORE-ME] t39[EAX] t40[S0]
                     {# # #}
                     => t41[EAX] 
L25:
        MOV     #<TN t73[EBP]>, #<TN t36[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L26)
L27:
        JMP     L4
L26:
L28:
L29:

L30:

VOP MOVE 'NIL!13 => t42[EDX] 
        MOV     #<TN t42[EDX]>, 134217739

VOP RETURN-SINGLE t7[S0] t11[S1] t42[EDX] 
L31:
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t73[EBP]>, #<TN t7[S0]>
        RET     4

L3:

VOP SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t43[ECX] 'NIL!13>t44[EDX] 
        MOV     #<TN t43[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t44[EDX]>, 134217739
        MOV     #<TN t80[EAX]>, DWORD PTR [ECX+17]
        OR      #<TN t80[EAX]>, #<TN t80[EAX]>
        JMP     Z, L32
        FS-SEGMENT-PREFIX
        CMP     DWORD PTR [EAX+0], 90
        JMP     Z, L32
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t44[EDX]>
        JMP     L33
L32:
        MOV     DWORD PTR [ECX-3], #<TN t44[EDX]>
L33:

VOP VALUE-CELL-SET #:TOPMOST2!15[S11]>t45[EAX] 'T!46>t47[ECX] 
        MOV     #<TN t45[EAX]>, #<TN #:TOPMOST2!15[S11]>
        MOV     #<TN t47[ECX]>, 134217767
        MOV     DWORD PTR [EAX-3], #<TN t47[ECX]>

VOP BRANCH {#} 
        JMP     L2

L34:

VOP UWP-ENTRY {#} => t48[EDX] t49[EBX] t50[ECX] 
L17:
L35:

VOP MOVE t48[EDX] => t51[S2]<t52[EDX] 
        MOV     #<TN t51[S2]>, #<TN t48[EDX]>

VOP MOVE t49[EBX] => t53[S3]<t54[EBX] 
        MOV     #<TN t53[S3]>, #<TN t49[EBX]>

VOP MOVE t50[ECX] => t55[S4]<t56[ECX] 
        MOV     #<TN t55[S4]>, #<TN t50[ECX]>

VOP RESTORE-DYNAMIC-STATE t3[S13]>t57[ECX] t4[S12]>t58[EDX] 
        MOV     #<TN t57[ECX]>, #<TN t3[S13]>
        MOV     #<TN t58[EDX]>, #<TN t4[S12]>
        MOV     #<TN t81[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t57[ECX]>
        MOV     #<TN t81[EAX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t58[EDX]>

VOP UNBIND-TO-HERE t2[S14]>t59[ESI] 
        MOV     #<TN t59[ESI]>, #<TN t2[S14]>
        FS-SEGMENT-PREFIX
        MOV     #<TN t82[EDX]>, DWORD PTR [+12]
        CMP     #<TN t59[ESI]>, #<TN t82[EDX]>
        JMP     E, L36
L37:
        MOV     #<TN t83[EAX]>, DWORD PTR [EDX-4]
        OR      #<TN t83[EAX]>, #<TN t83[EAX]>
        JMP     Z, L38
        MOV     #<TN t84[ECX]>, DWORD PTR [EDX-8]
        MOV     #<TN t85[EBX]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EBX+0], #<TN t84[ECX]>
        MOV     DWORD PTR [EDX-4], 0
L38:
        MOV     DWORD PTR [EDX-8], 0
        SUB     #<TN t82[EDX]>, 8
        CMP     #<TN t59[ESI]>, #<TN t82[EDX]>
        JMP     NE, L37
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+12], #<TN t82[EDX]>
L36:

L39:

VOP CURRENT-FP => t60[EDX] 
        MOV     #<TN t60[EDX]>, #<TN t73[EBP]>

VOP ALLOCATE-FRAME {#} => t61[ECX] t62[IGNORE-ME] 
        MOV     #<TN t61[ECX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 64

VOP MOVE-ARG #:TOPMOST2!15[S11]>t63[EAX] t61[ECX] => t39[EAX] 
        MOV     #<TN t39[EAX]>, #<TN #:TOPMOST2!15[S11]>

VOP MOVE-ARG t60[EDX] t61[ECX] => t40[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t60[EDX]>

VOP KNOWN-CALL-LOCAL t61[ECX] t62[IGNORE-ME] t39[EAX] t40[S0]
                     {# # #}
                     => t41[EAX] 
L40:
        MOV     #<TN t73[EBP]>, #<TN t61[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L41)
L42:
        JMP     L4
L41:
L43:
L44:

VOP UNWIND t51[S2]>t64[EAX] t53[S3]>t65[EBX] t55[S4]>t66[ECX] 
        MOV     #<TN t64[EAX]>, #<TN t51[S2]>
        MOV     #<TN t65[EBX]>, #<TN t53[S3]>
        MOV     #<TN t66[ECX]>, #<TN t55[S4]>
        CALL    #S(SB-C:FIXUP :NAME UNWIND :FLAVOR ASSEMBLY-ROUTINE :OFFSET NIL)

L4:
in the elsewhere segment:
L45:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L46:

L47:

VOP VALUE-CELL-REF t39[EAX] => t86[EAX] 
        MOV     #<TN t86[EAX]>, DWORD PTR [EAX-3]

VOP IF-EQ t86[EAX] 'NIL!87 {# T} 
        CMP     #<TN t86[EAX]>, 134217739
        JMP     NE, L48

L49:
L50:

VOP MOVE-ARG 'NIL!13 t40[S0]>t88[EAX] => t41[EAX] 
        MOV     #<TN t41[EAX]>, 134217739

VOP KNOWN-RETURN t40[S0] t69[S1] t41[EAX] {#} 
L51:
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t73[EBP]>, #<TN t40[S0]>
        RET     4
L52:

L48:

VOP SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t89[ECX]
        ':INVALID!20[Const7]>t90[EDX]
        
        MOV     #<TN t89[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t90[EDX]>, #<TN ':INVALID!20[Const7]>
        MOV     #<TN t91[EAX]>, DWORD PTR [ECX+17]
        OR      #<TN t91[EAX]>, #<TN t91[EAX]>
        JMP     Z, L53
        FS-SEGMENT-PREFIX
        CMP     DWORD PTR [EAX+0], 90
        JMP     Z, L53
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t90[EDX]>
        JMP     L54
L53:
        MOV     DWORD PTR [ECX-3], #<TN t90[EDX]>
L54:

VOP BRANCH {#} 
        JMP     L49

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME "DEFSTRUCT VEC" {11C7AD39}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;      003:       0000             ADD [EAX], AL
;      005:       0000             ADD [EAX], AL
;      007:       0000             ADD [EAX], AL
;      009:       0000             ADD [EAX], AL
;      00B:       0000             ADD [EAX], AL
;      00D:       0000             ADD [EAX], AL
;      00F:       0000             ADD [EAX], AL
;      011:       0000             ADD [EAX], AL
;      013:       0000             ADD [EAX], AL
;      015:       0000             ADD [EAX], AL
;      017:       0000             ADD [EAX], AL
;      019:       0000             ADD [EAX], AL
;      01B:       008F45F88D65     ADD [EDI+1703802949], CL
;      021:       C0B90B00000864   SAR BYTE PTR [ECX+134217739], 100
;      028:       800D4800000004   OR BYTE PTR [#x48], 4
;      02F:       B808000000       MOV EAX, 8
;      034:       64               BYTE #X64
;      035:       030520000000     ADD EAX, [#x20]
;      03B:       64               BYTE #X64
;      03C:       3B0524000000     CMP EAX, [#x24]
;      042:       7607             JBE L1
;      044:       E800000000       CALL L0
;      049: L0:   EB0A             JMP L2
;      04B: L1:   64               BYTE #X64
;      04C:       890520000000     MOV [#x20], EAX
;      052:       83E808           SUB EAX, 8
;      055: L2:   C7003A010000     MOV DWORD PTR [EAX], 314
;      05B:       8D4007           LEA EAX, [EAX+7]
;      05E:       8948FD           MOV [EAX-3], ECX
;      061:       64               BYTE #X64
;      062:       80354800000004   XOR BYTE PTR [#x48], 4
;      069:       7403             JEQ L3
;      06B:       0F0B09           BREAK 9                    ; pending interrupt trap
;      06E: L3:   8945D0           MOV [EBP-48], EAX
;      071:       8B0D11000000     MOV ECX, [#x11]
;      077:       8B4111           MOV EAX, [ECX+17]
;      07A:       64               BYTE #X64
;      07B:       8B00             MOV EAX, [EAX]
;      07D:       83F85A           CMP EAX, 90
;      080:       7503             JNE L4
;      082:       8B41FD           MOV EAX, [ECX-3]
;      085: L4:   390515000000     CMP [#x15], EAX
;      08B:       0F84AF000000     JEQ L7
;      091: L5:   64               BYTE #X64
;      092:       8B050C000000     MOV EAX, [#xC]
;      098:       8945C4           MOV [EBP-60], EAX
;      09B:       8B05D8000008     MOV EAX, [#x80000D8]
;      0A1:       64               BYTE #X64
;      0A2:       8B00             MOV EAX, [EAX]
;      0A4:       8B0D18040008     MOV ECX, [#x8000418]
;      0AA:       64               BYTE #X64
;      0AB:       8B09             MOV ECX, [ECX]
;      0AD:       8945C8           MOV [EBP-56], EAX
;      0B0:       894DCC           MOV [EBP-52], ECX
;      0B3:       8965C0           MOV [EBP-64], ESP
;      0B6:       8D4DD4           LEA ECX, [EBP-44]
;      0B9:       8B05F8000008     MOV EAX, [#x80000F8]
;      0BF:       64               BYTE #X64
;      0C0:       8B00             MOV EAX, [EAX]
;      0C2:       8901             MOV [ECX], EAX
;      0C4:       896904           MOV [ECX+4], EBP
;      0C7:       C7410899010000   MOV DWORD PTR [ECX+8], 409
;      0CE:       8D45D4           LEA EAX, [EBP-44]
;      0D1:       8B0DF8000008     MOV ECX, [#x80000F8]
;      0D7:       64               BYTE #X64
;      0D8:       8901             MOV [ECX], EAX
;      0DA:       8BDC             MOV EBX, ESP
;      0DC:       83EC0C           SUB ESP, 12
;      0DF:       8B1519000000     MOV EDX, [#x19]
;      0E5:       8B3D1D000000     MOV EDI, [#x1D]
;      0EB:       8B0521000000     MOV EAX, [#x21]
;      0F1:       B908000000       MOV ECX, 8
;      0F6:       896BFC           MOV [EBX-4], EBP
;      0F9:       8BEB             MOV EBP, EBX
;      0FB:       FF5005           CALL DWORD PTR [EAX+5]
;      0FE:       7302             JNB L6
;      100:       8BE3             MOV ESP, EBX
;      102: L6:   8B05F8000008     MOV EAX, [#x80000F8]
;      108:       64               BYTE #X64
;      109:       8B00             MOV EAX, [EAX]
;      10B:       8B00             MOV EAX, [EAX]
;      10D:       8B0DF8000008     MOV ECX, [#x80000F8]
;      113:       64               BYTE #X64
;      114:       8901             MOV [ECX], EAX
;      116:       8BD5             MOV EDX, EBP
;      118:       8BCC             MOV ECX, ESP
;      11A:       83EC40           SUB ESP, 64
;      11D:       8B45D0           MOV EAX, [EBP-48]
;      120:       8951FC           MOV [ECX-4], EDX
;      123:       8BE9             MOV EBP, ECX
;      125:       C745F85A010000   MOV DWORD PTR [EBP-8], 346
;      12C:       E9C0000000       JMP L13
;      131:       BA0B000008       MOV EDX, 134217739
;      136:       8D65F8           LEA ESP, [EBP-8]
;      139:       F8               CLC
;      13A:       8B6DFC           MOV EBP, [EBP-4]
;      13D:       C20400           RET 4
;      140: L7:   8B0D11000000     MOV ECX, [#x11]
;      146:       BA0B000008       MOV EDX, 134217739
;      14B:       8B4111           MOV EAX, [ECX+17]
;      14E:       09C0             OR EAX, EAX
;      150:       740B             JEQ L8
;      152:       64               BYTE #X64
;      153:       83385A           CMP DWORD PTR [EAX], 90
;      156:       7405             JEQ L8
;      158:       64               BYTE #X64
;      159:       8910             MOV [EAX], EDX
;      15B:       EB03             JMP L9
;      15D: L8:   8951FD           MOV [ECX-3], EDX
;      160: L9:   8B45D0           MOV EAX, [EBP-48]
;      163:       B927000008       MOV ECX, 134217767
;      168:       8948FD           MOV [EAX-3], ECX
;      16B:       E921FFFFFF       JMP L5
;      170:       8955F4           MOV [EBP-12], EDX
;      173:       895DF0           MOV [EBP-16], EBX
;      176:       894DEC           MOV [EBP-20], ECX
;      179:       8B4DC8           MOV ECX, [EBP-56]
;      17C:       8B55CC           MOV EDX, [EBP-52]
;      17F:       8B05D8000008     MOV EAX, [#x80000D8]
;      185:       64               BYTE #X64
;      186:       8908             MOV [EAX], ECX
;      188:       8B0518040008     MOV EAX, [#x8000418]
;      18E:       64               BYTE #X64
;      18F:       8910             MOV [EAX], EDX
;      191:       8B75C4           MOV ESI, [EBP-60]
;      194:       64               BYTE #X64
;      195:       8B150C000000     MOV EDX, [#xC]
;      19B:       39D6             CMP ESI, EDX
;      19D:       742C             JEQ L12
;      19F: L10:  8B42FC           MOV EAX, [EDX-4]
;      1A2:       09C0             OR EAX, EAX
;      1A4:       7410             JEQ L11
;      1A6:       8B4AF8           MOV ECX, [EDX-8]
;      1A9:       8B5811           MOV EBX, [EAX+17]
;      1AC:       64               BYTE #X64
;      1AD:       890B             MOV [EBX], ECX
;      1AF:       C742FC00000000   MOV DWORD PTR [EDX-4], 0
;      1B6: L11:  C742F800000000   MOV DWORD PTR [EDX-8], 0
;      1BD:       83EA08           SUB EDX, 8
;      1C0:       39D6             CMP ESI, EDX
;      1C2:       75DB             JNE L10
;      1C4:       64               BYTE #X64
;      1C5:       89150C000000     MOV [#xC], EDX
;      1CB: L12:  8BD5             MOV EDX, EBP
;      1CD:       8BCC             MOV ECX, ESP
;      1CF:       83EC40           SUB ESP, 64
;      1D2:       8B45D0           MOV EAX, [EBP-48]
;      1D5:       8951FC           MOV [ECX-4], EDX
;      1D8:       8BE9             MOV EBP, ECX
;      1DA:       C745F80C020000   MOV DWORD PTR [EBP-8], 524
;      1E1:       EB0E             JMP L13
;      1E3:       8B45F4           MOV EAX, [EBP-12]
;      1E6:       8B5DF0           MOV EBX, [EBP-16]
;      1E9:       8B4DEC           MOV ECX, [EBP-20]
;      1EC:       E800000000       CALL L13
;      1F1: L13:  8B40FD           MOV EAX, [EAX-3]
;      1F4:       3D0B000008       CMP EAX, 134217739
;      1F9:       750E             JNE L15
;      1FB: L14:  B80B000008       MOV EAX, 134217739
;      200:       8D65F8           LEA ESP, [EBP-8]
;      203:       8B6DFC           MOV EBP, [EBP-4]
;      206:       C20400           RET 4
;      209: L15:  8B0D11000000     MOV ECX, [#x11]
;      20F:       8B1515000000     MOV EDX, [#x15]
;      215:       8B4111           MOV EAX, [ECX+17]
;      218:       09C0             OR EAX, EAX
;      21A:       740B             JEQ L16
;      21C:       64               BYTE #X64
;      21D:       83385A           CMP DWORD PTR [EAX], 90
;      220:       7405             JEQ L16
;      222:       64               BYTE #X64
;      223:       8910             MOV [EAX], EDX
;      225:       EB03             JMP L17
;      227: L16:  8951FD           MOV [ECX-3], EDX
;      22A: L17:  EBCF             JMP L14
;      22C:       90               NOP
;      22D:       90               NOP
;      22E:       90               NOP
;      22F:       90               NOP

;;;; component: NIL


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA NIL
  4>     tail local combination v3
end stack:
successors c5

IR1 block 1 start c5
start stack:
  5>     bind SB-C::CLAMBDA NIL
  6>  7: (SETF SB-INT:INFO) {GLOBAL-FUNCTION}
  8>  9: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION VEC>
 10> 11: ':TYPED-STRUCTURE
 12> 13: ':INFO
 14> 15: 'VEC
 16>     tail full combination v7 v9 v11 v13 v15
end stack:
successors c17


;;;; IR2 component: NIL

entries:
    L1: NIL


TNs: 7 local, 3 temps, 5 constant, 4 env, 0 comp, 3 global.
Wired: 14, Unused: 0. 2 blocks, 9 global conflicts.

IR1 block 4 start c17

    IR2 block NIL start c17

IR1 block 0 start c1

    IR2 block 1 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[S0]>t2[EAX] => t3[S0]<t4[EAX]
    3: SAP-MOVE t5[S1]>t6[EAX] => t7[S1]<t8[EAX]
    4: NOTE-ENVIRONMENT-START {#}
    5: MOVE t3[S0]>t9[EAX] => t10[S0]<t11[EAX]
    6: SAP-MOVE t7[S1]>t12[EAX] => t13[S1]<t14[EAX]

IR1 block 1 start c5

    IR2 block 0 start c5
    0: SAP-MOVE t13[S1]>t15[EAX] => t16[S1]<t17[EAX]
    1: NOTE-ENVIRONMENT-START {#}
    2: MOVE '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION VEC>!18[Const6]>t19[EDX]
            => t20[EDX]
    3: MOVE ':TYPED-STRUCTURE!21[Const7]>t22[EDI] => t23[EDI]
    4: MOVE ':INFO!24[Const8]>t25[ESI] => t26[ESI]
    5: MOVE 'VEC!27[Const9]>t28[EAX] => t29[S3]<t30[EAX]
    6: TAIL-CALL-NAMED t31[Const10]>t32[EAX] t10[S0] t16[S1] t20[EDX] t23[EDI]
                       t26[ESI] t29[S3]
                       {4 NIL}


IR1 block 1 start c17

    IR2 block NIL start c17



assembly code for #<SB-C:COMPONENT :NAME NIL {12783CB9}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t33[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

VOP MOVE '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION VEC>!18[Const6]>t19[EDX]
         => t20[EDX] 
        MOV     #<TN t19[EDX]>, #<TN '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION VEC>!18[Const6]>

VOP MOVE ':TYPED-STRUCTURE!21[Const7]>t22[EDI] => t23[EDI] 
        MOV     #<TN t22[EDI]>, #<TN ':TYPED-STRUCTURE!21[Const7]>

VOP MOVE ':INFO!24[Const8]>t25[ESI] => t26[ESI] 
        MOV     #<TN t25[ESI]>, #<TN ':INFO!24[Const8]>

VOP MOVE 'VEC!27[Const9]>t28[EAX] => t29[S3]<t30[EAX] 
        MOV     #<TN t28[EAX]>, #<TN 'VEC!27[Const9]>
        MOV     #<TN t29[S3]>, #<TN t30[EAX]>

VOP TAIL-CALL-NAMED t31[Const10]>t32[EAX] t10[S0] t16[S1] t20[EDX] t23[EDI]
                    t26[ESI] t29[S3]
                    {4 NIL}
                    
        MOV     #<TN t32[EAX]>, #<TN t31[Const10]>
L11:
        MOV     #<TN t34[ECX]>, 16
        PUSH    #<TN t16[S1]>
L12:
L13:
        JMP     DWORD PTR [EAX+5]
L14:

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME NIL {12783CB9}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;       03:       0000             ADD [EAX], AL
;       05:       0000             ADD [EAX], AL
;       07:       0000             ADD [EAX], AL
;       09:       0000             ADD [EAX], AL
;       0B:       0000             ADD [EAX], AL
;       0D:       0000             ADD [EAX], AL
;       0F:       0000             ADD [EAX], AL
;       11:       0000             ADD [EAX], AL
;       13:       0000             ADD [EAX], AL
;       15:       0000             ADD [EAX], AL
;       17:       0000             ADD [EAX], AL
;       19:       0000             ADD [EAX], AL
;       1B:       008F45F88D65     ADD [EDI+1703802949], CL
;       21:       E08B             LOOPNZ #x-52
;       23:       1511000000       ADC EAX, 17
;       28:       8B3D15000000     MOV EDI, [#x15]
;       2E:       8B3519000000     MOV ESI, [#x19]
;       34:       8B051D000000     MOV EAX, [#x1D]
;       3A:       8945F0           MOV [EBP-16], EAX
;       3D:       8B0521000000     MOV EAX, [#x21]
;       43:       B910000000       MOV ECX, 16
;       48:       FF75F8           PUSH DWORD PTR [EBP-8]
;       4B:       FF6005           JMP DWORD PTR [EAX+5]
;       4E:       90               NOP
;       4F:       90               NOP

;;;; component: X


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA X
  4>  5: #:G21
  6>  7: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (*))>]
  8>     tail local combination v3 v7
end stack:
successors c9

IR1 block 1 start c9
start stack:
  9>     bind SB-C::CLAMBDA X
end stack:
successors c10

IR1 block 2 start c10
start stack:
 10>     entry NIL
 11> 12: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 13> 14: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G22))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1283DC69}> {1283DC29}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1283DCD9}> {1283DC99}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G22
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1283DD49}> {1283DD09}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1283EBB9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-23
                                  #:N-COUNT-24) {1283F599}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G22) {1283E071}> {1283DF11}>)
 15>     known combination v12 v14
 16> 17: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 18> 19: STRUCTURE
 20> 21: '0
 22> 23: known combination v17 v19 v21
 24>     return v23 SB-C::CLAMBDA X
end stack:
successors c25


;;;; IR2 component: X

entries:
    L1: X


TNs: 3 local, 0 temps, 0 constant, 4 env, 0 comp, 5 global.
Wired: 12, Unused: 0. 3 blocks, 15 global conflicts.

IR1 block 5 start c25

    IR2 block NIL start c25

IR1 block 0 start c1

    IR2 block 2 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G21!2[EDX]
    3: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    4: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    5: NOTE-ENVIRONMENT-START {#}
    6: MOVE #:G21!2[EDX] => STRUCTURE!11[EDX]
    7: MOVE t5[S0]>t12[EAX] => t13[S0]<t14[EAX]
    8: SAP-MOVE t9[S1]>t15[EAX] => t16[S1]<t17[EAX]

IR1 block 1 start c9

    IR2 block 1 start c9
    0: SAP-MOVE t16[S1]>t18[EAX] => t19[S1]<t20[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c10

    IR2 block 0 start c10
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!11[EDX]
                                                   {0}
                                                   => t21[FR0]
    1: MOVE-FROM-DOUBLE t21[FR0] => t22[EDX]
    2: RETURN-SINGLE t13[S0] t19[S1] t22[EDX]

IR1 block 1 start c25

    IR2 block NIL start c25



assembly code for #<SB-C:COMPONENT :NAME X {12835209}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t23[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!11[EDX]
                                                {0}
                                                => t21[FR0] 
        FSTP    #<TN t21[FR0]>
        FLDD    DWORD PTR [EDX+1]

VOP MOVE-FROM-DOUBLE t21[FR0] => t22[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t22[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t22[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t22[EDX]>, DWORD PTR [+36]
        JMP     BE, L12
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L13
L12:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t22[EDX]>
        SUB     #<TN t22[EDX]>, 16
L13:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t22[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L14
        BREAK   9
L14:

VOP RETURN-SINGLE t13[S0] t19[S1] t22[EDX] 
L15:
        LEA     #<TN t23[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t24[EBP]>, #<TN t13[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME X {12835209}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       64               BYTE #X64
;       28:       800D4800000004   OR BYTE PTR [#x48], 4
;       2F:       BA10000000       MOV EDX, 16
;       34:       64               BYTE #X64
;       35:       031520000000     ADD EDX, [#x20]
;       3B:       64               BYTE #X64
;       3C:       3B1524000000     CMP EDX, [#x24]
;       42:       7607             JBE L1
;       44:       E800000000       CALL L0
;       49: L0:   EB0A             JMP L2
;       4B: L1:   64               BYTE #X64
;       4C:       891520000000     MOV [#x20], EDX
;       52:       83EA10           SUB EDX, 16
;       55: L2:   C70216030000     MOV DWORD PTR [EDX], 790
;       5B:       8D5207           LEA EDX, [EDX+7]
;       5E:       DD5201           FSTD [EDX+1]
;       61:       64               BYTE #X64
;       62:       80354800000004   XOR BYTE PTR [#x48], 4
;       69:       7403             JEQ L3
;       6B:       0F0B09           BREAK 9                    ; pending interrupt trap
;       6E: L3:   8D65F8           LEA ESP, [EBP-8]
;       71:       F8               CLC
;       72:       8B6DFC           MOV EBP, [EBP-4]
;       75:       C20400           RET 4

;;;; component: (SETF X)


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA (SETF X)
  4>  5: #:G29
  6>  7: #:G30
  8>  9: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 10> 11: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (*))>]
 12>     tail local combination v3 v9 v11
end stack:
successors c13

IR1 block 1 start c13
start stack:
 13>     bind SB-C::CLAMBDA (SETF X)
end stack:
successors c14

IR1 block 2 start c14
start stack:
 14>     entry NIL
 15> 16: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 17> 18: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G31))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12966CE9}> {12966CA9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12966D59}> {12966D19}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G31
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12966DC9}> {12966D89}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12967AF1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-32
                                  #:N-COUNT-33) {129684B9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G31) {129670B9}> {12966F59}>)
 19>     known combination v16 v18
 20> 21: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
 22> 23: STRUCTURE
 24> 25: '0
 26> 27: SB-KERNEL::NEW-VALUE
 28> 29: known combination v21 v23 v25 v27
 30>     return v29 SB-C::CLAMBDA (SETF X)
end stack:
successors c31


;;;; IR2 component: (SETF X)

entries:
    L1: (SETF X)


TNs: 5 local, 0 temps, 0 constant, 4 env, 0 comp, 7 global.
Wired: 16, Unused: 0. 3 blocks, 19 global conflicts.

IR1 block 5 start c31

    IR2 block NIL start c31

IR1 block 0 start c1

    IR2 block 2 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G29!2[EDX]
    3: MOVE t3[EDI] => #:G30!4[EDI]
    4: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    5: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MOVE-TO-DOUBLE #:G29!2[EDX] => t13[FR0]
    8: DOUBLE-MOVE t13[FR0] => SB-KERNEL::NEW-VALUE!14[FR0]
    9: MOVE #:G30!4[EDI] => STRUCTURE!15[EDI]
    10: MOVE t7[S0]>t16[EAX] => t17[S0]<t18[EAX]
    11: SAP-MOVE t11[S1]>t19[EAX] => t20[S1]<t21[EAX]

IR1 block 1 start c13

    IR2 block 1 start c13
    0: SAP-MOVE t20[S1]>t22[EAX] => t23[S1]<t24[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c14

    IR2 block 0 start c14
    0: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!15[EDI]
                                                   SB-KERNEL::NEW-VALUE!14[FR0]
                                                   {0}
                                                   => t25[FR0]
    1: MOVE-FROM-DOUBLE t25[FR0] => t26[EDX]
    2: RETURN-SINGLE t17[S0] t23[S1] t26[EDX]

IR1 block 1 start c31

    IR2 block NIL start c31



assembly code for #<SB-C:COMPONENT :NAME (SETF X) {1295FE81}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t27[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

VOP MOVE-TO-DOUBLE #:G29!2[EDX] => t13[FR0] 
        FSTP    #<TN t13[FR0]>
        FLDD    DWORD PTR [EDX+1]

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!15[EDI]
                                                SB-KERNEL::NEW-VALUE!14[FR0]
                                                {0}
                                                => t25[FR0] 
        FSTD    DWORD PTR [EDI+1]

VOP MOVE-FROM-DOUBLE t25[FR0] => t26[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t26[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t26[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t26[EDX]>, DWORD PTR [+36]
        JMP     BE, L12
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L13
L12:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t26[EDX]>
        SUB     #<TN t26[EDX]>, 16
L13:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t26[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L14
        BREAK   9
L14:

VOP RETURN-SINGLE t17[S0] t23[S1] t26[EDX] 
L15:
        LEA     #<TN t27[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t28[EBP]>, #<TN t17[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME (SETF X) {1295FE81}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DD5701           FSTD [EDI+1]
;       2A:       64               BYTE #X64
;       2B:       800D4800000004   OR BYTE PTR [#x48], 4
;       32:       BA10000000       MOV EDX, 16
;       37:       64               BYTE #X64
;       38:       031520000000     ADD EDX, [#x20]
;       3E:       64               BYTE #X64
;       3F:       3B1524000000     CMP EDX, [#x24]
;       45:       7607             JBE L1
;       47:       E800000000       CALL L0
;       4C: L0:   EB0A             JMP L2
;       4E: L1:   64               BYTE #X64
;       4F:       891520000000     MOV [#x20], EDX
;       55:       83EA10           SUB EDX, 16
;       58: L2:   C70216030000     MOV DWORD PTR [EDX], 790
;       5E:       8D5207           LEA EDX, [EDX+7]
;       61:       DD5201           FSTD [EDX+1]
;       64:       64               BYTE #X64
;       65:       80354800000004   XOR BYTE PTR [#x48], 4
;       6C:       7403             JEQ L3
;       6E:       0F0B09           BREAK 9                    ; pending interrupt trap
;       71: L3:   8D65F8           LEA ESP, [EBP-8]
;       74:       F8               CLC
;       75:       8B6DFC           MOV EBP, [EBP-4]
;       78:       C20400           RET 4
;       7B:       90               NOP
;       7C:       90               NOP
;       7D:       90               NOP
;       7E:       90               NOP
;       7F:       90               NOP

;;;; component: Y


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA Y
  4>  5: #:G35
  6>  7: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (*))>]
  8>     tail local combination v3 v7
end stack:
successors c9

IR1 block 1 start c9
start stack:
  9>     bind SB-C::CLAMBDA Y
end stack:
successors c10

IR1 block 2 start c10
start stack:
 10>     entry NIL
 11> 12: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 13> 14: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G36))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A86F19}> {12A86ED9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A86F89}> {12A86F49}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G36
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A87001}> {12A86FB9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A87A61}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-37
                                  #:N-COUNT-38) {12A88429}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G36) {12A87239}> {12A870D9}>)
 15>     known combination v12 v14
 16> 17: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 18> 19: STRUCTURE
 20> 21: '1
 22> 23: known combination v17 v19 v21
 24>     return v23 SB-C::CLAMBDA Y
end stack:
successors c25


;;;; IR2 component: Y

entries:
    L1: Y


TNs: 3 local, 0 temps, 0 constant, 4 env, 0 comp, 5 global.
Wired: 12, Unused: 0. 3 blocks, 15 global conflicts.

IR1 block 5 start c25

    IR2 block NIL start c25

IR1 block 0 start c1

    IR2 block 2 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G35!2[EDX]
    3: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    4: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    5: NOTE-ENVIRONMENT-START {#}
    6: MOVE #:G35!2[EDX] => STRUCTURE!11[EDX]
    7: MOVE t5[S0]>t12[EAX] => t13[S0]<t14[EAX]
    8: SAP-MOVE t9[S1]>t15[EAX] => t16[S1]<t17[EAX]

IR1 block 1 start c9

    IR2 block 1 start c9
    0: SAP-MOVE t16[S1]>t18[EAX] => t19[S1]<t20[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c10

    IR2 block 0 start c10
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!11[EDX]
                                                   {1}
                                                   => t21[FR0]
    1: MOVE-FROM-DOUBLE t21[FR0] => t22[EDX]
    2: RETURN-SINGLE t13[S0] t19[S1] t22[EDX]

IR1 block 1 start c25

    IR2 block NIL start c25



assembly code for #<SB-C:COMPONENT :NAME Y {12A804D9}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t23[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!11[EDX]
                                                {1}
                                                => t21[FR0] 
        FSTP    #<TN t21[FR0]>
        FLDD    DWORD PTR [EDX+9]

VOP MOVE-FROM-DOUBLE t21[FR0] => t22[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t22[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t22[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t22[EDX]>, DWORD PTR [+36]
        JMP     BE, L12
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L13
L12:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t22[EDX]>
        SUB     #<TN t22[EDX]>, 16
L13:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t22[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L14
        BREAK   9
L14:

VOP RETURN-SINGLE t13[S0] t19[S1] t22[EDX] 
L15:
        LEA     #<TN t23[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t24[EBP]>, #<TN t13[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME Y {12A804D9}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4209           FLDD [EDX+9]
;       27:       64               BYTE #X64
;       28:       800D4800000004   OR BYTE PTR [#x48], 4
;       2F:       BA10000000       MOV EDX, 16
;       34:       64               BYTE #X64
;       35:       031520000000     ADD EDX, [#x20]
;       3B:       64               BYTE #X64
;       3C:       3B1524000000     CMP EDX, [#x24]
;       42:       7607             JBE L1
;       44:       E800000000       CALL L0
;       49: L0:   EB0A             JMP L2
;       4B: L1:   64               BYTE #X64
;       4C:       891520000000     MOV [#x20], EDX
;       52:       83EA10           SUB EDX, 16
;       55: L2:   C70216030000     MOV DWORD PTR [EDX], 790
;       5B:       8D5207           LEA EDX, [EDX+7]
;       5E:       DD5201           FSTD [EDX+1]
;       61:       64               BYTE #X64
;       62:       80354800000004   XOR BYTE PTR [#x48], 4
;       69:       7403             JEQ L3
;       6B:       0F0B09           BREAK 9                    ; pending interrupt trap
;       6E: L3:   8D65F8           LEA ESP, [EBP-8]
;       71:       F8               CLC
;       72:       8B6DFC           MOV EBP, [EBP-4]
;       75:       C20400           RET 4

;;;; component: (SETF Y)


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA (SETF Y)
  4>  5: #:G43
  6>  7: #:G44
  8>  9: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 10> 11: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (*))>]
 12>     tail local combination v3 v9 v11
end stack:
successors c13

IR1 block 1 start c13
start stack:
 13>     bind SB-C::CLAMBDA (SETF Y)
end stack:
successors c14

IR1 block 2 start c14
start stack:
 14>     entry NIL
 15> 16: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 17> 18: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G45))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11786EC1}> {11786E81}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11786F31}> {11786EF1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G45
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11786FA1}> {11786F61}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11787C21}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-46
                                  #:N-COUNT-47) {117885E9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G45) {11787291}> {11787131}>)
 19>     known combination v16 v18
 20> 21: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
 22> 23: STRUCTURE
 24> 25: '1
 26> 27: SB-KERNEL::NEW-VALUE
 28> 29: known combination v21 v23 v25 v27
 30>     return v29 SB-C::CLAMBDA (SETF Y)
end stack:
successors c31


;;;; IR2 component: (SETF Y)

entries:
    L1: (SETF Y)


TNs: 5 local, 0 temps, 0 constant, 4 env, 0 comp, 7 global.
Wired: 16, Unused: 0. 3 blocks, 19 global conflicts.

IR1 block 5 start c31

    IR2 block NIL start c31

IR1 block 0 start c1

    IR2 block 2 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G43!2[EDX]
    3: MOVE t3[EDI] => #:G44!4[EDI]
    4: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    5: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MOVE-TO-DOUBLE #:G43!2[EDX] => t13[FR0]
    8: DOUBLE-MOVE t13[FR0] => SB-KERNEL::NEW-VALUE!14[FR0]
    9: MOVE #:G44!4[EDI] => STRUCTURE!15[EDI]
    10: MOVE t7[S0]>t16[EAX] => t17[S0]<t18[EAX]
    11: SAP-MOVE t11[S1]>t19[EAX] => t20[S1]<t21[EAX]

IR1 block 1 start c13

    IR2 block 1 start c13
    0: SAP-MOVE t20[S1]>t22[EAX] => t23[S1]<t24[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c14

    IR2 block 0 start c14
    0: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!15[EDI]
                                                   SB-KERNEL::NEW-VALUE!14[FR0]
                                                   {1}
                                                   => t25[FR0]
    1: MOVE-FROM-DOUBLE t25[FR0] => t26[EDX]
    2: RETURN-SINGLE t17[S0] t23[S1] t26[EDX]

IR1 block 1 start c31

    IR2 block NIL start c31



assembly code for #<SB-C:COMPONENT :NAME (SETF Y) {1177EF49}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t27[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

VOP MOVE-TO-DOUBLE #:G43!2[EDX] => t13[FR0] 
        FSTP    #<TN t13[FR0]>
        FLDD    DWORD PTR [EDX+1]

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!15[EDI]
                                                SB-KERNEL::NEW-VALUE!14[FR0]
                                                {1}
                                                => t25[FR0] 
        FSTD    DWORD PTR [EDI+9]

VOP MOVE-FROM-DOUBLE t25[FR0] => t26[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t26[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t26[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t26[EDX]>, DWORD PTR [+36]
        JMP     BE, L12
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L13
L12:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t26[EDX]>
        SUB     #<TN t26[EDX]>, 16
L13:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t26[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L14
        BREAK   9
L14:

VOP RETURN-SINGLE t17[S0] t23[S1] t26[EDX] 
L15:
        LEA     #<TN t27[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t28[EBP]>, #<TN t17[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME (SETF Y) {1177EF49}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DD5709           FSTD [EDI+9]
;       2A:       64               BYTE #X64
;       2B:       800D4800000004   OR BYTE PTR [#x48], 4
;       32:       BA10000000       MOV EDX, 16
;       37:       64               BYTE #X64
;       38:       031520000000     ADD EDX, [#x20]
;       3E:       64               BYTE #X64
;       3F:       3B1524000000     CMP EDX, [#x24]
;       45:       7607             JBE L1
;       47:       E800000000       CALL L0
;       4C: L0:   EB0A             JMP L2
;       4E: L1:   64               BYTE #X64
;       4F:       891520000000     MOV [#x20], EDX
;       55:       83EA10           SUB EDX, 16
;       58: L2:   C70216030000     MOV DWORD PTR [EDX], 790
;       5E:       8D5207           LEA EDX, [EDX+7]
;       61:       DD5201           FSTD [EDX+1]
;       64:       64               BYTE #X64
;       65:       80354800000004   XOR BYTE PTR [#x48], 4
;       6C:       7403             JEQ L3
;       6E:       0F0B09           BREAK 9                    ; pending interrupt trap
;       71: L3:   8D65F8           LEA ESP, [EBP-8]
;       74:       F8               CLC
;       75:       8B6DFC           MOV EBP, [EBP-4]
;       78:       C20400           RET 4
;       7B:       90               NOP
;       7C:       90               NOP
;       7D:       90               NOP
;       7E:       90               NOP
;       7F:       90               NOP

;;;; component: Z


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA Z
  4>  5: #:G49
  6>  7: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (*))>]
  8>     tail local combination v3 v7
end stack:
successors c9

IR1 block 1 start c9
start stack:
  9>     bind SB-C::CLAMBDA Z
end stack:
successors c10

IR1 block 2 start c10
start stack:
 10>     entry NIL
 11> 12: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 13> 14: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G50))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {118C2E59}> {118C2E19}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {118C2EC9}> {118C2E89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G50
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {118C2F39}> {118C2EF9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {118C3A91}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-51
                                  #:N-COUNT-52) {118C4459}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G50) {118C3171}> {118C3011}>)
 15>     known combination v12 v14
 16> 17: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 18> 19: STRUCTURE
 20> 21: '2
 22> 23: known combination v17 v19 v21
 24>     return v23 SB-C::CLAMBDA Z
end stack:
successors c25


;;;; IR2 component: Z

entries:
    L1: Z


TNs: 3 local, 0 temps, 0 constant, 4 env, 0 comp, 5 global.
Wired: 12, Unused: 0. 3 blocks, 15 global conflicts.

IR1 block 5 start c25

    IR2 block NIL start c25

IR1 block 0 start c1

    IR2 block 2 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G49!2[EDX]
    3: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    4: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    5: NOTE-ENVIRONMENT-START {#}
    6: MOVE #:G49!2[EDX] => STRUCTURE!11[EDX]
    7: MOVE t5[S0]>t12[EAX] => t13[S0]<t14[EAX]
    8: SAP-MOVE t9[S1]>t15[EAX] => t16[S1]<t17[EAX]

IR1 block 1 start c9

    IR2 block 1 start c9
    0: SAP-MOVE t16[S1]>t18[EAX] => t19[S1]<t20[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c10

    IR2 block 0 start c10
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!11[EDX]
                                                   {2}
                                                   => t21[FR0]
    1: MOVE-FROM-DOUBLE t21[FR0] => t22[EDX]
    2: RETURN-SINGLE t13[S0] t19[S1] t22[EDX]

IR1 block 1 start c25

    IR2 block NIL start c25



assembly code for #<SB-C:COMPONENT :NAME Z {118AE869}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t23[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!11[EDX]
                                                {2}
                                                => t21[FR0] 
        FSTP    #<TN t21[FR0]>
        FLDD    DWORD PTR [EDX+17]

VOP MOVE-FROM-DOUBLE t21[FR0] => t22[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t22[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t22[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t22[EDX]>, DWORD PTR [+36]
        JMP     BE, L12
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L13
L12:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t22[EDX]>
        SUB     #<TN t22[EDX]>, 16
L13:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t22[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L14
        BREAK   9
L14:

VOP RETURN-SINGLE t13[S0] t19[S1] t22[EDX] 
L15:
        LEA     #<TN t23[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t24[EBP]>, #<TN t13[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME Z {118AE869}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4211           FLDD [EDX+17]
;       27:       64               BYTE #X64
;       28:       800D4800000004   OR BYTE PTR [#x48], 4
;       2F:       BA10000000       MOV EDX, 16
;       34:       64               BYTE #X64
;       35:       031520000000     ADD EDX, [#x20]
;       3B:       64               BYTE #X64
;       3C:       3B1524000000     CMP EDX, [#x24]
;       42:       7607             JBE L1
;       44:       E800000000       CALL L0
;       49: L0:   EB0A             JMP L2
;       4B: L1:   64               BYTE #X64
;       4C:       891520000000     MOV [#x20], EDX
;       52:       83EA10           SUB EDX, 16
;       55: L2:   C70216030000     MOV DWORD PTR [EDX], 790
;       5B:       8D5207           LEA EDX, [EDX+7]
;       5E:       DD5201           FSTD [EDX+1]
;       61:       64               BYTE #X64
;       62:       80354800000004   XOR BYTE PTR [#x48], 4
;       69:       7403             JEQ L3
;       6B:       0F0B09           BREAK 9                    ; pending interrupt trap
;       6E: L3:   8D65F8           LEA ESP, [EBP-8]
;       71:       F8               CLC
;       72:       8B6DFC           MOV EBP, [EBP-4]
;       75:       C20400           RET 4

;;;; component: (SETF Z)


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA (SETF Z)
  4>  5: #:G57
  6>  7: #:G58
  8>  9: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 10> 11: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (*))>]
 12>     tail local combination v3 v9 v11
end stack:
successors c13

IR1 block 1 start c13
start stack:
 13>     bind SB-C::CLAMBDA (SETF Z)
end stack:
successors c14

IR1 block 2 start c14
start stack:
 14>     entry NIL
 15> 16: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 17> 18: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G59))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119D9239}> {119D91F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119D92A9}> {119D9269}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G59
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119D9319}> {119D92D9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119D9EF9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-60
                                  #:N-COUNT-61) {119DA921}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G59) {119D9609}> {119D94A9}>)
 19>     known combination v16 v18
 20> 21: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
 22> 23: STRUCTURE
 24> 25: '2
 26> 27: SB-KERNEL::NEW-VALUE
 28> 29: known combination v21 v23 v25 v27
 30>     return v29 SB-C::CLAMBDA (SETF Z)
end stack:
successors c31


;;;; IR2 component: (SETF Z)

entries:
    L1: (SETF Z)


TNs: 5 local, 0 temps, 0 constant, 4 env, 0 comp, 7 global.
Wired: 16, Unused: 0. 3 blocks, 19 global conflicts.

IR1 block 5 start c31

    IR2 block NIL start c31

IR1 block 0 start c1

    IR2 block 2 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G57!2[EDX]
    3: MOVE t3[EDI] => #:G58!4[EDI]
    4: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    5: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MOVE-TO-DOUBLE #:G57!2[EDX] => t13[FR0]
    8: DOUBLE-MOVE t13[FR0] => SB-KERNEL::NEW-VALUE!14[FR0]
    9: MOVE #:G58!4[EDI] => STRUCTURE!15[EDI]
    10: MOVE t7[S0]>t16[EAX] => t17[S0]<t18[EAX]
    11: SAP-MOVE t11[S1]>t19[EAX] => t20[S1]<t21[EAX]

IR1 block 1 start c13

    IR2 block 1 start c13
    0: SAP-MOVE t20[S1]>t22[EAX] => t23[S1]<t24[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c14

    IR2 block 0 start c14
    0: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!15[EDI]
                                                   SB-KERNEL::NEW-VALUE!14[FR0]
                                                   {2}
                                                   => t25[FR0]
    1: MOVE-FROM-DOUBLE t25[FR0] => t26[EDX]
    2: RETURN-SINGLE t17[S0] t23[S1] t26[EDX]

IR1 block 1 start c31

    IR2 block NIL start c31



assembly code for #<SB-C:COMPONENT :NAME (SETF Z) {119D1F51}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t27[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

VOP MOVE-TO-DOUBLE #:G57!2[EDX] => t13[FR0] 
        FSTP    #<TN t13[FR0]>
        FLDD    DWORD PTR [EDX+1]

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT STRUCTURE!15[EDI]
                                                SB-KERNEL::NEW-VALUE!14[FR0]
                                                {2}
                                                => t25[FR0] 
        FSTD    DWORD PTR [EDI+17]

VOP MOVE-FROM-DOUBLE t25[FR0] => t26[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t26[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t26[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t26[EDX]>, DWORD PTR [+36]
        JMP     BE, L12
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L13
L12:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t26[EDX]>
        SUB     #<TN t26[EDX]>, 16
L13:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t26[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L14
        BREAK   9
L14:

VOP RETURN-SINGLE t17[S0] t23[S1] t26[EDX] 
L15:
        LEA     #<TN t27[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t28[EBP]>, #<TN t17[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME (SETF Z) {119D1F51}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DD5711           FSTD [EDI+17]
;       2A:       64               BYTE #X64
;       2B:       800D4800000004   OR BYTE PTR [#x48], 4
;       32:       BA10000000       MOV EDX, 16
;       37:       64               BYTE #X64
;       38:       031520000000     ADD EDX, [#x20]
;       3E:       64               BYTE #X64
;       3F:       3B1524000000     CMP EDX, [#x24]
;       45:       7607             JBE L1
;       47:       E800000000       CALL L0
;       4C: L0:   EB0A             JMP L2
;       4E: L1:   64               BYTE #X64
;       4F:       891520000000     MOV [#x20], EDX
;       55:       83EA10           SUB EDX, 16
;       58: L2:   C70216030000     MOV DWORD PTR [EDX], 790
;       5E:       8D5207           LEA EDX, [EDX+7]
;       61:       DD5201           FSTD [EDX+1]
;       64:       64               BYTE #X64
;       65:       80354800000004   XOR BYTE PTR [#x48], 4
;       6C:       7403             JEQ L3
;       6E:       0F0B09           BREAK 9                    ; pending interrupt trap
;       71: L3:   8D65F8           LEA ESP, [EBP-8]
;       74:       F8               CLC
;       75:       8B6DFC           MOV EBP, [EBP-4]
;       78:       C20400           RET 4
;       7B:       90               NOP
;       7C:       90               NOP
;       7D:       90               NOP
;       7E:       90               NOP
;       7F:       90               NOP

;;;; component: VEC


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA VEC
  4>  5: #:G74
  6>  7: #:G75
  8>  9: #:G76
 10> 11: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 12> 13: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 14> 15: cast v9 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 16>     tail local combination v3 v11 v13 v15
end stack:
successors c17

IR1 block 1 start c17
start stack:
 17>     bind SB-C::CLAMBDA VEC
end stack:
successors c18

IR1 block 2 start c18
start stack:
 18>     entry NIL
 19> 20: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
 21> 22: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
 23> 24: '214
 25> 26: '3
 27> 28: '6
 29> 30: known combination v22 v24 v26 v28
 31>     local combination v20 v30
 32>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
 33> 34: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 35> 36: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G94))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B43E09}> {11B43DC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B43E79}> {11B43E39}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G94
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B43EE9}> {11B43EA9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B44C51}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-95
                                  #:N-COUNT-96) {11B45659}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G94) {11B441D9}> {11B44079}>)
 37>     known combination v34 v36
 38> 39: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
 40> 41: #:G1
 42> 43: '0
 44> 45: X
 46>     known combination v39 v41 v43 v45
 47> 48: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 49> 50: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G97))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B48761}> {11B48721}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B487D1}> {11B48791}>
                       #<SB-C::LAMBDA-VAR ..>)>)
                                                IR1 block 3 start c51
                                                start stack:
                                                 51>     return v52 SB-C::CLAMBDA VEC
                                                end stack:
                                                successors c53


;;;; IR2 component: VEC

entries:
    L1: VEC


TNs: 10 local, 0 temps, 3 constant, 4 env, 0 comp, 10 global.
Wired: 24, Unused: 0. 4 blocks, 27 global conflicts.

IR1 block 6 start c53

    IR2 block NIL start c53

IR1 block 0 start c1

    IR2 block 3 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G74!2[EDX]
    3: MOVE t3[EDI] => #:G75!4[EDI]
    4: MOVE t5[ESI] => #:G76!6[ESI]
    5: MOVE t7[S0]>t8[EAX] => t9[S0]<t10[EAX]
    6: SAP-MOVE t11[S1]>t12[EAX] => t13[S1]<t14[EAX]
    7: NOTE-ENVIRONMENT-START {#}
    8: MOVE-TO-DOUBLE #:G74!2[EDX] => t15[FR0]
    9: MOVE-TO-DOUBLE #:G75!4[EDI] => t16[FR1]
    10: MOVE-TO-DOUBLE #:G76!6[ESI] => t17[FR2]
    11: DOUBLE-MOVE t15[FR0] => X!18[FR0]
    12: DOUBLE-MOVE t16[FR1] => Y!19[FR1]
    13: DOUBLE-MOVE t17[FR2] => Z!20[FR2]
    14: MOVE t9[S0]>t21[EAX] => t22[S0]<t23[EAX]
    15: SAP-MOVE t13[S1]>t24[EAX] => t25[S1]<t26[EAX]

IR1 block 1 start c17

    IR2 block 2 start c17
    0: SAP-MOVE t25[S1]>t27[EAX] => t28[S1]<t29[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c18

    IR2 block 1 start c18
    0: ALLOCATE-VECTOR-ON-HEAP '214!30>t31[ECX] '3!32>t33[EDX] '6!34>t35[EBX]
                               => t36[EAX]
    1: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t36[EAX] X!18[FR0]
                                                   {0}
                                                   => t37[FR0]
    2: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t36[EAX] Y!19[FR1]
                                                   {1}
                                                   => t38[FR1]
    3: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t36[EAX] Z!20[FR2]
                                                   {2}
                                                   => t39[FR2]

IR1 block 3 start c51

    IR2 block 0 start c51
    0: MOVE t36[EAX] => t40[EDX]
    1: RETURN-SINGLE t22[S0] t28[S1] t40[EDX]

IR1 block 1 start c53

    IR2 block NIL start c53



assembly code for #<SB-C:COMPONENT :NAME VEC {11B19519}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t41[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

VOP MOVE-TO-DOUBLE #:G74!2[EDX] => t15[FR0] 
        FSTP    #<TN t15[FR0]>
        FLDD    DWORD PTR [EDX+1]

VOP MOVE-TO-DOUBLE #:G75!4[EDI] => t16[FR1] 
        FSTP    #<TN t16[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t16[FR1]>

VOP MOVE-TO-DOUBLE #:G76!6[ESI] => t17[FR2] 
        FSTP    #<TN t17[FR2]>
        FLDD    DWORD PTR [ESI+1]
        FXCH    #<TN t17[FR2]>

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:

VOP ALLOCATE-VECTOR-ON-HEAP '214!30>t31[ECX] '3!32>t33[EDX] '6!34>t35[EBX]
                            => t36[EAX] 
        MOV     #<TN t31[ECX]>, 214
        MOV     #<TN t33[EDX]>, 12
        MOV     #<TN t35[EBX]>, 24
        LEA     #<TN t36[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t36[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t36[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t36[EAX]>, DWORD PTR [+36]
        JMP     BE, L12
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L13
L12:
        FS-SEGMENT-PREFIX
        XOR     #<TN t36[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t36[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t36[EAX]>, DWORD PTR [+32]
L13:
        LEA     #<TN t36[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t31[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t33[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L14
        BREAK   9
L14:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t36[EAX] X!18[FR0]
                                                {0}
                                                => t37[FR0] 
        FSTD    DWORD PTR [EAX+1]

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t36[EAX] Y!19[FR1]
                                                {1}
                                                => t38[FR1] 
        FXCH    #<TN Y!19[FR1]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN Y!19[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t36[EAX] Z!20[FR2]
                                                {2}
                                                => t39[FR2] 
        FXCH    #<TN Z!20[FR2]>
        FSTD    DWORD PTR [EAX+17]
        FXCH    #<TN Z!20[FR2]>

L15:

VOP MOVE t36[EAX] => t40[EDX] 
        MOV     #<TN t40[EDX]>, #<TN t36[EAX]>

VOP RETURN-SINGLE t22[S0] t28[S1] t40[EDX] 
L16:
        LEA     #<TN t41[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t42[EBP]>, #<TN t22[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME VEC {11B19519}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DDD9             FSTPD FR1
;       29:       DD4701           FLDD [EDI+1]
;       2C:       D9C9             FXCH FR1
;       2E:       DDDA             FSTPD FR2
;       30:       DD4601           FLDD [ESI+1]
;       33:       D9CA             FXCH FR2
;       35:       B9D6000000       MOV ECX, 214
;       3A:       BA0C000000       MOV EDX, 12
;       3F:       BB18000000       MOV EBX, 24
;       44:       8D430F           LEA EAX, [EBX+15]
;       47:       83E0F8           AND EAX, -8
;       4A:       64               BYTE #X64
;       4B:       800D4800000004   OR BYTE PTR [#x48], 4
;       52:       64               BYTE #X64
;       53:       030520000000     ADD EAX, [#x20]
;       59:       64               BYTE #X64
;       5A:       3B0524000000     CMP EAX, [#x24]
;       60:       7607             JBE L1
;       62:       E800000000       CALL L0
;       67: L0:   EB15             JMP L2
;       69: L1:   64               BYTE #X64
;       6A:       330520000000     XOR EAX, [#x20]
;       70:       64               BYTE #X64
;       71:       310520000000     XOR [#x20], EAX
;       77:       64               BYTE #X64
;       78:       330520000000     XOR EAX, [#x20]
;       7E: L2:   8D4007           LEA EAX, [EAX+7]
;       81:       8948F9           MOV [EAX-7], ECX
;       84:       8950FD           MOV [EAX-3], EDX
;       87:       64               BYTE #X64
;       88:       80354800000004   XOR BYTE PTR [#x48], 4
;       8F:       7403             JEQ L3
;       91:       0F0B09           BREAK 9                    ; pending interrupt trap
;       94: L3:   DD5001           FSTD [EAX+1]
;       97:       D9C9             FXCH FR1
;       99:       DD5009           FSTD [EAX+9]
;       9C:       D9C9             FXCH FR1
;       9E:       D9CA             FXCH FR2
;       A0:       DD5011           FSTD [EAX+17]
;       A3:       D9CA             FXCH FR2
;       A5:       8BD0             MOV EDX, EAX
;       A7:       8D65F8           LEA ESP, [EBP-8]
;       AA:       F8               CLC
;       AB:       8B6DFC           MOV EBP, [EBP-4]
;       AE:       C20400           RET 4
;       B1:       90               NOP
;       B2:       90               NOP
;       B3:       90               NOP
;       B4:       90               NOP
;       B5:       90               NOP
;       B6:       90               NOP
;       B7:       90               NOP

;;;; component: "LAMBDA NIL"


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::XEP (LAMBDA (#:WHOLE103))) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA (LAMBDA (#:WHOLE103))
  4>  5: #:G2
  6>     tail local combination v3 v5
end stack:
successors c7

IR1 block 1 start c7
start stack:
  7>     bind SB-C::CLAMBDA (LAMBDA (#:WHOLE103))
  8>  9: SB-C::CLAMBDA (LET ((#:ARGS105 (CDR "#<...>" . "#<...>")))
                         )
 10> 11: CDR {GLOBAL-FUNCTION}
 12> 13: #:WHOLE103
 14> 15: cast v13 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
 16> 17: known combination v11 v15
 18>     local combination v9 v17
 19>     bind SB-C::CLAMBDA (LET ((#:ARGS105 (CDR "#<...>" . "#<...>")))
                              ) :KIND :LET
 20> 21: SB-INT:PROPER-LIST-OF-LENGTH-P {GLOBAL-FUNCTION}
 22> 23: #:ARGS105
 24> 25: '0
 26> 27: '0
 28> 29: full combination v21 v23 v25 v27
 30>     if v29 c31 c32
end stack:
successors c31 c32

IR1 block 4 start c32
start stack:
 32> 33: SB-KERNEL::ARG-COUNT-ERROR {GLOBAL-FUNCTION}
 34> 35: 'DEFTYPE
 36> 37: 'VEC
 38> 39: #:ARGS105
 40> 41: 'NIL
 42> 43: '0
 44> 45: '0
 46>     full combination v33 v35 v37 v39 v41 v43 v45
end stack:
successors c47

IR1 block 2 start c31
start stack:
 31>     entry NIL
 48> 49: '(SIMPLE-ARRAY DOUBLE-FLOAT (3))
end stack:
successors c50

IR1 block 3 start c50
start stack:
 50>     return v49 SB-C::CLAMBDA (LAMBDA (#:WHOLE103))
end stack:
successors c47


;;;; IR2 component: "LAMBDA NIL"

entries:
    L1: (LAMBDA (#:WHOLE103))


TNs: 19 local, 4 temps, 7 constant, 4 env, 0 comp, 6 global.
Wired: 29, Unused: 0. 5 blocks, 20 global conflicts.

IR1 block 7 start c47

    IR2 block NIL start c47

IR1 block 0 start c1

    IR2 block 4 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G2!2[EDX]
    3: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    4: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    5: NOTE-ENVIRONMENT-START {#}
    6: MOVE #:G2!2[EDX] => #:WHOLE103!11[EDX]
    7: MOVE t5[S0]>t12[EAX] => t13[S0]<t14[EAX]
    8: SAP-MOVE t9[S1]>t15[EAX] => t16[S1]<t17[EAX]

IR1 block 1 start c7

    IR2 block 3 start c7
    0: SAP-MOVE t16[S1]>t18[EAX] => t19[S1]<t20[EAX]
    1: NOTE-ENVIRONMENT-START {#}
    2: SLOT #:WHOLE103!11[EDX] {CDR 1 3} => t21[S2]<t22[EAX]
    3: ALLOCATE-FULL-CALL-FRAME {3} => t23[EBX]
    4: MOVE-ARG t21[S2]>t24[EDX] t23[EBX] => t25[EDX]
    5: MOVE-ARG '0!26 t23[EBX] => t27[EDI]
    6: MOVE-ARG '0!26 t23[EBX] => t28[ESI]
    7: CALL-NAMED t23[EBX] t29[Const6]>t30[EAX] t25[EDX] t27[EDI] t28[ESI]
                  {# 3 1 NIL}
                  => t31[EDX]
    8: MOVE t31[EDX] => t32[EDX]
    9: IF-EQ t32[EDX] 'NIL!33 {# NIL}

IR1 block 2 start c31

    IR2 block 1 start c31

IR1 block 3 start c50

    IR2 block 0 start c50
    0: MOVE '(SIMPLE-ARRAY DOUBLE-FLOAT (3))!34[Const7]>t35[EDX] => t36[EDX]
    1: RETURN-SINGLE t13[S0] t19[S1] t36[EDX]

IR1 block 4 start c32

    IR2 block 2 start c32
    L2:
    0: ALLOCATE-FULL-CALL-FRAME {6} => t37[EBX]
    1: MOVE-ARG 'DEFTYPE!38[Const8]>t39[EDX] t37[EBX] => t40[EDX]
    2: MOVE-ARG 'VEC!41[Const9]>t42[EDI] t37[EBX] => t43[EDI]
    3: MOVE-ARG t21[S2]>t44[ESI] t37[EBX] => t45[ESI]
    4: MOVE-ARG 'NIL!33 t37[EBX] => t46[S3]
    5: MOVE-ARG '0!26 t37[EBX] => t47[S4]
    6: MOVE-ARG '0!26 t37[EBX] => t48[S5]
    7: CALL-NAMED t37[EBX] t49[Const10]>t50[EAX] t40[EDX] t43[EDI] t45[ESI]
                  t46[S3] t47[S4] t48[S5]
                  {# 6 0 NIL}


IR1 block 1 start c47

    IR2 block NIL start c47



assembly code for #<SB-C:COMPONENT :NAME "LAMBDA NIL" {123E0251}>

in the elsewhere segment:
L3:
in the regular segment:
L4:
in the elsewhere segment:
L5:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L6:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t51[ESP]>, DWORD PTR [EBP-32]
L7:

VOP NOTE-ENVIRONMENT-START {#} 
L8:

L9:
in the elsewhere segment:
L10:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L11:

VOP SLOT #:WHOLE103!11[EDX] {CDR 1 3} => t21[S2]<t22[EAX] 
        MOV     #<TN t22[EAX]>, DWORD PTR [EDX+1]
        MOV     #<TN t21[S2]>, #<TN t22[EAX]>

VOP ALLOCATE-FULL-CALL-FRAME {3} => t23[EBX] 
        MOV     #<TN t23[EBX]>, #<TN t51[ESP]>
        SUB     #<TN t51[ESP]>, 12

VOP MOVE-ARG t21[S2]>t24[EDX] t23[EBX] => t25[EDX] 
        MOV     #<TN t25[EDX]>, #<TN t21[S2]>

VOP MOVE-ARG '0!26 t23[EBX] => t27[EDI] 
        XOR     #<TN t27[EDI]>, #<TN t27[EDI]>

VOP MOVE-ARG '0!26 t23[EBX] => t28[ESI] 
        XOR     #<TN t28[ESI]>, #<TN t28[ESI]>

VOP CALL-NAMED t23[EBX] t29[Const6]>t30[EAX] t25[EDX] t27[EDI] t28[ESI]
               {# 3 1 NIL}
               => t31[EDX] 
        MOV     #<TN t30[EAX]>, #<TN t29[Const6]>
L12:
        MOV     #<TN t52[ECX]>, 12
        MOV     DWORD PTR [EBX-4], #<TN t53[EBP]>
        MOV     #<TN t53[EBP]>, #<TN t23[EBX]>
L13:
L14:
        CALL    DWORD PTR [EAX+5]
L15:
        JMP     NC, L16
        MOV     #<TN t51[ESP]>, #<TN t54[EBX]>
L16:
L17:

VOP IF-EQ t32[EDX] 'NIL!33 {# NIL} 
        CMP     #<TN t32[EDX]>, 134217739
        JMP     E, L2

L18:
L19:

VOP MOVE '(SIMPLE-ARRAY DOUBLE-FLOAT (3))!34[Const7]>t35[EDX] => t36[EDX] 
        MOV     #<TN t35[EDX]>, #<TN '(SIMPLE-ARRAY DOUBLE-FLOAT
                                       (3))!34[Const7]>

VOP RETURN-SINGLE t13[S0] t19[S1] t36[EDX] 
L20:
        LEA     #<TN t51[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t53[EBP]>, #<TN t13[S0]>
        RET     4

L2:

VOP ALLOCATE-FULL-CALL-FRAME {6} => t37[EBX] 
        MOV     #<TN t37[EBX]>, #<TN t51[ESP]>
        SUB     #<TN t51[ESP]>, 24

VOP MOVE-ARG 'DEFTYPE!38[Const8]>t39[EDX] t37[EBX] => t40[EDX] 
        MOV     #<TN t39[EDX]>, #<TN 'DEFTYPE!38[Const8]>

VOP MOVE-ARG 'VEC!41[Const9]>t42[EDI] t37[EBX] => t43[EDI] 
        MOV     #<TN t42[EDI]>, #<TN 'VEC!41[Const9]>

VOP MOVE-ARG t21[S2]>t44[ESI] t37[EBX] => t45[ESI] 
        MOV     #<TN t45[ESI]>, #<TN t21[S2]>

VOP MOVE-ARG 'NIL!33 t37[EBX] => t46[S3] 
        MOV     DWORD PTR [EBX-16], 134217739

VOP MOVE-ARG '0!26 t37[EBX] => t47[S4] 
        MOV     DWORD PTR [EBX-20], 0

VOP MOVE-ARG '0!26 t37[EBX] => t48[S5] 
        MOV     DWORD PTR [EBX-24], 0

VOP CALL-NAMED t37[EBX] t49[Const10]>t50[EAX] t40[EDX] t43[EDI] t45[ESI]
               t46[S3] t47[S4] t48[S5]
               {# 6 0 NIL}
               
        MOV     #<TN t50[EAX]>, #<TN t49[Const10]>
L21:
        MOV     #<TN t55[ECX]>, 24
        MOV     DWORD PTR [EBX-4], #<TN t53[EBP]>
        MOV     #<TN t53[EBP]>, #<TN t37[EBX]>
L22:
L23:
        CALL    DWORD PTR [EAX+5]
L24:
        JMP     NC, L25
        MOV     #<TN t51[ESP]>, #<TN t54[EBX]>
L25:
L26:

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME "LAMBDA NIL" {123E0251}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;       03:       0000             ADD [EAX], AL
;       05:       0000             ADD [EAX], AL
;       07:       0000             ADD [EAX], AL
;       09:       0000             ADD [EAX], AL
;       0B:       0000             ADD [EAX], AL
;       0D:       0000             ADD [EAX], AL
;       0F:       0000             ADD [EAX], AL
;       11:       0000             ADD [EAX], AL
;       13:       0000             ADD [EAX], AL
;       15:       0000             ADD [EAX], AL
;       17:       0000             ADD [EAX], AL
;       19:       0000             ADD [EAX], AL
;       1B:       008F45F88D65     ADD [EDI+1703802949], CL
;       21:       E08B             LOOPNZ #x-52
;       23:       42               INC EDX
;       24:       018945F48BDC     ADD [ECX-594807739], ECX
;       2A:       83EC0C           SUB ESP, 12
;       2D:       8B55F4           MOV EDX, [EBP-12]
;       30:       31FF             XOR EDI, EDI
;       32:       31F6             XOR ESI, ESI
;       34:       8B0511000000     MOV EAX, [#x11]
;       3A:       B90C000000       MOV ECX, 12
;       3F:       896BFC           MOV [EBX-4], EBP
;       42:       8BEB             MOV EBP, EBX
;       44:       FF5005           CALL DWORD PTR [EAX+5]
;       47:       7302             JNB L0
;       49:       8BE3             MOV ESP, EBX
;       4B: L0:   81FA0B000008     CMP EDX, 134217739
;       51:       7410             JEQ L1
;       53:       8B1515000000     MOV EDX, [#x15]
;       59:       8D65F8           LEA ESP, [EBP-8]
;       5C:       F8               CLC
;       5D:       8B6DFC           MOV EBP, [EBP-4]
;       60:       C20400           RET 4
;       63: L1:   8BDC             MOV EBX, ESP
;       65:       83EC18           SUB ESP, 24
;       68:       8B1519000000     MOV EDX, [#x19]
;       6E:       8B3D1D000000     MOV EDI, [#x1D]
;       74:       8B75F4           MOV ESI, [EBP-12]
;       77:       C743F00B000008   MOV DWORD PTR [EBX-16], 134217739
;       7E:       C743EC00000000   MOV DWORD PTR [EBX-20], 0
;       85:       C743E800000000   MOV DWORD PTR [EBX-24], 0
;       8C:       8B0521000000     MOV EAX, [#x21]
;       92:       B918000000       MOV ECX, 24
;       97:       896BFC           MOV [EBX-4], EBP
;       9A:       8BEB             MOV EBP, EBX
;       9C:       FF5005           CALL DWORD PTR [EAX+5]
;       9F:       7302             JNB L2
;       A1:       8BE3             MOV ESP, EBX
;       A3: L2:   90               NOP
;       A4:       90               NOP
;       A5:       90               NOP
;       A6:       90               NOP
;       A7:       90               NOP

;;;; component: (LAMBDA (#:WHOLE103))


IR1 block 0 start c51
start stack:
 51>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
 52> 53: SB-C::CLAMBDA NIL
 54>     tail local combination v53
end stack:
successors c55

IR1 block 1 start c55
start stack:
 55>     bind SB-C::CLAMBDA NIL
 56> 57: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 58> 59: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA (#:WHOLE103))
             :KIND NIL
             :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (T) (VALUES CONS &OPTIONAL))>
             :WHERE-FROM :DEFINED
             :VARS (#:WHOLE103) {123DC029}>)
 60>     known combination v57 v59
 61> 62: SB-C::FUNCTIONAL (LAMBDA (#:WHOLE103))
 63>     return v62 SB-C::CLAMBDA NIL
end stack:
successors c47


;;;; IR2 component: (LAMBDA (#:WHOLE103))

entries:
    L27: NIL


TNs: 1 local, 0 temps, 1 constant, 4 env, 0 comp, 3 global.
Wired: 8, Unused: 0. 2 blocks, 9 global conflicts.

IR1 block 4 start c47

    IR2 block NIL start c47

IR1 block 0 start c51

    IR2 block 1 start c51
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t56[S0]>t57[EAX] => t58[S0]<t59[EAX]
    3: SAP-MOVE t60[S1]>t61[EAX] => t62[S1]<t63[EAX]
    4: NOTE-ENVIRONMENT-START {#}
    5: MOVE t58[S0]>t64[EAX] => t65[S0]<t66[EAX]
    6: SAP-MOVE t62[S1]>t67[EAX] => t68[S1]<t69[EAX]

IR1 block 1 start c55

    IR2 block 0 start c55
    0: SAP-MOVE t68[S1]>t70[EAX] => t71[S1]<t72[EAX]
    1: NOTE-ENVIRONMENT-START {#}
    2: MOVE t73[Const6]>t74[EDX] => t75[EDX]
    3: RETURN-SINGLE t65[S0] t71[S1] t75[EDX]

IR1 block 1 start c47

    IR2 block NIL start c47



assembly code for #<SB-C:COMPONENT :NAME (LAMBDA (#:WHOLE103)) {123E0589}>

in the elsewhere segment:
L28:
in the regular segment:
L29:
in the elsewhere segment:
L30:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L31:
L27:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t51[ESP]>, DWORD PTR [EBP-32]
L32:

VOP NOTE-ENVIRONMENT-START {#} 
L33:

L34:
in the elsewhere segment:
L35:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L36:

VOP MOVE t73[Const6]>t74[EDX] => t75[EDX] 
        MOV     #<TN t74[EDX]>, #<TN t73[Const6]>

VOP RETURN-SINGLE t65[S0] t71[S1] t75[EDX] 
L37:
        LEA     #<TN t51[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t53[EBP]>, #<TN t65[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME (LAMBDA (#:WHOLE103)) {123E0589}>

; 00000000:       2A08             SUB CL, [EAX]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       8B1511000000     MOV EDX, [#x11]
;       28:       8D65F8           LEA ESP, [EBP-8]
;       2B:       F8               CLC
;       2C:       8B6DFC           MOV EBP, [EBP-4]
;       2F:       C20400           RET 4
;       32:       90               NOP
;       33:       90               NOP
;       34:       90               NOP
;       35:       90               NOP
;       36:       90               NOP
;       37:       90               NOP

;;;; component: NIL


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA NIL
  4>  5: #:G107
  6>     tail local combination v3 v5
end stack:
successors c7

IR1 block 1 start c7
start stack:
  7>     bind SB-C::CLAMBDA NIL
  8>  9: SB-C::CLAMBDA (LET ((#:ARGS105 (CDR "#<...>" . "#<...>")))
                         )
 10> 11: CDR {GLOBAL-FUNCTION}
 12> 13: #:WHOLE103
 14> 15: cast v13 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
 16> 17: known combination v11 v15
 18>     local combination v9 v17
 19>     bind SB-C::CLAMBDA (LET ((#:ARGS105 (CDR "#<...>" . "#<...>")))
                              ) :KIND :LET
 20> 21: SB-INT:PROPER-LIST-OF-LENGTH-P {GLOBAL-FUNCTION}
 22> 23: #:ARGS105
 24> 25: '0
 26> 27: '0
 28> 29: full combination v21 v23 v25 v27
 30>     if v29 c31 c32
end stack:
successors c31 c32

IR1 block 4 start c32
start stack:
 32> 33: SB-KERNEL::ARG-COUNT-ERROR {GLOBAL-FUNCTION}
 34> 35: 'DEFTYPE
 36> 37: 'VEC
 38> 39: #:ARGS105
 40> 41: 'NIL
 42> 43: '0
 44> 45: '0
 46>     full combination v33 v35 v37 v39 v41 v43 v45
end stack:
successors c47

IR1 block 2 start c31
start stack:
 31>     entry NIL
 48> 49: '(SIMPLE-ARRAY DOUBLE-FLOAT (3))
end stack:
successors c50

IR1 block 3 start c50
start stack:
 50>     return v49 SB-C::CLAMBDA NIL
end stack:
successors c47


;;;; IR2 component: NIL

entries:
    L1: NIL


TNs: 19 local, 4 temps, 7 constant, 4 env, 0 comp, 6 global.
Wired: 29, Unused: 0. 5 blocks, 20 global conflicts.

IR1 block 7 start c47

    IR2 block NIL start c47

IR1 block 0 start c1

    IR2 block 4 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G107!2[EDX]
    3: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    4: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    5: NOTE-ENVIRONMENT-START {#}
    6: MOVE #:G107!2[EDX] => #:WHOLE103!11[EDX]
    7: MOVE t5[S0]>t12[EAX] => t13[S0]<t14[EAX]
    8: SAP-MOVE t9[S1]>t15[EAX] => t16[S1]<t17[EAX]

IR1 block 1 start c7

    IR2 block 3 start c7
    0: SAP-MOVE t16[S1]>t18[EAX] => t19[S1]<t20[EAX]
    1: NOTE-ENVIRONMENT-START {#}
    2: SLOT #:WHOLE103!11[EDX] {CDR 1 3} => t21[S2]<t22[EAX]
    3: ALLOCATE-FULL-CALL-FRAME {3} => t23[EBX]
    4: MOVE-ARG t21[S2]>t24[EDX] t23[EBX] => t25[EDX]
    5: MOVE-ARG '0!26 t23[EBX] => t27[EDI]
    6: MOVE-ARG '0!26 t23[EBX] => t28[ESI]
    7: CALL-NAMED t23[EBX] t29[Const6]>t30[EAX] t25[EDX] t27[EDI] t28[ESI]
                  {# 3 1 NIL}
                  => t31[EDX]
    8: MOVE t31[EDX] => t32[EDX]
    9: IF-EQ t32[EDX] 'NIL!33 {# NIL}

IR1 block 2 start c31

    IR2 block 1 start c31

IR1 block 3 start c50

    IR2 block 0 start c50
    0: MOVE '(SIMPLE-ARRAY DOUBLE-FLOAT (3))!34[Const7]>t35[EDX] => t36[EDX]
    1: RETURN-SINGLE t13[S0] t19[S1] t36[EDX]

IR1 block 4 start c32

    IR2 block 2 start c32
    L2:
    0: ALLOCATE-FULL-CALL-FRAME {6} => t37[EBX]
    1: MOVE-ARG 'DEFTYPE!38[Const8]>t39[EDX] t37[EBX] => t40[EDX]
    2: MOVE-ARG 'VEC!41[Const9]>t42[EDI] t37[EBX] => t43[EDI]
    3: MOVE-ARG t21[S2]>t44[ESI] t37[EBX] => t45[ESI]
    4: MOVE-ARG 'NIL!33 t37[EBX] => t46[S3]
    5: MOVE-ARG '0!26 t37[EBX] => t47[S4]
    6: MOVE-ARG '0!26 t37[EBX] => t48[S5]
    7: CALL-NAMED t37[EBX] t49[Const10]>t50[EAX] t40[EDX] t43[EDI] t45[ESI]
                  t46[S3] t47[S4] t48[S5]
                  {# 6 0 NIL}


IR1 block 1 start c47

    IR2 block NIL start c47



assembly code for #<SB-C:COMPONENT :NAME NIL {1262EC11}>

in the elsewhere segment:
L3:
in the regular segment:
L4:
in the elsewhere segment:
L5:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L6:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t51[ESP]>, DWORD PTR [EBP-32]
L7:

VOP NOTE-ENVIRONMENT-START {#} 
L8:

L9:
in the elsewhere segment:
L10:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L11:

VOP SLOT #:WHOLE103!11[EDX] {CDR 1 3} => t21[S2]<t22[EAX] 
        MOV     #<TN t22[EAX]>, DWORD PTR [EDX+1]
        MOV     #<TN t21[S2]>, #<TN t22[EAX]>

VOP ALLOCATE-FULL-CALL-FRAME {3} => t23[EBX] 
        MOV     #<TN t23[EBX]>, #<TN t51[ESP]>
        SUB     #<TN t51[ESP]>, 12

VOP MOVE-ARG t21[S2]>t24[EDX] t23[EBX] => t25[EDX] 
        MOV     #<TN t25[EDX]>, #<TN t21[S2]>

VOP MOVE-ARG '0!26 t23[EBX] => t27[EDI] 
        XOR     #<TN t27[EDI]>, #<TN t27[EDI]>

VOP MOVE-ARG '0!26 t23[EBX] => t28[ESI] 
        XOR     #<TN t28[ESI]>, #<TN t28[ESI]>

VOP CALL-NAMED t23[EBX] t29[Const6]>t30[EAX] t25[EDX] t27[EDI] t28[ESI]
               {# 3 1 NIL}
               => t31[EDX] 
        MOV     #<TN t30[EAX]>, #<TN t29[Const6]>
L12:
        MOV     #<TN t52[ECX]>, 12
        MOV     DWORD PTR [EBX-4], #<TN t53[EBP]>
        MOV     #<TN t53[EBP]>, #<TN t23[EBX]>
L13:
L14:
        CALL    DWORD PTR [EAX+5]
L15:
        JMP     NC, L16
        MOV     #<TN t51[ESP]>, #<TN t54[EBX]>
L16:
L17:

VOP IF-EQ t32[EDX] 'NIL!33 {# NIL} 
        CMP     #<TN t32[EDX]>, 134217739
        JMP     E, L2

L18:
L19:

VOP MOVE '(SIMPLE-ARRAY DOUBLE-FLOAT (3))!34[Const7]>t35[EDX] => t36[EDX] 
        MOV     #<TN t35[EDX]>, #<TN '(SIMPLE-ARRAY DOUBLE-FLOAT
                                       (3))!34[Const7]>

VOP RETURN-SINGLE t13[S0] t19[S1] t36[EDX] 
L20:
        LEA     #<TN t51[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t53[EBP]>, #<TN t13[S0]>
        RET     4

L2:

VOP ALLOCATE-FULL-CALL-FRAME {6} => t37[EBX] 
        MOV     #<TN t37[EBX]>, #<TN t51[ESP]>
        SUB     #<TN t51[ESP]>, 24

VOP MOVE-ARG 'DEFTYPE!38[Const8]>t39[EDX] t37[EBX] => t40[EDX] 
        MOV     #<TN t39[EDX]>, #<TN 'DEFTYPE!38[Const8]>

VOP MOVE-ARG 'VEC!41[Const9]>t42[EDI] t37[EBX] => t43[EDI] 
        MOV     #<TN t42[EDI]>, #<TN 'VEC!41[Const9]>

VOP MOVE-ARG t21[S2]>t44[ESI] t37[EBX] => t45[ESI] 
        MOV     #<TN t45[ESI]>, #<TN t21[S2]>

VOP MOVE-ARG 'NIL!33 t37[EBX] => t46[S3] 
        MOV     DWORD PTR [EBX-16], 134217739

VOP MOVE-ARG '0!26 t37[EBX] => t47[S4] 
        MOV     DWORD PTR [EBX-20], 0

VOP MOVE-ARG '0!26 t37[EBX] => t48[S5] 
        MOV     DWORD PTR [EBX-24], 0

VOP CALL-NAMED t37[EBX] t49[Const10]>t50[EAX] t40[EDX] t43[EDI] t45[ESI]
               t46[S3] t47[S4] t48[S5]
               {# 6 0 NIL}
               
        MOV     #<TN t50[EAX]>, #<TN t49[Const10]>
L21:
        MOV     #<TN t55[ECX]>, 24
        MOV     DWORD PTR [EBX-4], #<TN t53[EBP]>
        MOV     #<TN t53[EBP]>, #<TN t37[EBX]>
L22:
L23:
        CALL    DWORD PTR [EAX+5]
L24:
        JMP     NC, L25
        MOV     #<TN t51[ESP]>, #<TN t54[EBX]>
L25:
L26:

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME NIL {1262EC11}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;       03:       0000             ADD [EAX], AL
;       05:       0000             ADD [EAX], AL
;       07:       0000             ADD [EAX], AL
;       09:       0000             ADD [EAX], AL
;       0B:       0000             ADD [EAX], AL
;       0D:       0000             ADD [EAX], AL
;       0F:       0000             ADD [EAX], AL
;       11:       0000             ADD [EAX], AL
;       13:       0000             ADD [EAX], AL
;       15:       0000             ADD [EAX], AL
;       17:       0000             ADD [EAX], AL
;       19:       0000             ADD [EAX], AL
;       1B:       008F45F88D65     ADD [EDI+1703802949], CL
;       21:       E08B             LOOPNZ #x-52
;       23:       42               INC EDX
;       24:       018945F48BDC     ADD [ECX-594807739], ECX
;       2A:       83EC0C           SUB ESP, 12
;       2D:       8B55F4           MOV EDX, [EBP-12]
;       30:       31FF             XOR EDI, EDI
;       32:       31F6             XOR ESI, ESI
;       34:       8B0511000000     MOV EAX, [#x11]
;       3A:       B90C000000       MOV ECX, 12
;       3F:       896BFC           MOV [EBX-4], EBP
;       42:       8BEB             MOV EBP, EBX
;       44:       FF5005           CALL DWORD PTR [EAX+5]
;       47:       7302             JNB L0
;       49:       8BE3             MOV ESP, EBX
;       4B: L0:   81FA0B000008     CMP EDX, 134217739
;       51:       7410             JEQ L1
;       53:       8B1515000000     MOV EDX, [#x15]
;       59:       8D65F8           LEA ESP, [EBP-8]
;       5C:       F8               CLC
;       5D:       8B6DFC           MOV EBP, [EBP-4]
;       60:       C20400           RET 4
;       63: L1:   8BDC             MOV EBX, ESP
;       65:       83EC18           SUB ESP, 24
;       68:       8B1519000000     MOV EDX, [#x19]
;       6E:       8B3D1D000000     MOV EDI, [#x1D]
;       74:       8B75F4           MOV ESI, [EBP-12]
;       77:       C743F00B000008   MOV DWORD PTR [EBX-16], 134217739
;       7E:       C743EC00000000   MOV DWORD PTR [EBX-20], 0
;       85:       C743E800000000   MOV DWORD PTR [EBX-24], 0
;       8C:       8B0521000000     MOV EAX, [#x21]
;       92:       B918000000       MOV ECX, 24
;       97:       896BFC           MOV [EBX-4], EBP
;       9A:       8BEB             MOV EBP, EBX
;       9C:       FF5005           CALL DWORD PTR [EAX+5]
;       9F:       7302             JNB L2
;       A1:       8BE3             MOV ESP, EBX
;       A3: L2:   90               NOP
;       A4:       90               NOP
;       A5:       90               NOP
;       A6:       90               NOP
;       A7:       90               NOP

;;;; component: VEC


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA *V
  4>  5: #:G118
  6>  7: #:G119
  8>  9: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 10> 11: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 12>     tail local combination v3 v9 v11
end stack:
successors c13

IR1 block 1 start c13
start stack:
 13>     bind SB-C::CLAMBDA *V
end stack:
successors c14

IR1 block 2 start c14
start stack:
 14>     entry NIL
 15> 16: * {GLOBAL-FUNCTION}
 17> 18: S
end stack:
successors c19

IR1 block 3 start c19
start stack:
 19>     entry NIL
 20> 21: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 22> 23: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G137))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127D80E1}> {127D80A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127D8151}> {127D8111}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G137
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {127D81C1}> {127D8181}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {127D9029}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-138
                                  #:N-COUNT-139) {127D9A31}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G137) {127D84D1}> {127D8371}>)
 24>     known combination v21 v23
 25> 26: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 27> 28: A
 29> 30: '0
 31> 32: known combination v26 v28 v30
end stack:
successors c33

IR1 block 4 start c33
start stack:
 33> 34: known combination v16 v18 v32
 35> 36: * {GLOBAL-FUNCTION}
 37> 38: S
end stack:
successors c39

IR1 block 5 start c39
start stack:
 39>     entry NIL
 40> 41: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 42> 43: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G140))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127DD279}> {127DD239}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127DD2E9}> {127DD2A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G140
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {127DD359}> {127DD319}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {127DDD39}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-141
                                  #:N-COUNT-142) {127DE6E1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G140) {127DD591}> {127DD431}>)
 44>     known combination v41 v43
 45> 46: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 47> 48: A
 49> 50: '1
 51> 52: known combination v46 v48 v50
end stack:
successors c53

IR1 block 6 start c53
start stack:
 53> 54: known combination v36 v38 v52
 55> 56: * {GLOBAL-FUNCTION}
 57> 58: S
end stack:
successors c59

IR1 block 7 start c59
start stack:
 59>     entry NIL
 60> 61: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 62> 63: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G143))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127E1261}> {127E1221}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127E12D1}> {127E1291}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G143
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {127E1341}> {127E1301}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {127E1D21}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-144
                                  #:N-COUNT-145) {127E2711}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G143) {127E1579}> {127E1419}>)
 64>     known combination v61 v63
 65> 66: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 67> 68: A
 69> 70: '2
 71> 72: known combination v66 v68 v70
end stack:
successors c73

IR1 block 8 start c73
start stack:
 73> 74: known combination v56 v58 v72
end stack:
successors c75

IR1 block 9 start c75
start stack:
 75>     entry NIL
 76> 77: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
 78> 79: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
 80> 81: '214
 82> 83: '3
 84> 85: '6
 86> 87: known combination v79 v81 v83 v85
 88>     local combination v77 v87
 89>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
 90> 91: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 92> 93: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G146))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127E57F1}> {127E57B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127E5861}> {127E5821}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G146
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {127E58D1}> {127E5891}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {127E6629}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-147
                                  #:N-COUNT-148) {127E6FC9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G146) {127E5BC1}> {127E5A61}>)
 94>     known combination v91 v93
 95> 96: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
 97> 98: #:G1
 99>100: '0
101>     known combination v96 v98 v100 v34
102>103: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
104>105: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G149))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127E93C1}> {127E9381}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127E9431}> {127E93F1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G149 ..>)>)
                                                    IR1 block 10 start c106
                                                    start stack:
                                                    106>     return v107 SB-C::CLAMBDA *V
                                                    end stack:
                                                    successors c108


;;;; IR2 component: VEC

entries:
    L1: *V


TNs: 10 local, 3 temps, 3 constant, 4 env, 0 comp, 14 global.
Wired: 28, Unused: 0. 11 blocks, 66 global conflicts.

IR1 block 13 start c108

    IR2 block NIL start c108

IR1 block 0 start c1

    IR2 block 10 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G118!2[EDX]
    3: MOVE t3[EDI] => #:G119!4[EDI]
    4: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    5: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MOVE-TO-DOUBLE #:G118!2[EDX] => t13[FR1]
    8: DOUBLE-MOVE t13[FR1] => S!14[FR1]
    9: MOVE #:G119!4[EDI] => A!15[EDI]
    10: MOVE t7[S0]>t16[EAX] => t17[S0]<t18[EAX]
    11: SAP-MOVE t11[S1]>t19[EAX] => t20[S1]<t21[EAX]

IR1 block 1 start c13

    IR2 block 9 start c13
    0: SAP-MOVE t20[S1]>t22[EAX] => t23[S1]<t24[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c14

    IR2 block 8 start c14

IR1 block 3 start c19

    IR2 block 7 start c19
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!15[EDI] {0} => t25[FR0]

IR1 block 4 start c33

    IR2 block 6 start c33
    0: */DOUBLE-FLOAT S!14[FR1] t25[FR0] => t26[FR2]

IR1 block 5 start c39

    IR2 block 5 start c39
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!15[EDI] {1} => t27[FR0]

IR1 block 6 start c53

    IR2 block 4 start c53
    0: */DOUBLE-FLOAT S!14[FR1] t27[FR0] => t28[FR3]

IR1 block 7 start c59

    IR2 block 3 start c59
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!15[EDI] {2} => t29[FR0]

IR1 block 8 start c73

    IR2 block 2 start c73
    0: */DOUBLE-FLOAT S!14[FR1] t29[FR0] => t30[FR0]

IR1 block 9 start c75

    IR2 block 1 start c75
    0: ALLOCATE-VECTOR-ON-HEAP '214!31>t32[ECX] '3!33>t34[EDX] '6!35>t36[EBX]
                               => t37[EAX]
    1: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t37[EAX] t26[FR2]
                                                   {0}
                                                   => t38[FR2]
    2: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t37[EAX] t28[FR3]
                                                   {1}
                                                   => t39[FR3]
    3: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t37[EAX] t30[FR0]
                                                   {2}
                                                   => t40[FR0]

IR1 block 10 start c106

    IR2 block 0 start c106
    0: MOVE t37[EAX] => t41[EDX]
    1: RETURN-SINGLE t17[S0] t23[S1] t41[EDX]

IR1 block 1 start c108

    IR2 block NIL start c108



assembly code for #<SB-C:COMPONENT :NAME VEC {127A3B09}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t42[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

VOP MOVE-TO-DOUBLE #:G118!2[EDX] => t13[FR1] 
        FSTP    #<TN t13[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t13[FR1]>

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:
L12:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!15[EDI] {0} => t25[FR0] 
        FSTP    #<TN t25[FR0]>
        FLDD    DWORD PTR [EDI+1]

L13:

VOP */DOUBLE-FLOAT S!14[FR1] t25[FR0] => t26[FR2] 
        FMULD   #<TN S!14[FR1]>
        FST     #<TN t26[FR2]>

L14:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!15[EDI] {1} => t27[FR0] 
        FSTP    #<TN t27[FR0]>
        FLDD    DWORD PTR [EDI+9]

L15:

VOP */DOUBLE-FLOAT S!14[FR1] t27[FR0] => t28[FR3] 
        FMULD   #<TN S!14[FR1]>
        FST     #<TN t28[FR3]>

L16:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!15[EDI] {2} => t29[FR0] 
        FSTP    #<TN t29[FR0]>
        FLDD    DWORD PTR [EDI+17]

L17:

VOP */DOUBLE-FLOAT S!14[FR1] t29[FR0] => t30[FR0] 
        FMULD   #<TN S!14[FR1]>
        WAIT

L18:

VOP ALLOCATE-VECTOR-ON-HEAP '214!31>t32[ECX] '3!33>t34[EDX] '6!35>t36[EBX]
                            => t37[EAX] 
        MOV     #<TN t32[ECX]>, 214
        MOV     #<TN t34[EDX]>, 12
        MOV     #<TN t36[EBX]>, 24
        LEA     #<TN t37[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t37[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t37[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t37[EAX]>, DWORD PTR [+36]
        JMP     BE, L19
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L20
L19:
        FS-SEGMENT-PREFIX
        XOR     #<TN t37[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t37[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t37[EAX]>, DWORD PTR [+32]
L20:
        LEA     #<TN t37[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t32[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t34[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L21
        BREAK   9
L21:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t37[EAX] t26[FR2]
                                                {0}
                                                => t38[FR2] 
        FXCH    #<TN t26[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t26[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t37[EAX] t28[FR3]
                                                {1}
                                                => t39[FR3] 
        FXCH    #<TN t28[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t28[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t37[EAX] t30[FR0]
                                                {2}
                                                => t40[FR0] 
        FSTD    DWORD PTR [EAX+17]

L22:

VOP MOVE t37[EAX] => t41[EDX] 
        MOV     #<TN t41[EDX]>, #<TN t37[EAX]>

VOP RETURN-SINGLE t17[S0] t23[S1] t41[EDX] 
L23:
        LEA     #<TN t42[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t43[EBP]>, #<TN t17[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME VEC {127A3B09}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD9             FSTPD FR1
;       24:       DD4201           FLDD [EDX+1]
;       27:       D9C9             FXCH FR1
;       29:       DDD8             FSTPD FR0
;       2B:       DD4701           FLDD [EDI+1]
;       2E:       D8C9             FMULD FR1
;       30:       DDD2             FSTD FR2
;       32:       DDD8             FSTPD FR0
;       34:       DD4709           FLDD [EDI+9]
;       37:       D8C9             FMULD FR1
;       39:       DDD3             FSTD FR3
;       3B:       DDD8             FSTPD FR0
;       3D:       DD4711           FLDD [EDI+17]
;       40:       D8C9             FMULD FR1
;       42:       9B               WAIT
;       43:       B9D6000000       MOV ECX, 214
;       48:       BA0C000000       MOV EDX, 12
;       4D:       BB18000000       MOV EBX, 24
;       52:       8D430F           LEA EAX, [EBX+15]
;       55:       83E0F8           AND EAX, -8
;       58:       64               BYTE #X64
;       59:       800D4800000004   OR BYTE PTR [#x48], 4
;       60:       64               BYTE #X64
;       61:       030520000000     ADD EAX, [#x20]
;       67:       64               BYTE #X64
;       68:       3B0524000000     CMP EAX, [#x24]
;       6E:       7607             JBE L1
;       70:       E800000000       CALL L0
;       75: L0:   EB15             JMP L2
;       77: L1:   64               BYTE #X64
;       78:       330520000000     XOR EAX, [#x20]
;       7E:       64               BYTE #X64
;       7F:       310520000000     XOR [#x20], EAX
;       85:       64               BYTE #X64
;       86:       330520000000     XOR EAX, [#x20]
;       8C: L2:   8D4007           LEA EAX, [EAX+7]
;       8F:       8948F9           MOV [EAX-7], ECX
;       92:       8950FD           MOV [EAX-3], EDX
;       95:       64               BYTE #X64
;       96:       80354800000004   XOR BYTE PTR [#x48], 4
;       9D:       7403             JEQ L3
;       9F:       0F0B09           BREAK 9                    ; pending interrupt trap
;       A2: L3:   D9CA             FXCH FR2
;       A4:       DD5001           FSTD [EAX+1]
;       A7:       D9CA             FXCH FR2
;       A9:       D9CB             FXCH FR3
;       AB:       DD5009           FSTD [EAX+9]
;       AE:       D9CB             FXCH FR3
;       B0:       DD5011           FSTD [EAX+17]
;       B3:       8BD0             MOV EDX, EAX
;       B5:       8D65F8           LEA ESP, [EBP-8]
;       B8:       F8               CLC
;       B9:       8B6DFC           MOV EBP, [EBP-4]
;       BC:       C20400           RET 4
;       BF:       90               NOP

;;;; component: VEC


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA +V
  4>  5: #:G165
  6>  7: #:G166
  8>  9: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 10> 11: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 12>     tail local combination v3 v9 v11
end stack:
successors c13

IR1 block 1 start c13
start stack:
 13>     bind SB-C::CLAMBDA +V
end stack:
successors c14

IR1 block 2 start c14
start stack:
 14>     entry NIL
 15> 16: + {GLOBAL-FUNCTION}
end stack:
successors c17

IR1 block 3 start c17
start stack:
 17>     entry NIL
 18> 19: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 20> 21: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G193))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A91949}> {12A91909}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A919B9}> {12A91979}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G193
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A91A29}> {12A919E9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A923F1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-194
                                  #:N-COUNT-195) {12A92D91}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G193) {12A91C61}> {12A91B01}>)
 22>     known combination v19 v21
 23> 24: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 25> 26: A
 27> 28: '0
 29> 30: known combination v24 v26 v28
end stack:
successors c31

IR1 block 4 start c31
start stack:
 31>     entry NIL
 32> 33: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 34> 35: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G184))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A766A9}> {12A76669}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A76719}> {12A766D9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G184
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A76789}> {12A76749}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A77319}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-185
                                  #:N-COUNT-186) {12A77D21}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G184) {12A769C1}> {12A76861}>)
 36>     known combination v33 v35
 37> 38: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 39> 40: B
 41> 42: '0
 43> 44: known combination v38 v40 v42
end stack:
successors c45

IR1 block 5 start c45
start stack:
 45> 46: known combination v16 v30 v44
 47> 48: + {GLOBAL-FUNCTION}
end stack:
successors c49

IR1 block 6 start c49
start stack:
 49>     entry NIL
 50> 51: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 52> 53: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G196))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A95201}> {12A951C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A95271}> {12A95231}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G196
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A952E1}> {12A952A1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A95CA9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-197
                                  #:N-COUNT-198) {12A96651}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G196) {12A95519}> {12A953B9}>)
 54>     known combination v51 v53
 55> 56: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 57> 58: A
 59> 60: '1
 61> 62: known combination v56 v58 v60
end stack:
successors c63

IR1 block 7 start c63
start stack:
 63>     entry NIL
 64> 65: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 66> 67: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G187))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A7BE41}> {12A7BE01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A7BEB1}> {12A7BE71}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G187
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A7BF21}> {12A7BEE1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A7C9C9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-188
                                  #:N-COUNT-189) {12A83381}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G187) {12A7C159}> {12A7BFF9}>)
 68>     known combination v65 v67
 69> 70: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 71> 72: B
 73> 74: '1
 75> 76: known combination v70 v72 v74
end stack:
successors c77

IR1 block 8 start c77
start stack:
 77> 78: known combination v48 v62 v76
 79> 80: + {GLOBAL-FUNCTION}
end stack:
successors c81

IR1 block 9 start c81
start stack:
 81>     entry NIL
 82> 83: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 84> 85: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G199))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A98979}> {12A98939}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A989E9}> {12A989A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G199
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A98A59}> {12A98A19}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A99421}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-200
                                  #:N-COUNT-201) {12A99DC1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G199) {12A98C91}> {12A98B31}>)
 86>     known combination v83 v85
 87> 88: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 89> 90: A
 91> 92: '2
 93> 94: known combination v88 v90 v92
end stack:
successors c95

IR1 block 10 start c95
start stack:
 95>     entry NIL
 96> 97: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 98> 99: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G190))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A868D1}> {12A86891}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A86941}> {12A86901}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G190
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A869B1}> {12A86971}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A89389}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-191
                                  #:N-COUNT-192) {12A89D29}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G190) {12A86BE9}> {12A86A89}>)
100>     known combination v97 v99
101>102: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
103>104: B
105>106: '2
107>108: known combination v102 v104 v106
end stack:
successors c109

IR1 block 11 start c109
start stack:
109>110: known combination v80 v94 v108
end stack:
successors c111

IR1 block 12 start c111
start stack:
111>     entry NIL
112>113: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
114>115: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
116>117: '214
118>119: '3
120>121: '6
122>123: known combination v115 v117 v119 v121
124>     local combination v113 v123
125>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
126>127: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
128>129: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G202))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A9CFA1}> {12A9CF61}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A9D011}> {12A9CFD1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G202
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A9D081}> {12A9D041}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A9DD81}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-203
                                  #:N-COUNT-204) {12A9E731}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G202) {12A9D371}> {12A9D211}>)
130>     known combination v127 v129
131>132: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
133>134: #:G1
135>136: '0
137>     known combination v132 v134 v136 v46
138>139: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
140>141: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G205))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12AA0BB1}> {12AA0B71}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12AA0C21}> {12AA0BE1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G205 ..>)>)
                                                    IR1 block 13 start c142
                                                    start stack:
                                                    142>     return v143 SB-C::CLAMBDA +V
                                                    end stack:
                                                    successors c144


;;;; IR2 component: VEC

entries:
    L1: +V


TNs: 9 local, 3 temps, 3 constant, 4 env, 0 comp, 17 global.
Wired: 30, Unused: 0. 14 blocks, 88 global conflicts.

IR1 block 16 start c144

    IR2 block NIL start c144

IR1 block 0 start c1

    IR2 block 13 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G165!2[EDX]
    3: MOVE t3[EDI] => #:G166!4[EDI]
    4: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    5: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MOVE #:G165!2[EDX] => A!13[EDX]
    8: MOVE #:G166!4[EDI] => B!14[EDI]
    9: MOVE t7[S0]>t15[EAX] => t16[S0]<t17[EAX]
    10: SAP-MOVE t11[S1]>t18[EAX] => t19[S1]<t20[EAX]

IR1 block 1 start c13

    IR2 block 12 start c13
    0: SAP-MOVE t19[S1]>t21[EAX] => t22[S1]<t23[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c14

    IR2 block 11 start c14

IR1 block 3 start c17

    IR2 block 10 start c17
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {0} => t24[FR0]

IR1 block 4 start c31

    IR2 block 9 start c31
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {0} => t25[FR1]

IR1 block 5 start c45

    IR2 block 8 start c45
    0: +/DOUBLE-FLOAT t24[FR0] t25[FR1] => t26[FR1]

IR1 block 6 start c49

    IR2 block 7 start c49
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {1} => t27[FR0]

IR1 block 7 start c63

    IR2 block 6 start c63
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {1} => t28[FR2]

IR1 block 8 start c77

    IR2 block 5 start c77
    0: +/DOUBLE-FLOAT t27[FR0] t28[FR2] => t29[FR2]

IR1 block 9 start c81

    IR2 block 4 start c81
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {2} => t30[FR0]

IR1 block 10 start c95

    IR2 block 3 start c95
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {2} => t31[FR3]

IR1 block 11 start c109

    IR2 block 2 start c109
    0: +/DOUBLE-FLOAT t30[FR0] t31[FR3] => t32[FR0]

IR1 block 12 start c111

    IR2 block 1 start c111
    0: ALLOCATE-VECTOR-ON-HEAP '214!33>t34[ECX] '3!35>t36[EDX] '6!37>t38[EBX]
                               => t39[EAX]
    1: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t26[FR1]
                                                   {0}
                                                   => t40[FR1]
    2: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t29[FR2]
                                                   {1}
                                                   => t41[FR2]
    3: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t32[FR0]
                                                   {2}
                                                   => t42[FR0]

IR1 block 13 start c142

    IR2 block 0 start c142
    0: MOVE t39[EAX] => t43[EDX]
    1: RETURN-SINGLE t16[S0] t22[S1] t43[EDX]

IR1 block 1 start c144

    IR2 block NIL start c144



assembly code for #<SB-C:COMPONENT :NAME VEC {12A39739}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t44[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:
L12:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {0} => t24[FR0] 
        FSTP    #<TN t24[FR0]>
        FLDD    DWORD PTR [EDX+1]

L13:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {0} => t25[FR1] 
        FSTP    #<TN t25[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t25[FR1]>

L14:

VOP +/DOUBLE-FLOAT t24[FR0] t25[FR1] => t26[FR1] 
        FADD-STI        #<TN t26[FR1]>
        WAIT

L15:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {1} => t27[FR0] 
        FSTP    #<TN t27[FR0]>
        FLDD    DWORD PTR [EDX+9]

L16:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {1} => t28[FR2] 
        FSTP    #<TN t28[FR2]>
        FLDD    DWORD PTR [EDI+9]
        FXCH    #<TN t28[FR2]>

L17:

VOP +/DOUBLE-FLOAT t27[FR0] t28[FR2] => t29[FR2] 
        FADD-STI        #<TN t29[FR2]>
        WAIT

L18:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {2} => t30[FR0] 
        FSTP    #<TN t30[FR0]>
        FLDD    DWORD PTR [EDX+17]

L19:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {2} => t31[FR3] 
        FSTP    #<TN t31[FR3]>
        FLDD    DWORD PTR [EDI+17]
        FXCH    #<TN t31[FR3]>

L20:

VOP +/DOUBLE-FLOAT t30[FR0] t31[FR3] => t32[FR0] 
        FADDD   #<TN t31[FR3]>
        WAIT

L21:

VOP ALLOCATE-VECTOR-ON-HEAP '214!33>t34[ECX] '3!35>t36[EDX] '6!37>t38[EBX]
                            => t39[EAX] 
        MOV     #<TN t34[ECX]>, 214
        MOV     #<TN t36[EDX]>, 12
        MOV     #<TN t38[EBX]>, 24
        LEA     #<TN t39[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t39[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t39[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t39[EAX]>, DWORD PTR [+36]
        JMP     BE, L22
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L23
L22:
        FS-SEGMENT-PREFIX
        XOR     #<TN t39[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t39[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t39[EAX]>, DWORD PTR [+32]
L23:
        LEA     #<TN t39[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t34[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t36[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L24
        BREAK   9
L24:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t26[FR1]
                                                {0}
                                                => t40[FR1] 
        FXCH    #<TN t26[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t26[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t29[FR2]
                                                {1}
                                                => t41[FR2] 
        FXCH    #<TN t29[FR2]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t29[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t32[FR0]
                                                {2}
                                                => t42[FR0] 
        FSTD    DWORD PTR [EAX+17]

L25:

VOP MOVE t39[EAX] => t43[EDX] 
        MOV     #<TN t43[EDX]>, #<TN t39[EAX]>

VOP RETURN-SINGLE t16[S0] t22[S1] t43[EDX] 
L26:
        LEA     #<TN t44[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t45[EBP]>, #<TN t16[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME VEC {12A39739}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DDD9             FSTPD FR1
;       29:       DD4701           FLDD [EDI+1]
;       2C:       D9C9             FXCH FR1
;       2E:       DCC1             FADD-STI FR1
;       30:       9B               WAIT
;       31:       DDD8             FSTPD FR0
;       33:       DD4209           FLDD [EDX+9]
;       36:       DDDA             FSTPD FR2
;       38:       DD4709           FLDD [EDI+9]
;       3B:       D9CA             FXCH FR2
;       3D:       DCC2             FADD-STI FR2
;       3F:       9B               WAIT
;       40:       DDD8             FSTPD FR0
;       42:       DD4211           FLDD [EDX+17]
;       45:       DDDB             FSTPD FR3
;       47:       DD4711           FLDD [EDI+17]
;       4A:       D9CB             FXCH FR3
;       4C:       D8C3             FADDD FR3
;       4E:       9B               WAIT
;       4F:       B9D6000000       MOV ECX, 214
;       54:       BA0C000000       MOV EDX, 12
;       59:       BB18000000       MOV EBX, 24
;       5E:       8D430F           LEA EAX, [EBX+15]
;       61:       83E0F8           AND EAX, -8
;       64:       64               BYTE #X64
;       65:       800D4800000004   OR BYTE PTR [#x48], 4
;       6C:       64               BYTE #X64
;       6D:       030520000000     ADD EAX, [#x20]
;       73:       64               BYTE #X64
;       74:       3B0524000000     CMP EAX, [#x24]
;       7A:       7607             JBE L1
;       7C:       E800000000       CALL L0
;       81: L0:   EB15             JMP L2
;       83: L1:   64               BYTE #X64
;       84:       330520000000     XOR EAX, [#x20]
;       8A:       64               BYTE #X64
;       8B:       310520000000     XOR [#x20], EAX
;       91:       64               BYTE #X64
;       92:       330520000000     XOR EAX, [#x20]
;       98: L2:   8D4007           LEA EAX, [EAX+7]
;       9B:       8948F9           MOV [EAX-7], ECX
;       9E:       8950FD           MOV [EAX-3], EDX
;       A1:       64               BYTE #X64
;       A2:       80354800000004   XOR BYTE PTR [#x48], 4
;       A9:       7403             JEQ L3
;       AB:       0F0B09           BREAK 9                    ; pending interrupt trap
;       AE: L3:   D9C9             FXCH FR1
;       B0:       DD5001           FSTD [EAX+1]
;       B3:       D9C9             FXCH FR1
;       B5:       D9CA             FXCH FR2
;       B7:       DD5009           FSTD [EAX+9]
;       BA:       D9CA             FXCH FR2
;       BC:       DD5011           FSTD [EAX+17]
;       BF:       8BD0             MOV EDX, EAX
;       C1:       8D65F8           LEA ESP, [EBP-8]
;       C4:       F8               CLC
;       C5:       8B6DFC           MOV EBP, [EBP-4]
;       C8:       C20400           RET 4
;       CB:       90               NOP
;       CC:       90               NOP
;       CD:       90               NOP
;       CE:       90               NOP
;       CF:       90               NOP

;;;; component: VEC


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA -V
  4>  5: #:G221
  6>  7: #:G222
  8>  9: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 10> 11: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 12>     tail local combination v3 v9 v11
end stack:
successors c13

IR1 block 1 start c13
start stack:
 13>     bind SB-C::CLAMBDA -V
end stack:
successors c14

IR1 block 2 start c14
start stack:
 14>     entry NIL
 15> 16: - {GLOBAL-FUNCTION}
end stack:
successors c17

IR1 block 3 start c17
start stack:
 17>     entry NIL
 18> 19: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 20> 21: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G249))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11945381}> {11945341}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119453F1}> {119453B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G249
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11945461}> {11945421}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11945E29}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-250
                                  #:N-COUNT-251) {119467C9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G249) {11945699}> {11945539}>)
 22>     known combination v19 v21
 23> 24: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 25> 26: A
 27> 28: '0
 29> 30: known combination v24 v26 v28
end stack:
successors c31

IR1 block 4 start c31
start stack:
 31>     entry NIL
 32> 33: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 34> 35: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G240))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11935569}> {11935529}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119355D9}> {11935599}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G240
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11935649}> {11935609}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119361C9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-241
                                  #:N-COUNT-242) {11936BB1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G240) {119358B1}> {11935751}>)
 36>     known combination v33 v35
 37> 38: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 39> 40: B
 41> 42: '0
 43> 44: known combination v38 v40 v42
end stack:
successors c45

IR1 block 5 start c45
start stack:
 45> 46: known combination v16 v30 v44
 47> 48: - {GLOBAL-FUNCTION}
end stack:
successors c49

IR1 block 6 start c49
start stack:
 49>     entry NIL
 50> 51: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 52> 53: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G252))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11948BA1}> {11948B61}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11948C11}> {11948BD1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G252
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11948C81}> {11948C41}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11949649}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-253
                                  #:N-COUNT-254) {1194A001}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G252) {11948EB9}> {11948D59}>)
 54>     known combination v51 v53
 55> 56: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 57> 58: A
 59> 60: '1
 61> 62: known combination v56 v58 v60
end stack:
successors c63

IR1 block 7 start c63
start stack:
 63>     entry NIL
 64> 65: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 66> 67: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G243))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1193A9B9}> {1193A979}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1193AA29}> {1193A9E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G243
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1193AA99}> {1193AA59}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1193B461}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-244
                                  #:N-COUNT-245) {1193BE01}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G243) {1193ACD1}> {1193AB71}>)
 68>     known combination v65 v67
 69> 70: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 71> 72: B
 73> 74: '1
 75> 76: known combination v70 v72 v74
end stack:
successors c77

IR1 block 8 start c77
start stack:
 77> 78: known combination v48 v62 v76
 79> 80: - {GLOBAL-FUNCTION}
end stack:
successors c81

IR1 block 9 start c81
start stack:
 81>     entry NIL
 82> 83: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 84> 85: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G255))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1194C289}> {1194C249}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1194C2F9}> {1194C2B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G255
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1194C369}> {1194C329}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1194CD79}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-256
                                  #:N-COUNT-257) {1194D719}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G255) {1194C5A1}> {1194C441}>)
 86>     known combination v83 v85
 87> 88: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 89> 90: A
 91> 92: '2
 93> 94: known combination v88 v90 v92
end stack:
successors c95

IR1 block 10 start c95
start stack:
 95>     entry NIL
 96> 97: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 98> 99: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G246))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11941199}> {11941159}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11941209}> {119411C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G246
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11941279}> {11941239}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11941CF9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-247
                                  #:N-COUNT-248) {119426A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G246) {119414B1}> {11941351}>)
100>     known combination v97 v99
101>102: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
103>104: B
105>106: '2
107>108: known combination v102 v104 v106
end stack:
successors c109

IR1 block 11 start c109
start stack:
109>110: known combination v80 v94 v108
end stack:
successors c111

IR1 block 12 start c111
start stack:
111>     entry NIL
112>113: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
114>115: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
116>117: '214
118>119: '3
120>121: '6
122>123: known combination v115 v117 v119 v121
124>     local combination v113 v123
125>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
126>127: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
128>129: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G258))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11950761}> {11950721}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119507D1}> {11950791}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G258
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11950841}> {11950801}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11951721}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-259
                                  #:N-COUNT-260) {119520C1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G258) {11950B49}> {119509E9}>)
130>     known combination v127 v129
131>132: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
133>134: #:G1
135>136: '0
137>     known combination v132 v134 v136 v46
138>139: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
140>141: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G261))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119546C9}> {11954689}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11954739}> {119546F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G261 ..>)>)
                                                    IR1 block 13 start c142
                                                    start stack:
                                                    142>     return v143 SB-C::CLAMBDA -V
                                                    end stack:
                                                    successors c144


;;;; IR2 component: VEC

entries:
    L1: -V


TNs: 9 local, 3 temps, 3 constant, 4 env, 0 comp, 17 global.
Wired: 30, Unused: 0. 14 blocks, 88 global conflicts.

IR1 block 16 start c144

    IR2 block NIL start c144

IR1 block 0 start c1

    IR2 block 13 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G221!2[EDX]
    3: MOVE t3[EDI] => #:G222!4[EDI]
    4: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    5: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MOVE #:G221!2[EDX] => A!13[EDX]
    8: MOVE #:G222!4[EDI] => B!14[EDI]
    9: MOVE t7[S0]>t15[EAX] => t16[S0]<t17[EAX]
    10: SAP-MOVE t11[S1]>t18[EAX] => t19[S1]<t20[EAX]

IR1 block 1 start c13

    IR2 block 12 start c13
    0: SAP-MOVE t19[S1]>t21[EAX] => t22[S1]<t23[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c14

    IR2 block 11 start c14

IR1 block 3 start c17

    IR2 block 10 start c17
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {0} => t24[FR0]

IR1 block 4 start c31

    IR2 block 9 start c31
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {0} => t25[FR1]

IR1 block 5 start c45

    IR2 block 8 start c45
    0: -/DOUBLE-FLOAT t24[FR0] t25[FR1] => t26[FR1]

IR1 block 6 start c49

    IR2 block 7 start c49
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {1} => t27[FR0]

IR1 block 7 start c63

    IR2 block 6 start c63
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {1} => t28[FR2]

IR1 block 8 start c77

    IR2 block 5 start c77
    0: -/DOUBLE-FLOAT t27[FR0] t28[FR2] => t29[FR2]

IR1 block 9 start c81

    IR2 block 4 start c81
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {2} => t30[FR0]

IR1 block 10 start c95

    IR2 block 3 start c95
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {2} => t31[FR3]

IR1 block 11 start c109

    IR2 block 2 start c109
    0: -/DOUBLE-FLOAT t30[FR0] t31[FR3] => t32[FR0]

IR1 block 12 start c111

    IR2 block 1 start c111
    0: ALLOCATE-VECTOR-ON-HEAP '214!33>t34[ECX] '3!35>t36[EDX] '6!37>t38[EBX]
                               => t39[EAX]
    1: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t26[FR1]
                                                   {0}
                                                   => t40[FR1]
    2: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t29[FR2]
                                                   {1}
                                                   => t41[FR2]
    3: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t32[FR0]
                                                   {2}
                                                   => t42[FR0]

IR1 block 13 start c142

    IR2 block 0 start c142
    0: MOVE t39[EAX] => t43[EDX]
    1: RETURN-SINGLE t16[S0] t22[S1] t43[EDX]

IR1 block 1 start c144

    IR2 block NIL start c144



assembly code for #<SB-C:COMPONENT :NAME VEC {118F2A09}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t44[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:
L12:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {0} => t24[FR0] 
        FSTP    #<TN t24[FR0]>
        FLDD    DWORD PTR [EDX+1]

L13:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {0} => t25[FR1] 
        FSTP    #<TN t25[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t25[FR1]>

L14:

VOP -/DOUBLE-FLOAT t24[FR0] t25[FR1] => t26[FR1] 
        FSUBR-STI       #<TN t26[FR1]>
        WAIT

L15:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {1} => t27[FR0] 
        FSTP    #<TN t27[FR0]>
        FLDD    DWORD PTR [EDX+9]

L16:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {1} => t28[FR2] 
        FSTP    #<TN t28[FR2]>
        FLDD    DWORD PTR [EDI+9]
        FXCH    #<TN t28[FR2]>

L17:

VOP -/DOUBLE-FLOAT t27[FR0] t28[FR2] => t29[FR2] 
        FSUBR-STI       #<TN t29[FR2]>
        WAIT

L18:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {2} => t30[FR0] 
        FSTP    #<TN t30[FR0]>
        FLDD    DWORD PTR [EDX+17]

L19:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {2} => t31[FR3] 
        FSTP    #<TN t31[FR3]>
        FLDD    DWORD PTR [EDI+17]
        FXCH    #<TN t31[FR3]>

L20:

VOP -/DOUBLE-FLOAT t30[FR0] t31[FR3] => t32[FR0] 
        FSUBD   #<TN t31[FR3]>
        WAIT

L21:

VOP ALLOCATE-VECTOR-ON-HEAP '214!33>t34[ECX] '3!35>t36[EDX] '6!37>t38[EBX]
                            => t39[EAX] 
        MOV     #<TN t34[ECX]>, 214
        MOV     #<TN t36[EDX]>, 12
        MOV     #<TN t38[EBX]>, 24
        LEA     #<TN t39[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t39[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t39[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t39[EAX]>, DWORD PTR [+36]
        JMP     BE, L22
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L23
L22:
        FS-SEGMENT-PREFIX
        XOR     #<TN t39[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t39[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t39[EAX]>, DWORD PTR [+32]
L23:
        LEA     #<TN t39[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t34[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t36[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L24
        BREAK   9
L24:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t26[FR1]
                                                {0}
                                                => t40[FR1] 
        FXCH    #<TN t26[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t26[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t29[FR2]
                                                {1}
                                                => t41[FR2] 
        FXCH    #<TN t29[FR2]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t29[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t39[EAX] t32[FR0]
                                                {2}
                                                => t42[FR0] 
        FSTD    DWORD PTR [EAX+17]

L25:

VOP MOVE t39[EAX] => t43[EDX] 
        MOV     #<TN t43[EDX]>, #<TN t39[EAX]>

VOP RETURN-SINGLE t16[S0] t22[S1] t43[EDX] 
L26:
        LEA     #<TN t44[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t45[EBP]>, #<TN t16[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME VEC {118F2A09}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DDD9             FSTPD FR1
;       29:       DD4701           FLDD [EDI+1]
;       2C:       D9C9             FXCH FR1
;       2E:       DCE1             FSUBR-STI FR1
;       30:       9B               WAIT
;       31:       DDD8             FSTPD FR0
;       33:       DD4209           FLDD [EDX+9]
;       36:       DDDA             FSTPD FR2
;       38:       DD4709           FLDD [EDI+9]
;       3B:       D9CA             FXCH FR2
;       3D:       DCE2             FSUBR-STI FR2
;       3F:       9B               WAIT
;       40:       DDD8             FSTPD FR0
;       42:       DD4211           FLDD [EDX+17]
;       45:       DDDB             FSTPD FR3
;       47:       DD4711           FLDD [EDI+17]
;       4A:       D9CB             FXCH FR3
;       4C:       D8E3             FSUBD FR3
;       4E:       9B               WAIT
;       4F:       B9D6000000       MOV ECX, 214
;       54:       BA0C000000       MOV EDX, 12
;       59:       BB18000000       MOV EBX, 24
;       5E:       8D430F           LEA EAX, [EBX+15]
;       61:       83E0F8           AND EAX, -8
;       64:       64               BYTE #X64
;       65:       800D4800000004   OR BYTE PTR [#x48], 4
;       6C:       64               BYTE #X64
;       6D:       030520000000     ADD EAX, [#x20]
;       73:       64               BYTE #X64
;       74:       3B0524000000     CMP EAX, [#x24]
;       7A:       7607             JBE L1
;       7C:       E800000000       CALL L0
;       81: L0:   EB15             JMP L2
;       83: L1:   64               BYTE #X64
;       84:       330520000000     XOR EAX, [#x20]
;       8A:       64               BYTE #X64
;       8B:       310520000000     XOR [#x20], EAX
;       91:       64               BYTE #X64
;       92:       330520000000     XOR EAX, [#x20]
;       98: L2:   8D4007           LEA EAX, [EAX+7]
;       9B:       8948F9           MOV [EAX-7], ECX
;       9E:       8950FD           MOV [EAX-3], EDX
;       A1:       64               BYTE #X64
;       A2:       80354800000004   XOR BYTE PTR [#x48], 4
;       A9:       7403             JEQ L3
;       AB:       0F0B09           BREAK 9                    ; pending interrupt trap
;       AE: L3:   D9C9             FXCH FR1
;       B0:       DD5001           FSTD [EAX+1]
;       B3:       D9C9             FXCH FR1
;       B5:       D9CA             FXCH FR2
;       B7:       DD5009           FSTD [EAX+9]
;       BA:       D9CA             FXCH FR2
;       BC:       DD5011           FSTD [EAX+17]
;       BF:       8BD0             MOV EDX, EAX
;       C1:       8D65F8           LEA ESP, [EBP-8]
;       C4:       F8               CLC
;       C5:       8B6DFC           MOV EBP, [EBP-4]
;       C8:       C20400           RET 4
;       CB:       90               NOP
;       CC:       90               NOP
;       CD:       90               NOP
;       CE:       90               NOP
;       CF:       90               NOP

;;;; component: Z


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA DOT
  4>  5: #:G268
  6>  7: #:G269
  8>  9: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 10> 11: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 12>     tail local combination v3 v9 v11
end stack:
successors c13

IR1 block 1 start c13
start stack:
 13>     bind SB-C::CLAMBDA DOT
end stack:
successors c14

IR1 block 2 start c14
start stack:
 14>     entry NIL
 15> 16: + {GLOBAL-FUNCTION}
 17> 18: + {GLOBAL-FUNCTION}
 19> 20: * {GLOBAL-FUNCTION}
end stack:
successors c21

IR1 block 3 start c21
start stack:
 21>     entry NIL
 22> 23: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 24> 25: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G279))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C59379}> {11C59339}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C593E9}> {11C593A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G279
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C59459}> {11C59419}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11C59E21}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-280
                                  #:N-COUNT-281) {11C5E7C1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G279) {11C59691}> {11C59531}>)
 26>     known combination v23 v25
 27> 28: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 29> 30: A
 31> 32: '0
 33> 34: known combination v28 v30 v32
end stack:
successors c35

IR1 block 4 start c35
start stack:
 35>     entry NIL
 36> 37: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 38> 39: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G270))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C3EC29}> {11C3EBE9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C3EC99}> {11C3EC59}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G270
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C3ED09}> {11C3ECC9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11C3F811}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-271
                                  #:N-COUNT-272) {11C401D9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G270) {11C3EF89}> {11C3EE29}>)
 40>     known combination v37 v39
 41> 42: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 43> 44: B
 45> 46: '0
 47> 48: known combination v42 v44 v46
end stack:
successors c49

IR1 block 5 start c49
start stack:
 49> 50: known combination v20 v34 v48
 51> 52: * {GLOBAL-FUNCTION}
end stack:
successors c53

IR1 block 6 start c53
start stack:
 53>     entry NIL
 54> 55: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 56> 57: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G282))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C60A79}> {11C60A39}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C60AE9}> {11C60AA9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G282
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C60B59}> {11C60B19}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11C63569}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-283
                                  #:N-COUNT-284) {11C63F09}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G282) {11C60D91}> {11C60C31}>)
 58>     known combination v55 v57
 59> 60: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 61> 62: A
 63> 64: '1
 65> 66: known combination v60 v62 v64
end stack:
successors c67

IR1 block 7 start c67
start stack:
 67>     entry NIL
 68> 69: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 70> 71: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G273))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C44379}> {11C44339}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C443E9}> {11C443A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G273
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C44459}> {11C44419}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11C44E21}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-274
                                  #:N-COUNT-275) {11C477C1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G273) {11C44691}> {11C44531}>)
 72>     known combination v69 v71
 73> 74: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 75> 76: B
 77> 78: '1
 79> 80: known combination v74 v76 v78
end stack:
successors c81

IR1 block 8 start c81
start stack:
 81> 82: known combination v52 v66 v80
 83> 84: known combination v18 v50 v82
 85> 86: * {GLOBAL-FUNCTION}
end stack:
successors c87

IR1 block 9 start c87
start stack:
 87>     entry NIL
 88> 89: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 90> 91: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G285))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C730B9}> {11C73079}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C73129}> {11C730E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G285
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C73199}> {11C73159}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11C73B61}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-286
                                  #:N-COUNT-287) {11C74501}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G285) {11C733D1}> {11C73271}>)
 92>     known combination v89 v91
 93> 94: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 95> 96: A
 97> 98: '2
 99>100: known combination v94 v96 v98
end stack:
successors c101

IR1 block 10 start c101
start stack:
101>     entry NIL
102>103: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
104>105: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G276))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C4CF69}> {11C4CF29}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C4CFD9}> {11C4CF99}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G276
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C4F049}> {11C4F009}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11C4FA11}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-277
                                  #:N-COUNT-278) {11C543B1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G276) {11C4F281}> {11C4F121}>)
106>     known combination v103 v105
107>108: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
109>110: B
111>112: '2
113>114: known combination v108 v110 v112
end stack:
successors c115

IR1 block 11 start c115
start stack:
115>116: known combination v86 v100 v114
117>118: known combination v16 v84 v116
end stack:
successors c119

IR1 block 12 start c119
start stack:
119>     return v118 SB-C::CLAMBDA DOT
end stack:
successors c120


;;;; IR2 component: Z

entries:
    L1: DOT


TNs: 10 local, 5 temps, 0 constant, 4 env, 0 comp, 16 global.
Wired: 30, Unused: 0. 13 blocks, 79 global conflicts.

IR1 block 15 start c120

    IR2 block NIL start c120

IR1 block 0 start c1

    IR2 block 12 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G268!2[EDX]
    3: MOVE t3[EDI] => #:G269!4[EDI]
    4: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    5: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MOVE #:G268!2[EDX] => A!13[EDX]
    8: MOVE #:G269!4[EDI] => B!14[EDI]
    9: MOVE t7[S0]>t15[EAX] => t16[S0]<t17[EAX]
    10: SAP-MOVE t11[S1]>t18[EAX] => t19[S1]<t20[EAX]

IR1 block 1 start c13

    IR2 block 11 start c13
    0: SAP-MOVE t19[S1]>t21[EAX] => t22[S1]<t23[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c14

    IR2 block 10 start c14

IR1 block 3 start c21

    IR2 block 9 start c21
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {0} => t24[FR0]

IR1 block 4 start c35

    IR2 block 8 start c35
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {0} => t25[FR1]

IR1 block 5 start c49

    IR2 block 7 start c49
    0: */DOUBLE-FLOAT t24[FR0] t25[FR1] => t26[FR1]

IR1 block 6 start c53

    IR2 block 6 start c53
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {1} => t27[FR0]

IR1 block 7 start c67

    IR2 block 5 start c67
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {1} => t28[FR2]

IR1 block 8 start c81

    IR2 block 4 start c81
    0: */DOUBLE-FLOAT t27[FR0] t28[FR2] => t29[FR0]
    1: +/DOUBLE-FLOAT t26[FR1] t29[FR0] => t30[FR1]

IR1 block 9 start c87

    IR2 block 3 start c87
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {2} => t31[FR0]

IR1 block 10 start c101

    IR2 block 2 start c101
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {2} => t32[FR2]

IR1 block 11 start c115

    IR2 block 1 start c115
    0: */DOUBLE-FLOAT t31[FR0] t32[FR2] => t33[FR0]
    1: +/DOUBLE-FLOAT t30[FR1] t33[FR0] => t34[FR0]

IR1 block 12 start c119

    IR2 block 0 start c119
    0: MOVE-FROM-DOUBLE t34[FR0] => t35[EDX]
    1: RETURN-SINGLE t16[S0] t22[S1] t35[EDX]

IR1 block 1 start c120

    IR2 block NIL start c120



assembly code for #<SB-C:COMPONENT :NAME Z {11C18991}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t36[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:
L12:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {0} => t24[FR0] 
        FSTP    #<TN t24[FR0]>
        FLDD    DWORD PTR [EDX+1]

L13:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {0} => t25[FR1] 
        FSTP    #<TN t25[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t25[FR1]>

L14:

VOP */DOUBLE-FLOAT t24[FR0] t25[FR1] => t26[FR1] 
        FMUL-STI        #<TN t26[FR1]>
        WAIT

L15:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {1} => t27[FR0] 
        FSTP    #<TN t27[FR0]>
        FLDD    DWORD PTR [EDX+9]

L16:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {1} => t28[FR2] 
        FSTP    #<TN t28[FR2]>
        FLDD    DWORD PTR [EDI+9]
        FXCH    #<TN t28[FR2]>

L17:

VOP */DOUBLE-FLOAT t27[FR0] t28[FR2] => t29[FR0] 
        FMULD   #<TN t28[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t26[FR1] t29[FR0] => t30[FR1] 
        FADD-STI        #<TN t30[FR1]>
        WAIT

L18:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!13[EDX] {2} => t31[FR0] 
        FSTP    #<TN t31[FR0]>
        FLDD    DWORD PTR [EDX+17]

L19:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT B!14[EDI] {2} => t32[FR2] 
        FSTP    #<TN t32[FR2]>
        FLDD    DWORD PTR [EDI+17]
        FXCH    #<TN t32[FR2]>

L20:

VOP */DOUBLE-FLOAT t31[FR0] t32[FR2] => t33[FR0] 
        FMULD   #<TN t32[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t30[FR1] t33[FR0] => t34[FR0] 
        FADDD   #<TN t30[FR1]>
        WAIT

L21:

VOP MOVE-FROM-DOUBLE t34[FR0] => t35[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t35[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t35[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t35[EDX]>, DWORD PTR [+36]
        JMP     BE, L22
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L23
L22:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t35[EDX]>
        SUB     #<TN t35[EDX]>, 16
L23:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t35[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L24
        BREAK   9
L24:

VOP RETURN-SINGLE t16[S0] t22[S1] t35[EDX] 
L25:
        LEA     #<TN t36[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t37[EBP]>, #<TN t16[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME Z {11C18991}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DDD9             FSTPD FR1
;       29:       DD4701           FLDD [EDI+1]
;       2C:       D9C9             FXCH FR1
;       2E:       DCC9             FMUL-STI FR1
;       30:       9B               WAIT
;       31:       DDD8             FSTPD FR0
;       33:       DD4209           FLDD [EDX+9]
;       36:       DDDA             FSTPD FR2
;       38:       DD4709           FLDD [EDI+9]
;       3B:       D9CA             FXCH FR2
;       3D:       D8CA             FMULD FR2
;       3F:       9B               WAIT
;       40:       DCC1             FADD-STI FR1
;       42:       9B               WAIT
;       43:       DDD8             FSTPD FR0
;       45:       DD4211           FLDD [EDX+17]
;       48:       DDDA             FSTPD FR2
;       4A:       DD4711           FLDD [EDI+17]
;       4D:       D9CA             FXCH FR2
;       4F:       D8CA             FMULD FR2
;       51:       9B               WAIT
;       52:       D8C1             FADDD FR1
;       54:       9B               WAIT
;       55:       64               BYTE #X64
;       56:       800D4800000004   OR BYTE PTR [#x48], 4
;       5D:       BA10000000       MOV EDX, 16
;       62:       64               BYTE #X64
;       63:       031520000000     ADD EDX, [#x20]
;       69:       64               BYTE #X64
;       6A:       3B1524000000     CMP EDX, [#x24]
;       70:       7607             JBE L1
;       72:       E800000000       CALL L0
;       77: L0:   EB0A             JMP L2
;       79: L1:   64               BYTE #X64
;       7A:       891520000000     MOV [#x20], EDX
;       80:       83EA10           SUB EDX, 16
;       83: L2:   C70216030000     MOV DWORD PTR [EDX], 790
;       89:       8D5207           LEA EDX, [EDX+7]
;       8C:       DD5201           FSTD [EDX+1]
;       8F:       64               BYTE #X64
;       90:       80354800000004   XOR BYTE PTR [#x48], 4
;       97:       7403             JEQ L3
;       99:       0F0B09           BREAK 9                    ; pending interrupt trap
;       9C: L3:   8D65F8           LEA ESP, [EBP-8]
;       9F:       F8               CLC
;       A0:       8B6DFC           MOV EBP, [EBP-4]
;       A3:       C20400           RET 4
;       A6:       90               NOP
;       A7:       90               NOP

;;;; component: Z


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA MAGNITUDE
  4>  5: #:G289
  6>  7: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
  8>     tail local combination v3 v7
end stack:
successors c9

IR1 block 1 start c9
start stack:
  9>     bind SB-C::CLAMBDA MAGNITUDE
end stack:
successors c10

IR1 block 2 start c10
start stack:
 10>     entry NIL
end stack:
successors c11

IR1 block 3 start c11
start stack:
 11>     entry NIL
 12> 13: + {GLOBAL-FUNCTION}
 14> 15: + {GLOBAL-FUNCTION}
 16> 17: * {GLOBAL-FUNCTION}
end stack:
successors c18

IR1 block 4 start c18
start stack:
 18>     entry NIL
 19> 20: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 21> 22: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G299))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125EE7C1}> {125EE781}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125EE831}> {125EE7F1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G299
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {125EE8A1}> {125EE861}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {125EF269}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-300
                                  #:N-COUNT-301) {125EFC09}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G299) {125EEAD9}> {125EE979}>)
 23>     known combination v20 v22
 24> 25: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 26> 27: A
 28> 29: '0
 30> 31: known combination v25 v27 v29
end stack:
successors c32

IR1 block 5 start c32
start stack:
 32>     entry NIL
 33> 34: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 35> 36: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G290))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125DF1A1}> {125DF161}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125DF211}> {125DF1D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G290
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {125DF281}> {125DF241}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {125DFE29}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-291
                                  #:N-COUNT-292) {125E07F1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G290) {125DF4E9}> {125DF389}>)
 37>     known combination v34 v36
 38> 39: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 40> 41: A
 42> 43: '0
 44> 45: known combination v39 v41 v43
end stack:
successors c46

IR1 block 6 start c46
start stack:
 46> 47: known combination v17 v31 v45
 48> 49: * {GLOBAL-FUNCTION}
end stack:
successors c50

IR1 block 7 start c50
start stack:
 50>     entry NIL
 51> 52: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 53> 54: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G302))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125F2101}> {125F20C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125F2171}> {125F2131}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G302
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {125F21E1}> {125F21A1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {125F2BA9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-303
                                  #:N-COUNT-304) {125F3549}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G302) {125F2419}> {125F22B9}>)
 55>     known combination v52 v54
 56> 57: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 58> 59: A
 60> 61: '1
 62> 63: known combination v57 v59 v61
end stack:
successors c64

IR1 block 8 start c64
start stack:
 64>     entry NIL
 65> 66: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 67> 68: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G293))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125E51E1}> {125E51A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125E5251}> {125E5211}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G293
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {125E52C1}> {125E5281}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {125E5C89}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-294
                                  #:N-COUNT-295) {125E6629}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G293) {125E54F9}> {125E5399}>)
 69>     known combination v66 v68
 70> 71: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 72> 73: A
 74> 75: '1
 76> 77: known combination v71 v73 v75
end stack:
successors c78

IR1 block 9 start c78
start stack:
 78> 79: known combination v49 v63 v77
 80> 81: known combination v15 v47 v79
 82> 83: * {GLOBAL-FUNCTION}
end stack:
successors c84

IR1 block 10 start c84
start stack:
 84>     entry NIL
 85> 86: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 87> 88: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G305))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125F5DE9}> {125F5DA9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125F5E59}> {125F5E19}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G305
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {125F5EC9}> {125F5E89}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {125F6891}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-306
                                  #:N-COUNT-307) {125F7249}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G305) {125F6101}> {125F5FA1}>)
 89>     known combination v86 v88
 90> 91: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 92> 93: A
 94> 95: '2
 96> 97: known combination v91 v93 v95
end stack:
successors c98

IR1 block 11 start c98
start stack:
 98>     entry NIL
 99>100: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
101>102: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G296))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125EA221}> {125EA1E1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125EA291}> {125EA251}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G296
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {125EA301}> {125EA2C1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {125EACC9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-297
                                  #:N-COUNT-298) {125EB669}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G296) {125EA539}> {125EA3D9}>)
103>     known combination v100 v102
104>105: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
106>107: A
108>109: '2
110>111: known combination v105 v107 v109
end stack:
successors c112

IR1 block 12 start c112
start stack:
112>113: known combination v83 v97 v111
114>115: known combination v13 v81 v113
end stack:
successors c116

IR1 block 13 start c116
start stack:
116>117: cast v115 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (DOUBLE-FLOAT
                                                                            0.0d0)>]
118>119: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
120>121: known combination v119 v117
end stack:
successors c122

IR1 block 14 start c122
start stack:
122>     return v121 SB-C::CLAMBDA MAGNITUDE
end stack:
successors c123


;;;; IR2 component: Z

entries:
    L1: MAGNITUDE


TNs: 10 local, 6 temps, 0 constant, 4 env, 0 comp, 15 global.
Wired: 29, Unused: 0. 15 blocks, 75 global conflicts.

IR1 block 17 start c123

    IR2 block NIL start c123

IR1 block 0 start c1

    IR2 block 14 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G289!2[EDX]
    3: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    4: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    5: NOTE-ENVIRONMENT-START {#}
    6: MOVE #:G289!2[EDX] => A!11[EDX]
    7: MOVE t5[S0]>t12[EAX] => t13[S0]<t14[EAX]
    8: SAP-MOVE t9[S1]>t15[EAX] => t16[S1]<t17[EAX]

IR1 block 1 start c9

    IR2 block 13 start c9
    0: SAP-MOVE t16[S1]>t18[EAX] => t19[S1]<t20[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c10

    IR2 block 12 start c10

IR1 block 3 start c11

    IR2 block 11 start c11

IR1 block 4 start c18

    IR2 block 10 start c18
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t21[FR0]

IR1 block 5 start c32

    IR2 block 9 start c32
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t22[FR1]

IR1 block 6 start c46

    IR2 block 8 start c46
    0: */DOUBLE-FLOAT t21[FR0] t22[FR1] => t23[FR1]

IR1 block 7 start c50

    IR2 block 7 start c50
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t24[FR0]

IR1 block 8 start c64

    IR2 block 6 start c64
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t25[FR2]

IR1 block 9 start c78

    IR2 block 5 start c78
    0: */DOUBLE-FLOAT t24[FR0] t25[FR2] => t26[FR0]
    1: +/DOUBLE-FLOAT t23[FR1] t26[FR0] => t27[FR1]

IR1 block 10 start c84

    IR2 block 4 start c84
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t28[FR0]

IR1 block 11 start c98

    IR2 block 3 start c98
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t29[FR2]

IR1 block 12 start c112

    IR2 block 2 start c112
    0: */DOUBLE-FLOAT t28[FR0] t29[FR2] => t30[FR0]
    1: +/DOUBLE-FLOAT t27[FR1] t30[FR0] => t31[FR0]

IR1 block 13 start c116

    IR2 block 1 start c116
    0: FSQRT t31[FR0] => t32[FR0]

IR1 block 14 start c122

    IR2 block 0 start c122
    0: MOVE-FROM-DOUBLE t32[FR0] => t33[EDX]
    1: RETURN-SINGLE t13[S0] t19[S1] t33[EDX]

IR1 block 1 start c123

    IR2 block NIL start c123



assembly code for #<SB-C:COMPONENT :NAME Z {1258F7E9}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t34[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:
L12:
L13:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t21[FR0] 
        FSTP    #<TN t21[FR0]>
        FLDD    DWORD PTR [EDX+1]

L14:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t22[FR1] 
        FSTP    #<TN t22[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t22[FR1]>

L15:

VOP */DOUBLE-FLOAT t21[FR0] t22[FR1] => t23[FR1] 
        FMUL-STI        #<TN t23[FR1]>
        WAIT

L16:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t24[FR0] 
        FSTP    #<TN t24[FR0]>
        FLDD    DWORD PTR [EDX+9]

L17:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t25[FR2] 
        FSTP    #<TN t25[FR2]>
        FLDD    DWORD PTR [EDX+9]
        FXCH    #<TN t25[FR2]>

L18:

VOP */DOUBLE-FLOAT t24[FR0] t25[FR2] => t26[FR0] 
        FMULD   #<TN t25[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t23[FR1] t26[FR0] => t27[FR1] 
        FADD-STI        #<TN t27[FR1]>
        WAIT

L19:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t28[FR0] 
        FSTP    #<TN t28[FR0]>
        FLDD    DWORD PTR [EDX+17]

L20:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t29[FR2] 
        FSTP    #<TN t29[FR2]>
        FLDD    DWORD PTR [EDX+17]
        FXCH    #<TN t29[FR2]>

L21:

VOP */DOUBLE-FLOAT t28[FR0] t29[FR2] => t30[FR0] 
        FMULD   #<TN t29[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t27[FR1] t30[FR0] => t31[FR0] 
        FADDD   #<TN t27[FR1]>
        WAIT

L22:

VOP FSQRT t31[FR0] => t32[FR0] 
L23:
        FSQRT
        WAIT

L24:

VOP MOVE-FROM-DOUBLE t32[FR0] => t33[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t33[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t33[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t33[EDX]>, DWORD PTR [+36]
        JMP     BE, L25
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L26
L25:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t33[EDX]>
        SUB     #<TN t33[EDX]>, 16
L26:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t33[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L27
        BREAK   9
L27:

VOP RETURN-SINGLE t13[S0] t19[S1] t33[EDX] 
L28:
        LEA     #<TN t34[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t35[EBP]>, #<TN t13[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME Z {1258F7E9}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DDD9             FSTPD FR1
;       29:       DD4201           FLDD [EDX+1]
;       2C:       D9C9             FXCH FR1
;       2E:       DCC9             FMUL-STI FR1
;       30:       9B               WAIT
;       31:       DDD8             FSTPD FR0
;       33:       DD4209           FLDD [EDX+9]
;       36:       DDDA             FSTPD FR2
;       38:       DD4209           FLDD [EDX+9]
;       3B:       D9CA             FXCH FR2
;       3D:       D8CA             FMULD FR2
;       3F:       9B               WAIT
;       40:       DCC1             FADD-STI FR1
;       42:       9B               WAIT
;       43:       DDD8             FSTPD FR0
;       45:       DD4211           FLDD [EDX+17]
;       48:       DDDA             FSTPD FR2
;       4A:       DD4211           FLDD [EDX+17]
;       4D:       D9CA             FXCH FR2
;       4F:       D8CA             FMULD FR2
;       51:       9B               WAIT
;       52:       D8C1             FADDD FR1
;       54:       9B               WAIT
;       55:       D9FA             FSQRT
;       57:       9B               WAIT
;       58:       64               BYTE #X64
;       59:       800D4800000004   OR BYTE PTR [#x48], 4
;       60:       BA10000000       MOV EDX, 16
;       65:       64               BYTE #X64
;       66:       031520000000     ADD EDX, [#x20]
;       6C:       64               BYTE #X64
;       6D:       3B1524000000     CMP EDX, [#x24]
;       73:       7607             JBE L1
;       75:       E800000000       CALL L0
;       7A: L0:   EB0A             JMP L2
;       7C: L1:   64               BYTE #X64
;       7D:       891520000000     MOV [#x20], EDX
;       83:       83EA10           SUB EDX, 16
;       86: L2:   C70216030000     MOV DWORD PTR [EDX], 790
;       8C:       8D5207           LEA EDX, [EDX+7]
;       8F:       DD5201           FSTD [EDX+1]
;       92:       64               BYTE #X64
;       93:       80354800000004   XOR BYTE PTR [#x48], 4
;       9A:       7403             JEQ L3
;       9C:       0F0B09           BREAK 9                    ; pending interrupt trap
;       9F: L3:   8D65F8           LEA ESP, [EBP-8]
;       A2:       F8               CLC
;       A3:       8B6DFC           MOV EBP, [EBP-4]
;       A6:       C20400           RET 4
;       A9:       90               NOP
;       AA:       90               NOP
;       AB:       90               NOP
;       AC:       90               NOP
;       AD:       90               NOP
;       AE:       90               NOP
;       AF:       90               NOP

;;;; component: DOT


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA UNITISE
  4>  5: #:G318
  6>  7: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
  8>     tail local combination v3 v7
end stack:
successors c9

IR1 block 1 start c9
start stack:
  9>     bind SB-C::CLAMBDA UNITISE
end stack:
successors c10

IR1 block 2 start c10
start stack:
 10>     entry NIL
 11> 12: SB-C::CLAMBDA *V
 13> 14: / {GLOBAL-FUNCTION}
 15> 16: '1.0d0
end stack:
successors c17

IR1 block 3 start c17
start stack:
 17>     entry NIL
end stack:
successors c18

IR1 block 4 start c18
start stack:
 18>     entry NIL
 19> 20: + {GLOBAL-FUNCTION}
 21> 22: + {GLOBAL-FUNCTION}
 23> 24: * {GLOBAL-FUNCTION}
end stack:
successors c25

IR1 block 5 start c25
start stack:
 25>     entry NIL
 26> 27: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 28> 29: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G345))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128A58C9}> {128A5889}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128A5939}> {128A58F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G345
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {128A59A9}> {128A5969}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128A63A1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-346
                                  #:N-COUNT-347) {128A6D41}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G345) {128A5BE1}> {128A5A81}>)
 30>     known combination v27 v29
 31> 32: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 33> 34: A
 35> 36: '0
 37> 38: known combination v32 v34 v36
end stack:
successors c39

IR1 block 6 start c39
start stack:
 39>     entry NIL
 40> 41: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 42> 43: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G336))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12895669}> {12895629}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128956D9}> {12895699}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G336
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12895749}> {12895709}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128964A9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-337
                                  #:N-COUNT-338) {12896EC9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G336) {12895981}> {12895821}>)
 44>     known combination v41 v43
 45> 46: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 47> 48: A
 49> 50: '0
 51> 52: known combination v46 v48 v50
end stack:
successors c53

IR1 block 7 start c53
start stack:
 53> 54: known combination v24 v38 v52
 55> 56: * {GLOBAL-FUNCTION}
end stack:
successors c57

IR1 block 8 start c57
start stack:
 57>     entry NIL
 58> 59: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 60> 61: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G348))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128A9379}> {128A9339}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128A93E9}> {128A93A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G348
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {128A9459}> {128A9419}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128A9E51}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-349
                                  #:N-COUNT-350) {128AA7F1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G348) {128A9691}> {128A9531}>)
 62>     known combination v59 v61
 63> 64: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 65> 66: A
 67> 68: '1
 69> 70: known combination v64 v66 v68
end stack:
successors c71

IR1 block 9 start c71
start stack:
 71>     entry NIL
 72> 73: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 74> 75: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G339))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1289BC19}> {1289BBD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1289BC89}> {1289BC49}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G339
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1289BCF9}> {1289BCB9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1289C6F1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-340
                                  #:N-COUNT-341) {1289D149}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G339) {1289BF31}> {1289BDD1}>)
 76>     known combination v73 v75
 77> 78: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 79> 80: A
 81> 82: '1
 83> 84: known combination v78 v80 v82
end stack:
successors c85

IR1 block 10 start c85
start stack:
 85> 86: known combination v56 v70 v84
 87> 88: known combination v22 v54 v86
 89> 90: * {GLOBAL-FUNCTION}
end stack:
successors c91

IR1 block 11 start c91
start stack:
 91>     entry NIL
 92> 93: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 94> 95: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G351))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128ACBF1}> {128ACBB1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128ACC61}> {128ACC21}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G351
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {128ACCD1}> {128ACC91}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128AD6C9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-352
                                  #:N-COUNT-353) {128AE069}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G351) {128ACF09}> {128ACDA9}>)
 96>     known combination v93 v95
 97> 98: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 99>100: A
101>102: '2
103>104: known combination v98 v100 v102
end stack:
successors c105

IR1 block 12 start c105
start stack:
105>     entry NIL
106>107: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
108>109: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G342))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128A0C31}> {128A0BF1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128A0CA1}> {128A0C61}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G342
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {128A0D11}> {128A0CD1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128A1789}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-343
                                  #:N-COUNT-344) {128A2129}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G342) {128A0F49}> {128A0DE9}>)
110>     known combination v107 v109
111>112: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
113>114: A
115>116: '2
117>118: known combination v112 v114 v116
end stack:
successors c119

IR1 block 13 start c119
start stack:
119>120: known combination v90 v104 v118
121>122: known combination v20 v88 v120
end stack:
successors c123

IR1 block 14 start c123
start stack:
123>124: cast v122 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (DOUBLE-FLOAT
                                                                            0.0d0)>]
125>126: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
127>128: known combination v126 v124
end stack:
successors c129

IR1 block 15 start c129
start stack:
129>130: known combination v14 v16 v128
131>     local combination v12 v130 <none>
132>     bind SB-C::CLAMBDA *V :KIND :LET
end stack:
successors c133

IR1 block 16 start c133
start stack:
133>     entry NIL
134>135: * {GLOBAL-FUNCTION}
136>137: S
end stack:
successors c138

IR1 block 17 start c138
start stack:
138>     entry NIL
139>140: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
141>142: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G354))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128B03F1}> {128B03B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128B0461}> {128B0421}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G354
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {128B04D1}> {128B0491}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128B0EC9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-355
                                  #:N-COUNT-356) {128B1871}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G354) {128B0709}> {128B05A9}>)
143>     known combination v140 v142
144>145: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
146>147: A
148>149: '0
150>151: known combination v145 v147 v149
end stack:
successors c152

IR1 block 18 start c152
start stack:
152>153: known combination v135 v137 v151
154>155: * {GLOBAL-FUNCTION}
156>157: S
end stack:
successors c158

IR1 block 19 start c158
start stack:
158>     entry NIL
159>160: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
161>162: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G357))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128B5341}> {128B5301}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128B53B1}> {128B5371}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G357
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {128B5421}> {128B53E1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128B5E19}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-358
                                  #:N-COUNT-359) {128B67B9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G357) {128B5659}> {128B54F9}>)
163>     known combination v160 v162
164>165: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
166>167: A
168>169: '1
170>171: known combination v165 v167 v169
end stack:
successors c172

IR1 block 20 start c172
start stack:
172>173: known combination v155 v157 v171
174>175: * {GLOBAL-FUNCTION}
176>177: S
end stack:
successors c178

IR1 block 21 start c178
start stack:
178>     entry NIL
179>180: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
181>182: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G360))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128B9BA9}> {128B9B69}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128B9C19}> {128B9BD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G360
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {128B9C89}> {128B9C49}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128BA681}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-361
                                  #:N-COUNT-362) {128BB029}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G360) {128B9EC1}> {128B9D61}>)
183>     known combination v180 v182
184>185: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
186>187: A
188>189: '2
190>191: known combination v185 v187 v189
end stack:
successors c192

IR1 block 22 start c192
start stack:
192>193: known combination v175 v177 v191
end stack:
successors c194

IR1 block 23 start c194
start stack:
194>     entry NIL
195>196: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
197>198: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
199>200: '214
201>202: '3
203>204: '6
205>206: known combination v198 v200 v202 v204
207>     local combination v196 v206
208>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
209>210: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
211>212: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G363))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128BF489}> {128BF449}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128BF4F9}> {128BF4B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G363
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {128BF569}> {128BF529}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {128C02A1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-364
                                  #:N-COUNT-365) {128C0C41}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G363) {128BF871}> {128BF711}>)
213>     known combination v210 v212
214>215: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
216>217: #:G1
218>219: '0
220>     known combination v215 v217 v219 v153
221>222: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
223>224: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G366))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128C3791}> {128C3751}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {128C3801}> {128C37C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G366 ..>)>)
                                                    IR1 block 24 start c225
                                                    start stack:
                                                    225>     return v226 SB-C::CLAMBDA UNITISE
                                                    end stack:
                                                    successors c227


;;;; IR2 component: DOT

entries:
    L1: UNITISE


TNs: 17 local, 10 temps, 4 constant, 4 env, 0 comp, 23 global.
Wired: 44, Unused: 0. 25 blocks, 133 global conflicts.

IR1 block 27 start c227

    IR2 block NIL start c227

IR1 block 0 start c1

    IR2 block 24 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G318!2[EDX]
    3: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    4: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    5: NOTE-ENVIRONMENT-START {#}
    6: MOVE #:G318!2[EDX] => A!11[EDX]
    7: MOVE t5[S0]>t12[EAX] => t13[S0]<t14[EAX]
    8: SAP-MOVE t9[S1]>t15[EAX] => t16[S1]<t17[EAX]

IR1 block 1 start c9

    IR2 block 23 start c9
    0: SAP-MOVE t16[S1]>t18[EAX] => t19[S1]<t20[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c10

    IR2 block 22 start c10

IR1 block 3 start c17

    IR2 block 21 start c17

IR1 block 4 start c18

    IR2 block 20 start c18

IR1 block 5 start c25

    IR2 block 19 start c25
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t21[FR0]

IR1 block 6 start c39

    IR2 block 18 start c39
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t22[FR1]

IR1 block 7 start c53

    IR2 block 17 start c53
    0: */DOUBLE-FLOAT t21[FR0] t22[FR1] => t23[FR1]

IR1 block 8 start c57

    IR2 block 16 start c57
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t24[FR0]

IR1 block 9 start c71

    IR2 block 15 start c71
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t25[FR2]

IR1 block 10 start c85

    IR2 block 14 start c85
    0: */DOUBLE-FLOAT t24[FR0] t25[FR2] => t26[FR0]
    1: +/DOUBLE-FLOAT t23[FR1] t26[FR0] => t27[FR1]

IR1 block 11 start c91

    IR2 block 13 start c91
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t28[FR0]

IR1 block 12 start c105

    IR2 block 12 start c105
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t29[FR2]

IR1 block 13 start c119

    IR2 block 11 start c119
    0: */DOUBLE-FLOAT t28[FR0] t29[FR2] => t30[FR0]
    1: +/DOUBLE-FLOAT t27[FR1] t30[FR0] => t31[FR0]

IR1 block 14 start c123

    IR2 block 10 start c123
    0: FSQRT t31[FR0] => t32[FR0]

IR1 block 15 start c129

    IR2 block 9 start c129
    0: //DOUBLE-FLOAT '1.0d0!33>t34[FR1] t32[FR0] => t35[FR1]

IR1 block 16 start c133

    IR2 block 8 start c133

IR1 block 17 start c138

    IR2 block 7 start c138
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t36[FR0] ..

assembly code for #<SB-C:COMPONENT :NAME DOT {12833251}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t37[ESP]>, DWORD PTR [EBP-32]
L6:

VOP NOTE-ENVIRONMENT-START {#} 
L7:

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:
L12:
L13:
L14:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t21[FR0] 
        FSTP    #<TN t21[FR0]>
        FLDD    DWORD PTR [EDX+1]

L15:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t22[FR1] 
        FSTP    #<TN t22[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t22[FR1]>

L16:

VOP */DOUBLE-FLOAT t21[FR0] t22[FR1] => t23[FR1] 
        FMUL-STI        #<TN t23[FR1]>
        WAIT

L17:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t24[FR0] 
        FSTP    #<TN t24[FR0]>
        FLDD    DWORD PTR [EDX+9]

L18:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t25[FR2] 
        FSTP    #<TN t25[FR2]>
        FLDD    DWORD PTR [EDX+9]
        FXCH    #<TN t25[FR2]>

L19:

VOP */DOUBLE-FLOAT t24[FR0] t25[FR2] => t26[FR0] 
        FMULD   #<TN t25[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t23[FR1] t26[FR0] => t27[FR1] 
        FADD-STI        #<TN t27[FR1]>
        WAIT

L20:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t28[FR0] 
        FSTP    #<TN t28[FR0]>
        FLDD    DWORD PTR [EDX+17]

L21:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t29[FR2] 
        FSTP    #<TN t29[FR2]>
        FLDD    DWORD PTR [EDX+17]
        FXCH    #<TN t29[FR2]>

L22:

VOP */DOUBLE-FLOAT t28[FR0] t29[FR2] => t30[FR0] 
        FMULD   #<TN t29[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t27[FR1] t30[FR0] => t31[FR0] 
        FADDD   #<TN t27[FR1]>
        WAIT

L23:

VOP FSQRT t31[FR0] => t32[FR0] 
L24:
        FSQRT
        WAIT

L25:

VOP //DOUBLE-FLOAT '1.0d0!33>t34[FR1] t32[FR0] => t35[FR1] 
        FSTP    #<TN t34[FR1]>
        FLD1
        FXCH    #<TN t34[FR1]>
        FDIV-STI        #<TN t35[FR1]>
        WAIT

L26:
L27:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {0} => t36[FR0] 
        FSTP    #<TN t36[FR0]>
        FLDD    DWORD PTR [EDX+1]

L28:

VOP */DOUBLE-FLOAT t35[FR1] t36[FR0] => t38[FR2] 
        FMULD   #<TN t35[FR1]>
        FST     #<TN t38[FR2]>

L29:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {1} => t39[FR0] 
        FSTP    #<TN t39[FR0]>
        FLDD    DWORD PTR [EDX+9]

L30:

VOP */DOUBLE-FLOAT t35[FR1] t39[FR0] => t40[FR3] 
        FMULD   #<TN t35[FR1]>
        FST     #<TN t40[FR3]>

L31:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT A!11[EDX] {2} => t41[FR0] 
        FSTP    #<TN t41[FR0]>
        FLDD    DWORD PTR [EDX+17]

L32:

VOP */DOUBLE-FLOAT t35[FR1] t41[FR0] => t42[FR0] 
        FMULD   #<TN t35[FR1]>
        WAIT

L33:

VOP ALLOCATE-VECTOR-ON-HEAP '214!43>t44[ECX] '3!45>t46[EDX] '6!47>t48[EBX]
                            => t49[EAX] 
        MOV     #<TN t44[ECX]>, 214
        MOV     #<TN t46[EDX]>, 12
        MOV     #<TN t48[EBX]>, 24
        LEA     #<TN t49[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t49[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t49[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t49[EAX]>, DWORD PTR [+36]
        JMP     BE, L34
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L35
L34:
        FS-SEGMENT-PREFIX
        XOR     #<TN t49[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t49[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t49[EAX]>, DWORD PTR [+32]
L35:
        LEA     #<TN t49[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t44[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t46[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L36
        BREAK   9
L36:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[EAX] t38[FR2]
                                                {0}
                                                => t50[FR2] 
        FXCH    #<TN t38[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t38[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[EAX] t40[FR3]
                                                {1}
                                                => t51[FR3] 
        FXCH    #<TN t40[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t40[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[EAX] t42[FR0]
                                                {2}
                                                => t52[FR0] 
        FSTD    DWORD PTR [EAX+17]

L37:

VOP MOVE t49[EAX] => t53[EDX] 
        MOV     #<TN t53[EDX]>, #<TN t49[EAX]>

VOP RETURN-SINGLE t13[S0] t19[S1] t53[EDX] 
L38:
        LEA     #<TN t37[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t54[EBP]>, #<TN t13[S0]>
        RET     4

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME DOT {12833251}>

; 00000000:       2A06             SUB AL, [ESI]
;       02:       0000             ADD [EAX], AL
;       04:       0000             ADD [EAX], AL
;       06:       0000             ADD [EAX], AL
;       08:       0000             ADD [EAX], AL
;       0A:       0000             ADD [EAX], AL
;       0C:       0000             ADD [EAX], AL
;       0E:       0000             ADD [EAX], AL
;       10:       0000             ADD [EAX], AL
;       12:       0000             ADD [EAX], AL
;       14:       0000             ADD [EAX], AL
;       16:       0000             ADD [EAX], AL
;       18:       0000             ADD [EAX], AL
;       1A:       0000             ADD [EAX], AL
;       1C:       8F45F8           POP DWORD PTR [EBP-8]
;       1F:       8D65E0           LEA ESP, [EBP-32]
;       22:       DDD8             FSTPD FR0
;       24:       DD4201           FLDD [EDX+1]
;       27:       DDD9             FSTPD FR1
;       29:       DD4201           FLDD [EDX+1]
;       2C:       D9C9             FXCH FR1
;       2E:       DCC9             FMUL-STI FR1
;       30:       9B               WAIT
;       31:       DDD8             FSTPD FR0
;       33:       DD4209           FLDD [EDX+9]
;       36:       DDDA             FSTPD FR2
;       38:       DD4209           FLDD [EDX+9]
;       3B:       D9CA             FXCH FR2
;       3D:       D8CA             FMULD FR2
;       3F:       9B               WAIT
;       40:       DCC1             FADD-STI FR1
;       42:       9B               WAIT
;       43:       DDD8             FSTPD FR0
;       45:       DD4211           FLDD [EDX+17]
;       48:       DDDA             FSTPD FR2
;       4A:       DD4211           FLDD [EDX+17]
;       4D:       D9CA             FXCH FR2
;       4F:       D8CA             FMULD FR2
;       51:       9B               WAIT
;       52:       D8C1             FADDD FR1
;       54:       9B               WAIT
;       55:       D9FA             FSQRT
;       57:       9B               WAIT
;       58:       DDD9             FSTPD FR1
;       5A:       D9E8             FLD1
;       5C:       D9C9             FXCH FR1
;       5E:       DCF9             FDIV-STI FR1
;       60:       9B               WAIT
;       61:       DDD8             FSTPD FR0
;       63:       DD4201           FLDD [EDX+1]
;       66:       D8C9             FMULD FR1
;       68:       DDD2             FSTD FR2
;       6A:       DDD8             FSTPD FR0
;       6C:       DD4209           FLDD [EDX+9]
;       6F:       D8C9             FMULD FR1
;       71:       DDD3             FSTD FR3
;       73:       DDD8             FSTPD FR0
;       75:       DD4211           FLDD [EDX+17]
;       78:       D8C9             FMULD FR1
;       7A:       9B               WAIT
;       7B:       B9D6000000       MOV ECX, 214
;       80:       BA0C000000       MOV EDX, 12
;       85:       BB18000000       MOV EBX, 24
;       8A:       8D430F           LEA EAX, [EBX+15]
;       8D:       83E0F8           AND EAX, -8
;       90:       64               BYTE #X64
;       91:       800D4800000004   OR BYTE PTR [#x48], 4
;       98:       64               BYTE #X64
;       99:       030520000000     ADD EAX, [#x20]
;       9F:       64               BYTE #X64
;       A0:       3B0524000000     CMP EAX, [#x24]
;       A6:       7607             JBE L1
;       A8:       E800000000       CALL L0
;       AD: L0:   EB15             JMP L2
;       AF: L1:   64               BYTE #X64
;       B0:       330520000000     XOR EAX, [#x20]
;       B6:       64               BYTE #X64
;       B7:       310520000000     XOR [#x20], EAX
;       BD:       64               BYTE #X64
;       BE:       330520000000     XOR EAX, [#x20]
;       C4: L2:   8D4007           LEA EAX, [EAX+7]
;       C7:       8948F9           MOV [EAX-7], ECX
;       CA:       8950FD           MOV [EAX-3], EDX
;       CD:       64               BYTE #X64
;       CE:       80354800000004   XOR BYTE PTR [#x48], 4
;       D5:       7403             JEQ L3
;       D7:       0F0B09           BREAK 9                    ; pending interrupt trap
;       DA: L3:   D9CA             FXCH FR2
;       DC:       DD5001           FSTD [EAX+1]
;       DF:       D9CA             FXCH FR2
;       E1:       D9CB             FXCH FR3
;       E3:       DD5009           FSTD [EAX+9]
;       E6:       D9CB             FXCH FR3
;       E8:       DD5011           FSTD [EAX+17]
;       EB:       8BD0             MOV EDX, EAX
;       ED:       8D65F8           LEA ESP, [EBP-8]
;       F0:       F8               CLC
;       F1:       8B6DFC           MOV EBP, [EBP-4]
;       F4:       C20400           RET 4
;       F7:       90               NOP

;;;; component: "DEFSTRUCT RAY"


IR1 block 9 start c1
start stack:
  1>     bind SB-C::CLAMBDA (FLET #:CLEANUP-FUN-382) :KIND :CLEANUP
end stack:
successors c2

IR1 block 10 start c2
start stack:
  2>     entry NIL
  3>  4: #:TOPMOST381
  5>     if v4 c6 c7
end stack:
successors c7 c6

IR1 block 13 start c6
start stack:
  6>  8: ':INVALID
  9>     set SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL} v8
end stack:
successors c7

IR1 block 11 start c7
start stack:
  7> 10: 'NIL
end stack:
successors c11

IR1 block 12 start c11
start stack:
 11>     return v10 SB-C::CLAMBDA (FLET #:CLEANUP-FUN-382)
end stack:
successors c12

IR1 block 0 start c13
start stack:
 13>     bind SB-C::CLAMBDA (SB-C::TOP-LEVEL-FORM
                             (LET ((#:TOPMOST381 "#<...>" . "#<...>"))
                               (WHEN "#<...>" . "#<...>")
                               ("#<...>" . "#<...>"))) :KIND :TOPLEVEL
 14> 15: SB-C::CLAMBDA (LET ((#:TOPMOST381 NIL))
                         )
 16> 17: 'NIL
 18>     local combination v15 v17
 19>     bind SB-C::CLAMBDA (LET ((#:TOPMOST381 NIL))
                              ) :KIND :LET
 20> 21: EQ {GLOBAL-FUNCTION}
 22> 23: ':INVALID
 24> 25: SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL}
 26> 27: known combination v21 v23 v25
 28>     if v27 c29 c30
end stack:
successors c30 c29

IR1 block 6 start c29
start stack:
 29> 31: 'NIL
 32>     set SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL} v31
 33> 34: 'T
 35>     set #:TOPMOST381 v34
end stack:
successors c30

IR1 block 1 start c30
start stack:
 30> 36: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 37> 38: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME #:CLEANUP-FUN-382
             :%DEBUG-NAME (FLET #:CLEANUP-FUN-382)
             :KIND :CLEANUP
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS NIL {117EA0B1}>)
 39>     known combination v36 v38
end stack:
successors c40

IR1 block 2 start c40
start stack:
 40>     entry NIL
 41> 42: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 43> 44: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (#:NEXT385) (#:START386) (#:COUNT387)
                               &REST #:G388))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:NEXT385
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {117EB569}> {117EB529}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:START386
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {117EB5D9}> {117EB599}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:COUNT387
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {117EB649}> {117EB609}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G388
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {117EB6B9}> {117EB679}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 3
             :ENTRY-POINTS ((NIL . #) (NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:NEXT385 #:START386
                                     #:COUNT387) {117EC5C1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:NEXT385 #:START386 #:COUNT387
                                  #:N-CONTEXT-389 #:N-COUNT-390) {117ED0C1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:NEXT385 #:START386 #:COUNT387
                                  #:G388) {117EB8A9}> {117EB721}>)
 45>     known combination v42 v44
 46> 47: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
end stack:
successors c48

IR1 block 3 start c48
start stack:
 48>     entry NIL
 49> 50: SB-C::%UNWIND-PROTECT {GLOBAL-FUNCTION}
 51> 52: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 53> 54: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (SB-C::ESCAPE-FUN #:EXIT-TAG-384)
             :KIND :DELETED
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS NIL {117EE781}>)
 55>     known combination v52 v54
 56> 57: '#<SB-C::NLX-INFO
            :BLOCK #<SB-C::CBLOCK 8 :START c58 {117EE129}>
            :TARGET #<SB-C::CBLOCK 7 :START c59 {117F25B9}>
            :INFO #<SB-C::IR2-NLX-INFO
                    :HOME NIL
                    :SAVE-SP #<SB-C:TN t1[S15]>
                    :DYNAMIC-STATE (#<SB-C:TN t2[S14]> #<SB-C:TN t3[S13]>
                                    #<SB-C:TN t4[S12]>)> {117F2549}>
 60> 61: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-382)
 62>     known combination v50 v57 v61
 63> 64: SB-C::%CLEANUP-POINT {GLOBAL-FUNCTION}
 65>     known combination v64
 66> 67: SB-KERNEL:ASSERT-SYMBOL-HOME-PACKAGE-UNLOCKED {GLOBAL-FUNCTION}
 68> 69: 'RAY
 70> 71: '"defining ~A as a structure"
 72>     full combination v67 v69 v71
end stack:
successors c73

IR1 block 4 start c73
start stack:
 73> 74: SB-C:%UNWIND-PROTECT-BREAKUP {GLOBAL-FUNCTION}
 75>     known combination v74
 76> 77: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-382)
 78>     local combination v77
end stack:
successors c79

IR1 block 5 start c79
start stack:
 79> 80: 'NIL
 81>     return v80 SB-C::CLAMBDA (SB-C::TOP-LEVEL-FORM
                                   (LET ((#:TOPMOST381 "#<...>" . "#<...>"))
                                     (WHEN "#<...>" . "#<...>")
                                     ("#<...>" . "#<...>")))
end stack:
successors c12

IR1 block 7 start c59
start stack:
 59> 82: SB-C::%NLX-ENTRY {GLOBAL-FUNCTION}
 83> 84: '#<SB-C::NLX-INFO
            :BLOCK #<SB-C::CBLOCK 8 :START c58 {117EE129}>
            :TARGET #<SB-C::CBLOCK 7 :START c59 {117F25B9}>
            :INFO #<SB-C::IR2-NLX-INFO
                    :HOME NIL
                    :SAVE-SP #<SB-C:TN t1[S15]>
                    :DYNAMIC-STATE (#<SB-C:TN t2[S14]> #<SB-C:TN t3[S13]>
                                    #<SB-C:TN t4[S12]>)> {117F2549}>
 85> 86: known combination v82 v84
end stack:
successors c58

IR1 block 8 start c58
start stack:
 58>     local mv-combination v47 v86
 87>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 88> 89: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-382)
 90>     local combination v89
 91> 92: SB-C:%CONTINUE-UNWIND {GLOBAL-FUNCTION}
 93> 94: #:NEXT385
 95> 96: #:START386
 97> 98: #:COUNT387
 99>     known combination v92 v94 v96 v98
end stack:
successors c12


;;;; IR2 component: "DEFSTRUCT RAY"

entries:
    L1: (SB-C::TOP-LEVEL-FORM
         (LET ((#:TOPMOST381 "#<...>" . "#<...>"))
           (WHEN "#<...>" . "#<...>")
           ("#<...>" . "#<...>")))


TNs: 34 local, 18 temps, 8 constant, 10 env, 0 comp, 8 global.
Wired: 52, Unused: 0. 14 blocks, 100 global conflicts.

IR1 block 16 start c12

    IR2 block NIL start c12

IR1 block 0 start c13

    IR2 block 8 start c13
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    3: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    4: NOTE-ENVIRONMENT-START {#}
    5: MAKE-VALUE-CELL 'NIL!13>t14[ECX] => #:TOPMOST381!15[S11]<t16[EAX]
    6: FAST-SYMBOL-VALUE 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t18[ECX]
                         => t19[EAX]
    7: IF-EQ ':INVALID!20[Const7] t19[EAX] {# NIL}

IR1 block 1 start c30

    IR2 block 6 start c30
    L2:

IR1 block 2 start c40

    IR2 block 5 start c40

IR1 block 3 start c48

    IR2 block 4 start c48
    0: CURRENT-BINDING-POINTER => t2[S14]<t21[EAX]
    1: SAVE-DYNAMIC-STATE => t3[S13]<t22[EAX] t4[S12]<t23[ECX]
    2: CURRENT-STACK-POINTER => t1[S15]
    3: MAKE-UNWIND-BLOCK t24[S5] {#} => t25[ECX]
    4: SET-UNWIND-PROTECT t24[S5]
    5: ALLOCATE-FULL-CALL-FRAME {2} => t26[EBX]
    6: MOVE-ARG 'RAY!27[Const8]>t28[EDX] t26[EBX] => t29[EDX]
    7: MOVE-ARG '"defining ~A as a structure"!30[Const9]>t31[EDI] t26[EBX]
                => t32[EDI]
    8: CALL-NAMED t26[EBX] t33[Const10]>t34[EAX] t29[EDX] t32[EDI] {# 2 0 NIL}

IR1 block 4 start c73

    IR2 block 3 start c73
    0: UNLINK-UNWIND-PROTECT
    1: CURRENT-FP => t35[EDX]
    2: ALLOCATE-FRAME {#} => t36[ECX] t37[IGNORE-ME]
    3: MOVE-ARG #:TOPMOST381!15[S11]>t38[EAX] t36[ECX] => t39[EAX]
    4: MOVE-ARG t35[EDX] t36[ECX] => t40[S0]
    5: KNOWN-CALL-LOCAL t36[ECX] t37[IGNORE-ME] t39[EAX] t40[S0]
                        {# # #}
                        => t41[EAX]

IR1 block 5 start c79

    IR2 block 2 start c79
    0: MOVE 'NIL!13 => t42[EDX]
    1: RETURN-SINGLE t7[S0] t11[S1] t42[EDX]

IR1 block 6 start c29

    IR2 block 7 start c29
    L3:
    0: SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t43[ECX]
           'NIL!13>t44[EDX]

    1: VALUE-CELL-SET #:TOPMOST381!15[S11]>t45[EAX] 'T!46>t47[ECX]
    2: BRANCH {#}

IR1 block 7 start c59

    IR2 block 1 start c59
    0: UWP-ENTRY {#} => t48[EDX] t49[EBX] t50[ECX]
    1: MOVE t48[EDX] => t51[S2]<t52[EDX]
    2: MOVE t49[EBX] => t53[S3]<t54[EBX]
    3: MOVE t50[ECX] => t55[S4]<t56[ECX]
    4: RESTORE-DYNAMIC-STATE t3[S13]>t57[ECX] t4[S12]>t58[EDX]
    5: UNBIND-TO-HERE t2[S14]>t59[ESI]

IR1 block 8 start c58

    IR2 block 0 start c58
    0: CURRENT-FP => t60[EDX]
    1: ALLOCATE-FRAME {#} => t61[ECX] t62[IGNORE-ME]
    2: MOVE-ARG #:TOPMOST381!15[S11]>t63[EAX] t61[ECX] => t39[EAX]
    3: MOVE-ARG t60[EDX] t61[ECX] => t40[S0]
    4: KNOWN-CALL-LOCAL t61[ECX] t62[IGNORE-ME] t39[EAX] t40[S0]
                        {# # #}
                        => t41[EAX]
    5: UNWIND t51[S2]>t64[EAX] t53[S3]>t65[EBX] t55[S4]>t66[ECX]

IR1 block 9 start c1

    IR2 block 13 start c1
    L4:
    0: SAP-MOVE t67[S1]>t68[ECX] => t69[S1]<t70[ECX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 10 start c2

    IR2 block 12 start c2 ..

assembly code for #<SB-C:COMPONENT :NAME "DEFSTRUCT RAY" {117F0731}>

in the elsewhere segment:
L5:
in the regular segment:
L6:
in the elsewhere segment:
L7:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L8:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-64]
L9:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

VOP MAKE-VALUE-CELL 'NIL!13>t14[ECX] => #:TOPMOST381!15[S11]<t16[EAX] 
        MOV     #<TN t14[ECX]>, 134217739
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t16[EAX]>, 8
        FS-SEGMENT-PREFIX
        ADD     #<TN t16[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t16[EAX]>, DWORD PTR [+36]
        JMP     BE, L11
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L12
L11:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t16[EAX]>
        SUB     #<TN t16[EAX]>, 8
L12:
        MOV     DWORD PTR [EAX+0], 314
        LEA     #<TN t16[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-3], #<TN t14[ECX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L13
        BREAK   9
L13:
        MOV     #<TN #:TOPMOST381!15[S11]>, #<TN t16[EAX]>

VOP FAST-SYMBOL-VALUE 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t18[ECX]
                      => t19[EAX] 
        MOV     #<TN t18[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t19[EAX]>, DWORD PTR [ECX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t19[EAX]>, DWORD PTR [EAX+0]
        CMP     #<TN t19[EAX]>, 90
        JMP     NE, L14
        MOV     #<TN t19[EAX]>, DWORD PTR [ECX-3]
L14:

VOP IF-EQ ':INVALID!20[Const7] t19[EAX] {# NIL} 
        CMP     #<TN ':INVALID!20[Const7]>, #<TN t19[EAX]>
        JMP     E, L3

L2:
L15:
L16:

VOP CURRENT-BINDING-POINTER => t2[S14]<t21[EAX] 
        FS-SEGMENT-PREFIX
        MOV     #<TN t21[EAX]>, DWORD PTR [+12]
        MOV     #<TN t2[S14]>, #<TN t21[EAX]>

VOP SAVE-DYNAMIC-STATE => t3[S13]<t22[EAX] t4[S12]<t23[ECX] 
        MOV     #<TN t22[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     #<TN t22[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t23[ECX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     #<TN t23[ECX]>, DWORD PTR [ECX+0]
        MOV     #<TN t3[S13]>, #<TN t22[EAX]>
        MOV     #<TN t4[S12]>, #<TN t23[ECX]>

VOP CURRENT-STACK-POINTER => t1[S15] 
        MOV     #<TN t1[S15]>, #<TN t71[ESP]>

VOP MAKE-UNWIND-BLOCK t24[S5] {#} => t25[ECX] 
        LEA     #<TN t25[ECX]>, DWORD PTR [EBP-44]
        MOV     #<TN t72[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t72[EAX]>, DWORD PTR [EAX+0]
        MOV     DWORD PTR [ECX+0], #<TN t72[EAX]>
        MOV     DWORD PTR [ECX+4], #<TN t73[EBP]>
        MOV     DWORD PTR [ECX+8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L17)

VOP SET-UNWIND-PROTECT t24[S5] 
        LEA     #<TN t74[EAX]>, DWORD PTR [EBP-44]
        MOV     #<TN t75[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t74[EAX]>

VOP ALLOCATE-FULL-CALL-FRAME {2} => t26[EBX] 
        MOV     #<TN t26[EBX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 12

VOP MOVE-ARG 'RAY!27[Const8]>t28[EDX] t26[EBX] => t29[EDX] 
        MOV     #<TN t28[EDX]>, #<TN 'RAY!27[Const8]>

VOP MOVE-ARG '"defining ~A as a structure"!30[Const9]>t31[EDI] t26[EBX]
             => t32[EDI] 
        MOV     #<TN t31[EDI]>, #<TN '"defining ~A as a structure"!30[Const9]>

VOP CALL-NAMED t26[EBX] t33[Const10]>t34[EAX] t29[EDX] t32[EDI] {# 2 0 NIL} 
        MOV     #<TN t34[EAX]>, #<TN t33[Const10]>
L18:
        MOV     #<TN t76[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t73[EBP]>
        MOV     #<TN t73[EBP]>, #<TN t26[EBX]>
L19:
L20:
        CALL    DWORD PTR [EAX+5]
L21:
        JMP     NC, L22
        MOV     #<TN t71[ESP]>, #<TN t77[EBX]>
L22:
L23:

L24:

VOP UNLINK-UNWIND-PROTECT 
        MOV     #<TN t78[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t78[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t78[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t79[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t78[EAX]>

VOP CURRENT-FP => t35[EDX] 
        MOV     #<TN t35[EDX]>, #<TN t73[EBP]>

VOP ALLOCATE-FRAME {#} => t36[ECX] t37[IGNORE-ME] 
        MOV     #<TN t36[ECX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 64

VOP MOVE-ARG #:TOPMOST381!15[S11]>t38[EAX] t36[ECX] => t39[EAX] 
        MOV     #<TN t39[EAX]>, #<TN #:TOPMOST381!15[S11]>

VOP MOVE-ARG t35[EDX] t36[ECX] => t40[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t35[EDX]>

VOP KNOWN-CALL-LOCAL t36[ECX] t37[IGNORE-ME] t39[EAX] t40[S0]
                     {# # #}
                     => t41[EAX] 
L25:
        MOV     #<TN t73[EBP]>, #<TN t36[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L26)
L27:
        JMP     L4
L26:
L28:
L29:

L30:

VOP MOVE 'NIL!13 => t42[EDX] 
        MOV     #<TN t42[EDX]>, 134217739

VOP RETURN-SINGLE t7[S0] t11[S1] t42[EDX] 
L31:
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t73[EBP]>, #<TN t7[S0]>
        RET     4

L3:

VOP SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t43[ECX] 'NIL!13>t44[EDX] 
        MOV     #<TN t43[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t44[EDX]>, 134217739
        MOV     #<TN t80[EAX]>, DWORD PTR [ECX+17]
        OR      #<TN t80[EAX]>, #<TN t80[EAX]>
        JMP     Z, L32
        FS-SEGMENT-PREFIX
        CMP     DWORD PTR [EAX+0], 90
        JMP     Z, L32
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t44[EDX]>
        JMP     L33
L32:
        MOV     DWORD PTR [ECX-3], #<TN t44[EDX]>
L33:

VOP VALUE-CELL-SET #:TOPMOST381!15[S11]>t45[EAX] 'T!46>t47[ECX] 
        MOV     #<TN t45[EAX]>, #<TN #:TOPMOST381!15[S11]>
        MOV     #<TN t47[ECX]>, 134217767
        MOV     DWORD PTR [EAX-3], #<TN t47[ECX]>

VOP BRANCH {#} 
        JMP     L2

L34:

VOP UWP-ENTRY {#} => t48[EDX] t49[EBX] t50[ECX] 
L17:
L35:

VOP MOVE t48[EDX] => t51[S2]<t52[EDX] 
        MOV     #<TN t51[S2]>, #<TN t48[EDX]>

VOP MOVE t49[EBX] => t53[S3]<t54[EBX] 
        MOV     #<TN t53[S3]>, #<TN t49[EBX]>

VOP MOVE t50[ECX] => t55[S4]<t56[ECX] 
        MOV     #<TN t55[S4]>, #<TN t50[ECX]>

VOP RESTORE-DYNAMIC-STATE t3[S13]>t57[ECX] t4[S12]>t58[EDX] 
        MOV     #<TN t57[ECX]>, #<TN t3[S13]>
        MOV     #<TN t58[EDX]>, #<TN t4[S12]>
        MOV     #<TN t81[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t57[ECX]>
        MOV     #<TN t81[EAX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t58[EDX]>

VOP UNBIND-TO-HERE t2[S14]>t59[ESI] 
        MOV     #<TN t59[ESI]>, #<TN t2[S14]>
        FS-SEGMENT-PREFIX
        MOV     #<TN t82[EDX]>, DWORD PTR [+12]
        CMP     #<TN t59[ESI]>, #<TN t82[EDX]>
        JMP     E, L36
L37:
        MOV     #<TN t83[EAX]>, DWORD PTR [EDX-4]
        OR      #<TN t83[EAX]>, #<TN t83[EAX]>
        JMP     Z, L38
        MOV     #<TN t84[ECX]>, DWORD PTR [EDX-8]
        MOV     #<TN t85[EBX]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EBX+0], #<TN t84[ECX]>
        MOV     DWORD PTR [EDX-4], 0
L38:
        MOV     DWORD PTR [EDX-8], 0
        SUB     #<TN t82[EDX]>, 8
        CMP     #<TN t59[ESI]>, #<TN t82[EDX]>
        JMP     NE, L37
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+12], #<TN t82[EDX]>
L36:

L39:

VOP CURRENT-FP => t60[EDX] 
        MOV     #<TN t60[EDX]>, #<TN t73[EBP]>

VOP ALLOCATE-FRAME {#} => t61[ECX] t62[IGNORE-ME] 
        MOV     #<TN t61[ECX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 64

VOP MOVE-ARG #:TOPMOST381!15[S11]>t63[EAX] t61[ECX] => t39[EAX] 
        MOV     #<TN t39[EAX]>, #<TN #:TOPMOST381!15[S11]>

VOP MOVE-ARG t60[EDX] t61[ECX] => t40[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t60[EDX]>

VOP KNOWN-CALL-LOCAL t61[ECX] t62[IGNORE-ME] t39[EAX] t40[S0]
                     {# # #}
                     => t41[EAX] 
L40:
        MOV     #<TN t73[EBP]>, #<TN t61[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L41)
L42:
        JMP     L4
L41:
L43:
L44:

VOP UNWIND t51[S2]>t64[EAX] t53[S3]>t65[EBX] t55[S4]>t66[ECX] 
        MOV     #<TN t64[EAX]>, #<TN t51[S2]>
        MOV     #<TN t65[EBX]>, #<TN t53[S3]>
        MOV     #<TN t66[ECX]>, #<TN t55[S4]>
        CALL    #S(SB-C:FIXUP :NAME UNWIND :FLAVOR ASSEMBLY-ROUTINE :OFFSET NIL)

L4:
in the elsewhere segment:
L45:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L46:

L47:

VOP VALUE-CELL-REF t39[EAX] => t86[EAX] 
        MOV     #<TN t86[EAX]>, DWORD PTR [EAX-3]

VOP IF-EQ t86[EAX] 'NIL!87 {# T} 
        CMP     #<TN t86[EAX]>, 134217739
        JMP     NE, L48

L49:
L50:

VOP MOVE-ARG 'NIL!13 t40[S0]>t88[EAX] => t41[EAX] 
        MOV     #<TN t41[EAX]>, 134217739

VOP KNOWN-RETURN t40[S0] t69[S1] t41[EAX] {#} 
L51:
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t73[EBP]>, #<TN t40[S0]>
        RET     4
L52:

L48:

VOP SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t89[ECX]
        ':INVALID!20[Const7]>t90[EDX]
        
        MOV     #<TN t89[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t90[EDX]>, #<TN ':INVALID!20[Const7]>
        MOV     #<TN t91[EAX]>, DWORD PTR [ECX+17]
        OR      #<TN t91[EAX]>, #<TN t91[EAX]>
        JMP     Z, L53
        FS-SEGMENT-PREFIX
        CMP     DWORD PTR [EAX+0], 90
        JMP     Z, L53
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t90[EDX]>
        JMP     L54
L53:
        MOV     DWORD PTR [ECX-3], #<TN t90[EDX]>
L54:

VOP BRANCH {#} 
        JMP     L49

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME "DEFSTRUCT RAY" {117F0731}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;      003:       0000             ADD [EAX], AL
;      005:       0000             ADD [EAX], AL
;      007:       0000             ADD [EAX], AL
;      009:       0000             ADD [EAX], AL
;      00B:       0000             ADD [EAX], AL
;      00D:       0000             ADD [EAX], AL
;      00F:       0000             ADD [EAX], AL
;      011:       0000             ADD [EAX], AL
;      013:       0000             ADD [EAX], AL
;      015:       0000             ADD [EAX], AL
;      017:       0000             ADD [EAX], AL
;      019:       0000             ADD [EAX], AL
;      01B:       008F45F88D65     ADD [EDI+1703802949], CL
;      021:       C0B90B00000864   SAR BYTE PTR [ECX+134217739], 100
;      028:       800D4800000004   OR BYTE PTR [#x48], 4
;      02F:       B808000000       MOV EAX, 8
;      034:       64               BYTE #X64
;      035:       030520000000     ADD EAX, [#x20]
;      03B:       64               BYTE #X64
;      03C:       3B0524000000     CMP EAX, [#x24]
;      042:       7607             JBE L1
;      044:       E800000000       CALL L0
;      049: L0:   EB0A             JMP L2
;      04B: L1:   64               BYTE #X64
;      04C:       890520000000     MOV [#x20], EAX
;      052:       83E808           SUB EAX, 8
;      055: L2:   C7003A010000     MOV DWORD PTR [EAX], 314
;      05B:       8D4007           LEA EAX, [EAX+7]
;      05E:       8948FD           MOV [EAX-3], ECX
;      061:       64               BYTE #X64
;      062:       80354800000004   XOR BYTE PTR [#x48], 4
;      069:       7403             JEQ L3
;      06B:       0F0B09           BREAK 9                    ; pending interrupt trap
;      06E: L3:   8945D0           MOV [EBP-48], EAX
;      071:       8B0D11000000     MOV ECX, [#x11]
;      077:       8B4111           MOV EAX, [ECX+17]
;      07A:       64               BYTE #X64
;      07B:       8B00             MOV EAX, [EAX]
;      07D:       83F85A           CMP EAX, 90
;      080:       7503             JNE L4
;      082:       8B41FD           MOV EAX, [ECX-3]
;      085: L4:   390515000000     CMP [#x15], EAX
;      08B:       0F84AF000000     JEQ L7
;      091: L5:   64               BYTE #X64
;      092:       8B050C000000     MOV EAX, [#xC]
;      098:       8945C4           MOV [EBP-60], EAX
;      09B:       8B05D8000008     MOV EAX, [#x80000D8]
;      0A1:       64               BYTE #X64
;      0A2:       8B00             MOV EAX, [EAX]
;      0A4:       8B0D18040008     MOV ECX, [#x8000418]
;      0AA:       64               BYTE #X64
;      0AB:       8B09             MOV ECX, [ECX]
;      0AD:       8945C8           MOV [EBP-56], EAX
;      0B0:       894DCC           MOV [EBP-52], ECX
;      0B3:       8965C0           MOV [EBP-64], ESP
;      0B6:       8D4DD4           LEA ECX, [EBP-44]
;      0B9:       8B05F8000008     MOV EAX, [#x80000F8]
;      0BF:       64               BYTE #X64
;      0C0:       8B00             MOV EAX, [EAX]
;      0C2:       8901             MOV [ECX], EAX
;      0C4:       896904           MOV [ECX+4], EBP
;      0C7:       C7410899010000   MOV DWORD PTR [ECX+8], 409
;      0CE:       8D45D4           LEA EAX, [EBP-44]
;      0D1:       8B0DF8000008     MOV ECX, [#x80000F8]
;      0D7:       64               BYTE #X64
;      0D8:       8901             MOV [ECX], EAX
;      0DA:       8BDC             MOV EBX, ESP
;      0DC:       83EC0C           SUB ESP, 12
;      0DF:       8B1519000000     MOV EDX, [#x19]
;      0E5:       8B3D1D000000     MOV EDI, [#x1D]
;      0EB:       8B0521000000     MOV EAX, [#x21]
;      0F1:       B908000000       MOV ECX, 8
;      0F6:       896BFC           MOV [EBX-4], EBP
;      0F9:       8BEB             MOV EBP, EBX
;      0FB:       FF5005           CALL DWORD PTR [EAX+5]
;      0FE:       7302             JNB L6
;      100:       8BE3             MOV ESP, EBX
;      102: L6:   8B05F8000008     MOV EAX, [#x80000F8]
;      108:       64               BYTE #X64
;      109:       8B00             MOV EAX, [EAX]
;      10B:       8B00             MOV EAX, [EAX]
;      10D:       8B0DF8000008     MOV ECX, [#x80000F8]
;      113:       64               BYTE #X64
;      114:       8901             MOV [ECX], EAX
;      116:       8BD5             MOV EDX, EBP
;      118:       8BCC             MOV ECX, ESP
;      11A:       83EC40           SUB ESP, 64
;      11D:       8B45D0           MOV EAX, [EBP-48]
;      120:       8951FC           MOV [ECX-4], EDX
;      123:       8BE9             MOV EBP, ECX
;      125:       C745F85A010000   MOV DWORD PTR [EBP-8], 346
;      12C:       E9C0000000       JMP L13
;      131:       BA0B000008       MOV EDX, 134217739
;      136:       8D65F8           LEA ESP, [EBP-8]
;      139:       F8               CLC
;      13A:       8B6DFC           MOV EBP, [EBP-4]
;      13D:       C20400           RET 4
;      140: L7:   8B0D11000000     MOV ECX, [#x11]
;      146:       BA0B000008       MOV EDX, 134217739
;      14B:       8B4111           MOV EAX, [ECX+17]
;      14E:       09C0             OR EAX, EAX
;      150:       740B             JEQ L8
;      152:       64               BYTE #X64
;      153:       83385A           CMP DWORD PTR [EAX], 90
;      156:       7405             JEQ L8
;      158:       64               BYTE #X64
;      159:       8910             MOV [EAX], EDX
;      15B:       EB03             JMP L9
;      15D: L8:   8951FD           MOV [ECX-3], EDX
;      160: L9:   8B45D0           MOV EAX, [EBP-48]
;      163:       B927000008       MOV ECX, 134217767
;      168:       8948FD           MOV [EAX-3], ECX
;      16B:       E921FFFFFF       JMP L5
;      170:       8955F4           MOV [EBP-12], EDX
;      173:       895DF0           MOV [EBP-16], EBX
;      176:       894DEC           MOV [EBP-20], ECX
;      179:       8B4DC8           MOV ECX, [EBP-56]
;      17C:       8B55CC           MOV EDX, [EBP-52]
;      17F:       8B05D8000008     MOV EAX, [#x80000D8]
;      185:       64               BYTE #X64
;      186:       8908             MOV [EAX], ECX
;      188:       8B0518040008     MOV EAX, [#x8000418]
;      18E:       64               BYTE #X64
;      18F:       8910             MOV [EAX], EDX
;      191:       8B75C4           MOV ESI, [EBP-60]
;      194:       64               BYTE #X64
;      195:       8B150C000000     MOV EDX, [#xC]
;      19B:       39D6             CMP ESI, EDX
;      19D:       742C             JEQ L12
;      19F: L10:  8B42FC           MOV EAX, [EDX-4]
;      1A2:       09C0             OR EAX, EAX
;      1A4:       7410             JEQ L11
;      1A6:       8B4AF8           MOV ECX, [EDX-8]
;      1A9:       8B5811           MOV EBX, [EAX+17]
;      1AC:       64               BYTE #X64
;      1AD:       890B             MOV [EBX], ECX
;      1AF:       C742FC00000000   MOV DWORD PTR [EDX-4], 0
;      1B6: L11:  C742F800000000   MOV DWORD PTR [EDX-8], 0
;      1BD:       83EA08           SUB EDX, 8
;      1C0:       39D6             CMP ESI, EDX
;      1C2:       75DB             JNE L10
;      1C4:       64               BYTE #X64
;      1C5:       89150C000000     MOV [#xC], EDX
;      1CB: L12:  8BD5             MOV EDX, EBP
;      1CD:       8BCC             MOV ECX, ESP
;      1CF:       83EC40           SUB ESP, 64
;      1D2:       8B45D0           MOV EAX, [EBP-48]
;      1D5:       8951FC           MOV [ECX-4], EDX
;      1D8:       8BE9             MOV EBP, ECX
;      1DA:       C745F80C020000   MOV DWORD PTR [EBP-8], 524
;      1E1:       EB0E             JMP L13
;      1E3:       8B45F4           MOV EAX, [EBP-12]
;      1E6:       8B5DF0           MOV EBX, [EBP-16]
;      1E9:       8B4DEC           MOV ECX, [EBP-20]
;      1EC:       E800000000       CALL L13
;      1F1: L13:  8B40FD           MOV EAX, [EAX-3]
;      1F4:       3D0B000008       CMP EAX, 134217739
;      1F9:       750E             JNE L15
;      1FB: L14:  B80B000008       MOV EAX, 134217739
;      200:       8D65F8           LEA ESP, [EBP-8]
;      203:       8B6DFC           MOV EBP, [EBP-4]
;      206:       C20400           RET 4
;      209: L15:  8B0D11000000     MOV ECX, [#x11]
;      20F:       8B1515000000     MOV EDX, [#x15]
;      215:       8B4111           MOV EAX, [ECX+17]
;      218:       09C0             OR EAX, EAX
;      21A:       740B             JEQ L16
;      21C:       64               BYTE #X64
;      21D:       83385A           CMP DWORD PTR [EAX], 90
;      220:       7405             JEQ L16
;      222:       64               BYTE #X64
;      223:       8910             MOV [EAX], EDX
;      225:       EB03             JMP L17
;      227: L16:  8951FD           MOV [ECX-3], EDX
;      22A: L17:  EBCF             JMP L14
;      22C:       90               NOP
;      22D:       90               NOP
;      22E:       90               NOP
;      22F:       90               NOP

;;;; component: (SB-C::VARARGS-ENTRY MAKE-RAY)


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
  4>  5: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA (&OPTIONAL (#:G411) (#:G412) &REST #:G413))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G411
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C86FC9}> {11C86F89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G412
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C87039}> {11C86FF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G413
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C870A9}> {11C87069}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:G411 #:G412) {11C879F1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:G411 #:G412 #:N-CONTEXT-414
                                  #:N-COUNT-415) {11C88391}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:G411 #:G412 #:G413) {11C87271}> {11C87111}>)
  6>     known combination v3 v5
  7>  8: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
  9> 10: SB-C::%MORE-ARG-CONTEXT {GLOBAL-FUNCTION}
 11> 12: #:G410
 13> 14: '0
 15> 16: known combination v10 v12 v14
 17>     local mv-combination v8 v16
 18>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 19> 20: SB-C::CLAMBDA (LET ((#:N-INDEX-395 (- "#<...>" . "#<...>"))
                             #:N-SUPPLIED-401
                             (#:N-VALUE-400 "#<...>" . "#<...>")
                             #:N-SUPPLIED-403
                             "#<...>"
                             . "#<...>")
                         )
 21> 22: SB-KERNEL:%NEGATE {GLOBAL-FUNCTION}
 23> 24: - {GLOBAL-FUNCTION}
 25> 26: #:G412
 27> 28: '1
 29> 30: known combination v24 v26 v28
 31> 32: known combination v22 v30
 33> 34: 'NIL
 35> 36: 'NIL
 37> 38: 'NIL
 39> 40: 'NIL
 41>     local combination v20 v32 v34 v36 v38 v40
 42>     bind SB-C::CLAMBDA (LET ((#:N-INDEX-395 (- "#<...>" . "#<...>"))
                                  #:N-SUPPLIED-401
                                  (#:N-VALUE-400 "#<...>" . "#<...>")
                                  #:N-SUPPLIED-403
                                  "#<...>"
                                  . "#<...>")
                              ) :KIND :LET ..
                                             IR1 block 1 start c43
                                             start stack:
                                              43>     entry NIL
                                             end stack:
                                             successors c44

IR1 block 2 start c44
start stack:
 44>     entry NIL
end stack:
successors c45

IR1 block 7 start c45
start stack:
 45> 46: > {GLOBAL-FUNCTION}
 47> 48: #:N-INDEX-395
 49> 50: '0
 51> 52: known combination v46 v48 v50
 53>     if v52 c54 c55
end stack:
successors c54 c55

IR1 block 3 start c55
start stack:
 55> 56: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 57> 58: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (#:N-VALUE-TEMP-397) (#:N-KEY-396)
                               &REST #:G405))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:N-VALUE-TEMP-397
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C80931}> {11C808F1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:N-KEY-396
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11C809A1}> {11C80961}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G405
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11C80A11}> {11C809D1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:N-VALUE-TEMP-397
                                     #:N-KEY-396) {11C83431}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:N-VALUE-TEMP-397 #:N-KEY-396
                                  #:N-CONTEXT-408 #:N-COUNT-409) {11C83DD1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:N-VALUE-TEMP-397 #:N-KEY-396
                                  #:G405) {11C80BE1}> {11C80A81}>)
 59>     known combination v56 v58
 60> 61: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
 62> 63: SB-C::%MORE-KW-ARG {GLOBAL-FUNCTION}
 64> 65: #:G411
 66> 67: #:N-INDEX-395
 68> 69: cast v67 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (MOD
                                                                           536870911)>]
 70> 71: known combination v63 v65 v69
 72>     local mv-combination v61 v71
 73>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 74> 75: + {GLOBAL-FUNCTION}
 76> 77: #:N-INDEX-395
 78> 79: '2
 80> 81: known combination v75 v77 v79
 82>     set #:N-INDEX-395 v81
 83> 84: EQ {GLOBAL-FUNCTION}
 85> 86: #:N-KEY-396
 87> 88: ':ORIG
 89> 90: known combination v84 v86 v88
 91>     if v90 c92 c93
end stack:
successors c92 c93

IR1 block 5 start c93
start stack:
 93> 94: EQ {GLOBAL-FUNCTION}
 95> 96: #:N-KEY-396
 97> 98: ':DIR
 99>100: known combination v94 v96 v98
101>     if v100 c102 c45
end stack:
successors c45 c102

IR1 block 6 start c102
start stack:
102>103: 'T
104>     set #:N-SUPPLIED-403 v103
105>106: #:N-VALUE-TEMP-397
107>     set #:N-VALUE-402 v106
end stack:
successors c45

IR1 block 4 start c92
start stack:
 92>108: 'T
109>     set #:N-SUPPLIED-401 v108
110>111: #:N-VALUE-TEMP-397
112>     set #:N-VALUE-400 v111
end stack:
successors c45

IR1 block 8 start c54
start stack:
 54>113: SB-C::CLAMBDA (SB-C::VARARGS-ENTRY MAKE-RAY)
114>115: #:N-VALUE-400
116>117: #:N-SUPPLIED-401
118>119: #:N-VALUE-402
120>121: #:N-SUPPLIED-403
122>     local combination v113 v115 <none> v119 <none>
123>     bind SB-C::CLAMBDA (SB-C::VARARGS-ENTRY MAKE-RAY) :KIND :LET
124>     if v117 c125 c126
end stack:
successors c125 c126

IR1 block 15 start c126
start stack:
126>127: ZERO {SPECIAL}
end stack:
successors c128

IR1 block 9 start c125
start stack:
125>127: #:G372-DEFAULTING-TEMP
end stack:
successors c128

IR1 block 10 start c128
start stack:
128>     if v121 c129 c130
end stack:
successors c129 c130

IR1 block 14 start c130
start stack:
130>131: ZERO {SPECIAL}
end stack:
successors c132

IR1 block 11 start c129
start stack:
129>131: #:G373-DEFAULTING-TEMP
end stack:
successors c132

IR1 block 12 start c132
start stack:
132>     entry NIL
133>134: SB-C::CLAMBDA (LET ((#:INSTANCE374 (TRULY-THE "#<...>" . "#<...>")))
                         )
135>136: SB-KERNEL::%MAKE-INSTANCE-WITH-LAYOUT {GLOBAL-FUNCTION}
137>138: '#<SB-KERNEL:LAYOUT for RAY {11C64F61}>
139>140: full combination v136 v138
141>     local combination v134 v140
142>     bind SB-C::CLAMBDA (LET ((#:INSTANCE374
                                   (TRULY-THE "#<...>" . "#<...>")))
                              ) :KIND :LET
143>144: SB-KERNEL:%INSTANCE-SET {GLOBAL-FUNCTION}
145>146: #:INSTANCE374
147>148: '1
149>     known combination v144 v146 v148 v127
150>151: SB-KERNEL:%INSTANCE-SET {GLOBAL-FUNCTION}
152>153: #:INSTANCE374
154>155: '2
156>     known combination v151 v153 v155 v131
157>158: #:INSTANCE374
end stack:
successors c159

IR1 block 13 start c159
start stack:
159>     return v158 SB-C::CLAMBDA (SB-C::TL-XEP NIL)
end stack:
successors c160

IR1 block 16 start c161
start stack:
161>162: SB-C::%ODD-KEY-ARGS-ERROR {GLOBAL-FUNCTION}
163>     known combination v162
end stack:
successors c160


;;;; IR2 component: (SB-C::VARARGS-ENTRY MAKE-RAY)

entries:
    L1: MAKE-RAY


TNs: 16 local, 2 temps, 10 constant, 2 env, 0 comp, 14 global.
Wired: 32, Unused: 0. 17 blocks, 114 global conflicts.

IR1 block 19 start c160

    IR2 block NIL start c160

IR1 block 0 start c1

    IR2 block 16 start c1
    0: XEP-ALLOCATE-FRAME {# T}
    1: COPY-MORE-ARG {0}
    2: SETUP-ENVIRONMENT {#}
    3: MOVE t1[ECX] => #:G410!2[EDI]
    4: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    5: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MORE-ARG-CONTEXT #:G410!2[EDI] {0} => t11[EAX] t12[EDI]
    8: MOVE t11[EAX] => #:G411!13[S3]<t14[EAX]
    9: FAST---C/FIXNUM=>FIXNUM t12[EDI] {1} => t15[EAX]
    10: FAST-NEGATE/FIXNUM t15[EAX] => t16[EAX]
    11: MOVE t16[EAX] => #:N-INDEX-395!17[S4]<t18[EAX]
    12: MOVE 'NIL!19 => #:N-SUPPLIED-401!20[S5]<t21[EAX]
    13: MOVE 'NIL!19 => #:N-VALUE-400!22[EDX]
    14: MOVE 'NIL!19 => #:N-SUPPLIED-403!23[EBX]
    15: MOVE 'NIL!19 => #:N-VALUE-402!24[ESI]
    16: FAST-LOGTEST-C/FIXNUM t12[EDI] {# NIL 1}

IR1 block 1 start c43

    IR2 block 15 start c43

IR1 block 2 start c44

    IR2 block 14 start c44
    0: BRANCH {#}

IR1 block 3 start c55

    IR2 block 12 start c55
    L2:
    0: MOVE #:N-INDEX-395!17[S4]>t25[EAX] => t26[S2]<t27[EAX]
    1: MORE-KW-ARG #:G411!13[S3]>t28[ECX] t26[S2]>t29[EAX]
                   => t30[EDI] t31[S2]<t32[EAX]
    2: MOVE #:N-INDEX-395!17[S4]>t33[EAX] => t34[EAX]
    3: FAST-+-C/FIXNUM=>FIXNUM t34[EAX] {2} => t35[EAX]
    4: MOVE t35[EAX] => #:N-INDEX-395!17[S4]<t36[EAX]
    5: IF-EQ t31[S2] ':ORIG!37[Const6]>t38[EAX] {# T}

IR1 block 4 start c92

    IR2 block 9 start c92
    0: MOVE 'T!39 => #:N-SUPPLIED-401!20[S5]<t40[EAX]
    1: MOVE t30[EDI] => #:N-VALUE-400!22[EDX]
    2: BRANCH {#}

IR1 block 5 start c93

    IR2 block 11 start c93
    L3:
    0: IF-EQ t31[S2] ':DIR!41[Const7]>t42[EAX] {# T}

IR1 block 6 start c102

    IR2 block 10 start c102
    0: MOVE 'T!39 => #:N-SUPPLIED-403!23[EBX]
    1: MOVE t30[EDI] => #:N-VALUE-402!24[ESI]

IR1 block 7 start c45

    IR2 block 13 start c45
    L4:
    0: FAST-IF->-C/FIXNUM #:N-INDEX-395!17[S4] {# T 0}

IR1 block 8 start c54

    IR2 block 8 start c54
    0: IF-EQ #:N-SUPPLIED-401!20[S5] 'NIL!43 {# NIL}

IR1 block 9 start c125

    IR2 block 6 start c125
    0: MOVE #:N-VALUE-400!22[EDX] => t44[EDI]

IR1 block 10 start c128

    IR2 block 5 start c128
    L5:
    0: IF-EQ #:N-SUPPLIED-403!23[EBX] 'NIL!43 {# NIL}

IR1 block 11 start c129

    IR2 block 3 start c129
    0: MOVE #:N-VALUE-402!24[ESI] => t45[ESI]

IR1 block 12 start c132

    IR2 block 2 start c132
    L6:
    0: MOVE-OPERAND t44[EDI] {SB-VM::STORE-STACK} => t46[S2]
    1: MOVE-OPERAND t45[ESI] {SB-VM::STORE-STACK} => t47[S3]
    2: ALLOCATE-FULL-CALL-FRAME {1} => t48[EBX]
    3: MOVE-ARG '#<SB-KERNEL:LAYOUT for RAY {11C64F61}>!49[Const8]>t50[EDX] ..

assembly code for #<SB-C:COMPONENT
                    :NAME (SB-C::VARARGS-ENTRY MAKE-RAY) {11C8B039}>

in the elsewhere segment:
L7:
in the regular segment:
L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# T} 
        .align  3
L10:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
L11:

VOP COPY-MORE-ARG {0} 
        JECXZ   L12
        LEA     #<TN t51[EBX]>, DWORD PTR [EBP-32]
        SUB     #<TN t51[EBX]>, #<TN t52[ECX]>
        MOV     #<TN t53[ESP]>, #<TN t51[EBX]>
        MOV     #<TN t51[EBX]>, #<TN t52[ECX]>
        SUB     #<TN t52[ECX]>, 12
        JMP     BE, L13
        PUSH    #<TN t54[EDI]>
        PUSH    #<TN t55[ESI]>
        PUSH    #<TN t51[EBX]>
        MOV     #<TN t55[ESI]>, #<TN t56[EBP]>
        SUB     #<TN t55[ESI]>, #<TN t51[EBX]>
        XOR     #<TN t51[EBX]>, #<TN t51[EBX]>
L14:
        MOV     #<TN t54[EDI]>, DWORD PTR [ESI+EBX+0]
        MOV     DWORD PTR [ESP+EBX+12], #<TN t54[EDI]>
        ADD     #<TN t51[EBX]>, 4
        SUB     #<TN t52[ECX]>, 4
        JMP     NZ, L14
        POP     #<TN t51[EBX]>
        POP     #<TN t55[ESI]>
        POP     #<TN t54[EDI]>
L13:
        MOV     #<TN t52[ECX]>, #<TN t51[EBX]>
        MOV     DWORD PTR [EBP-36], #<TN t57[EDX]>
        CMP     #<TN t52[ECX]>, 4
        JMP     EQ, L15
        MOV     DWORD PTR [EBP-40], #<TN t54[EDI]>
        CMP     #<TN t52[ECX]>, 8
        JMP     EQ, L15
        MOV     DWORD PTR [EBP-44], #<TN t55[ESI]>
        JMP     L15
L12:
        LEA     #<TN t53[ESP]>, DWORD PTR [EBP-32]
L15:

VOP MOVE t1[ECX] => #:G410!2[EDI] 
        MOV     #<TN #:G410!2[EDI]>, #<TN t1[ECX]>

VOP NOTE-ENVIRONMENT-START {#} 
L16:

VOP MORE-ARG-CONTEXT #:G410!2[EDI] {0} => t11[EAX] t12[EDI] 
        LEA     #<TN t11[EAX]>, DWORD PTR [ESP+EDI-4]

VOP MOVE t11[EAX] => #:G411!13[S3]<t14[EAX] 
        MOV     #<TN #:G411!13[S3]>, #<TN t11[EAX]>

VOP FAST---C/FIXNUM=>FIXNUM t12[EDI] {1} => t15[EAX] 
        MOV     #<TN t15[EAX]>, #<TN t12[EDI]>
        SUB     #<TN t15[EAX]>, 4

VOP FAST-NEGATE/FIXNUM t15[EAX] => t16[EAX] 
        NEG     #<TN t16[EAX]>

VOP MOVE t16[EAX] => #:N-INDEX-395!17[S4]<t18[EAX] 
        MOV     #<TN #:N-INDEX-395!17[S4]>, #<TN t16[EAX]>

VOP MOVE 'NIL!19 => #:N-SUPPLIED-401!20[S5]<t21[EAX] 
        MOV     #<TN #:N-SUPPLIED-401!20[S5]>, 134217739

VOP MOVE 'NIL!19 => #:N-VALUE-400!22[EDX] 
        MOV     #<TN #:N-VALUE-400!22[EDX]>, 134217739

VOP MOVE 'NIL!19 => #:N-SUPPLIED-403!23[EBX] 
        MOV     #<TN #:N-SUPPLIED-403!23[EBX]>, 134217739

VOP MOVE 'NIL!19 => #:N-VALUE-402!24[ESI] 
        MOV     #<TN #:N-VALUE-402!24[ESI]>, 134217739

VOP FAST-LOGTEST-C/FIXNUM t12[EDI] {# NIL 1} 
        TEST    #<TN t12[EDI]>, 4
        JMP     NE, L17

L18:
L19:

VOP BRANCH {#} 
        JMP     L4

L2:

VOP MOVE #:N-INDEX-395!17[S4]>t25[EAX] => t26[S2]<t27[EAX] 
        MOV     #<TN t25[EAX]>, #<TN #:N-INDEX-395!17[S4]>
        MOV     #<TN t26[S2]>, #<TN t27[EAX]>

VOP MORE-KW-ARG #:G411!13[S3]>t28[ECX] t26[S2]>t29[EAX]
                => t30[EDI] t31[S2]<t32[EAX] 
        MOV     #<TN t28[ECX]>, #<TN #:G411!13[S3]>
        MOV     #<TN t29[EAX]>, #<TN t26[S2]>
        MOV     #<TN t30[EDI]>, DWORD PTR [ECX+EAX+0]
        MOV     #<TN t32[EAX]>, DWORD PTR [ECX+EAX+4]
        MOV     #<TN t31[S2]>, #<TN t32[EAX]>

VOP MOVE #:N-INDEX-395!17[S4]>t33[EAX] => t34[EAX] 
        MOV     #<TN t33[EAX]>, #<TN #:N-INDEX-395!17[S4]>

VOP FAST-+-C/FIXNUM=>FIXNUM t34[EAX] {2} => t35[EAX] 
        ADD     #<TN t35[EAX]>, 8

VOP MOVE t35[EAX] => #:N-INDEX-395!17[S4]<t36[EAX] 
        MOV     #<TN #:N-INDEX-395!17[S4]>, #<TN t35[EAX]>

VOP IF-EQ t31[S2] ':ORIG!37[Const6]>t38[EAX] {# T} 
        MOV     #<TN t38[EAX]>, #<TN ':ORIG!37[Const6]>
        CMP     #<TN t31[S2]>, #<TN t38[EAX]>
        JMP     NE, L3

L20:

VOP MOVE 'T!39 => #:N-SUPPLIED-401!20[S5]<t40[EAX] 
        MOV     #<TN #:N-SUPPLIED-401!20[S5]>, 134217767

VOP MOVE t30[EDI] => #:N-VALUE-400!22[EDX] 
        MOV     #<TN #:N-VALUE-400!22[EDX]>, #<TN t30[EDI]>

VOP BRANCH {#} 
        JMP     L4

L3:

VOP IF-EQ t31[S2] ':DIR!41[Const7]>t42[EAX] {# T} 
        MOV     #<TN t42[EAX]>, #<TN ':DIR!41[Const7]>
        CMP     #<TN t31[S2]>, #<TN t42[EAX]>
        JMP     NE, L4

L21:

VOP MOVE 'T!39 => #:N-SUPPLIED-403!23[EBX] 
        MOV     #<TN #:N-SUPPLIED-403!23[EBX]>, 134217767

VOP MOVE t30[EDI] => #:N-VALUE-402!24[ESI] 
        MOV     #<TN #:N-VALUE-402!24[ESI]>, #<TN t30[EDI]>

L4:

VOP FAST-IF->-C/FIXNUM #:N-INDEX-395!17[S4] {# T 0} 
        CMP     #<TN #:N-INDEX-395!17[S4]>, 0
        JMP     LE, L2

L22:

VOP IF-EQ #:N-SUPPLIED-401!20[S5] 'NIL!43 {# NIL} 
        CMP     #<TN #:N-SUPPLIED-401!20[S5]>, 134217739
        JMP     E, L23

L24:

VOP MOVE #:N-VALUE-400!22[EDX] => t44[EDI] 
        MOV     #<TN t44[EDI]>, #<TN #:N-VALUE-400!22[EDX]>

L5:

VOP IF-EQ #:N-SUPPLIED-403!23[EBX] 'NIL!43 {# NIL} 
        CMP     #<TN #:N-SUPPLIED-403!23[EBX]>, 134217739
        JMP     E, L25

L26:
L6:

VOP MOVE-OPERAND t44[EDI] {SB-VM::STORE-STACK} => t46[S2] 
        MOV     #<TN t46[S2]>, #<TN t44[EDI]>

VOP MOVE-OPERAND t45[ESI] {SB-VM::STORE-STACK} => t47[S3] 
        MOV     #<TN t47[S3]>, #<TN t45[ESI]>

VOP ALLOCATE-FULL-CALL-FRAME {1} => t48[EBX] 
        MOV     #<TN t48[EBX]>, #<TN t53[ESP]>
        SUB     #<TN t53[ESP]>, 12

VOP MOVE-ARG '#<SB-KERNEL:LAYOUT for RAY {11C64F61}>!49[Const8]>t50[EDX]
             t48[EBX]
             => t58[EDX] 
        MOV     #<TN t50[EDX]>, #<TN '#<SB-KERNEL:LAYOUT for RAY {11C64F61}>!49[Const8]>

VOP CALL-NAMED t48[EBX] t59[Const9]>t60[EAX] t58[EDX] {# 1 1 NIL} => t61[EDX] 
        MOV     #<TN t60[EAX]>, #<TN t59[Const9]>
L27:
        MOV     #<TN t62[ECX]>, 4
        MOV     DWORD PTR [EBX-4], #<TN t56[EBP]>
        MOV     #<TN t56[EBP]>, #<TN t48[EBX]>
L28:
L29:
        CALL    DWORD PTR [EAX+5]
L30:
        JMP     NC, L31
        MOV     #<TN t53[ESP]>, #<TN t51[EBX]>
L31:
L32:

VOP MOVE-OPERAND t47[S3] {SB-VM::LOAD-STACK} => t45[ESI] 
        MOV     #<TN t45[ESI]>, #<TN t47[S3]>

VOP MOVE-OPERAND t46[S2] {SB-VM::LOAD-STACK} => t44[EDI] 
        MOV     #<TN t44[EDI]>, #<TN t46[S2]>

VOP INSTANCE-INDEX-SET t63[EDX] '1!64 t44[EDI] => t65[EAX] 
        MOV     DWORD PTR [EDX+7], #<TN t44[EDI]>
        MOV     #<TN t65[EAX]>, #<TN t44[EDI]>

VOP INSTANCE-INDEX-SET t63[EDX] '2!66 t45[ESI] => t67[EAX] 
        MOV     DWORD PTR [EDX+11], #<TN t45[ESI]>
        MOV     #<TN t67[EAX]>, #<TN t45[ESI]>

L33:

VOP RETURN-SINGLE t5[S0] t9[S1] t68[EDX] 
L34:
        LEA     #<TN t53[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t56[EBP]>, #<TN t5[S0]>
        RET     4

L25:

VOP FAST-SYMBOL-VALUE 'ZERO!69[Const10]>t70[EAX] => t45[ESI] 
        MOV     #<TN t70[EAX]>, #<TN 'ZERO!69[Const10]>
        MOV     #<TN t45[ESI]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t45[ESI]>, DWORD PTR [ESI+0]
        CMP     #<TN t45[ESI]>, 90
        JMP     NE, L35
        MOV     #<TN t45[ESI]>, DWORD PTR [EAX-3]
L35:

VOP BRANCH {#} 
        JMP     L6

L23:

VOP FAST-SYMBOL-VALUE 'ZERO!69[Const10]>t71[EAX] => t44[EDI] 
        MOV     #<TN t71[EAX]>, #<TN 'ZERO!69[Const10]>
        MOV     #<TN t44[EDI]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t44[EDI]>, DWORD PTR [EDI+0]
        CMP     #<TN t44[EDI]>, 90
        JMP     NE, L36
        MOV     #<TN t44[EDI]>, DWORD PTR [EAX-3]
L36:

VOP BRANCH {#} 
        JMP     L5

L17:

VOP ODD-KEY-ARGS-ERROR 
        WORD    2831
L37:
        BYTE    10
        BYTE    1
        BYTE    32

        .align  3

disassembly of code for #<SB-C:COMPONENT
                          :NAME (SB-C::VARARGS-ENTRY MAKE-RAY) {11C8B039}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;      003:       0000             ADD [EAX], AL
;      005:       0000             ADD [EAX], AL
;      007:       0000             ADD [EAX], AL
;      009:       0000             ADD [EAX], AL
;      00B:       0000             ADD [EAX], AL
;      00D:       0000             ADD [EAX], AL
;      00F:       0000             ADD [EAX], AL
;      011:       0000             ADD [EAX], AL
;      013:       0000             ADD [EAX], AL
;      015:       0000             ADD [EAX], AL
;      017:       0000             ADD [EAX], AL
;      019:       0000             ADD [EAX], AL
;      01B:       008F45F8E340     ADD [EDI+1088682053], CL
;      021:       8D5DE0           LEA EBX, [EBP-32]
;      024:       29CB             SUB EBX, ECX
;      026:       8BE3             MOV ESP, EBX
;      028:       8BD9             MOV EBX, ECX
;      02A:       83E90C           SUB ECX, 12
;      02D:       761B             JBE L1
;      02F:       57               PUSH EDI
;      030:       56               PUSH ESI
;      031:       53               PUSH EBX
;      032:       8BF5             MOV ESI, EBP
;      034:       29DE             SUB ESI, EBX
;      036:       31DB             XOR EBX, EBX
;      038: L0:   8B3C1E           MOV EDI, [ESI+EBX]
;      03B:       897C1C0C         MOV [ESP+EBX+12], EDI
;      03F:       83C304           ADD EBX, 4
;      042:       83E904           SUB ECX, 4
;      045:       75F1             JNE L0
;      047:       5B               POP EBX
;      048:       5E               POP ESI
;      049:       5F               POP EDI
;      04A: L1:   8BCB             MOV ECX, EBX
;      04C:       8955DC           MOV [EBP-36], EDX
;      04F:       83F904           CMP ECX, 4
;      052:       7410             JEQ L2
;      054:       897DD8           MOV [EBP-40], EDI
;      057:       83F908           CMP ECX, 8
;      05A:       7408             JEQ L2
;      05C:       8975D4           MOV [EBP-44], ESI
;      05F:       EB03             JMP L2
;      061:       8D65E0           LEA ESP, [EBP-32]
;      064: L2:   8BF9             MOV EDI, ECX
;      066:       8D443CFC         LEA EAX, [ESP+EDI-4]
;      06A:       8945F0           MOV [EBP-16], EAX
;      06D:       8BC7             MOV EAX, EDI
;      06F:       83E804           SUB EAX, 4
;      072:       F7D8             NEG EAX
;      074:       8945EC           MOV [EBP-20], EAX
;      077:       C745E80B000008   MOV DWORD PTR [EBP-24], 134217739
;      07E:       BA0B000008       MOV EDX, 134217739
;      083:       BB0B000008       MOV EBX, 134217739
;      088:       BE0B000008       MOV ESI, 134217739
;      08D:       F7C704000000     TEST EDI, 4
;      093:       0F85D0000000     JNE L13
;      099:       EB47             JMP L5
;      09B: L3:   8B45EC           MOV EAX, [EBP-20]
;      09E:       8945F4           MOV [EBP-12], EAX
;      0A1:       8B4DF0           MOV ECX, [EBP-16]
;      0A4:       8B45F4           MOV EAX, [EBP-12]
;      0A7:       8B3C01           MOV EDI, [ECX+EAX]
;      0AA:       8B440104         MOV EAX, [ECX+EAX+4]
;      0AE:       8945F4           MOV [EBP-12], EAX
;      0B1:       8B45EC           MOV EAX, [EBP-20]
;      0B4:       83C008           ADD EAX, 8
;      0B7:       8945EC           MOV [EBP-20], EAX
;      0BA:       8B0511000000     MOV EAX, [#x11]
;      0C0:       3945F4           CMP [EBP-12], EAX
;      0C3:       750B             JNE L4
;      0C5:       C745E827000008   MOV DWORD PTR [EBP-24], 134217767
;      0CC:       8BD7             MOV EDX, EDI
;      0CE:       EB12             JMP L5
;      0D0: L4:   8B0515000000     MOV EAX, [#x15]
;      0D6:       3945F4           CMP [EBP-12], EAX
;      0D9:       7507             JNE L5
;      0DB:       BB27000008       MOV EBX, 134217767
;      0E0:       8BF7             MOV ESI, EDI
;      0E2: L5:   837DEC00         CMP DWORD PTR [EBP-20], 0
;      0E6:       7EB3             JLE L3
;      0E8:       817DE80B000008   CMP DWORD PTR [EBP-24], 134217739
;      0EF:       7462             JEQ L11
;      0F1:       8BFA             MOV EDI, EDX
;      0F3: L6:   81FB0B000008     CMP EBX, 134217739
;      0F9:       7442             JEQ L9
;      0FB: L7:   897DF4           MOV [EBP-12], EDI
;      0FE:       8975F0           MOV [EBP-16], ESI
;      101:       8BDC             MOV EBX, ESP
;      103:       83EC0C           SUB ESP, 12
;      106:       8B1519000000     MOV EDX, [#x19]
;      10C:       8B051D000000     MOV EAX, [#x1D]
;      112:       B904000000       MOV ECX, 4
;      117:       896BFC           MOV [EBX-4], EBP
;      11A:       8BEB             MOV EBP, EBX
;      11C:       FF5005           CALL DWORD PTR [EAX+5]
;      11F:       7302             JNB L8
;      121:       8BE3             MOV ESP, EBX
;      123: L8:   8B75F0           MOV ESI, [EBP-16]
;      126:       8B7DF4           MOV EDI, [EBP-12]
;      129:       897A07           MOV [EDX+7], EDI
;      12C:       8BC7             MOV EAX, EDI
;      12E:       89720B           MOV [EDX+11], ESI
;      131:       8BC6             MOV EAX, ESI
;      133:       8D65F8           LEA ESP, [EBP-8]
;      136:       F8               CLC
;      137:       8B6DFC           MOV EBP, [EBP-4]
;      13A:       C20400           RET 4
;      13D: L9:   8B0521000000     MOV EAX, [#x21]
;      143:       8B7011           MOV ESI, [EAX+17]
;      146:       64               BYTE #X64
;      147:       8B36             MOV ESI, [ESI]
;      149:       83FE5A           CMP ESI, 90
;      14C:       7503             JNE L10
;      14E:       8B70FD           MOV ESI, [EAX-3]
;      151: L10:  EBA8             JMP L7
;      153: L11:  8B0521000000     MOV EAX, [#x21]
;      159:       8B7811           MOV EDI, [EAX+17]
;      15C:       64               BYTE #X64
;      15D:       8B3F             MOV EDI, [EDI]
;      15F:       83FF5A           CMP EDI, 90
;      162:       7503             JNE L12
;      164:       8B78FD           MOV EDI, [EAX-3]
;      167: L12:  EB8A             JMP L6
;      169: L13:  0F0B0A           BREAK 10                   ; error trap
;      16C:       01               BYTE #X01
;      16D:       20               BYTE #X20                  ; ODD-KEY-ARGS-ERROR
;      16E:       90               NOP
;      16F:       90               NOP

;;;; component: "DEFSTRUCT SPHERE"


IR1 block 9 start c1
start stack:
  1>     bind SB-C::CLAMBDA (FLET #:CLEANUP-FUN-428) :KIND :CLEANUP
end stack:
successors c2

IR1 block 10 start c2
start stack:
  2>     entry NIL
  3>  4: #:TOPMOST427
  5>     if v4 c6 c7
end stack:
successors c7 c6

IR1 block 13 start c6
start stack:
  6>  8: ':INVALID
  9>     set SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL} v8
end stack:
successors c7

IR1 block 11 start c7
start stack:
  7> 10: 'NIL
end stack:
successors c11

IR1 block 12 start c11
start stack:
 11>     return v10 SB-C::CLAMBDA (FLET #:CLEANUP-FUN-428)
end stack:
successors c12

IR1 block 0 start c13
start stack:
 13>     bind SB-C::CLAMBDA (SB-C::TOP-LEVEL-FORM
                             (LET ((#:TOPMOST427 "#<...>" . "#<...>"))
                               (WHEN "#<...>" . "#<...>")
                               ("#<...>" . "#<...>"))) :KIND :TOPLEVEL
 14> 15: SB-C::CLAMBDA (LET ((#:TOPMOST427 NIL))
                         )
 16> 17: 'NIL
 18>     local combination v15 v17
 19>     bind SB-C::CLAMBDA (LET ((#:TOPMOST427 NIL))
                              ) :KIND :LET
 20> 21: EQ {GLOBAL-FUNCTION}
 22> 23: ':INVALID
 24> 25: SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL}
 26> 27: known combination v21 v23 v25
 28>     if v27 c29 c30
end stack:
successors c30 c29

IR1 block 6 start c29
start stack:
 29> 31: 'NIL
 32>     set SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL} v31
 33> 34: 'T
 35>     set #:TOPMOST427 v34
end stack:
successors c30

IR1 block 1 start c30
start stack:
 30> 36: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 37> 38: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME #:CLEANUP-FUN-428
             :%DEBUG-NAME (FLET #:CLEANUP-FUN-428)
             :KIND :CLEANUP
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS NIL {127291E1}>)
 39>     known combination v36 v38
end stack:
successors c40

IR1 block 2 start c40
start stack:
 40>     entry NIL
 41> 42: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 43> 44: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (#:NEXT431) (#:START432) (#:COUNT433)
                               &REST #:G434))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:NEXT431
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1272A601}> {1272A5C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:START432
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1272A671}> {1272A631}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:COUNT433
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1272A6E1}> {1272A6A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G434
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1272A751}> {1272A711}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 3
             :ENTRY-POINTS ((NIL . #) (NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:NEXT431 #:START432
                                     #:COUNT433) {1272B501}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:NEXT431 #:START432 #:COUNT433
                                  #:N-CONTEXT-435 #:N-COUNT-436) {1272BFA1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:NEXT431 #:START432 #:COUNT433
                                  #:G434) {1272A941}> {1272A7B9}>)
 45>     known combination v42 v44
 46> 47: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
end stack:
successors c48

IR1 block 3 start c48
start stack:
 48>     entry NIL
 49> 50: SB-C::%UNWIND-PROTECT {GLOBAL-FUNCTION}
 51> 52: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 53> 54: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (SB-C::ESCAPE-FUN #:EXIT-TAG-430)
             :KIND :DELETED
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS NIL {1272D251}>)
 55>     known combination v52 v54
 56> 57: '#<SB-C::NLX-INFO
            :BLOCK #<SB-C::CBLOCK 8 :START c58 {1272CE89}>
            :TARGET #<SB-C::CBLOCK 7 :START c59 {12730669}>
            :INFO #<SB-C::IR2-NLX-INFO
                    :HOME NIL
                    :SAVE-SP #<SB-C:TN t1[S15]>
                    :DYNAMIC-STATE (#<SB-C:TN t2[S14]> #<SB-C:TN t3[S13]>
                                    #<SB-C:TN t4[S12]>)> {127305F9}>
 60> 61: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-428)
 62>     known combination v50 v57 v61
 63> 64: SB-C::%CLEANUP-POINT {GLOBAL-FUNCTION}
 65>     known combination v64
 66> 67: SB-KERNEL:ASSERT-SYMBOL-HOME-PACKAGE-UNLOCKED {GLOBAL-FUNCTION}
 68> 69: 'SPHERE
 70> 71: '"defining ~A as a structure"
 72>     full combination v67 v69 v71
end stack:
successors c73

IR1 block 4 start c73
start stack:
 73> 74: SB-C:%UNWIND-PROTECT-BREAKUP {GLOBAL-FUNCTION}
 75>     known combination v74
 76> 77: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-428)
 78>     local combination v77
end stack:
successors c79

IR1 block 5 start c79
start stack:
 79> 80: 'NIL
 81>     return v80 SB-C::CLAMBDA (SB-C::TOP-LEVEL-FORM
                                   (LET ((#:TOPMOST427 "#<...>" . "#<...>"))
                                     (WHEN "#<...>" . "#<...>")
                                     ("#<...>" . "#<...>")))
end stack:
successors c12

IR1 block 7 start c59
start stack:
 59> 82: SB-C::%NLX-ENTRY {GLOBAL-FUNCTION}
 83> 84: '#<SB-C::NLX-INFO
            :BLOCK #<SB-C::CBLOCK 8 :START c58 {1272CE89}>
            :TARGET #<SB-C::CBLOCK 7 :START c59 {12730669}>
            :INFO #<SB-C::IR2-NLX-INFO
                    :HOME NIL
                    :SAVE-SP #<SB-C:TN t1[S15]>
                    :DYNAMIC-STATE (#<SB-C:TN t2[S14]> #<SB-C:TN t3[S13]>
                                    #<SB-C:TN t4[S12]>)> {127305F9}>
 85> 86: known combination v82 v84
end stack:
successors c58

IR1 block 8 start c58
start stack:
 58>     local mv-combination v47 v86
 87>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 88> 89: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-428)
 90>     local combination v89
 91> 92: SB-C:%CONTINUE-UNWIND {GLOBAL-FUNCTION}
 93> 94: #:NEXT431
 95> 96: #:START432
 97> 98: #:COUNT433
 99>     known combination v92 v94 v96 v98
end stack:
successors c12


;;;; IR2 component: "DEFSTRUCT SPHERE"

entries:
    L1: (SB-C::TOP-LEVEL-FORM
         (LET ((#:TOPMOST427 "#<...>" . "#<...>"))
           (WHEN "#<...>" . "#<...>")
           ("#<...>" . "#<...>")))


TNs: 34 local, 18 temps, 8 constant, 10 env, 0 comp, 8 global.
Wired: 52, Unused: 0. 14 blocks, 100 global conflicts.

IR1 block 16 start c12

    IR2 block NIL start c12

IR1 block 0 start c13

    IR2 block 8 start c13
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    3: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    4: NOTE-ENVIRONMENT-START {#}
    5: MAKE-VALUE-CELL 'NIL!13>t14[ECX] => #:TOPMOST427!15[S11]<t16[EAX]
    6: FAST-SYMBOL-VALUE 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t18[ECX]
                         => t19[EAX]
    7: IF-EQ ':INVALID!20[Const7] t19[EAX] {# NIL}

IR1 block 1 start c30

    IR2 block 6 start c30
    L2:

IR1 block 2 start c40

    IR2 block 5 start c40

IR1 block 3 start c48

    IR2 block 4 start c48
    0: CURRENT-BINDING-POINTER => t2[S14]<t21[EAX]
    1: SAVE-DYNAMIC-STATE => t3[S13]<t22[EAX] t4[S12]<t23[ECX]
    2: CURRENT-STACK-POINTER => t1[S15]
    3: MAKE-UNWIND-BLOCK t24[S5] {#} => t25[ECX]
    4: SET-UNWIND-PROTECT t24[S5]
    5: ALLOCATE-FULL-CALL-FRAME {2} => t26[EBX]
    6: MOVE-ARG 'SPHERE!27[Const8]>t28[EDX] t26[EBX] => t29[EDX]
    7: MOVE-ARG '"defining ~A as a structure"!30[Const9]>t31[EDI] t26[EBX]
                => t32[EDI]
    8: CALL-NAMED t26[EBX] t33[Const10]>t34[EAX] t29[EDX] t32[EDI] {# 2 0 NIL}

IR1 block 4 start c73

    IR2 block 3 start c73
    0: UNLINK-UNWIND-PROTECT
    1: CURRENT-FP => t35[EDX]
    2: ALLOCATE-FRAME {#} => t36[ECX] t37[IGNORE-ME]
    3: MOVE-ARG #:TOPMOST427!15[S11]>t38[EAX] t36[ECX] => t39[EAX]
    4: MOVE-ARG t35[EDX] t36[ECX] => t40[S0]
    5: KNOWN-CALL-LOCAL t36[ECX] t37[IGNORE-ME] t39[EAX] t40[S0]
                        {# # #}
                        => t41[EAX]

IR1 block 5 start c79

    IR2 block 2 start c79
    0: MOVE 'NIL!13 => t42[EDX]
    1: RETURN-SINGLE t7[S0] t11[S1] t42[EDX]

IR1 block 6 start c29

    IR2 block 7 start c29
    L3:
    0: SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t43[ECX]
           'NIL!13>t44[EDX]

    1: VALUE-CELL-SET #:TOPMOST427!15[S11]>t45[EAX] 'T!46>t47[ECX]
    2: BRANCH {#}

IR1 block 7 start c59

    IR2 block 1 start c59
    0: UWP-ENTRY {#} => t48[EDX] t49[EBX] t50[ECX]
    1: MOVE t48[EDX] => t51[S2]<t52[EDX]
    2: MOVE t49[EBX] => t53[S3]<t54[EBX]
    3: MOVE t50[ECX] => t55[S4]<t56[ECX]
    4: RESTORE-DYNAMIC-STATE t3[S13]>t57[ECX] t4[S12]>t58[EDX]
    5: UNBIND-TO-HERE t2[S14]>t59[ESI]

IR1 block 8 start c58

    IR2 block 0 start c58
    0: CURRENT-FP => t60[EDX]
    1: ALLOCATE-FRAME {#} => t61[ECX] t62[IGNORE-ME]
    2: MOVE-ARG #:TOPMOST427!15[S11]>t63[EAX] t61[ECX] => t39[EAX]
    3: MOVE-ARG t60[EDX] t61[ECX] => t40[S0]
    4: KNOWN-CALL-LOCAL t61[ECX] t62[IGNORE-ME] t39[EAX] t40[S0]
                        {# # #}
                        => t41[EAX]
    5: UNWIND t51[S2]>t64[EAX] t53[S3]>t65[EBX] t55[S4]>t66[ECX]

IR1 block 9 start c1

    IR2 block 13 start c1
    L4:
    0: SAP-MOVE t67[S1]>t68[ECX] => t69[S1]<t70[ECX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 10 start c2

    IR2 block 12 start c2 ..

assembly code for #<SB-C:COMPONENT :NAME "DEFSTRUCT SPHERE" {1272EB51}>

in the elsewhere segment:
L5:
in the regular segment:
L6:
in the elsewhere segment:
L7:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L8:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-64]
L9:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

VOP MAKE-VALUE-CELL 'NIL!13>t14[ECX] => #:TOPMOST427!15[S11]<t16[EAX] 
        MOV     #<TN t14[ECX]>, 134217739
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t16[EAX]>, 8
        FS-SEGMENT-PREFIX
        ADD     #<TN t16[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t16[EAX]>, DWORD PTR [+36]
        JMP     BE, L11
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L12
L11:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t16[EAX]>
        SUB     #<TN t16[EAX]>, 8
L12:
        MOV     DWORD PTR [EAX+0], 314
        LEA     #<TN t16[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-3], #<TN t14[ECX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L13
        BREAK   9
L13:
        MOV     #<TN #:TOPMOST427!15[S11]>, #<TN t16[EAX]>

VOP FAST-SYMBOL-VALUE 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t18[ECX]
                      => t19[EAX] 
        MOV     #<TN t18[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t19[EAX]>, DWORD PTR [ECX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t19[EAX]>, DWORD PTR [EAX+0]
        CMP     #<TN t19[EAX]>, 90
        JMP     NE, L14
        MOV     #<TN t19[EAX]>, DWORD PTR [ECX-3]
L14:

VOP IF-EQ ':INVALID!20[Const7] t19[EAX] {# NIL} 
        CMP     #<TN ':INVALID!20[Const7]>, #<TN t19[EAX]>
        JMP     E, L3

L2:
L15:
L16:

VOP CURRENT-BINDING-POINTER => t2[S14]<t21[EAX] 
        FS-SEGMENT-PREFIX
        MOV     #<TN t21[EAX]>, DWORD PTR [+12]
        MOV     #<TN t2[S14]>, #<TN t21[EAX]>

VOP SAVE-DYNAMIC-STATE => t3[S13]<t22[EAX] t4[S12]<t23[ECX] 
        MOV     #<TN t22[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     #<TN t22[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t23[ECX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     #<TN t23[ECX]>, DWORD PTR [ECX+0]
        MOV     #<TN t3[S13]>, #<TN t22[EAX]>
        MOV     #<TN t4[S12]>, #<TN t23[ECX]>

VOP CURRENT-STACK-POINTER => t1[S15] 
        MOV     #<TN t1[S15]>, #<TN t71[ESP]>

VOP MAKE-UNWIND-BLOCK t24[S5] {#} => t25[ECX] 
        LEA     #<TN t25[ECX]>, DWORD PTR [EBP-44]
        MOV     #<TN t72[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t72[EAX]>, DWORD PTR [EAX+0]
        MOV     DWORD PTR [ECX+0], #<TN t72[EAX]>
        MOV     DWORD PTR [ECX+4], #<TN t73[EBP]>
        MOV     DWORD PTR [ECX+8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L17)

VOP SET-UNWIND-PROTECT t24[S5] 
        LEA     #<TN t74[EAX]>, DWORD PTR [EBP-44]
        MOV     #<TN t75[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t74[EAX]>

VOP ALLOCATE-FULL-CALL-FRAME {2} => t26[EBX] 
        MOV     #<TN t26[EBX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 12

VOP MOVE-ARG 'SPHERE!27[Const8]>t28[EDX] t26[EBX] => t29[EDX] 
        MOV     #<TN t28[EDX]>, #<TN 'SPHERE!27[Const8]>

VOP MOVE-ARG '"defining ~A as a structure"!30[Const9]>t31[EDI] t26[EBX]
             => t32[EDI] 
        MOV     #<TN t31[EDI]>, #<TN '"defining ~A as a structure"!30[Const9]>

VOP CALL-NAMED t26[EBX] t33[Const10]>t34[EAX] t29[EDX] t32[EDI] {# 2 0 NIL} 
        MOV     #<TN t34[EAX]>, #<TN t33[Const10]>
L18:
        MOV     #<TN t76[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t73[EBP]>
        MOV     #<TN t73[EBP]>, #<TN t26[EBX]>
L19:
L20:
        CALL    DWORD PTR [EAX+5]
L21:
        JMP     NC, L22
        MOV     #<TN t71[ESP]>, #<TN t77[EBX]>
L22:
L23:

L24:

VOP UNLINK-UNWIND-PROTECT 
        MOV     #<TN t78[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t78[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t78[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t79[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t78[EAX]>

VOP CURRENT-FP => t35[EDX] 
        MOV     #<TN t35[EDX]>, #<TN t73[EBP]>

VOP ALLOCATE-FRAME {#} => t36[ECX] t37[IGNORE-ME] 
        MOV     #<TN t36[ECX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 64

VOP MOVE-ARG #:TOPMOST427!15[S11]>t38[EAX] t36[ECX] => t39[EAX] 
        MOV     #<TN t39[EAX]>, #<TN #:TOPMOST427!15[S11]>

VOP MOVE-ARG t35[EDX] t36[ECX] => t40[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t35[EDX]>

VOP KNOWN-CALL-LOCAL t36[ECX] t37[IGNORE-ME] t39[EAX] t40[S0]
                     {# # #}
                     => t41[EAX] 
L25:
        MOV     #<TN t73[EBP]>, #<TN t36[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L26)
L27:
        JMP     L4
L26:
L28:
L29:

L30:

VOP MOVE 'NIL!13 => t42[EDX] 
        MOV     #<TN t42[EDX]>, 134217739

VOP RETURN-SINGLE t7[S0] t11[S1] t42[EDX] 
L31:
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t73[EBP]>, #<TN t7[S0]>
        RET     4

L3:

VOP SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t43[ECX] 'NIL!13>t44[EDX] 
        MOV     #<TN t43[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t44[EDX]>, 134217739
        MOV     #<TN t80[EAX]>, DWORD PTR [ECX+17]
        OR      #<TN t80[EAX]>, #<TN t80[EAX]>
        JMP     Z, L32
        FS-SEGMENT-PREFIX
        CMP     DWORD PTR [EAX+0], 90
        JMP     Z, L32
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t44[EDX]>
        JMP     L33
L32:
        MOV     DWORD PTR [ECX-3], #<TN t44[EDX]>
L33:

VOP VALUE-CELL-SET #:TOPMOST427!15[S11]>t45[EAX] 'T!46>t47[ECX] 
        MOV     #<TN t45[EAX]>, #<TN #:TOPMOST427!15[S11]>
        MOV     #<TN t47[ECX]>, 134217767
        MOV     DWORD PTR [EAX-3], #<TN t47[ECX]>

VOP BRANCH {#} 
        JMP     L2

L34:

VOP UWP-ENTRY {#} => t48[EDX] t49[EBX] t50[ECX] 
L17:
L35:

VOP MOVE t48[EDX] => t51[S2]<t52[EDX] 
        MOV     #<TN t51[S2]>, #<TN t48[EDX]>

VOP MOVE t49[EBX] => t53[S3]<t54[EBX] 
        MOV     #<TN t53[S3]>, #<TN t49[EBX]>

VOP MOVE t50[ECX] => t55[S4]<t56[ECX] 
        MOV     #<TN t55[S4]>, #<TN t50[ECX]>

VOP RESTORE-DYNAMIC-STATE t3[S13]>t57[ECX] t4[S12]>t58[EDX] 
        MOV     #<TN t57[ECX]>, #<TN t3[S13]>
        MOV     #<TN t58[EDX]>, #<TN t4[S12]>
        MOV     #<TN t81[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t57[ECX]>
        MOV     #<TN t81[EAX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t58[EDX]>

VOP UNBIND-TO-HERE t2[S14]>t59[ESI] 
        MOV     #<TN t59[ESI]>, #<TN t2[S14]>
        FS-SEGMENT-PREFIX
        MOV     #<TN t82[EDX]>, DWORD PTR [+12]
        CMP     #<TN t59[ESI]>, #<TN t82[EDX]>
        JMP     E, L36
L37:
        MOV     #<TN t83[EAX]>, DWORD PTR [EDX-4]
        OR      #<TN t83[EAX]>, #<TN t83[EAX]>
        JMP     Z, L38
        MOV     #<TN t84[ECX]>, DWORD PTR [EDX-8]
        MOV     #<TN t85[EBX]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EBX+0], #<TN t84[ECX]>
        MOV     DWORD PTR [EDX-4], 0
L38:
        MOV     DWORD PTR [EDX-8], 0
        SUB     #<TN t82[EDX]>, 8
        CMP     #<TN t59[ESI]>, #<TN t82[EDX]>
        JMP     NE, L37
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+12], #<TN t82[EDX]>
L36:

L39:

VOP CURRENT-FP => t60[EDX] 
        MOV     #<TN t60[EDX]>, #<TN t73[EBP]>

VOP ALLOCATE-FRAME {#} => t61[ECX] t62[IGNORE-ME] 
        MOV     #<TN t61[ECX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 64

VOP MOVE-ARG #:TOPMOST427!15[S11]>t63[EAX] t61[ECX] => t39[EAX] 
        MOV     #<TN t39[EAX]>, #<TN #:TOPMOST427!15[S11]>

VOP MOVE-ARG t60[EDX] t61[ECX] => t40[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t60[EDX]>

VOP KNOWN-CALL-LOCAL t61[ECX] t62[IGNORE-ME] t39[EAX] t40[S0]
                     {# # #}
                     => t41[EAX] 
L40:
        MOV     #<TN t73[EBP]>, #<TN t61[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L41)
L42:
        JMP     L4
L41:
L43:
L44:

VOP UNWIND t51[S2]>t64[EAX] t53[S3]>t65[EBX] t55[S4]>t66[ECX] 
        MOV     #<TN t64[EAX]>, #<TN t51[S2]>
        MOV     #<TN t65[EBX]>, #<TN t53[S3]>
        MOV     #<TN t66[ECX]>, #<TN t55[S4]>
        CALL    #S(SB-C:FIXUP :NAME UNWIND :FLAVOR ASSEMBLY-ROUTINE :OFFSET NIL)

L4:
in the elsewhere segment:
L45:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L46:

L47:

VOP VALUE-CELL-REF t39[EAX] => t86[EAX] 
        MOV     #<TN t86[EAX]>, DWORD PTR [EAX-3]

VOP IF-EQ t86[EAX] 'NIL!87 {# T} 
        CMP     #<TN t86[EAX]>, 134217739
        JMP     NE, L48

L49:
L50:

VOP MOVE-ARG 'NIL!13 t40[S0]>t88[EAX] => t41[EAX] 
        MOV     #<TN t41[EAX]>, 134217739

VOP KNOWN-RETURN t40[S0] t69[S1] t41[EAX] {#} 
L51:
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t73[EBP]>, #<TN t40[S0]>
        RET     4
L52:

L48:

VOP SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t89[ECX]
        ':INVALID!20[Const7]>t90[EDX]
        
        MOV     #<TN t89[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t90[EDX]>, #<TN ':INVALID!20[Const7]>
        MOV     #<TN t91[EAX]>, DWORD PTR [ECX+17]
        OR      #<TN t91[EAX]>, #<TN t91[EAX]>
        JMP     Z, L53
        FS-SEGMENT-PREFIX
        CMP     DWORD PTR [EAX+0], 90
        JMP     Z, L53
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t90[EDX]>
        JMP     L54
L53:
        MOV     DWORD PTR [ECX-3], #<TN t90[EDX]>
L54:

VOP BRANCH {#} 
        JMP     L49

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME "DEFSTRUCT SPHERE" {1272EB51}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;      003:       0000             ADD [EAX], AL
;      005:       0000             ADD [EAX], AL
;      007:       0000             ADD [EAX], AL
;      009:       0000             ADD [EAX], AL
;      00B:       0000             ADD [EAX], AL
;      00D:       0000             ADD [EAX], AL
;      00F:       0000             ADD [EAX], AL
;      011:       0000             ADD [EAX], AL
;      013:       0000             ADD [EAX], AL
;      015:       0000             ADD [EAX], AL
;      017:       0000             ADD [EAX], AL
;      019:       0000             ADD [EAX], AL
;      01B:       008F45F88D65     ADD [EDI+1703802949], CL
;      021:       C0B90B00000864   SAR BYTE PTR [ECX+134217739], 100
;      028:       800D4800000004   OR BYTE PTR [#x48], 4
;      02F:       B808000000       MOV EAX, 8
;      034:       64               BYTE #X64
;      035:       030520000000     ADD EAX, [#x20]
;      03B:       64               BYTE #X64
;      03C:       3B0524000000     CMP EAX, [#x24]
;      042:       7607             JBE L1
;      044:       E800000000       CALL L0
;      049: L0:   EB0A             JMP L2
;      04B: L1:   64               BYTE #X64
;      04C:       890520000000     MOV [#x20], EAX
;      052:       83E808           SUB EAX, 8
;      055: L2:   C7003A010000     MOV DWORD PTR [EAX], 314
;      05B:       8D4007           LEA EAX, [EAX+7]
;      05E:       8948FD           MOV [EAX-3], ECX
;      061:       64               BYTE #X64
;      062:       80354800000004   XOR BYTE PTR [#x48], 4
;      069:       7403             JEQ L3
;      06B:       0F0B09           BREAK 9                    ; pending interrupt trap
;      06E: L3:   8945D0           MOV [EBP-48], EAX
;      071:       8B0D11000000     MOV ECX, [#x11]
;      077:       8B4111           MOV EAX, [ECX+17]
;      07A:       64               BYTE #X64
;      07B:       8B00             MOV EAX, [EAX]
;      07D:       83F85A           CMP EAX, 90
;      080:       7503             JNE L4
;      082:       8B41FD           MOV EAX, [ECX-3]
;      085: L4:   390515000000     CMP [#x15], EAX
;      08B:       0F84AF000000     JEQ L7
;      091: L5:   64               BYTE #X64
;      092:       8B050C000000     MOV EAX, [#xC]
;      098:       8945C4           MOV [EBP-60], EAX
;      09B:       8B05D8000008     MOV EAX, [#x80000D8]
;      0A1:       64               BYTE #X64
;      0A2:       8B00             MOV EAX, [EAX]
;      0A4:       8B0D18040008     MOV ECX, [#x8000418]
;      0AA:       64               BYTE #X64
;      0AB:       8B09             MOV ECX, [ECX]
;      0AD:       8945C8           MOV [EBP-56], EAX
;      0B0:       894DCC           MOV [EBP-52], ECX
;      0B3:       8965C0           MOV [EBP-64], ESP
;      0B6:       8D4DD4           LEA ECX, [EBP-44]
;      0B9:       8B05F8000008     MOV EAX, [#x80000F8]
;      0BF:       64               BYTE #X64
;      0C0:       8B00             MOV EAX, [EAX]
;      0C2:       8901             MOV [ECX], EAX
;      0C4:       896904           MOV [ECX+4], EBP
;      0C7:       C7410899010000   MOV DWORD PTR [ECX+8], 409
;      0CE:       8D45D4           LEA EAX, [EBP-44]
;      0D1:       8B0DF8000008     MOV ECX, [#x80000F8]
;      0D7:       64               BYTE #X64
;      0D8:       8901             MOV [ECX], EAX
;      0DA:       8BDC             MOV EBX, ESP
;      0DC:       83EC0C           SUB ESP, 12
;      0DF:       8B1519000000     MOV EDX, [#x19]
;      0E5:       8B3D1D000000     MOV EDI, [#x1D]
;      0EB:       8B0521000000     MOV EAX, [#x21]
;      0F1:       B908000000       MOV ECX, 8
;      0F6:       896BFC           MOV [EBX-4], EBP
;      0F9:       8BEB             MOV EBP, EBX
;      0FB:       FF5005           CALL DWORD PTR [EAX+5]
;      0FE:       7302             JNB L6
;      100:       8BE3             MOV ESP, EBX
;      102: L6:   8B05F8000008     MOV EAX, [#x80000F8]
;      108:       64               BYTE #X64
;      109:       8B00             MOV EAX, [EAX]
;      10B:       8B00             MOV EAX, [EAX]
;      10D:       8B0DF8000008     MOV ECX, [#x80000F8]
;      113:       64               BYTE #X64
;      114:       8901             MOV [ECX], EAX
;      116:       8BD5             MOV EDX, EBP
;      118:       8BCC             MOV ECX, ESP
;      11A:       83EC40           SUB ESP, 64
;      11D:       8B45D0           MOV EAX, [EBP-48]
;      120:       8951FC           MOV [ECX-4], EDX
;      123:       8BE9             MOV EBP, ECX
;      125:       C745F85A010000   MOV DWORD PTR [EBP-8], 346
;      12C:       E9C0000000       JMP L13
;      131:       BA0B000008       MOV EDX, 134217739
;      136:       8D65F8           LEA ESP, [EBP-8]
;      139:       F8               CLC
;      13A:       8B6DFC           MOV EBP, [EBP-4]
;      13D:       C20400           RET 4
;      140: L7:   8B0D11000000     MOV ECX, [#x11]
;      146:       BA0B000008       MOV EDX, 134217739
;      14B:       8B4111           MOV EAX, [ECX+17]
;      14E:       09C0             OR EAX, EAX
;      150:       740B             JEQ L8
;      152:       64               BYTE #X64
;      153:       83385A           CMP DWORD PTR [EAX], 90
;      156:       7405             JEQ L8
;      158:       64               BYTE #X64
;      159:       8910             MOV [EAX], EDX
;      15B:       EB03             JMP L9
;      15D: L8:   8951FD           MOV [ECX-3], EDX
;      160: L9:   8B45D0           MOV EAX, [EBP-48]
;      163:       B927000008       MOV ECX, 134217767
;      168:       8948FD           MOV [EAX-3], ECX
;      16B:       E921FFFFFF       JMP L5
;      170:       8955F4           MOV [EBP-12], EDX
;      173:       895DF0           MOV [EBP-16], EBX
;      176:       894DEC           MOV [EBP-20], ECX
;      179:       8B4DC8           MOV ECX, [EBP-56]
;      17C:       8B55CC           MOV EDX, [EBP-52]
;      17F:       8B05D8000008     MOV EAX, [#x80000D8]
;      185:       64               BYTE #X64
;      186:       8908             MOV [EAX], ECX
;      188:       8B0518040008     MOV EAX, [#x8000418]
;      18E:       64               BYTE #X64
;      18F:       8910             MOV [EAX], EDX
;      191:       8B75C4           MOV ESI, [EBP-60]
;      194:       64               BYTE #X64
;      195:       8B150C000000     MOV EDX, [#xC]
;      19B:       39D6             CMP ESI, EDX
;      19D:       742C             JEQ L12
;      19F: L10:  8B42FC           MOV EAX, [EDX-4]
;      1A2:       09C0             OR EAX, EAX
;      1A4:       7410             JEQ L11
;      1A6:       8B4AF8           MOV ECX, [EDX-8]
;      1A9:       8B5811           MOV EBX, [EAX+17]
;      1AC:       64               BYTE #X64
;      1AD:       890B             MOV [EBX], ECX
;      1AF:       C742FC00000000   MOV DWORD PTR [EDX-4], 0
;      1B6: L11:  C742F800000000   MOV DWORD PTR [EDX-8], 0
;      1BD:       83EA08           SUB EDX, 8
;      1C0:       39D6             CMP ESI, EDX
;      1C2:       75DB             JNE L10
;      1C4:       64               BYTE #X64
;      1C5:       89150C000000     MOV [#xC], EDX
;      1CB: L12:  8BD5             MOV EDX, EBP
;      1CD:       8BCC             MOV ECX, ESP
;      1CF:       83EC40           SUB ESP, 64
;      1D2:       8B45D0           MOV EAX, [EBP-48]
;      1D5:       8951FC           MOV [ECX-4], EDX
;      1D8:       8BE9             MOV EBP, ECX
;      1DA:       C745F80C020000   MOV DWORD PTR [EBP-8], 524
;      1E1:       EB0E             JMP L13
;      1E3:       8B45F4           MOV EAX, [EBP-12]
;      1E6:       8B5DF0           MOV EBX, [EBP-16]
;      1E9:       8B4DEC           MOV ECX, [EBP-20]
;      1EC:       E800000000       CALL L13
;      1F1: L13:  8B40FD           MOV EAX, [EAX-3]
;      1F4:       3D0B000008       CMP EAX, 134217739
;      1F9:       750E             JNE L15
;      1FB: L14:  B80B000008       MOV EAX, 134217739
;      200:       8D65F8           LEA ESP, [EBP-8]
;      203:       8B6DFC           MOV EBP, [EBP-4]
;      206:       C20400           RET 4
;      209: L15:  8B0D11000000     MOV ECX, [#x11]
;      20F:       8B1515000000     MOV EDX, [#x15]
;      215:       8B4111           MOV EAX, [ECX+17]
;      218:       09C0             OR EAX, EAX
;      21A:       740B             JEQ L16
;      21C:       64               BYTE #X64
;      21D:       83385A           CMP DWORD PTR [EAX], 90
;      220:       7405             JEQ L16
;      222:       64               BYTE #X64
;      223:       8910             MOV [EAX], EDX
;      225:       EB03             JMP L17
;      227: L16:  8951FD           MOV [ECX-3], EDX
;      22A: L17:  EBCF             JMP L14
;      22C:       90               NOP
;      22D:       90               NOP
;      22E:       90               NOP
;      22F:       90               NOP

;;;; component: (SB-C::VARARGS-ENTRY MAKE-SPHERE)


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
  4>  5: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA (&OPTIONAL (#:G455) (#:G456) &REST #:G457))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G455
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12B89371}> {12B89331}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G456
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12B893E1}> {12B893A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G457
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12B89451}> {12B89411}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:G455 #:G456) {12B89D99}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:G455 #:G456 #:N-CONTEXT-458
                                  #:N-COUNT-459) {12B8A739}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:G455 #:G456 #:G457) {12B89619}> {12B894B9}>)
  6>     known combination v3 v5
  7>  8: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
  9> 10: SB-C::%MORE-ARG-CONTEXT {GLOBAL-FUNCTION}
 11> 12: #:G454
 13> 14: '0
 15> 16: known combination v10 v12 v14
 17>     local mv-combination v8 v16
 18>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 19> 20: SB-C::CLAMBDA (LET ((#:N-INDEX-440 (- "#<...>" . "#<...>"))
                             #:N-SUPPLIED-446
                             (#:N-VALUE-445 "#<...>" . "#<...>")
                             ("#<...>" . "#<...>"))
                         )
 21> 22: SB-KERNEL:%NEGATE {GLOBAL-FUNCTION}
 23> 24: - {GLOBAL-FUNCTION}
 25> 26: #:G456
 27> 28: '1
 29> 30: known combination v24 v26 v28
 31> 32: known combination v22 v30
 33> 34: 'NIL
 35> 36: 'NIL
 37> 38: '0.0d0
 39>     local combination v20 v32 v34 v36 v38
 40>     bind SB-C::CLAMBDA (LET ((#:N-INDEX-440 (- "#<...>" . "#<...>"))
                                  #:N-SUPPLIED-446
                                  (#:N-VALUE-445 "#<...>" . "#<...>")
                                  ("#<...>" . "#<...>"))
                              ) :KIND :LET
 41> 42: LOGTEST {GLOBAL-FUNCTION}
 43> 44: #:G456
 45> 46: '1
 47> 48: known combination v42 v44 v46
 49>     if v48 c50 c51 ..
                          IR1 block 1 start c51
                          start stack:
                           51>     entry NIL
                          end stack:
                          successors c52

IR1 block 2 start c52
start stack:
 52>     entry NIL
end stack:
successors c53

IR1 block 7 start c53
start stack:
 53> 54: > {GLOBAL-FUNCTION}
 55> 56: #:N-INDEX-440
 57> 58: '0
 59> 60: known combination v54 v56 v58
 61>     if v60 c62 c63
end stack:
successors c62 c63

IR1 block 3 start c63
start stack:
 63> 64: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 65> 66: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (#:N-VALUE-TEMP-442) (#:N-KEY-441)
                               &REST #:G449))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:N-VALUE-TEMP-442
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12B82D59}> {12B82D19}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:N-KEY-441
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12B82DC9}> {12B82D89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G449
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12B82E39}> {12B82DF9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:N-VALUE-TEMP-442
                                     #:N-KEY-441) {12B85881}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:N-VALUE-TEMP-442 #:N-KEY-441
                                  #:N-CONTEXT-452 #:N-COUNT-453) {12B86221}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:N-VALUE-TEMP-442 #:N-KEY-441
                                  #:G449) {12C15481}> {12B82EA9}>)
 67>     known combination v64 v66
 68> 69: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
 70> 71: SB-C::%MORE-KW-ARG {GLOBAL-FUNCTION}
 72> 73: #:G455
 74> 75: #:N-INDEX-440
 76> 77: cast v75 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (MOD
                                                                           536870911)>]
 78> 79: known combination v71 v73 v77
 80>     local mv-combination v69 v79
 81>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 82> 83: + {GLOBAL-FUNCTION}
 84> 85: #:N-INDEX-440
 86> 87: '2
 88> 89: known combination v83 v85 v87
 90>     set #:N-INDEX-440 v89
 91> 92: EQ {GLOBAL-FUNCTION}
 93> 94: #:N-KEY-441
 95> 96: ':CENTER
 97> 98: known combination v92 v94 v96
 99>     if v98 c100 c101
end stack:
successors c100 c101

IR1 block 5 start c101
start stack:
101>102: EQ {GLOBAL-FUNCTION}
103>104: #:N-KEY-441
105>106: ':RADIUS
107>108: known combination v102 v104 v106
109>     if v108 c110 c53
end stack:
successors c53 c110

IR1 block 6 start c110
start stack:
110>111: #:N-VALUE-TEMP-442
112>     set #:N-VALUE-447 v111
end stack:
successors c53

IR1 block 4 start c100
start stack:
100>113: 'T
114>     set #:N-SUPPLIED-446 v113
115>116: #:N-VALUE-TEMP-442
117>     set #:N-VALUE-445 v116
end stack:
successors c53

IR1 block 8 start c62
start stack:
 62>118: SB-C::CLAMBDA (SB-C::VARARGS-ENTRY MAKE-SPHERE)
119>120: #:N-VALUE-445
121>122: #:N-SUPPLIED-446
123>124: #:N-VALUE-447
125>     local combination v118 v120 <none> <none>
126>     bind SB-C::CLAMBDA (SB-C::VARARGS-ENTRY MAKE-SPHERE) :KIND :LET
127>     if v122 c128 c129
end stack:
successors c128 c129

IR1 block 13 start c129
start stack:
129>130: ZERO {SPECIAL}
end stack:
successors c131

IR1 block 9 start c128
start stack:
128>130: #:G418-DEFAULTING-TEMP
end stack:
successors c131

IR1 block 10 start c131
start stack:
131>132: cast v124 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
end stack:
successors c133

IR1 block 11 start c133
start stack:
133>     entry NIL
134>135: SB-C::CLAMBDA (LET ((#:INSTANCE420 (TRULY-THE "#<...>" . "#<...>")))
                         )
136>137: SB-KERNEL::%MAKE-INSTANCE-WITH-LAYOUT {GLOBAL-FUNCTION}
138>139: '#<SB-KERNEL:LAYOUT for SPHERE {12B74AC1}>
140>141: full combination v137 v139
142>     local combination v135 v141
143>     bind SB-C::CLAMBDA (LET ((#:INSTANCE420
                                   (TRULY-THE "#<...>" . "#<...>")))
                              ) :KIND :LET
144>145: SB-KERNEL:%INSTANCE-SET {GLOBAL-FUNCTION}
146>147: #:INSTANCE420
148>149: '1
150>     known combination v145 v147 v149 v130
151>152: SB-KERNEL:%RAW-INSTANCE-SET/DOUBLE {GLOBAL-FUNCTION}
153>154: #:INSTANCE420
155>156: '0
157>     known combination v152 v154 v156 v132
158>159: #:INSTANCE420
end stack:
successors c160

IR1 block 12 start c160
start stack:
160>     return v159 SB-C::CLAMBDA (SB-C::TL-XEP NIL)
end stack:
successors c161

IR1 block 14 start c50
start stack:
 50>162: SB-C::%ODD-KEY-ARGS-ERROR {GLOBAL-FUNCTION}
163>     known combination v162
end stack:
successors c161


;;;; IR2 component: (SB-C::VARARGS-ENTRY MAKE-SPHERE)

entries:
    L1: MAKE-SPHERE


TNs: 17 local, 3 temps, 11 constant, 2 env, 0 comp, 13 global.
Wired: 32, Unused: 0. 15 blocks, 94 global conflicts.

IR1 block 17 start c161

    IR2 block NIL start c161

IR1 block 0 start c1

    IR2 block 14 start c1
    0: XEP-ALLOCATE-FRAME {# T}
    1: COPY-MORE-ARG {0}
    2: SETUP-ENVIRONMENT {#}
    3: MOVE t1[ECX] => #:G454!2[ESI]
    4: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    5: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MORE-ARG-CONTEXT #:G454!2[ESI] {0} => t11[EAX] t12[ESI]
    8: MOVE t11[EAX] => #:G455!13[S2]<t14[EAX]
    9: FAST---C/FIXNUM=>FIXNUM t12[ESI] {1} => t15[EAX]
    10: FAST-NEGATE/FIXNUM t15[EAX] => t16[EAX]
    11: MOVE t16[EAX] => #:N-INDEX-440!17[S3]<t18[EAX]
    12: MOVE 'NIL!19 => #:N-SUPPLIED-446!20[ECX]
    13: MOVE 'NIL!19 => #:N-VALUE-445!21[EDX]
    14: MOVE-FROM-FP-CONSTANT '0.0d0!22 => #:N-VALUE-447!23[EBX]
    15: FAST-LOGTEST-C/FIXNUM t12[ESI] {# NIL 1}

IR1 block 1 start c51

    IR2 block 13 start c51

IR1 block 2 start c52

    IR2 block 12 start c52
    0: BRANCH {#}

IR1 block 3 start c63

    IR2 block 10 start c63
    L2:
    0: MOVE #:N-INDEX-440!17[S3]>t24[EDI] => t25[EDI]
    1: MORE-KW-ARG #:G455!13[S2]>t26[EAX] t25[EDI] => t27[ESI] t28[EDI]
    2: MOVE #:N-INDEX-440!17[S3]>t29[EAX] => t30[EAX]
    3: FAST-+-C/FIXNUM=>FIXNUM t30[EAX] {2} => t31[EAX]
    4: MOVE t31[EAX] => #:N-INDEX-440!17[S3]<t32[EAX]
    5: IF-EQ t28[EDI] ':CENTER!33[Const6]>t34[EAX] {# T}

IR1 block 4 start c100

    IR2 block 7 start c100
    0: MOVE 'T!35 => #:N-SUPPLIED-446!20[ECX]
    1: MOVE t27[ESI] => #:N-VALUE-445!21[EDX]
    2: BRANCH {#}

IR1 block 5 start c101

    IR2 block 9 start c101
    L3:
    0: IF-EQ t28[EDI] ':RADIUS!36[Const7]>t37[EAX] {# T}

IR1 block 6 start c110

    IR2 block 8 start c110
    0: MOVE t27[ESI] => #:N-VALUE-447!23[EBX]

IR1 block 7 start c53

    IR2 block 11 start c53
    L4:
    0: FAST-IF->-C/FIXNUM #:N-INDEX-440!17[S3] {# T 0}

IR1 block 8 start c62

    IR2 block 6 start c62
    0: IF-EQ #:N-SUPPLIED-446!20[ECX] 'NIL!38 {# NIL}

IR1 block 9 start c128

    IR2 block 4 start c128
    0: MOVE #:N-VALUE-445!21[EDX] => t39[ESI]

IR1 block 10 start c131

    IR2 block 3 start c131
    L5:
    0: MOVE-TO-DOUBLE #:N-VALUE-447!23[EBX] => t40[S2]<t41[FR0]

IR1 block 11 start c133

    IR2 block 2 start c133
    0: MOVE-OPERAND t39[ESI] {SB-VM::STORE-STACK} => t42[S4]
    1: ALLOCATE-FULL-CALL-FRAME {1} => t43[EBX]
    2: MOVE-ARG '#<SB-KERNEL:LAYOUT for SPHERE {12B74AC1}>!44[Const8]>t45[EDX]
                t43[EBX]
                => t46[EDX]
    3: CALL-NAMED t43[EBX] t47[Const9]>t48[EAX] t46[EDX]
                  {# 1 1 NIL}
                  => t49[EDX]
    4: MOVE-OPERAND t42[S4] {SB-VM::LOAD-STACK} => t39[ESI]
    5: MOVE t49[EDX] => t50[EDX]
    6: INSTANCE-INDEX-SET t50[EDX] '1!51 t39[ESI] => t52[EAX]
    7: RAW-INSTANCE-SET/DOUBLE t50[EDX] '0!53 t40[S2]>t54[FR0] => t55[FR0]
 ..

assembly code for #<SB-C:COMPONENT
                    :NAME (SB-C::VARARGS-ENTRY MAKE-SPHERE) {12B8D029}>

in the elsewhere segment:
L6:
in the regular segment:
L7:
in the elsewhere segment:
L8:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# T} 
        .align  3
L9:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
L10:

VOP COPY-MORE-ARG {0} 
        JECXZ   L11
        LEA     #<TN t56[EBX]>, DWORD PTR [EBP-32]
        SUB     #<TN t56[EBX]>, #<TN t57[ECX]>
        MOV     #<TN t58[ESP]>, #<TN t56[EBX]>
        MOV     #<TN t56[EBX]>, #<TN t57[ECX]>
        SUB     #<TN t57[ECX]>, 12
        JMP     BE, L12
        PUSH    #<TN t59[EDI]>
        PUSH    #<TN t60[ESI]>
        PUSH    #<TN t56[EBX]>
        MOV     #<TN t60[ESI]>, #<TN t61[EBP]>
        SUB     #<TN t60[ESI]>, #<TN t56[EBX]>
        XOR     #<TN t56[EBX]>, #<TN t56[EBX]>
L13:
        MOV     #<TN t59[EDI]>, DWORD PTR [ESI+EBX+0]
        MOV     DWORD PTR [ESP+EBX+12], #<TN t59[EDI]>
        ADD     #<TN t56[EBX]>, 4
        SUB     #<TN t57[ECX]>, 4
        JMP     NZ, L13
        POP     #<TN t56[EBX]>
        POP     #<TN t60[ESI]>
        POP     #<TN t59[EDI]>
L12:
        MOV     #<TN t57[ECX]>, #<TN t56[EBX]>
        MOV     DWORD PTR [EBP-36], #<TN t62[EDX]>
        CMP     #<TN t57[ECX]>, 4
        JMP     EQ, L14
        MOV     DWORD PTR [EBP-40], #<TN t59[EDI]>
        CMP     #<TN t57[ECX]>, 8
        JMP     EQ, L14
        MOV     DWORD PTR [EBP-44], #<TN t60[ESI]>
        JMP     L14
L11:
        LEA     #<TN t58[ESP]>, DWORD PTR [EBP-32]
L14:

VOP MOVE t1[ECX] => #:G454!2[ESI] 
        MOV     #<TN #:G454!2[ESI]>, #<TN t1[ECX]>

VOP NOTE-ENVIRONMENT-START {#} 
L15:

VOP MORE-ARG-CONTEXT #:G454!2[ESI] {0} => t11[EAX] t12[ESI] 
        LEA     #<TN t11[EAX]>, DWORD PTR [ESP+ESI-4]

VOP MOVE t11[EAX] => #:G455!13[S2]<t14[EAX] 
        MOV     #<TN #:G455!13[S2]>, #<TN t11[EAX]>

VOP FAST---C/FIXNUM=>FIXNUM t12[ESI] {1} => t15[EAX] 
        MOV     #<TN t15[EAX]>, #<TN t12[ESI]>
        SUB     #<TN t15[EAX]>, 4

VOP FAST-NEGATE/FIXNUM t15[EAX] => t16[EAX] 
        NEG     #<TN t16[EAX]>

VOP MOVE t16[EAX] => #:N-INDEX-440!17[S3]<t18[EAX] 
        MOV     #<TN #:N-INDEX-440!17[S3]>, #<TN t16[EAX]>

VOP MOVE 'NIL!19 => #:N-SUPPLIED-446!20[ECX] 
        MOV     #<TN #:N-SUPPLIED-446!20[ECX]>, 134217739

VOP MOVE 'NIL!19 => #:N-VALUE-445!21[EDX] 
        MOV     #<TN #:N-VALUE-445!21[EDX]>, 134217739

VOP MOVE-FROM-FP-CONSTANT '0.0d0!22 => #:N-VALUE-447!23[EBX] 
        MOV     #<TN #:N-VALUE-447!23[EBX]>, DWORD PTR [+134218980]

VOP FAST-LOGTEST-C/FIXNUM t12[ESI] {# NIL 1} 
        TEST    #<TN t12[ESI]>, 4
        JMP     NE, L16

L17:
L18:

VOP BRANCH {#} 
        JMP     L4

L2:

VOP MOVE #:N-INDEX-440!17[S3]>t24[EDI] => t25[EDI] 
        MOV     #<TN t24[EDI]>, #<TN #:N-INDEX-440!17[S3]>

VOP MORE-KW-ARG #:G455!13[S2]>t26[EAX] t25[EDI] => t27[ESI] t28[EDI] 
        MOV     #<TN t26[EAX]>, #<TN #:G455!13[S2]>
        MOV     #<TN t27[ESI]>, DWORD PTR [EAX+EDI+0]
        MOV     #<TN t28[EDI]>, DWORD PTR [EAX+EDI+4]

VOP MOVE #:N-INDEX-440!17[S3]>t29[EAX] => t30[EAX] 
        MOV     #<TN t29[EAX]>, #<TN #:N-INDEX-440!17[S3]>

VOP FAST-+-C/FIXNUM=>FIXNUM t30[EAX] {2} => t31[EAX] 
        ADD     #<TN t31[EAX]>, 8

VOP MOVE t31[EAX] => #:N-INDEX-440!17[S3]<t32[EAX] 
        MOV     #<TN #:N-INDEX-440!17[S3]>, #<TN t31[EAX]>

VOP IF-EQ t28[EDI] ':CENTER!33[Const6]>t34[EAX] {# T} 
        CMP     #<TN t28[EDI]>, #<TN ':CENTER!33[Const6]>
        JMP     NE, L3

L19:

VOP MOVE 'T!35 => #:N-SUPPLIED-446!20[ECX] 
        MOV     #<TN #:N-SUPPLIED-446!20[ECX]>, 134217767

VOP MOVE t27[ESI] => #:N-VALUE-445!21[EDX] 
        MOV     #<TN #:N-VALUE-445!21[EDX]>, #<TN t27[ESI]>

VOP BRANCH {#} 
        JMP     L4

L3:

VOP IF-EQ t28[EDI] ':RADIUS!36[Const7]>t37[EAX] {# T} 
        CMP     #<TN t28[EDI]>, #<TN ':RADIUS!36[Const7]>
        JMP     NE, L4

L20:

VOP MOVE t27[ESI] => #:N-VALUE-447!23[EBX] 
        MOV     #<TN #:N-VALUE-447!23[EBX]>, #<TN t27[ESI]>

L4:

VOP FAST-IF->-C/FIXNUM #:N-INDEX-440!17[S3] {# T 0} 
        CMP     #<TN #:N-INDEX-440!17[S3]>, 0
        JMP     LE, L2

L21:

VOP IF-EQ #:N-SUPPLIED-446!20[ECX] 'NIL!38 {# NIL} 
        CMP     #<TN #:N-SUPPLIED-446!20[ECX]>, 134217739
        JMP     E, L22

L23:

VOP MOVE #:N-VALUE-445!21[EDX] => t39[ESI] 
        MOV     #<TN t39[ESI]>, #<TN #:N-VALUE-445!21[EDX]>

L5:

VOP MOVE-TO-DOUBLE #:N-VALUE-447!23[EBX] => t40[S2]<t41[FR0] 
        FSTP    #<TN t41[FR0]>
        FLDD    DWORD PTR [EBX+1]
        FSTD    DWORD PTR [EBP-16]

L24:

VOP MOVE-OPERAND t39[ESI] {SB-VM::STORE-STACK} => t42[S4] 
        MOV     #<TN t42[S4]>, #<TN t39[ESI]>

VOP ALLOCATE-FULL-CALL-FRAME {1} => t43[EBX] 
        MOV     #<TN t43[EBX]>, #<TN t58[ESP]>
        SUB     #<TN t58[ESP]>, 12

VOP MOVE-ARG '#<SB-KERNEL:LAYOUT for SPHERE {12B74AC1}>!44[Const8]>t45[EDX]
             t43[EBX]
             => t46[EDX] 
        MOV     #<TN t45[EDX]>, #<TN '#<SB-KERNEL:LAYOUT for SPHERE {12B74AC1}>!44[Const8]>

VOP CALL-NAMED t43[EBX] t47[Const9]>t48[EAX] t46[EDX] {# 1 1 NIL} => t49[EDX] 
        MOV     #<TN t48[EAX]>, #<TN t47[Const9]>
L25:
        MOV     #<TN t63[ECX]>, 4
        MOV     DWORD PTR [EBX-4], #<TN t61[EBP]>
        MOV     #<TN t61[EBP]>, #<TN t43[EBX]>
L26:
L27:
        CALL    DWORD PTR [EAX+5]
L28:
        JMP     NC, L29
        MOV     #<TN t58[ESP]>, #<TN t56[EBX]>
L29:
L30:

VOP MOVE-OPERAND t42[S4] {SB-VM::LOAD-STACK} => t39[ESI] 
        MOV     #<TN t39[ESI]>, #<TN t42[S4]>

VOP INSTANCE-INDEX-SET t50[EDX] '1!51 t39[ESI] => t52[EAX] 
        MOV     DWORD PTR [EDX+7], #<TN t39[ESI]>
        MOV     #<TN t52[EAX]>, #<TN t39[ESI]>

VOP RAW-INSTANCE-SET/DOUBLE t50[EDX] '0!53 t40[S2]>t54[FR0] => t55[FR0] 
        FSTP    #<TN t54[FR0]>
        FLDD    DWORD PTR [EBP-16]
        MOV     #<TN t64[EAX]>, DWORD PTR [EDX-1]
        SHR     #<TN t64[EAX]>, 8
        FSTD    DWORD PTR [EDX+EAX*4-5]

L31:

VOP RETURN-SINGLE t5[S0] t9[S1] t65[EDX] 
L32:
        LEA     #<TN t58[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t61[EBP]>, #<TN t5[S0]>
        RET     4

L22:

VOP FAST-SYMBOL-VALUE 'ZERO!66[Const10]>t67[EAX] => t39[ESI] 
        MOV     #<TN t67[EAX]>, #<TN 'ZERO!66[Const10]>
        MOV     #<TN t39[ESI]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t39[ESI]>, DWORD PTR [ESI+0]
        CMP     #<TN t39[ESI]>, 90
        JMP     NE, L33
        MOV     #<TN t39[ESI]>, DWORD PTR [EAX-3]
L33:

VOP BRANCH {#} 
        JMP     L5

L16:

VOP ODD-KEY-ARGS-ERROR 
        WORD    2831
L34:
        BYTE    10
        BYTE    1
        BYTE    32

        .align  3

disassembly of code for #<SB-C:COMPONENT
                          :NAME (SB-C::VARARGS-ENTRY MAKE-SPHERE) {12B8D029}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;      003:       0000             ADD [EAX], AL
;      005:       0000             ADD [EAX], AL
;      007:       0000             ADD [EAX], AL
;      009:       0000             ADD [EAX], AL
;      00B:       0000             ADD [EAX], AL
;      00D:       0000             ADD [EAX], AL
;      00F:       0000             ADD [EAX], AL
;      011:       0000             ADD [EAX], AL
;      013:       0000             ADD [EAX], AL
;      015:       0000             ADD [EAX], AL
;      017:       0000             ADD [EAX], AL
;      019:       0000             ADD [EAX], AL
;      01B:       008F45F8E340     ADD [EDI+1088682053], CL
;      021:       8D5DE0           LEA EBX, [EBP-32]
;      024:       29CB             SUB EBX, ECX
;      026:       8BE3             MOV ESP, EBX
;      028:       8BD9             MOV EBX, ECX
;      02A:       83E90C           SUB ECX, 12
;      02D:       761B             JBE L1
;      02F:       57               PUSH EDI
;      030:       56               PUSH ESI
;      031:       53               PUSH EBX
;      032:       8BF5             MOV ESI, EBP
;      034:       29DE             SUB ESI, EBX
;      036:       31DB             XOR EBX, EBX
;      038: L0:   8B3C1E           MOV EDI, [ESI+EBX]
;      03B:       897C1C0C         MOV [ESP+EBX+12], EDI
;      03F:       83C304           ADD EBX, 4
;      042:       83E904           SUB ECX, 4
;      045:       75F1             JNE L0
;      047:       5B               POP EBX
;      048:       5E               POP ESI
;      049:       5F               POP EDI
;      04A: L1:   8BCB             MOV ECX, EBX
;      04C:       8955DC           MOV [EBP-36], EDX
;      04F:       83F904           CMP ECX, 4
;      052:       7410             JEQ L2
;      054:       897DD8           MOV [EBP-40], EDI
;      057:       83F908           CMP ECX, 8
;      05A:       7408             JEQ L2
;      05C:       8975D4           MOV [EBP-44], ESI
;      05F:       EB03             JMP L2
;      061:       8D65E0           LEA ESP, [EBP-32]
;      064: L2:   8BF1             MOV ESI, ECX
;      066:       8D4434FC         LEA EAX, [ESP+ESI-4]
;      06A:       8945F4           MOV [EBP-12], EAX
;      06D:       8BC6             MOV EAX, ESI
;      06F:       83E804           SUB EAX, 4
;      072:       F7D8             NEG EAX
;      074:       8945F0           MOV [EBP-16], EAX
;      077:       B90B000008       MOV ECX, 134217739
;      07C:       BA0B000008       MOV EDX, 134217739
;      081:       8B1DE4040008     MOV EBX, [#x80004E4]
;      087:       F7C604000000     TEST ESI, 4
;      08D:       0F85A7000000     JNE L10
;      093:       EB31             JMP L5
;      095: L3:   8B7DF0           MOV EDI, [EBP-16]
;      098:       8B45F4           MOV EAX, [EBP-12]
;      09B:       8B3438           MOV ESI, [EAX+EDI]
;      09E:       8B7C3804         MOV EDI, [EAX+EDI+4]
;      0A2:       8B45F0           MOV EAX, [EBP-16]
;      0A5:       83C008           ADD EAX, 8
;      0A8:       8945F0           MOV [EBP-16], EAX
;      0AB:       3B3D11000000     CMP EDI, [#x11]
;      0B1:       7509             JNE L4
;      0B3:       B927000008       MOV ECX, 134217767
;      0B8:       8BD6             MOV EDX, ESI
;      0BA:       EB0A             JMP L5
;      0BC: L4:   3B3D15000000     CMP EDI, [#x15]
;      0C2:       7502             JNE L5
;      0C4:       8BDE             MOV EBX, ESI
;      0C6: L5:   837DF000         CMP DWORD PTR [EBP-16], 0
;      0CA:       7EC9             JLE L3
;      0CC:       81F90B000008     CMP ECX, 134217739
;      0D2:       7450             JEQ L8
;      0D4:       8BF2             MOV ESI, EDX
;      0D6: L6:   DDD8             FSTPD FR0
;      0D8:       DD4301           FLDD [EBX+1]
;      0DB:       DD55F0           FSTD [EBP-16]
;      0DE:       8975EC           MOV [EBP-20], ESI
;      0E1:       8BDC             MOV EBX, ESP
;      0E3:       83EC0C           SUB ESP, 12
;      0E6:       8B1519000000     MOV EDX, [#x19]
;      0EC:       8B051D000000     MOV EAX, [#x1D]
;      0F2:       B904000000       MOV ECX, 4
;      0F7:       896BFC           MOV [EBX-4], EBP
;      0FA:       8BEB             MOV EBP, EBX
;      0FC:       FF5005           CALL DWORD PTR [EAX+5]
;      0FF:       7302             JNB L7
;      101:       8BE3             MOV ESP, EBX
;      103: L7:   8B75EC           MOV ESI, [EBP-20]
;      106:       897207           MOV [EDX+7], ESI
;      109:       8BC6             MOV EAX, ESI
;      10B:       DDD8             FSTPD FR0
;      10D:       DD45F0           FLDD [EBP-16]
;      110:       8B42FF           MOV EAX, [EDX-1]
;      113:       C1E808           SHR EAX, 8
;      116:       DD5482FB         FSTD [EDX+EAX*4-5]
;      11A:       8D65F8           LEA ESP, [EBP-8]
;      11D:       F8               CLC
;      11E:       8B6DFC           MOV EBP, [EBP-4]
;      121:       C20400           RET 4
;      124: L8:   8B0521000000     MOV EAX, [#x21]
;      12A:       8B7011           MOV ESI, [EAX+17]
;      12D:       64               BYTE #X64
;      12E:       8B36             MOV ESI, [ESI]
;      130:       83FE5A           CMP ESI, 90
;      133:       7503             JNE L9
;      135:       8B70FD           MOV ESI, [EAX-3]
;      138: L9:   EB9C             JMP L6
;      13A: L10:  0F0B0A           BREAK 10                   ; error trap
;      13D:       01               BYTE #X01
;      13E:       20               BYTE #X20                  ; ODD-KEY-ARGS-ERROR
;      13F:       90               NOP

;;;; component: "DEFSTRUCT GROUP"


IR1 block 9 start c1
start stack:
  1>     bind SB-C::CLAMBDA (FLET #:CLEANUP-FUN-475) :KIND :CLEANUP
end stack:
successors c2

IR1 block 10 start c2
start stack:
  2>     entry NIL
  3>  4: #:TOPMOST474
  5>     if v4 c6 c7
end stack:
successors c7 c6

IR1 block 13 start c6
start stack:
  6>  8: ':INVALID
  9>     set SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL} v8
end stack:
successors c7

IR1 block 11 start c7
start stack:
  7> 10: 'NIL
end stack:
successors c11

IR1 block 12 start c11
start stack:
 11>     return v10 SB-C::CLAMBDA (FLET #:CLEANUP-FUN-475)
end stack:
successors c12

IR1 block 0 start c13
start stack:
 13>     bind SB-C::CLAMBDA (SB-C::TOP-LEVEL-FORM
                             (LET ((#:TOPMOST474 "#<...>" . "#<...>"))
                               (WHEN "#<...>" . "#<...>")
                               ("#<...>" . "#<...>"))) :KIND :TOPLEVEL
 14> 15: SB-C::CLAMBDA (LET ((#:TOPMOST474 NIL))
                         )
 16> 17: 'NIL
 18>     local combination v15 v17
 19>     bind SB-C::CLAMBDA (LET ((#:TOPMOST474 NIL))
                              ) :KIND :LET
 20> 21: EQ {GLOBAL-FUNCTION}
 22> 23: ':INVALID
 24> 25: SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL}
 26> 27: known combination v21 v23 v25
 28>     if v27 c29 c30
end stack:
successors c30 c29

IR1 block 6 start c29
start stack:
 29> 31: 'NIL
 32>     set SB-IMPL::*IGNORED-PACKAGE-LOCKS* {SPECIAL} v31
 33> 34: 'T
 35>     set #:TOPMOST474 v34
end stack:
successors c30

IR1 block 1 start c30
start stack:
 30> 36: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 37> 38: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME #:CLEANUP-FUN-475
             :%DEBUG-NAME (FLET #:CLEANUP-FUN-475)
             :KIND :CLEANUP
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS NIL {11A61DB1}>)
 39>     known combination v36 v38
end stack:
successors c40

IR1 block 2 start c40
start stack:
 40>     entry NIL
 41> 42: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 43> 44: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (#:NEXT478) (#:START479) (#:COUNT480)
                               &REST #:G481))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:NEXT478
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11A63321}> {11A632E1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:START479
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11A63391}> {11A63351}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:COUNT480
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11A63401}> {11A633C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G481
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11A63471}> {11A63431}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 3
             :ENTRY-POINTS ((NIL . #) (NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:NEXT478 #:START479
                                     #:COUNT480) {11A64029}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:NEXT478 #:START479 #:COUNT480
                                  #:N-CONTEXT-482 #:N-COUNT-483) {11A64AC9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:NEXT478 #:START479 #:COUNT480
                                  #:G481) {11A63661}> {11A634D9}>)
 45>     known combination v42 v44
 46> 47: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
end stack:
successors c48

IR1 block 3 start c48
start stack:
 48>     entry NIL
 49> 50: SB-C::%UNWIND-PROTECT {GLOBAL-FUNCTION}
 51> 52: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 53> 54: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (SB-C::ESCAPE-FUN #:EXIT-TAG-477)
             :KIND :DELETED
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS NIL {11A66039}>)
 55>     known combination v52 v54
 56> 57: '#<SB-C::NLX-INFO
            :BLOCK #<SB-C::CBLOCK 8 :START c58 {11A65C21}>
            :TARGET #<SB-C::CBLOCK 7 :START c59 {11A69751}>
            :INFO #<SB-C::IR2-NLX-INFO
                    :HOME NIL
                    :SAVE-SP #<SB-C:TN t1[S15]>
                    :DYNAMIC-STATE (#<SB-C:TN t2[S14]> #<SB-C:TN t3[S13]>
                                    #<SB-C:TN t4[S12]>)> {11A696E1}>
 60> 61: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-475)
 62>     known combination v50 v57 v61
 63> 64: SB-C::%CLEANUP-POINT {GLOBAL-FUNCTION}
 65>     known combination v64
 66> 67: SB-KERNEL:ASSERT-SYMBOL-HOME-PACKAGE-UNLOCKED {GLOBAL-FUNCTION}
 68> 69: 'GROUP
 70> 71: '"defining ~A as a structure"
 72>     full combination v67 v69 v71
end stack:
successors c73

IR1 block 4 start c73
start stack:
 73> 74: SB-C:%UNWIND-PROTECT-BREAKUP {GLOBAL-FUNCTION}
 75>     known combination v74
 76> 77: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-475)
 78>     local combination v77
end stack:
successors c79

IR1 block 5 start c79
start stack:
 79> 80: 'NIL
 81>     return v80 SB-C::CLAMBDA (SB-C::TOP-LEVEL-FORM
                                   (LET ((#:TOPMOST474 "#<...>" . "#<...>"))
                                     (WHEN "#<...>" . "#<...>")
                                     ("#<...>" . "#<...>")))
end stack:
successors c12

IR1 block 7 start c59
start stack:
 59> 82: SB-C::%NLX-ENTRY {GLOBAL-FUNCTION}
 83> 84: '#<SB-C::NLX-INFO
            :BLOCK #<SB-C::CBLOCK 8 :START c58 {11A65C21}>
            :TARGET #<SB-C::CBLOCK 7 :START c59 {11A69751}>
            :INFO #<SB-C::IR2-NLX-INFO
                    :HOME NIL
                    :SAVE-SP #<SB-C:TN t1[S15]>
                    :DYNAMIC-STATE (#<SB-C:TN t2[S14]> #<SB-C:TN t3[S13]>
                                    #<SB-C:TN t4[S12]>)> {11A696E1}>
 85> 86: known combination v82 v84
end stack:
successors c58

IR1 block 8 start c58
start stack:
 58>     local mv-combination v47 v86
 87>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 88> 89: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-475)
 90>     local combination v89
 91> 92: SB-C:%CONTINUE-UNWIND {GLOBAL-FUNCTION}
 93> 94: #:NEXT478
 95> 96: #:START479
 97> 98: #:COUNT480
 99>     known combination v92 v94 v96 v98
end stack:
successors c12


;;;; IR2 component: "DEFSTRUCT GROUP"

entries:
    L1: (SB-C::TOP-LEVEL-FORM
         (LET ((#:TOPMOST474 "#<...>" . "#<...>"))
           (WHEN "#<...>" . "#<...>")
           ("#<...>" . "#<...>")))


TNs: 34 local, 18 temps, 8 constant, 10 env, 0 comp, 8 global.
Wired: 52, Unused: 0. 14 blocks, 100 global conflicts.

IR1 block 16 start c12

    IR2 block NIL start c12

IR1 block 0 start c13

    IR2 block 8 start c13
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t5[S0]>t6[EAX] => t7[S0]<t8[EAX]
    3: SAP-MOVE t9[S1]>t10[EAX] => t11[S1]<t12[EAX]
    4: NOTE-ENVIRONMENT-START {#}
    5: MAKE-VALUE-CELL 'NIL!13>t14[ECX] => #:TOPMOST474!15[S11]<t16[EAX]
    6: FAST-SYMBOL-VALUE 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t18[ECX]
                         => t19[EAX]
    7: IF-EQ ':INVALID!20[Const7] t19[EAX] {# NIL}

IR1 block 1 start c30

    IR2 block 6 start c30
    L2:

IR1 block 2 start c40

    IR2 block 5 start c40

IR1 block 3 start c48

    IR2 block 4 start c48
    0: CURRENT-BINDING-POINTER => t2[S14]<t21[EAX]
    1: SAVE-DYNAMIC-STATE => t3[S13]<t22[EAX] t4[S12]<t23[ECX]
    2: CURRENT-STACK-POINTER => t1[S15]
    3: MAKE-UNWIND-BLOCK t24[S5] {#} => t25[ECX]
    4: SET-UNWIND-PROTECT t24[S5]
    5: ALLOCATE-FULL-CALL-FRAME {2} => t26[EBX]
    6: MOVE-ARG 'GROUP!27[Const8]>t28[EDX] t26[EBX] => t29[EDX]
    7: MOVE-ARG '"defining ~A as a structure"!30[Const9]>t31[EDI] t26[EBX]
                => t32[EDI]
    8: CALL-NAMED t26[EBX] t33[Const10]>t34[EAX] t29[EDX] t32[EDI] {# 2 0 NIL}

IR1 block 4 start c73

    IR2 block 3 start c73
    0: UNLINK-UNWIND-PROTECT
    1: CURRENT-FP => t35[EDX]
    2: ALLOCATE-FRAME {#} => t36[ECX] t37[IGNORE-ME]
    3: MOVE-ARG #:TOPMOST474!15[S11]>t38[EAX] t36[ECX] => t39[EAX]
    4: MOVE-ARG t35[EDX] t36[ECX] => t40[S0]
    5: KNOWN-CALL-LOCAL t36[ECX] t37[IGNORE-ME] t39[EAX] t40[S0]
                        {# # #}
                        => t41[EAX]

IR1 block 5 start c79

    IR2 block 2 start c79
    0: MOVE 'NIL!13 => t42[EDX]
    1: RETURN-SINGLE t7[S0] t11[S1] t42[EDX]

IR1 block 6 start c29

    IR2 block 7 start c29
    L3:
    0: SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t43[ECX]
           'NIL!13>t44[EDX]

    1: VALUE-CELL-SET #:TOPMOST474!15[S11]>t45[EAX] 'T!46>t47[ECX]
    2: BRANCH {#}

IR1 block 7 start c59

    IR2 block 1 start c59
    0: UWP-ENTRY {#} => t48[EDX] t49[EBX] t50[ECX]
    1: MOVE t48[EDX] => t51[S2]<t52[EDX]
    2: MOVE t49[EBX] => t53[S3]<t54[EBX]
    3: MOVE t50[ECX] => t55[S4]<t56[ECX]
    4: RESTORE-DYNAMIC-STATE t3[S13]>t57[ECX] t4[S12]>t58[EDX]
    5: UNBIND-TO-HERE t2[S14]>t59[ESI]

IR1 block 8 start c58

    IR2 block 0 start c58
    0: CURRENT-FP => t60[EDX]
    1: ALLOCATE-FRAME {#} => t61[ECX] t62[IGNORE-ME]
    2: MOVE-ARG #:TOPMOST474!15[S11]>t63[EAX] t61[ECX] => t39[EAX]
    3: MOVE-ARG t60[EDX] t61[ECX] => t40[S0]
    4: KNOWN-CALL-LOCAL t61[ECX] t62[IGNORE-ME] t39[EAX] t40[S0]
                        {# # #}
                        => t41[EAX]
    5: UNWIND t51[S2]>t64[EAX] t53[S3]>t65[EBX] t55[S4]>t66[ECX]

IR1 block 9 start c1

    IR2 block 13 start c1
    L4:
    0: SAP-MOVE t67[S1]>t68[ECX] => t69[S1]<t70[ECX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 10 start c2

    IR2 block 12 start c2 ..

assembly code for #<SB-C:COMPONENT :NAME "DEFSTRUCT GROUP" {11A67B79}>

in the elsewhere segment:
L5:
in the regular segment:
L6:
in the elsewhere segment:
L7:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L8:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-64]
L9:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

VOP MAKE-VALUE-CELL 'NIL!13>t14[ECX] => #:TOPMOST474!15[S11]<t16[EAX] 
        MOV     #<TN t14[ECX]>, 134217739
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t16[EAX]>, 8
        FS-SEGMENT-PREFIX
        ADD     #<TN t16[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t16[EAX]>, DWORD PTR [+36]
        JMP     BE, L11
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L12
L11:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t16[EAX]>
        SUB     #<TN t16[EAX]>, 8
L12:
        MOV     DWORD PTR [EAX+0], 314
        LEA     #<TN t16[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-3], #<TN t14[ECX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L13
        BREAK   9
L13:
        MOV     #<TN #:TOPMOST474!15[S11]>, #<TN t16[EAX]>

VOP FAST-SYMBOL-VALUE 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t18[ECX]
                      => t19[EAX] 
        MOV     #<TN t18[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t19[EAX]>, DWORD PTR [ECX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t19[EAX]>, DWORD PTR [EAX+0]
        CMP     #<TN t19[EAX]>, 90
        JMP     NE, L14
        MOV     #<TN t19[EAX]>, DWORD PTR [ECX-3]
L14:

VOP IF-EQ ':INVALID!20[Const7] t19[EAX] {# NIL} 
        CMP     #<TN ':INVALID!20[Const7]>, #<TN t19[EAX]>
        JMP     E, L3

L2:
L15:
L16:

VOP CURRENT-BINDING-POINTER => t2[S14]<t21[EAX] 
        FS-SEGMENT-PREFIX
        MOV     #<TN t21[EAX]>, DWORD PTR [+12]
        MOV     #<TN t2[S14]>, #<TN t21[EAX]>

VOP SAVE-DYNAMIC-STATE => t3[S13]<t22[EAX] t4[S12]<t23[ECX] 
        MOV     #<TN t22[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     #<TN t22[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t23[ECX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     #<TN t23[ECX]>, DWORD PTR [ECX+0]
        MOV     #<TN t3[S13]>, #<TN t22[EAX]>
        MOV     #<TN t4[S12]>, #<TN t23[ECX]>

VOP CURRENT-STACK-POINTER => t1[S15] 
        MOV     #<TN t1[S15]>, #<TN t71[ESP]>

VOP MAKE-UNWIND-BLOCK t24[S5] {#} => t25[ECX] 
        LEA     #<TN t25[ECX]>, DWORD PTR [EBP-44]
        MOV     #<TN t72[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t72[EAX]>, DWORD PTR [EAX+0]
        MOV     DWORD PTR [ECX+0], #<TN t72[EAX]>
        MOV     DWORD PTR [ECX+4], #<TN t73[EBP]>
        MOV     DWORD PTR [ECX+8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L17)

VOP SET-UNWIND-PROTECT t24[S5] 
        LEA     #<TN t74[EAX]>, DWORD PTR [EBP-44]
        MOV     #<TN t75[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t74[EAX]>

VOP ALLOCATE-FULL-CALL-FRAME {2} => t26[EBX] 
        MOV     #<TN t26[EBX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 12

VOP MOVE-ARG 'GROUP!27[Const8]>t28[EDX] t26[EBX] => t29[EDX] 
        MOV     #<TN t28[EDX]>, #<TN 'GROUP!27[Const8]>

VOP MOVE-ARG '"defining ~A as a structure"!30[Const9]>t31[EDI] t26[EBX]
             => t32[EDI] 
        MOV     #<TN t31[EDI]>, #<TN '"defining ~A as a structure"!30[Const9]>

VOP CALL-NAMED t26[EBX] t33[Const10]>t34[EAX] t29[EDX] t32[EDI] {# 2 0 NIL} 
        MOV     #<TN t34[EAX]>, #<TN t33[Const10]>
L18:
        MOV     #<TN t76[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t73[EBP]>
        MOV     #<TN t73[EBP]>, #<TN t26[EBX]>
L19:
L20:
        CALL    DWORD PTR [EAX+5]
L21:
        JMP     NC, L22
        MOV     #<TN t71[ESP]>, #<TN t77[EBX]>
L22:
L23:

L24:

VOP UNLINK-UNWIND-PROTECT 
        MOV     #<TN t78[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t78[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t78[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t79[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t78[EAX]>

VOP CURRENT-FP => t35[EDX] 
        MOV     #<TN t35[EDX]>, #<TN t73[EBP]>

VOP ALLOCATE-FRAME {#} => t36[ECX] t37[IGNORE-ME] 
        MOV     #<TN t36[ECX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 64

VOP MOVE-ARG #:TOPMOST474!15[S11]>t38[EAX] t36[ECX] => t39[EAX] 
        MOV     #<TN t39[EAX]>, #<TN #:TOPMOST474!15[S11]>

VOP MOVE-ARG t35[EDX] t36[ECX] => t40[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t35[EDX]>

VOP KNOWN-CALL-LOCAL t36[ECX] t37[IGNORE-ME] t39[EAX] t40[S0]
                     {# # #}
                     => t41[EAX] 
L25:
        MOV     #<TN t73[EBP]>, #<TN t36[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L26)
L27:
        JMP     L4
L26:
L28:
L29:

L30:

VOP MOVE 'NIL!13 => t42[EDX] 
        MOV     #<TN t42[EDX]>, 134217739

VOP RETURN-SINGLE t7[S0] t11[S1] t42[EDX] 
L31:
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t73[EBP]>, #<TN t7[S0]>
        RET     4

L3:

VOP SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t43[ECX] 'NIL!13>t44[EDX] 
        MOV     #<TN t43[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t44[EDX]>, 134217739
        MOV     #<TN t80[EAX]>, DWORD PTR [ECX+17]
        OR      #<TN t80[EAX]>, #<TN t80[EAX]>
        JMP     Z, L32
        FS-SEGMENT-PREFIX
        CMP     DWORD PTR [EAX+0], 90
        JMP     Z, L32
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t44[EDX]>
        JMP     L33
L32:
        MOV     DWORD PTR [ECX-3], #<TN t44[EDX]>
L33:

VOP VALUE-CELL-SET #:TOPMOST474!15[S11]>t45[EAX] 'T!46>t47[ECX] 
        MOV     #<TN t45[EAX]>, #<TN #:TOPMOST474!15[S11]>
        MOV     #<TN t47[ECX]>, 134217767
        MOV     DWORD PTR [EAX-3], #<TN t47[ECX]>

VOP BRANCH {#} 
        JMP     L2

L34:

VOP UWP-ENTRY {#} => t48[EDX] t49[EBX] t50[ECX] 
L17:
L35:

VOP MOVE t48[EDX] => t51[S2]<t52[EDX] 
        MOV     #<TN t51[S2]>, #<TN t48[EDX]>

VOP MOVE t49[EBX] => t53[S3]<t54[EBX] 
        MOV     #<TN t53[S3]>, #<TN t49[EBX]>

VOP MOVE t50[ECX] => t55[S4]<t56[ECX] 
        MOV     #<TN t55[S4]>, #<TN t50[ECX]>

VOP RESTORE-DYNAMIC-STATE t3[S13]>t57[ECX] t4[S12]>t58[EDX] 
        MOV     #<TN t57[ECX]>, #<TN t3[S13]>
        MOV     #<TN t58[EDX]>, #<TN t4[S12]>
        MOV     #<TN t81[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t57[ECX]>
        MOV     #<TN t81[EAX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t58[EDX]>

VOP UNBIND-TO-HERE t2[S14]>t59[ESI] 
        MOV     #<TN t59[ESI]>, #<TN t2[S14]>
        FS-SEGMENT-PREFIX
        MOV     #<TN t82[EDX]>, DWORD PTR [+12]
        CMP     #<TN t59[ESI]>, #<TN t82[EDX]>
        JMP     E, L36
L37:
        MOV     #<TN t83[EAX]>, DWORD PTR [EDX-4]
        OR      #<TN t83[EAX]>, #<TN t83[EAX]>
        JMP     Z, L38
        MOV     #<TN t84[ECX]>, DWORD PTR [EDX-8]
        MOV     #<TN t85[EBX]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EBX+0], #<TN t84[ECX]>
        MOV     DWORD PTR [EDX-4], 0
L38:
        MOV     DWORD PTR [EDX-8], 0
        SUB     #<TN t82[EDX]>, 8
        CMP     #<TN t59[ESI]>, #<TN t82[EDX]>
        JMP     NE, L37
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+12], #<TN t82[EDX]>
L36:

L39:

VOP CURRENT-FP => t60[EDX] 
        MOV     #<TN t60[EDX]>, #<TN t73[EBP]>

VOP ALLOCATE-FRAME {#} => t61[ECX] t62[IGNORE-ME] 
        MOV     #<TN t61[ECX]>, #<TN t71[ESP]>
        SUB     #<TN t71[ESP]>, 64

VOP MOVE-ARG #:TOPMOST474!15[S11]>t63[EAX] t61[ECX] => t39[EAX] 
        MOV     #<TN t39[EAX]>, #<TN #:TOPMOST474!15[S11]>

VOP MOVE-ARG t60[EDX] t61[ECX] => t40[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t60[EDX]>

VOP KNOWN-CALL-LOCAL t61[ECX] t62[IGNORE-ME] t39[EAX] t40[S0]
                     {# # #}
                     => t41[EAX] 
L40:
        MOV     #<TN t73[EBP]>, #<TN t61[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L41)
L42:
        JMP     L4
L41:
L43:
L44:

VOP UNWIND t51[S2]>t64[EAX] t53[S3]>t65[EBX] t55[S4]>t66[ECX] 
        MOV     #<TN t64[EAX]>, #<TN t51[S2]>
        MOV     #<TN t65[EBX]>, #<TN t53[S3]>
        MOV     #<TN t66[ECX]>, #<TN t55[S4]>
        CALL    #S(SB-C:FIXUP :NAME UNWIND :FLAVOR ASSEMBLY-ROUTINE :OFFSET NIL)

L4:
in the elsewhere segment:
L45:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L46:

L47:

VOP VALUE-CELL-REF t39[EAX] => t86[EAX] 
        MOV     #<TN t86[EAX]>, DWORD PTR [EAX-3]

VOP IF-EQ t86[EAX] 'NIL!87 {# T} 
        CMP     #<TN t86[EAX]>, 134217739
        JMP     NE, L48

L49:
L50:

VOP MOVE-ARG 'NIL!13 t40[S0]>t88[EAX] => t41[EAX] 
        MOV     #<TN t41[EAX]>, 134217739

VOP KNOWN-RETURN t40[S0] t69[S1] t41[EAX] {#} 
L51:
        LEA     #<TN t71[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t73[EBP]>, #<TN t40[S0]>
        RET     4
L52:

L48:

VOP SET 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>t89[ECX]
        ':INVALID!20[Const7]>t90[EDX]
        
        MOV     #<TN t89[ECX]>, #<TN 'SB-IMPL::*IGNORED-PACKAGE-LOCKS*!17[Const6]>
        MOV     #<TN t90[EDX]>, #<TN ':INVALID!20[Const7]>
        MOV     #<TN t91[EAX]>, DWORD PTR [ECX+17]
        OR      #<TN t91[EAX]>, #<TN t91[EAX]>
        JMP     Z, L53
        FS-SEGMENT-PREFIX
        CMP     DWORD PTR [EAX+0], 90
        JMP     Z, L53
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t90[EDX]>
        JMP     L54
L53:
        MOV     DWORD PTR [ECX-3], #<TN t90[EDX]>
L54:

VOP BRANCH {#} 
        JMP     L49

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME "DEFSTRUCT GROUP" {11A67B79}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;      003:       0000             ADD [EAX], AL
;      005:       0000             ADD [EAX], AL
;      007:       0000             ADD [EAX], AL
;      009:       0000             ADD [EAX], AL
;      00B:       0000             ADD [EAX], AL
;      00D:       0000             ADD [EAX], AL
;      00F:       0000             ADD [EAX], AL
;      011:       0000             ADD [EAX], AL
;      013:       0000             ADD [EAX], AL
;      015:       0000             ADD [EAX], AL
;      017:       0000             ADD [EAX], AL
;      019:       0000             ADD [EAX], AL
;      01B:       008F45F88D65     ADD [EDI+1703802949], CL
;      021:       C0B90B00000864   SAR BYTE PTR [ECX+134217739], 100
;      028:       800D4800000004   OR BYTE PTR [#x48], 4
;      02F:       B808000000       MOV EAX, 8
;      034:       64               BYTE #X64
;      035:       030520000000     ADD EAX, [#x20]
;      03B:       64               BYTE #X64
;      03C:       3B0524000000     CMP EAX, [#x24]
;      042:       7607             JBE L1
;      044:       E800000000       CALL L0
;      049: L0:   EB0A             JMP L2
;      04B: L1:   64               BYTE #X64
;      04C:       890520000000     MOV [#x20], EAX
;      052:       83E808           SUB EAX, 8
;      055: L2:   C7003A010000     MOV DWORD PTR [EAX], 314
;      05B:       8D4007           LEA EAX, [EAX+7]
;      05E:       8948FD           MOV [EAX-3], ECX
;      061:       64               BYTE #X64
;      062:       80354800000004   XOR BYTE PTR [#x48], 4
;      069:       7403             JEQ L3
;      06B:       0F0B09           BREAK 9                    ; pending interrupt trap
;      06E: L3:   8945D0           MOV [EBP-48], EAX
;      071:       8B0D11000000     MOV ECX, [#x11]
;      077:       8B4111           MOV EAX, [ECX+17]
;      07A:       64               BYTE #X64
;      07B:       8B00             MOV EAX, [EAX]
;      07D:       83F85A           CMP EAX, 90
;      080:       7503             JNE L4
;      082:       8B41FD           MOV EAX, [ECX-3]
;      085: L4:   390515000000     CMP [#x15], EAX
;      08B:       0F84AF000000     JEQ L7
;      091: L5:   64               BYTE #X64
;      092:       8B050C000000     MOV EAX, [#xC]
;      098:       8945C4           MOV [EBP-60], EAX
;      09B:       8B05D8000008     MOV EAX, [#x80000D8]
;      0A1:       64               BYTE #X64
;      0A2:       8B00             MOV EAX, [EAX]
;      0A4:       8B0D18040008     MOV ECX, [#x8000418]
;      0AA:       64               BYTE #X64
;      0AB:       8B09             MOV ECX, [ECX]
;      0AD:       8945C8           MOV [EBP-56], EAX
;      0B0:       894DCC           MOV [EBP-52], ECX
;      0B3:       8965C0           MOV [EBP-64], ESP
;      0B6:       8D4DD4           LEA ECX, [EBP-44]
;      0B9:       8B05F8000008     MOV EAX, [#x80000F8]
;      0BF:       64               BYTE #X64
;      0C0:       8B00             MOV EAX, [EAX]
;      0C2:       8901             MOV [ECX], EAX
;      0C4:       896904           MOV [ECX+4], EBP
;      0C7:       C7410899010000   MOV DWORD PTR [ECX+8], 409
;      0CE:       8D45D4           LEA EAX, [EBP-44]
;      0D1:       8B0DF8000008     MOV ECX, [#x80000F8]
;      0D7:       64               BYTE #X64
;      0D8:       8901             MOV [ECX], EAX
;      0DA:       8BDC             MOV EBX, ESP
;      0DC:       83EC0C           SUB ESP, 12
;      0DF:       8B1519000000     MOV EDX, [#x19]
;      0E5:       8B3D1D000000     MOV EDI, [#x1D]
;      0EB:       8B0521000000     MOV EAX, [#x21]
;      0F1:       B908000000       MOV ECX, 8
;      0F6:       896BFC           MOV [EBX-4], EBP
;      0F9:       8BEB             MOV EBP, EBX
;      0FB:       FF5005           CALL DWORD PTR [EAX+5]
;      0FE:       7302             JNB L6
;      100:       8BE3             MOV ESP, EBX
;      102: L6:   8B05F8000008     MOV EAX, [#x80000F8]
;      108:       64               BYTE #X64
;      109:       8B00             MOV EAX, [EAX]
;      10B:       8B00             MOV EAX, [EAX]
;      10D:       8B0DF8000008     MOV ECX, [#x80000F8]
;      113:       64               BYTE #X64
;      114:       8901             MOV [ECX], EAX
;      116:       8BD5             MOV EDX, EBP
;      118:       8BCC             MOV ECX, ESP
;      11A:       83EC40           SUB ESP, 64
;      11D:       8B45D0           MOV EAX, [EBP-48]
;      120:       8951FC           MOV [ECX-4], EDX
;      123:       8BE9             MOV EBP, ECX
;      125:       C745F85A010000   MOV DWORD PTR [EBP-8], 346
;      12C:       E9C0000000       JMP L13
;      131:       BA0B000008       MOV EDX, 134217739
;      136:       8D65F8           LEA ESP, [EBP-8]
;      139:       F8               CLC
;      13A:       8B6DFC           MOV EBP, [EBP-4]
;      13D:       C20400           RET 4
;      140: L7:   8B0D11000000     MOV ECX, [#x11]
;      146:       BA0B000008       MOV EDX, 134217739
;      14B:       8B4111           MOV EAX, [ECX+17]
;      14E:       09C0             OR EAX, EAX
;      150:       740B             JEQ L8
;      152:       64               BYTE #X64
;      153:       83385A           CMP DWORD PTR [EAX], 90
;      156:       7405             JEQ L8
;      158:       64               BYTE #X64
;      159:       8910             MOV [EAX], EDX
;      15B:       EB03             JMP L9
;      15D: L8:   8951FD           MOV [ECX-3], EDX
;      160: L9:   8B45D0           MOV EAX, [EBP-48]
;      163:       B927000008       MOV ECX, 134217767
;      168:       8948FD           MOV [EAX-3], ECX
;      16B:       E921FFFFFF       JMP L5
;      170:       8955F4           MOV [EBP-12], EDX
;      173:       895DF0           MOV [EBP-16], EBX
;      176:       894DEC           MOV [EBP-20], ECX
;      179:       8B4DC8           MOV ECX, [EBP-56]
;      17C:       8B55CC           MOV EDX, [EBP-52]
;      17F:       8B05D8000008     MOV EAX, [#x80000D8]
;      185:       64               BYTE #X64
;      186:       8908             MOV [EAX], ECX
;      188:       8B0518040008     MOV EAX, [#x8000418]
;      18E:       64               BYTE #X64
;      18F:       8910             MOV [EAX], EDX
;      191:       8B75C4           MOV ESI, [EBP-60]
;      194:       64               BYTE #X64
;      195:       8B150C000000     MOV EDX, [#xC]
;      19B:       39D6             CMP ESI, EDX
;      19D:       742C             JEQ L12
;      19F: L10:  8B42FC           MOV EAX, [EDX-4]
;      1A2:       09C0             OR EAX, EAX
;      1A4:       7410             JEQ L11
;      1A6:       8B4AF8           MOV ECX, [EDX-8]
;      1A9:       8B5811           MOV EBX, [EAX+17]
;      1AC:       64               BYTE #X64
;      1AD:       890B             MOV [EBX], ECX
;      1AF:       C742FC00000000   MOV DWORD PTR [EDX-4], 0
;      1B6: L11:  C742F800000000   MOV DWORD PTR [EDX-8], 0
;      1BD:       83EA08           SUB EDX, 8
;      1C0:       39D6             CMP ESI, EDX
;      1C2:       75DB             JNE L10
;      1C4:       64               BYTE #X64
;      1C5:       89150C000000     MOV [#xC], EDX
;      1CB: L12:  8BD5             MOV EDX, EBP
;      1CD:       8BCC             MOV ECX, ESP
;      1CF:       83EC40           SUB ESP, 64
;      1D2:       8B45D0           MOV EAX, [EBP-48]
;      1D5:       8951FC           MOV [ECX-4], EDX
;      1D8:       8BE9             MOV EBP, ECX
;      1DA:       C745F80C020000   MOV DWORD PTR [EBP-8], 524
;      1E1:       EB0E             JMP L13
;      1E3:       8B45F4           MOV EAX, [EBP-12]
;      1E6:       8B5DF0           MOV EBX, [EBP-16]
;      1E9:       8B4DEC           MOV ECX, [EBP-20]
;      1EC:       E800000000       CALL L13
;      1F1: L13:  8B40FD           MOV EAX, [EAX-3]
;      1F4:       3D0B000008       CMP EAX, 134217739
;      1F9:       750E             JNE L15
;      1FB: L14:  B80B000008       MOV EAX, 134217739
;      200:       8D65F8           LEA ESP, [EBP-8]
;      203:       8B6DFC           MOV EBP, [EBP-4]
;      206:       C20400           RET 4
;      209: L15:  8B0D11000000     MOV ECX, [#x11]
;      20F:       8B1515000000     MOV EDX, [#x15]
;      215:       8B4111           MOV EAX, [ECX+17]
;      218:       09C0             OR EAX, EAX
;      21A:       740B             JEQ L16
;      21C:       64               BYTE #X64
;      21D:       83385A           CMP DWORD PTR [EAX], 90
;      220:       7405             JEQ L16
;      222:       64               BYTE #X64
;      223:       8910             MOV [EAX], EDX
;      225:       EB03             JMP L17
;      227: L16:  8951FD           MOV [ECX-3], EDX
;      22A: L17:  EBCF             JMP L14
;      22C:       90               NOP
;      22D:       90               NOP
;      22E:       90               NOP
;      22F:       90               NOP

;;;; component: (SB-C::VARARGS-ENTRY MAKE-GROUP)


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
  4>  5: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA (&OPTIONAL (#:G503) (#:G504) &REST #:G505))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G503
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12603FD9}> {12603F99}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G504
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12604049}> {12604009}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G505
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126040B9}> {12604079}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:G503 #:G504) {12604A01}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:G503 #:G504 #:N-CONTEXT-506
                                  #:N-COUNT-507) {126053A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:G503 #:G504 #:G505) {12604281}> {12604121}>)
  6>     known combination v3 v5
  7>  8: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
  9> 10: SB-C::%MORE-ARG-CONTEXT {GLOBAL-FUNCTION}
 11> 12: #:G502
 13> 14: '0
 15> 16: known combination v10 v12 v14
 17>     local mv-combination v8 v16
 18>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 19> 20: SB-C::CLAMBDA (LET ((#:N-INDEX-487 (- "#<...>" . "#<...>"))
                             #:N-SUPPLIED-493
                             (#:N-VALUE-492 "#<...>" . "#<...>")
                             ("#<...>" . "#<...>")
                             "#<...>"
                             . "#<...>")
                         )
 21> 22: SB-KERNEL:%NEGATE {GLOBAL-FUNCTION}
 23> 24: - {GLOBAL-FUNCTION}
 25> 26: #:G504
 27> 28: '1
 29> 30: known combination v24 v26 v28
 31> 32: known combination v22 v30
 33> 34: 'NIL
 35> 36: 'NIL
 37> 38: '0.0d0
 39> 40: 'NIL
 41>     local combination v20 v32 v34 v36 v38 v40
 42>     bind SB-C::CLAMBDA (LET ((#:N-INDEX-487 (- "#<...>" . "#<...>"))
                                  #:N-SUPPLIED-493
                                  (#:N-VALUE-492 "#<...>" . "#<...>")
                                  ("#<...>" . "#<...>")
                                  "#<...>"
                                  . "#<...>")
                              ) :KIND :LET ..
                                             IR1 block 1 start c43
                                             start stack:
                                              43>     entry NIL
                                             end stack:
                                             successors c44

IR1 block 2 start c44
start stack:
 44>     entry NIL
end stack:
successors c45

IR1 block 9 start c45
start stack:
 45> 46: > {GLOBAL-FUNCTION}
 47> 48: #:N-INDEX-487
 49> 50: '0
 51> 52: known combination v46 v48 v50
 53>     if v52 c54 c55
end stack:
successors c54 c55

IR1 block 3 start c55
start stack:
 55> 56: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 57> 58: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (#:N-VALUE-TEMP-489) (#:N-KEY-488)
                               &REST #:G497))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:N-VALUE-TEMP-489
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125FBC29}> {125FBBE9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:N-KEY-488
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {125FBC99}> {125FBC59}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G497
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {125FBD09}> {125FBCC9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:N-VALUE-TEMP-489
                                     #:N-KEY-488) {125FF029}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:N-VALUE-TEMP-489 #:N-KEY-488
                                  #:N-CONTEXT-500 #:N-COUNT-501) {125FF9C9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:N-VALUE-TEMP-489 #:N-KEY-488
                                  #:G497) {125FBED9}> {125FBD79}>)
 59>     known combination v56 v58
 60> 61: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
 62> 63: SB-C::%MORE-KW-ARG {GLOBAL-FUNCTION}
 64> 65: #:G503
 66> 67: #:N-INDEX-487
 68> 69: cast v67 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (MOD
                                                                           536870911)>]
 70> 71: known combination v63 v65 v69
 72>     local mv-combination v61 v71
 73>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
 74> 75: + {GLOBAL-FUNCTION}
 76> 77: #:N-INDEX-487
 78> 79: '2
 80> 81: known combination v75 v77 v79
 82>     set #:N-INDEX-487 v81
 83> 84: EQ {GLOBAL-FUNCTION}
 85> 86: #:N-KEY-488
 87> 88: ':CENTER
 89> 90: known combination v84 v86 v88
 91>     if v90 c92 c93
end stack:
successors c92 c93

IR1 block 5 start c93
start stack:
 93> 94: EQ {GLOBAL-FUNCTION}
 95> 96: #:N-KEY-488
 97> 98: ':RADIUS
 99>100: known combination v94 v96 v98
101>     if v100 c102 c103
end stack:
successors c103 c102

IR1 block 8 start c102
start stack:
102>104: #:N-VALUE-TEMP-489
105>     set #:N-VALUE-494 v104
end stack:
successors c45

IR1 block 6 start c103
start stack:
103>106: EQ {GLOBAL-FUNCTION}
107>108: #:N-KEY-488
109>110: ':CHILDREN
111>112: known combination v106 v108 v110
113>     if v112 c114 c45
end stack:
successors c45 c114

IR1 block 7 start c114
start stack:
114>115: #:N-VALUE-TEMP-489
116>     set #:N-VALUE-495 v115
end stack:
successors c45

IR1 block 4 start c92
start stack:
 92>117: 'T
118>     set #:N-SUPPLIED-493 v117
119>120: #:N-VALUE-TEMP-489
121>     set #:N-VALUE-492 v120
end stack:
successors c45

IR1 block 10 start c54
start stack:
 54>122: SB-C::CLAMBDA (SB-C::VARARGS-ENTRY MAKE-GROUP)
123>124: #:N-VALUE-492
125>126: #:N-SUPPLIED-493
127>128: #:N-VALUE-494
129>130: #:N-VALUE-495
131>     local combination v122 v124 <none> <none> <none>
132>     bind SB-C::CLAMBDA (SB-C::VARARGS-ENTRY MAKE-GROUP) :KIND :LET
133>     if v126 c134 c135
end stack:
successors c134 c135

IR1 block 15 start c135
start stack:
135>136: ZERO {SPECIAL}
end stack:
successors c137

IR1 block 11 start c134
start stack:
134>136: #:G462-DEFAULTING-TEMP
end stack:
successors c137

IR1 block 12 start c137
start stack:
137>138: cast v128 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
139>140: cast v130 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
end stack:
successors c141

IR1 block 13 start c141
start stack:
141>     entry NIL
142>143: SB-C::CLAMBDA (LET ((#:INSTANCE465 (TRULY-THE "#<...>" . "#<...>")))
                         )
144>145: SB-KERNEL::%MAKE-INSTANCE-WITH-LAYOUT {GLOBAL-FUNCTION}
146>147: '#<SB-KERNEL:LAYOUT for GROUP {125EC981}>
148>149: full combination v145 v147
150>     local combination v143 v149
151>     bind SB-C::CLAMBDA (LET ((#:INSTANCE465
                                   (TRULY-THE "#<...>" . "#<...>")))
                              ) :KIND :LET
152>153: SB-KERNEL:%INSTANCE-SET {GLOBAL-FUNCTION}
154>155: #:INSTANCE465
156>157: '1
158>     known combination v153 v155 v157 v136
159>160: SB-KERNEL:%RAW-INSTANCE-SET/DOUBLE {GLOBAL-FUNCTION}
161>162: #:INSTANCE465
163>164: '0
165>     known combination v160 v162 v164 v138
166>167: SB-KERNEL:%INSTANCE-SET {GLOBAL-FUNCTION}
168>169: #:INSTANCE465
170>171: '2
172>     known combination v167 v169 v171 v140
173>174: #:INSTANCE465
end stack:
successors c175

IR1 block 14 start c175
start stack:
175>     return v174 SB-C::CLAMBDA (SB-C::TL-XEP NIL)
end stack:
successors c176

IR1 block 16 start c177
start stack:
177>178: SB-C::%ODD-KEY-ARGS-ERROR {GLOBAL-FUNCTION}
179>     known combination v178
end stack:
successors c176


;;;; IR2 component: (SB-C::VARARGS-ENTRY MAKE-GROUP)

entries:
    L1: MAKE-GROUP


TNs: 18 local, 3 temps, 13 constant, 2 env, 0 comp, 14 global.
Wired: 34, Unused: 0. 17 blocks, 126 global conflicts.

IR1 block 19 start c176

    IR2 block NIL start c176

IR1 block 0 start c1

    IR2 block 16 start c1
    0: XEP-ALLOCATE-FRAME {# T}
    1: COPY-MORE-ARG {0}
    2: SETUP-ENVIRONMENT {#}
    3: MOVE t1[ECX] => #:G502!2[ECX]
    4: MOVE t3[S0]>t4[EAX] => t5[S0]<t6[EAX]
    5: SAP-MOVE t7[S1]>t8[EAX] => t9[S1]<t10[EAX]
    6: NOTE-ENVIRONMENT-START {#}
    7: MORE-ARG-CONTEXT #:G502!2[ECX] {0} => t11[EAX] t12[ECX]
    8: MOVE t11[EAX] => #:G503!13[S2]<t14[EAX]
    9: FAST---C/FIXNUM=>FIXNUM t12[ECX] {1} => t15[EAX]
    10: FAST-NEGATE/FIXNUM t15[EAX] => t16[EAX]
    11: MOVE t16[EAX] => #:N-INDEX-487!17[S4]<t18[EAX]
    12: MOVE 'NIL!19 => #:N-SUPPLIED-493!20[EBX]
    13: MOVE 'NIL!19 => #:N-VALUE-492!21[ESI]
    14: MOVE-FROM-FP-CONSTANT '0.0d0!22 => #:N-VALUE-494!23[EDI]
    15: MOVE 'NIL!19 => #:N-VALUE-495!24[S3]<t25[EDX]
    16: FAST-LOGTEST-C/FIXNUM t12[ECX] {# NIL 1}

IR1 block 1 start c43

    IR2 block 15 start c43

IR1 block 2 start c44

    IR2 block 14 start c44
    0: BRANCH {#}

IR1 block 3 start c55

    IR2 block 12 start c55
    L2:
    0: MOVE #:N-INDEX-487!17[S4]>t26[EDX] => t27[EDX]
    1: MORE-KW-ARG #:G503!13[S2]>t28[EAX] t27[EDX] => t29[ECX] t30[EDX]
    2: MOVE #:N-INDEX-487!17[S4]>t31[EAX] => t32[EAX]
    3: FAST-+-C/FIXNUM=>FIXNUM t32[EAX] {2} => t33[EAX]
    4: MOVE t33[EAX] => #:N-INDEX-487!17[S4]<t34[EAX]
    5: IF-EQ t30[EDX] ':CENTER!35[Const6]>t36[EAX] {# T}

IR1 block 4 start c92

    IR2 block 7 start c92
    0: MOVE 'T!37 => #:N-SUPPLIED-493!20[EBX]
    1: MOVE t29[ECX] => #:N-VALUE-492!21[ESI]
    2: BRANCH {#}

IR1 block 5 start c93

    IR2 block 11 start c93
    L3:
    0: IF-EQ t30[EDX] ':RADIUS!38[Const7]>t39[EAX] {# NIL}

IR1 block 6 start c103

    IR2 block 9 start c103
    0: IF-EQ t30[EDX] ':CHILDREN!40[Const8]>t41[EAX] {# T}

IR1 block 7 start c114

    IR2 block 8 start c114
    0: MOVE t29[ECX] => #:N-VALUE-495!24[S3]<t42[ECX]
    1: BRANCH {#}

IR1 block 8 start c102

    IR2 block 10 start c102
    L4:
    0: MOVE t29[ECX] => #:N-VALUE-494!23[EDI]

IR1 block 9 start c45

    IR2 block 13 start c45
    L5:
    0: FAST-IF->-C/FIXNUM #:N-INDEX-487!17[S4] {# T 0}

IR1 block 10 start c54

    IR2 block 6 start c54
    0: IF-EQ #:N-SUPPLIED-493!20[EBX] 'NIL!43 {# NIL}

IR1 block 11 start c134

    IR2 block 4 start c134
    0: MOVE #:N-VALUE-492!21[ESI] => t44[ESI]

IR1 block 12 start c137

    IR2 block 3 start c137
    L6:
    0: MOVE-TO-DOUBLE #:N-VALUE-494!23[EDI] => t45[S4]<t46[FR0]

IR1 block 13 start c141

    IR2 block 2 start c141 ..

assembly code for #<SB-C:COMPONENT
                    :NAME (SB-C::VARARGS-ENTRY MAKE-GROUP) {12607FC1}>

in the elsewhere segment:
L7:
in the regular segment:
L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# T} 
        .align  3
L10:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
L11:

VOP COPY-MORE-ARG {0} 
        JECXZ   L12
        LEA     #<TN t47[EBX]>, DWORD PTR [EBP-32]
        SUB     #<TN t47[EBX]>, #<TN t48[ECX]>
        MOV     #<TN t49[ESP]>, #<TN t47[EBX]>
        MOV     #<TN t47[EBX]>, #<TN t48[ECX]>
        SUB     #<TN t48[ECX]>, 12
        JMP     BE, L13
        PUSH    #<TN t50[EDI]>
        PUSH    #<TN t51[ESI]>
        PUSH    #<TN t47[EBX]>
        MOV     #<TN t51[ESI]>, #<TN t52[EBP]>
        SUB     #<TN t51[ESI]>, #<TN t47[EBX]>
        XOR     #<TN t47[EBX]>, #<TN t47[EBX]>
L14:
        MOV     #<TN t50[EDI]>, DWORD PTR [ESI+EBX+0]
        MOV     DWORD PTR [ESP+EBX+12], #<TN t50[EDI]>
        ADD     #<TN t47[EBX]>, 4
        SUB     #<TN t48[ECX]>, 4
        JMP     NZ, L14
        POP     #<TN t47[EBX]>
        POP     #<TN t51[ESI]>
        POP     #<TN t50[EDI]>
L13:
        MOV     #<TN t48[ECX]>, #<TN t47[EBX]>
        MOV     DWORD PTR [EBP-36], #<TN t53[EDX]>
        CMP     #<TN t48[ECX]>, 4
        JMP     EQ, L15
        MOV     DWORD PTR [EBP-40], #<TN t50[EDI]>
        CMP     #<TN t48[ECX]>, 8
        JMP     EQ, L15
        MOV     DWORD PTR [EBP-44], #<TN t51[ESI]>
        JMP     L15
L12:
        LEA     #<TN t49[ESP]>, DWORD PTR [EBP-32]
L15:

VOP NOTE-ENVIRONMENT-START {#} 
L16:

VOP MORE-ARG-CONTEXT #:G502!2[ECX] {0} => t11[EAX] t12[ECX] 
        LEA     #<TN t11[EAX]>, DWORD PTR [ESP+ECX-4]

VOP MOVE t11[EAX] => #:G503!13[S2]<t14[EAX] 
        MOV     #<TN #:G503!13[S2]>, #<TN t11[EAX]>

VOP FAST---C/FIXNUM=>FIXNUM t12[ECX] {1} => t15[EAX] 
        MOV     #<TN t15[EAX]>, #<TN t12[ECX]>
        SUB     #<TN t15[EAX]>, 4

VOP FAST-NEGATE/FIXNUM t15[EAX] => t16[EAX] 
        NEG     #<TN t16[EAX]>

VOP MOVE t16[EAX] => #:N-INDEX-487!17[S4]<t18[EAX] 
        MOV     #<TN #:N-INDEX-487!17[S4]>, #<TN t16[EAX]>

VOP MOVE 'NIL!19 => #:N-SUPPLIED-493!20[EBX] 
        MOV     #<TN #:N-SUPPLIED-493!20[EBX]>, 134217739

VOP MOVE 'NIL!19 => #:N-VALUE-492!21[ESI] 
        MOV     #<TN #:N-VALUE-492!21[ESI]>, 134217739

VOP MOVE-FROM-FP-CONSTANT '0.0d0!22 => #:N-VALUE-494!23[EDI] 
        MOV     #<TN #:N-VALUE-494!23[EDI]>, DWORD PTR [+134218980]

VOP MOVE 'NIL!19 => #:N-VALUE-495!24[S3]<t25[EDX] 
        MOV     #<TN #:N-VALUE-495!24[S3]>, 134217739

VOP FAST-LOGTEST-C/FIXNUM t12[ECX] {# NIL 1} 
        TEST    #<TN t54[CL]>, 4
        JMP     NE, L17

L18:
L19:

VOP BRANCH {#} 
        JMP     L5

L2:

VOP MOVE #:N-INDEX-487!17[S4]>t26[EDX] => t27[EDX] 
        MOV     #<TN t26[EDX]>, #<TN #:N-INDEX-487!17[S4]>

VOP MORE-KW-ARG #:G503!13[S2]>t28[EAX] t27[EDX] => t29[ECX] t30[EDX] 
        MOV     #<TN t28[EAX]>, #<TN #:G503!13[S2]>
        MOV     #<TN t29[ECX]>, DWORD PTR [EAX+EDX+0]
        MOV     #<TN t30[EDX]>, DWORD PTR [EAX+EDX+4]

VOP MOVE #:N-INDEX-487!17[S4]>t31[EAX] => t32[EAX] 
        MOV     #<TN t31[EAX]>, #<TN #:N-INDEX-487!17[S4]>

VOP FAST-+-C/FIXNUM=>FIXNUM t32[EAX] {2} => t33[EAX] 
        ADD     #<TN t33[EAX]>, 8

VOP MOVE t33[EAX] => #:N-INDEX-487!17[S4]<t34[EAX] 
        MOV     #<TN #:N-INDEX-487!17[S4]>, #<TN t33[EAX]>

VOP IF-EQ t30[EDX] ':CENTER!35[Const6]>t36[EAX] {# T} 
        CMP     #<TN t30[EDX]>, #<TN ':CENTER!35[Const6]>
        JMP     NE, L3

L20:

VOP MOVE 'T!37 => #:N-SUPPLIED-493!20[EBX] 
        MOV     #<TN #:N-SUPPLIED-493!20[EBX]>, 134217767

VOP MOVE t29[ECX] => #:N-VALUE-492!21[ESI] 
        MOV     #<TN #:N-VALUE-492!21[ESI]>, #<TN t29[ECX]>

VOP BRANCH {#} 
        JMP     L5

L3:

VOP IF-EQ t30[EDX] ':RADIUS!38[Const7]>t39[EAX] {# NIL} 
        CMP     #<TN t30[EDX]>, #<TN ':RADIUS!38[Const7]>
        JMP     E, L4

L21:

VOP IF-EQ t30[EDX] ':CHILDREN!40[Const8]>t41[EAX] {# T} 
        CMP     #<TN t30[EDX]>, #<TN ':CHILDREN!40[Const8]>
        JMP     NE, L5

L22:

VOP MOVE t29[ECX] => #:N-VALUE-495!24[S3]<t42[ECX] 
        MOV     #<TN #:N-VALUE-495!24[S3]>, #<TN t29[ECX]>

VOP BRANCH {#} 
        JMP     L5

L4:

VOP MOVE t29[ECX] => #:N-VALUE-494!23[EDI] 
        MOV     #<TN #:N-VALUE-494!23[EDI]>, #<TN t29[ECX]>

L5:

VOP FAST-IF->-C/FIXNUM #:N-INDEX-487!17[S4] {# T 0} 
        CMP     #<TN #:N-INDEX-487!17[S4]>, 0
        JMP     LE, L2

L23:

VOP IF-EQ #:N-SUPPLIED-493!20[EBX] 'NIL!43 {# NIL} 
        CMP     #<TN #:N-SUPPLIED-493!20[EBX]>, 134217739
        JMP     E, L24

L25:
L6:

VOP MOVE-TO-DOUBLE #:N-VALUE-494!23[EDI] => t45[S4]<t46[FR0] 
        FSTP    #<TN t46[FR0]>
        FLDD    DWORD PTR [EDI+1]
        FSTD    DWORD PTR [EBP-24]

L26:

VOP MOVE-OPERAND t44[ESI] {SB-VM::STORE-STACK} => t55[S2] 
        MOV     #<TN t55[S2]>, #<TN t44[ESI]>

VOP ALLOCATE-FULL-CALL-FRAME {1} => t56[EBX] 
        MOV     #<TN t56[EBX]>, #<TN t49[ESP]>
        SUB     #<TN t49[ESP]>, 12

VOP MOVE-ARG '#<SB-KERNEL:LAYOUT for GROUP {125EC981}>!57[Const9]>t58[EDX]
             t56[EBX]
             => t59[EDX] 
        MOV     #<TN t58[EDX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {125EC981}>!57[Const9]>

VOP CALL-NAMED t56[EBX] t60[Const10]>t61[EAX] t59[EDX] {# 1 1 NIL} => t62[EDX] 
        MOV     #<TN t61[EAX]>, #<TN t60[Const10]>
L27:
        MOV     #<TN t63[ECX]>, 4
        MOV     DWORD PTR [EBX-4], #<TN t52[EBP]>
        MOV     #<TN t52[EBP]>, #<TN t56[EBX]>
L28:
L29:
        CALL    DWORD PTR [EAX+5]
L30:
        JMP     NC, L31
        MOV     #<TN t49[ESP]>, #<TN t47[EBX]>
L31:
L32:

VOP MOVE-OPERAND t55[S2] {SB-VM::LOAD-STACK} => t44[ESI] 
        MOV     #<TN t44[ESI]>, #<TN t55[S2]>

VOP INSTANCE-INDEX-SET t64[EDX] '1!65 t44[ESI] => t66[EAX] 
        MOV     DWORD PTR [EDX+7], #<TN t44[ESI]>
        MOV     #<TN t66[EAX]>, #<TN t44[ESI]>

VOP RAW-INSTANCE-SET/DOUBLE t64[EDX] '0!67 t45[S4]>t68[FR0] => t69[FR0] 
        FSTP    #<TN t68[FR0]>
        FLDD    DWORD PTR [EBP-24]
        MOV     #<TN t70[EAX]>, DWORD PTR [EDX-1]
        SHR     #<TN t70[EAX]>, 8
        FSTD    DWORD PTR [EDX+EAX*4-5]

VOP INSTANCE-INDEX-SET t64[EDX] '2!71 #:N-VALUE-495!24[S3]>t72[EAX] => t73[EAX] 
        MOV     #<TN t72[EAX]>, #<TN #:N-VALUE-495!24[S3]>
        MOV     DWORD PTR [EDX+11], #<TN t72[EAX]>

L33:

VOP RETURN-SINGLE t5[S0] t9[S1] t74[EDX] 
L34:
        LEA     #<TN t49[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t52[EBP]>, #<TN t5[S0]>
        RET     4

L24:

VOP FAST-SYMBOL-VALUE 'ZERO!75[Const11]>t76[EAX] => t44[ESI] 
        MOV     #<TN t76[EAX]>, #<TN 'ZERO!75[Const11]>
        MOV     #<TN t44[ESI]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t44[ESI]>, DWORD PTR [ESI+0]
        CMP     #<TN t44[ESI]>, 90
        JMP     NE, L35
        MOV     #<TN t44[ESI]>, DWORD PTR [EAX-3]
L35:

VOP BRANCH {#} 
        JMP     L6

L17:

VOP ODD-KEY-ARGS-ERROR 
        WORD    2831
L36:
        BYTE    10
        BYTE    1
        BYTE    32

        .align  3

disassembly of code for #<SB-C:COMPONENT
                          :NAME (SB-C::VARARGS-ENTRY MAKE-GROUP) {12607FC1}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;      003:       0000             ADD [EAX], AL
;      005:       0000             ADD [EAX], AL
;      007:       0000             ADD [EAX], AL
;      009:       0000             ADD [EAX], AL
;      00B:       0000             ADD [EAX], AL
;      00D:       0000             ADD [EAX], AL
;      00F:       0000             ADD [EAX], AL
;      011:       0000             ADD [EAX], AL
;      013:       0000             ADD [EAX], AL
;      015:       0000             ADD [EAX], AL
;      017:       0000             ADD [EAX], AL
;      019:       0000             ADD [EAX], AL
;      01B:       008F45F8E340     ADD [EDI+1088682053], CL
;      021:       8D5DE0           LEA EBX, [EBP-32]
;      024:       29CB             SUB EBX, ECX
;      026:       8BE3             MOV ESP, EBX
;      028:       8BD9             MOV EBX, ECX
;      02A:       83E90C           SUB ECX, 12
;      02D:       761B             JBE L1
;      02F:       57               PUSH EDI
;      030:       56               PUSH ESI
;      031:       53               PUSH EBX
;      032:       8BF5             MOV ESI, EBP
;      034:       29DE             SUB ESI, EBX
;      036:       31DB             XOR EBX, EBX
;      038: L0:   8B3C1E           MOV EDI, [ESI+EBX]
;      03B:       897C1C0C         MOV [ESP+EBX+12], EDI
;      03F:       83C304           ADD EBX, 4
;      042:       83E904           SUB ECX, 4
;      045:       75F1             JNE L0
;      047:       5B               POP EBX
;      048:       5E               POP ESI
;      049:       5F               POP EDI
;      04A: L1:   8BCB             MOV ECX, EBX
;      04C:       8955DC           MOV [EBP-36], EDX
;      04F:       83F904           CMP ECX, 4
;      052:       7410             JEQ L2
;      054:       897DD8           MOV [EBP-40], EDI
;      057:       83F908           CMP ECX, 8
;      05A:       7408             JEQ L2
;      05C:       8975D4           MOV [EBP-44], ESI
;      05F:       EB03             JMP L2
;      061:       8D65E0           LEA ESP, [EBP-32]
;      064: L2:   8D440CFC         LEA EAX, [ESP+ECX-4]
;      068:       8945F4           MOV [EBP-12], EAX
;      06B:       8BC1             MOV EAX, ECX
;      06D:       83E804           SUB EAX, 4
;      070:       F7D8             NEG EAX
;      072:       8945EC           MOV [EBP-20], EAX
;      075:       BB0B000008       MOV EBX, 134217739
;      07A:       BE0B000008       MOV ESI, 134217739
;      07F:       8B3DE4040008     MOV EDI, [#x80004E4]
;      085:       C745F00B000008   MOV DWORD PTR [EBP-16], 134217739
;      08C:       F6C104           TEST CL, 4
;      08F:       0F85B8000000     JNE L11
;      095:       EB3E             JMP L6
;      097: L3:   8B55EC           MOV EDX, [EBP-20]
;      09A:       8B45F4           MOV EAX, [EBP-12]
;      09D:       8B0C10           MOV ECX, [EAX+EDX]
;      0A0:       8B541004         MOV EDX, [EAX+EDX+4]
;      0A4:       8B45EC           MOV EAX, [EBP-20]
;      0A7:       83C008           ADD EAX, 8
;      0AA:       8945EC           MOV [EBP-20], EAX
;      0AD:       3B1511000000     CMP EDX, [#x11]
;      0B3:       7509             JNE L4
;      0B5:       BB27000008       MOV EBX, 134217767
;      0BA:       8BF1             MOV ESI, ECX
;      0BC:       EB17             JMP L6
;      0BE: L4:   3B1515000000     CMP EDX, [#x15]
;      0C4:       740D             JEQ L5
;      0C6:       3B1519000000     CMP EDX, [#x19]
;      0CC:       7507             JNE L6
;      0CE:       894DF0           MOV [EBP-16], ECX
;      0D1:       EB02             JMP L6
;      0D3: L5:   8BF9             MOV EDI, ECX
;      0D5: L6:   837DEC00         CMP DWORD PTR [EBP-20], 0
;      0D9:       7EBC             JLE L3
;      0DB:       81FB0B000008     CMP EBX, 134217739
;      0E1:       7454             JEQ L9
;      0E3: L7:   DDD8             FSTPD FR0
;      0E5:       DD4701           FLDD [EDI+1]
;      0E8:       DD55E8           FSTD [EBP-24]
;      0EB:       8975F4           MOV [EBP-12], ESI
;      0EE:       8BDC             MOV EBX, ESP
;      0F0:       83EC0C           SUB ESP, 12
;      0F3:       8B151D000000     MOV EDX, [#x1D]
;      0F9:       8B0521000000     MOV EAX, [#x21]
;      0FF:       B904000000       MOV ECX, 4
;      104:       896BFC           MOV [EBX-4], EBP
;      107:       8BEB             MOV EBP, EBX
;      109:       FF5005           CALL DWORD PTR [EAX+5]
;      10C:       7302             JNB L8
;      10E:       8BE3             MOV ESP, EBX
;      110: L8:   8B75F4           MOV ESI, [EBP-12]
;      113:       897207           MOV [EDX+7], ESI
;      116:       8BC6             MOV EAX, ESI
;      118:       DDD8             FSTPD FR0
;      11A:       DD45E8           FLDD [EBP-24]
;      11D:       8B42FF           MOV EAX, [EDX-1]
;      120:       C1E808           SHR EAX, 8
;      123:       DD5482FB         FSTD [EDX+EAX*4-5]
;      127:       8B45F0           MOV EAX, [EBP-16]
;      12A:       89420B           MOV [EDX+11], EAX
;      12D:       8D65F8           LEA ESP, [EBP-8]
;      130:       F8               CLC
;      131:       8B6DFC           MOV EBP, [EBP-4]
;      134:       C20400           RET 4
;      137: L9:   8B0525000000     MOV EAX, [#x25]
;      13D:       8B7011           MOV ESI, [EAX+17]
;      140:       64               BYTE #X64
;      141:       8B36             MOV ESI, [ESI]
;      143:       83FE5A           CMP ESI, 90
;      146:       7503             JNE L10
;      148:       8B70FD           MOV ESI, [EAX-3]
;      14B: L10:  EB96             JMP L7
;      14D: L11:  0F0B0A           BREAK 10                   ; error trap
;      150:       01               BYTE #X01
;      151:       20               BYTE #X20                  ; ODD-KEY-ARGS-ERROR
;      152:       90               NOP
;      153:       90               NOP
;      154:       90               NOP
;      155:       90               NOP
;      156:       90               NOP
;      157:       90               NOP

;;;; component: DOT


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA RAY-SPHERE
  4>  5: #:G520
  6>  7: #:G521
  8>  9: #:G522
 10> 11: #:G523
 12> 13: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 14> 15: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 16> 17: cast v9 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 18> 19: cast v11 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 20>     tail local combination v3 v13 v15 v17 v19
end stack:
successors c21

IR1 block 1 start c21
start stack:
 21>     bind SB-C::CLAMBDA RAY-SPHERE
end stack:
successors c22

IR1 block 2 start c22
start stack:
 22>     entry NIL
end stack:
successors c23

IR1 block 3 start c23
start stack:
 23>     entry NIL
 24> 25: - {GLOBAL-FUNCTION}
end stack:
successors c26

IR1 block 4 start c26
start stack:
 26>     entry NIL
 27> 28: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 29> 30: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G577))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A76281}> {12A76241}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A762F1}> {12A762B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G577
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A76361}> {12A76321}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A76D29}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-578
                                  #:N-COUNT-579) {12A776C9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G577) {12A76599}> {12A76439}>)
 31>     known combination v28 v30
 32> 33: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 34> 35: CENTER
 36> 37: '0
 38> 39: known combination v33 v35 v37
end stack:
successors c40

IR1 block 5 start c40
start stack:
 40>     entry NIL
 41> 42: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 43> 44: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G580))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A79671}> {12A79631}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A796E1}> {12A796A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G580
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A79751}> {12A79711}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A7A129}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-581
                                  #:N-COUNT-582) {12A7AAC9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G580) {12A79989}> {12A79829}>)
 45>     known combination v42 v44
 46> 47: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 48> 49: ORIG
 50> 51: '0
 52> 53: known combination v47 v49 v51
end stack:
successors c54

IR1 block 6 start c54
start stack:
 54> 55: known combination v25 v39 v53
 56> 57: - {GLOBAL-FUNCTION}
end stack:
successors c58

IR1 block 7 start c58
start stack:
 58>     entry NIL
 59> 60: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 61> 62: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G583))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A832A9}> {12A83269}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A83319}> {12A832D9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G583
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A83389}> {12A83349}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A83D51}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-584
                                  #:N-COUNT-585) {12A846F1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G583) {12A835C1}> {12A83461}>)
 63>     known combination v60 v62
 64> 65: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 66> 67: CENTER
 68> 69: '1
 70> 71: known combination v65 v67 v69
end stack:
successors c72

IR1 block 8 start c72
start stack:
 72>     entry NIL
 73> 74: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 75> 76: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G586))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A866A1}> {12A86661}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A86711}> {12A866D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G586
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A86781}> {12A86741}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A89171}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-587
                                  #:N-COUNT-588) {12A89B11}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G586) {12A869B9}> {12A86859}>)
 77>     known combination v74 v76
 78> 79: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 80> 81: ORIG
 82> 83: '1
 84> 85: known combination v79 v81 v83
end stack:
successors c86

IR1 block 9 start c86
start stack:
 86> 87: known combination v57 v71 v85
 88> 89: - {GLOBAL-FUNCTION}
end stack:
successors c90

IR1 block 10 start c90
start stack:
 90>     entry NIL
 91> 92: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 93> 94: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G589))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A91211}> {12A911D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A91281}> {12A91241}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G589
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A912F1}> {12A912B1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A91CB9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-590
                                  #:N-COUNT-591) {12A92659}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G589) {12A91529}> {12A913C9}>)
 95>     known combination v92 v94
 96> 97: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 98> 99: CENTER
100>101: '2
102>103: known combination v97 v99 v101
end stack:
successors c104

IR1 block 11 start c104
start stack:
104>     entry NIL
105>106: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
107>108: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G592))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A94609}> {12A945C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A94679}> {12A94639}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G592
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A946E9}> {12A946A9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A950B1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-593
                                  #:N-COUNT-594) {12A95A51}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G592) {12A94921}> {12A947C1}>)
109>     known combination v106 v108
110>111: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
112>113: ORIG
114>115: '2
116>117: known combination v111 v113 v115
end stack:
successors c118

IR1 block 12 start c118
start stack:
118>119: known combination v89 v103 v117
end stack:
successors c120

IR1 block 13 start c120
start stack:
120>     entry NIL
121>122: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
123>124: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
125>126: '214
127>128: '3
129>130: '6
131>132: known combination v124 v126 v128 v130
133>     local combination v122 v132
134>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
135>136: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
137>138: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G595))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A98FA9}> {12A98F69}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A99019}> {12A98FD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G595
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A99089}> {12A99049}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A99FD1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-596
                                  #:N-COUNT-597) {12A9A971}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G595) {12A99391}> {12A99231}>)
139>     known combination v136 v138
140>141: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
142>143: #:G1
144>145: '0
146>     known combination v141 v143 v145 v55
147>148: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
149>150: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G598))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A9CCF1}> {12A9CCB1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A9CD61}> {12A9CD21}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G598 ..>)>)
                                                    IR1 block 14 start c151
                                                    start stack:
                                                    151>152: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                            ((SB-C::OF-TYPE
                                                                              SB-C::LAMBDA-VAR)
                                                                             (SB-C::OF-TYPE
                                                                              SB-C::LAMBDA-VAR)))
                                                    end stack:
                                                    successors c153

IR1 block 15 start c153
start stack:
153>     entry NIL
154>155: + {GLOBAL-FUNCTION}
156>157: + {GLOBAL-FUNCTION}
158>159: * {GLOBAL-FUNCTION}
end stack:
successors c160

IR1 block 16 start c160
start stack:
160>     entry NIL
161>162: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
163>164: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G541))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11840C19}> {1183ADE9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11840BF9}> {1183ADA9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G541
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11840BD9}> {1183AD69}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1183AF31}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-542
                                  #:N-COUNT-543) {12A3F5C9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G541) {118246E1}> {11830901}>)
165>     known combination v162 v164
166>167: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
168>169: #:G1
170>171: '0
172>173: known combination v167 v169 v171
end stack:
successors c174

IR1 block 17 start c174
start stack:
174>     entry NIL
175>176: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
177>178: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G544))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11840971}> {1183A9C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11840951}> {1183A989}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G544
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11840931}> {1183A949}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1183ABB1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-545
                                  #:N-COUNT-546) {1183AB11}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G544) {11824581}> {11830701}>)
179>     known combination v176 v178
180>181: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
182>183: DIR
184>185: '0
186>187: known combination v181 v183 v185
end stack:
successors c188

IR1 block 18 start c188
start stack:
188>189: known combination v159 v173 v187
190>191: * {GLOBAL-FUNCTION}
end stack:
successors c192

IR1 block 19 start c192
start stack:
192>     entry NIL
193>194: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
195>196: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G547))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11840661}> {1183A501}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11840641}> {1183A4C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G547
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11840621}> {1183A481}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1183A6E9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-548
                                  #:N-COUNT-549) {1183A649}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G547) {118243A1}> {11830499}>)
197>     known combination v194 v196
198>199: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
200>201: #:G1
202>203: '1
204>205: known combination v199 v201 v203
end stack:
successors c206

IR1 block 20 start c206
start stack:
206>     entry NIL
207>208: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
209>210: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G550))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {118402F1}> {11839FB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {118402D1}> {11839F79}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G550
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {118402B1}> {11839F39}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1183A1A9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-551
                                  #:N-COUNT-552) {1183A109}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G550) {11824169}> {11830191}>)
211>     known combination v208 v210
212>213: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
214>215: DIR
216>217: '1
218>219: known combination v213 v215 v217
end stack:
successors c220

IR1 block 21 start c220
start stack:
220>221: known combination v191 v205 v219
222>223: known combination v157 v189 v221
224>225: * {GLOBAL-FUNCTION}
end stack:
successors c226

IR1 block 22 start c226
start stack:
226>     entry NIL
227>228: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
229>230: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G553))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183FF51}> {11839911}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183FF31}> {118398D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G553
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1183FF11}> {11839891}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11839AF9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-554
                                  #:N-COUNT-555) {11839A59}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G553) {11823F31}> {1182FE31}>)
231>     known combination v228 v230
232>233: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
234>235: #:G1
236>237: '2
238>239: known combination v233 v235 v237
end stack:
successors c240

IR1 block 23 start c240
start stack:
240>     entry NIL
241>242: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
243>244: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G556))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183FC41}> {11839431}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183FC21}> {118393F1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G556
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1183FC01}> {118393B1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11839619}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-557
                                  #:N-COUNT-558) {11839579}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G556) {11823D91}> {1182FBB1}>)
245>     known combination v242 v244
246>247: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
248>249: DIR
250>251: '2
252>253: known combination v247 v249 v251
end stack:
successors c254

IR1 block 24 start c254
start stack:
254>255: known combination v225 v239 v253
256>257: known combination v155 v223 v255
end stack:
successors c258

IR1 block 25 start c258
start stack:
258>     local combination v152 v257
259>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
260>261: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
262>263: + {GLOBAL-FUNCTION}
264>265: - {GLOBAL-FUNCTION}
266>267: * {GLOBAL-FUNCTION}
268>269: B
270>271: B
272>273: known combination v267 v269 v271
end stack:
successors c274

IR1 block 26 start c274
start stack:
274>     entry NIL
275>276: + {GLOBAL-FUNCTION}
277>278: + {GLOBAL-FUNCTION}
279>280: * {GLOBAL-FUNCTION}
end stack:
successors c281

IR1 block 27 start c281
start stack:
281>     entry NIL
282>283: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
284>285: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G568))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183ED49}> {11837E19}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183ED29}> {11837DD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G568
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1183ED09}> {11837D99}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11838001}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-569
                                  #:N-COUNT-570) {11837F61}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G568) {11823571}> {1182EFC1}>)
286>     known combination v283 v285
287>288: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
289>290: #:G1
291>292: '0
293>294: known combination v288 v290 v292
end stack:
successors c295

IR1 block 28 start c295
start stack:
295>     entry NIL
296>297: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
298>299: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G559))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183F929}> {11838F39}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183F909}> {11838EF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G559
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1183F8E9}> {11838EB9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11839121}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-560
                                  #:N-COUNT-561) {11839081}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G559) {11823BB1}> {1182F8F9}>)
300>     known combination v297 v299
301>302: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
303>304: #:G1
305>306: '0
307>308: known combination v302 v304 v306
end stack:
successors c309

IR1 block 29 start c309
start stack:
309>310: known combination v280 v294 v308
311>312: * {GLOBAL-FUNCTION}
end stack:
successors c313

IR1 block 30 start c313
start stack:
313>     entry NIL
314>315: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
316>317: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G571))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183E791}> {118376F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183E771}> {118376B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G571
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1183E751}> {11837679}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {118378E1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-572
                                  #:N-COUNT-573) {11837841}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G571) {11823339}> {1182EC41}>)
318>     known combination v315 v317
319>320: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
321>322: #:G1
323>324: '1
325>326: known combination v320 v322 v324
end stack:
successors c327

IR1 block 31 start c327
start stack:
327>     entry NIL
328>329: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
330>331: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G562))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183F611}> {11838A41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183F5F1}> {11838A01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G562
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1183F5D1}> {118389C1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11838C29}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-563
                                  #:N-COUNT-564) {11838B89}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G562) {118239D1}> {1182F641}>)
332>     known combination v329 v331
333>334: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
335>336: #:G1
337>338: '1
339>340: known combination v334 v336 v338
end stack:
successors c341

IR1 block 32 start c341
start stack:
341>342: known combination v312 v326 v340
343>344: known combination v278 v310 v342
345>346: * {GLOBAL-FUNCTION}
end stack:
successors c347

IR1 block 33 start c347
start stack:
347>     entry NIL
348>349: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
350>351: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G574))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183E0D1}> {11836F91}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183E0B1}> {11836F51}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G574
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1183E091}> {11836F11}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11837179}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-575
                                  #:N-COUNT-576) {118370D9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G574) {11823101}> {1182E8D1}>)
352>     known combination v349 v351
353>354: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
355>356: #:G1
357>358: '2
359>360: known combination v354 v356 v358
end stack:
successors c361

IR1 block 34 start c361
start stack:
361>     entry NIL
362>363: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
364>365: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G565))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183F2F9}> {11838549}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1183F2D9}> {11838509}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G565
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1183F2B9}> {118384C9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11838731}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-566
                                  #:N-COUNT-567) {11838691}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G565) {118237F1}> {1182F389}>)
366>     known combination v363 v365
367>368: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
369>370: #:G1
371>372: '2
373>374: known combination v368 v370 v372
end stack:
successors c375

IR1 block 35 start c375
start stack:
375>376: known combination v346 v360 v374
377>378: known combination v276 v344 v376
end stack:
successors c379

IR1 block 36 start c379
start stack:
379>380: known combination v265 v273 v378
381>382: * {GLOBAL-FUNCTION}
383>384: RADIUS
385>386: RADIUS
387>388: known combination v382 v384 v386
389>390: known combination v263 v380 v388
391>     local combination v261 v390
392>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
393>394: < {GLOBAL-FUNCTION}
395>396: DISC
397>398: '0.0d0
399>400: known combination v394 v396 v398
401>     if v400 c402 c403
end stack:
successors c402 c403

IR1 block 39 start c403
start stack:
403>404: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                        ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
405>406: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
407>408: DISC
409>410: known combination v406 v408
411>     local combination v404 v410
412>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
413>414: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                        ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
415>416: + {GLOBAL-FUNCTION}
417>418: B
419>420: DISC
421>422: known combination v416 v418 v420
423>     local combination v414 v422
424>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
425>426: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
427>428: - {GLOBAL-FUNCTION}
429>430: B
431>432: DISC
433>434: known combination v428 v430 v432
435>     local combination v426 v434
436>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
437>438: < {GLOBAL-FUNCTION}
439>440: T2
441>442: '0.0d0
443>444: known combination v438 v440 v442
445>     if v444 c446 c447
end stack:
successors c446 c447

IR1 block 41 start c447
start stack:
447>448: > {GLOBAL-FUNCTION}
449>450: T1
451>452: '0.0d0
453>454: known combination v448 v450 v452
455>     if v454 c456 c457
end stack:
successors c457 c456

IR1 block 43 start c456
start stack:
456>458: T1
end stack:
successors c459

IR1 block 42 start c457
start stack:
457>458: T2
end stack:
successors c459

IR1 block 40 start c446
start stack:
446>458: '1.7976931348623157d308
end stack:
successors c459

IR1 block 37 start c402
start stack:
402>458: '1.7976931348623157d308
end stack:
successors c459

IR1 block 38 start c459
start stack:
459>     return v458 SB-C::CLAMBDA RAY-SPHERE
end stack:
successors c460


;;;; IR2 component: DOT

entries:
    L1: RAY-SPHERE


TNs: 39 local, 23 temps, 4 constant, 4 env, 0 comp, 44 global.
Wired: 87, Unused: 0. 44 blocks, 320 global conflicts.

IR1 block 46 start c460

    IR2 block NIL start c460

IR1 block 0 start c1

    IR2 block 43 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G520!2[EDX]
    3: MOVE t3[EDI] => #:G521!4[EDI]
    4: MOVE t5[ESI] => #:G522!6[ESI]
    5: MOVE t7[S3]>t8[EAX] => #:G523!9[EAX]
    6: MOVE t10[S0]>t11[ECX] => t12[S0]<t13[ECX]
    7: SAP-MOVE t14[S1]>t15[ECX] => t16[S1]<t17[ECX]
    8: NOTE-ENVIRONMENT-START {#}
    9: MOVE-TO-DOUBLE #:G523!9[EAX] => t18[FR2]
    10: MOVE #:G520!2[EDX] => ORIG!19[EDX]
    11: MOVE #:G521!4[EDI] => DIR!20[EDI]
    12: MOVE #:G522!6[ESI] => CENTER!21[ESI]
    13: DOUBLE-MOVE t18[FR2] => RADIUS!22[FR2]
    14: MOVE t12[S0]>t23[EAX] => t24[S0]<t25[EAX]
    15: SAP-MOVE t16[S1]>t26[EAX] => t27[S1]<t28[EAX]

IR1 block 1 start c21

    IR2 block 42 start c21
    0: SAP-MOVE t27[S1]>t29[EAX] => t30[S1]<t31[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c22

    IR2 block 41 start c22

IR1 block 3 start c23

    IR2 block 40 start c23

IR1 block 4 start c26

    IR2 block 39 start c26
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI]
                                                   {0}
                                                   => t32[FR0]

IR1 block 5 start c40

    IR2 block 38 start c40
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {0} => t33[FR1]

IR1 block 6 start c54

    IR2 block 37 start c54
    0: -/DOUBLE-FLOAT t32[FR0] t33[FR1] => t34[FR1]

IR1 block 7 start c58

    IR2 block 36 start c58
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI]
                                                   {1}
                                                   => t35[FR0]

IR1 block 8 start c72

    IR2 block 35 start c72
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {1} => t36[FR3]

IR1 block 9 start c86

    IR2 block 34 start c86
    0: -/DOUBLE-FLOAT t35[FR0] t36[FR3] => t37[FR3]

IR1 block 10 start c90

    IR2 block 33 start c90
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI]
                                                   {2}
                                                   => t38[FR0]

IR1 block 11 start c104

    IR2 block 32 start c104
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {2} => t39[FR4]

IR1 block 12 start c118

    IR2 block 31 start c118
    0: -/DOUBLE-FLOAT t38[FR0] t39[FR4] => t40[FR0]

IR1 block 13 start c120

    IR2 block 30 start c120
    0: ALLOCATE-VECTOR-ON-HEAP '214!41>t42[ECX] '3!43>t44[EDX] '6!45>t46[EBX]
                               => t47[EAX]
    1: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t34[FR1]
                                                   {0}
                                                   => t48[FR1]
    2: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t37[FR3]
                                                   {1}
                                                   => t49[FR3] ..

assembly code for #<SB-C:COMPONENT :NAME DOT {129ABEB9}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t50[ESP]>, DWORD PTR [EBP-32]
L6:

VOP MOVE t7[S3]>t8[EAX] => #:G523!9[EAX] 
        MOV     #<TN t8[EAX]>, #<TN t7[S3]>

VOP NOTE-ENVIRONMENT-START {#} 
L7:

VOP MOVE-TO-DOUBLE #:G523!9[EAX] => t18[FR2] 
        FSTP    #<TN t18[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t18[FR2]>

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:
L12:
L13:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI] {0} => t32[FR0] 
        FSTP    #<TN t32[FR0]>
        FLDD    DWORD PTR [ESI+1]

L14:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {0} => t33[FR1] 
        FSTP    #<TN t33[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t33[FR1]>

L15:

VOP -/DOUBLE-FLOAT t32[FR0] t33[FR1] => t34[FR1] 
        FSUBR-STI       #<TN t34[FR1]>
        WAIT

L16:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI] {1} => t35[FR0] 
        FSTP    #<TN t35[FR0]>
        FLDD    DWORD PTR [ESI+9]

L17:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {1} => t36[FR3] 
        FSTP    #<TN t36[FR3]>
        FLDD    DWORD PTR [EDX+9]
        FXCH    #<TN t36[FR3]>

L18:

VOP -/DOUBLE-FLOAT t35[FR0] t36[FR3] => t37[FR3] 
        FSUBR-STI       #<TN t37[FR3]>
        WAIT

L19:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI] {2} => t38[FR0] 
        FSTP    #<TN t38[FR0]>
        FLDD    DWORD PTR [ESI+17]

L20:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {2} => t39[FR4] 
        FSTP    #<TN t39[FR4]>
        FLDD    DWORD PTR [EDX+17]
        FXCH    #<TN t39[FR4]>

L21:

VOP -/DOUBLE-FLOAT t38[FR0] t39[FR4] => t40[FR0] 
        FSUBD   #<TN t39[FR4]>
        WAIT

L22:

VOP ALLOCATE-VECTOR-ON-HEAP '214!41>t42[ECX] '3!43>t44[EDX] '6!45>t46[EBX]
                            => t47[EAX] 
        MOV     #<TN t42[ECX]>, 214
        MOV     #<TN t44[EDX]>, 12
        MOV     #<TN t46[EBX]>, 24
        LEA     #<TN t47[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t47[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t47[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t47[EAX]>, DWORD PTR [+36]
        JMP     BE, L23
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L24
L23:
        FS-SEGMENT-PREFIX
        XOR     #<TN t47[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t47[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t47[EAX]>, DWORD PTR [+32]
L24:
        LEA     #<TN t47[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t42[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t44[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L25
        BREAK   9
L25:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t34[FR1]
                                                {0}
                                                => t48[FR1] 
        FXCH    #<TN t34[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t34[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t37[FR3]
                                                {1}
                                                => t49[FR3] 
        FXCH    #<TN t37[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t37[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t40[FR0]
                                                {2}
                                                => t51[FR0] 
        FSTD    DWORD PTR [EAX+17]

L26:
L27:
L28:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {0} => t52[FR0] 
        FSTP    #<TN t52[FR0]>
        FLDD    DWORD PTR [EAX+1]

L29:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!20[EDI] {0} => t53[FR1] 
        FSTP    #<TN t53[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t53[FR1]>

L30:

VOP */DOUBLE-FLOAT t52[FR0] t53[FR1] => t54[FR1] 
        FMUL-STI        #<TN t54[FR1]>
        WAIT

L31:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {1} => t55[FR0] 
        FSTP    #<TN t55[FR0]>
        FLDD    DWORD PTR [EAX+9]

L32:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!20[EDI] {1} => t56[FR3] 
        FSTP    #<TN t56[FR3]>
        FLDD    DWORD PTR [EDI+9]
        FXCH    #<TN t56[FR3]>

L33:

VOP */DOUBLE-FLOAT t55[FR0] t56[FR3] => t57[FR0] 
        FMULD   #<TN t56[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t54[FR1] t57[FR0] => t58[FR1] 
        FADD-STI        #<TN t58[FR1]>
        WAIT

L34:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {2} => t59[FR0] 
        FSTP    #<TN t59[FR0]>
        FLDD    DWORD PTR [EAX+17]

L35:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!20[EDI] {2} => t60[FR3] 
        FSTP    #<TN t60[FR3]>
        FLDD    DWORD PTR [EDI+17]
        FXCH    #<TN t60[FR3]>

L36:

VOP */DOUBLE-FLOAT t59[FR0] t60[FR3] => t61[FR0] 
        FMULD   #<TN t60[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t58[FR1] t61[FR0] => t62[FR1] 
        FADD-STI        #<TN t62[FR1]>
        WAIT

L37:

VOP */DOUBLE-FLOAT t62[FR1] t62[FR1] => t63[FR3] 
        FSTP    #<TN t64[FR0]>
        FLD     #<TN t65[FR0]>
        FMULD   #<TN t62[FR1]>
        FST     #<TN t63[FR3]>

L38:
L39:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {0} => t66[FR0] 
        FSTP    #<TN t66[FR0]>
        FLDD    DWORD PTR [EAX+1]

L40:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {0} => t67[FR4] 
        FSTP    #<TN t67[FR4]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t67[FR4]>

L41:

VOP */DOUBLE-FLOAT t66[FR0] t67[FR4] => t68[FR4] 
        FMUL-STI        #<TN t68[FR4]>
        WAIT

L42:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {1} => t69[FR0] 
        FSTP    #<TN t69[FR0]>
        FLDD    DWORD PTR [EAX+9]

L43:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {1} => t70[FR5] 
        FSTP    #<TN t70[FR5]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t70[FR5]>

L44:

VOP */DOUBLE-FLOAT t69[FR0] t70[FR5] => t71[FR0] 
        FMULD   #<TN t70[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t68[FR4] t71[FR0] => t72[FR4] 
        FADD-STI        #<TN t72[FR4]>
        WAIT

L45:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {2} => t73[FR0] 
        FSTP    #<TN t73[FR0]>
        FLDD    DWORD PTR [EAX+17]

L46:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {2} => t74[FR5] 
        FSTP    #<TN t74[FR5]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t74[FR5]>

L47:

VOP */DOUBLE-FLOAT t73[FR0] t74[FR5] => t75[FR0] 
        FMULD   #<TN t74[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t72[FR4] t75[FR0] => t76[FR0] 
        FADDD   #<TN t72[FR4]>
        WAIT

L48:

VOP -/DOUBLE-FLOAT t63[FR3] t76[FR0] => t77[FR3] 
        FSUB-STI        #<TN t77[FR3]>
        WAIT

VOP */DOUBLE-FLOAT RADIUS!22[FR2] RADIUS!22[FR2] => t78[FR0] 
        FSTP    #<TN t64[FR0]>
        FLD     #<TN t79[FR1]>
        FMULD   #<TN RADIUS!22[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t77[FR3] t78[FR0] => t80[FR0] 
        FADDD   #<TN t77[FR3]>
        WAIT

VOP <0/DOUBLE-FLOAT t80[FR0] {# T 0.0d0} 
L49:
        FTST
        FNSTSW
        AND     #<TN t81[AH]>, 69
        CMP     #<TN t81[AH]>, 1
        JMP     NE, L50

L51:

VOP MOVE '1.7976931348623157d308!82[Const6]>t83[EDX] => t84[EDX] 
        MOV     #<TN t83[EDX]>, #<TN '1.7976931348623157d308!82[Const6]>

L52:

VOP RETURN-SINGLE t24[S0] t30[S1] t85[EDX] 
L53:
        LEA     #<TN t50[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t86[EBP]>, #<TN t24[S0]>
        RET     4

L50:

VOP FSQRT t80[FR0] => t87[FR2] 
L54:
        FSQRT
        FST     #<TN t87[FR2]>

VOP +/DOUBLE-FLOAT t62[FR1] t87[FR2] => t88[FR3] 
        FSTP    #<TN t64[FR0]>
        FLD     #<TN t89[FR0]>
        FADDD   #<TN t87[FR2]>
        FST     #<TN t88[FR3]>

VOP -/DOUBLE-FLOAT t62[FR1] t87[FR2] => t90[FR0] 
        FSTP    #<TN t64[FR0]>
        FLD     #<TN t91[FR0]>
        FSUBD   #<TN t87[FR2]>
        WAIT

VOP <0/DOUBLE-FLOAT t88[FR3] {# T 0.0d0} 
L55:
        FXCH    #<TN t88[FR3]>
        FTST
        FXCH    #<TN t88[FR3]>
        FNSTSW
        AND     #<TN t81[AH]>, 69
        CMP     #<TN t81[AH]>, 1
        JMP     NE, L56

L57:

VOP MOVE '1.7976931348623157d308!82[Const6]>t92[EDX] => t84[EDX] 
        MOV     #<TN t92[EDX]>, #<TN '1.7976931348623157d308!82[Const6]>

VOP BRANCH {#} 
        JMP     L52

L56:

VOP >0/DOUBLE-FLOAT t90[FR0] {# NIL 0.0d0} 
L58:
        FTST
        FNSTSW
        AND     #<TN t81[AH]>, 69
        JMP     E, L59

L60:

VOP MOVE-FROM-DOUBLE t88[FR3] => t84[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t84[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t84[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t84[EDX]>, DWORD PTR [+36]
        JMP     BE, L61
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L62
L61:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t84[EDX]>
        SUB     #<TN t84[EDX]>, 16
L62:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t84[EDX]>, BYTE PTR [EDX+7]
        FXCH    #<TN t88[FR3]>
        FSTD    DWORD PTR [EDX+1]
        FXCH    #<TN t88[FR3]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L63
        BREAK   9
L63:

VOP BRANCH {#} 
        JMP     L52

L59:

VOP MOVE-FROM-DOUBLE t90[FR0] => t84[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t84[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t84[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t84[EDX]>, DWORD PTR [+36]
        JMP     BE, L64
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L65
L64:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t84[EDX]>
        SUB     #<TN t84[EDX]>, 16
L65:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t84[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L66
        BREAK   9
L66:

VOP BRANCH {#} 
        JMP     L52

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME DOT {129ABEB9}>

; 00000000:       2A08             SUB CL, [EAX]
;      002:       0000             ADD [EAX], AL
;      004:       0000             ADD [EAX], AL
;      006:       0000             ADD [EAX], AL
;      008:       0000             ADD [EAX], AL
;      00A:       0000             ADD [EAX], AL
;      00C:       0000             ADD [EAX], AL
;      00E:       0000             ADD [EAX], AL
;      010:       0000             ADD [EAX], AL
;      012:       0000             ADD [EAX], AL
;      014:       0000             ADD [EAX], AL
;      016:       0000             ADD [EAX], AL
;      018:       0000             ADD [EAX], AL
;      01A:       0000             ADD [EAX], AL
;      01C:       8F45F8           POP DWORD PTR [EBP-8]
;      01F:       8D65E0           LEA ESP, [EBP-32]
;      022:       8B45F0           MOV EAX, [EBP-16]
;      025:       DDDA             FSTPD FR2
;      027:       DD4001           FLDD [EAX+1]
;      02A:       D9CA             FXCH FR2
;      02C:       DDD8             FSTPD FR0
;      02E:       DD4601           FLDD [ESI+1]
;      031:       DDD9             FSTPD FR1
;      033:       DD4201           FLDD [EDX+1]
;      036:       D9C9             FXCH FR1
;      038:       DCE1             FSUBR-STI FR1
;      03A:       9B               WAIT
;      03B:       DDD8             FSTPD FR0
;      03D:       DD4609           FLDD [ESI+9]
;      040:       DDDB             FSTPD FR3
;      042:       DD4209           FLDD [EDX+9]
;      045:       D9CB             FXCH FR3
;      047:       DCE3             FSUBR-STI FR3
;      049:       9B               WAIT
;      04A:       DDD8             FSTPD FR0
;      04C:       DD4611           FLDD [ESI+17]
;      04F:       DDDC             FSTPD FR4
;      051:       DD4211           FLDD [EDX+17]
;      054:       D9CC             FXCH FR4
;      056:       D8E4             FSUBD FR4
;      058:       9B               WAIT
;      059:       B9D6000000       MOV ECX, 214
;      05E:       BA0C000000       MOV EDX, 12
;      063:       BB18000000       MOV EBX, 24
;      068:       8D430F           LEA EAX, [EBX+15]
;      06B:       83E0F8           AND EAX, -8
;      06E:       64               BYTE #X64
;      06F:       800D4800000004   OR BYTE PTR [#x48], 4
;      076:       64               BYTE #X64
;      077:       030520000000     ADD EAX, [#x20]
;      07D:       64               BYTE #X64
;      07E:       3B0524000000     CMP EAX, [#x24]
;      084:       7607             JBE L1
;      086:       E800000000       CALL L0
;      08B: L0:   EB15             JMP L2
;      08D: L1:   64               BYTE #X64
;      08E:       330520000000     XOR EAX, [#x20]
;      094:       64               BYTE #X64
;      095:       310520000000     XOR [#x20], EAX
;      09B:       64               BYTE #X64
;      09C:       330520000000     XOR EAX, [#x20]
;      0A2: L2:   8D4007           LEA EAX, [EAX+7]
;      0A5:       8948F9           MOV [EAX-7], ECX
;      0A8:       8950FD           MOV [EAX-3], EDX
;      0AB:       64               BYTE #X64
;      0AC:       80354800000004   XOR BYTE PTR [#x48], 4
;      0B3:       7403             JEQ L3
;      0B5:       0F0B09           BREAK 9                    ; pending interrupt trap
;      0B8: L3:   D9C9             FXCH FR1
;      0BA:       DD5001           FSTD [EAX+1]
;      0BD:       D9C9             FXCH FR1
;      0BF:       D9CB             FXCH FR3
;      0C1:       DD5009           FSTD [EAX+9]
;      0C4:       D9CB             FXCH FR3
;      0C6:       DD5011           FSTD [EAX+17]
;      0C9:       DDD8             FSTPD FR0
;      0CB:       DD4001           FLDD [EAX+1]
;      0CE:       DDD9             FSTPD FR1
;      0D0:       DD4701           FLDD [EDI+1]
;      0D3:       D9C9             FXCH FR1
;      0D5:       DCC9             FMUL-STI FR1
;      0D7:       9B               WAIT
;      0D8:       DDD8             FSTPD FR0
;      0DA:       DD4009           FLDD [EAX+9]
;      0DD:       DDDB             FSTPD FR3
;      0DF:       DD4709           FLDD [EDI+9]
;      0E2:       D9CB             FXCH FR3
;      0E4:       D8CB             FMULD FR3
;      0E6:       9B               WAIT
;      0E7:       DCC1             FADD-STI FR1
;      0E9:       9B               WAIT
;      0EA:       DDD8             FSTPD FR0
;      0EC:       DD4011           FLDD [EAX+17]
;      0EF:       DDDB             FSTPD FR3
;      0F1:       DD4711           FLDD [EDI+17]
;      0F4:       D9CB             FXCH FR3
;      0F6:       D8CB             FMULD FR3
;      0F8:       9B               WAIT
;      0F9:       DCC1             FADD-STI FR1
;      0FB:       9B               WAIT
;      0FC:       DDD8             FSTPD FR0
;      0FE:       D9C0             FLDD FR0
;      100:       D8C9             FMULD FR1
;      102:       DDD3             FSTD FR3
;      104:       DDD8             FSTPD FR0
;      106:       DD4001           FLDD [EAX+1]
;      109:       DDDC             FSTPD FR4
;      10B:       DD4001           FLDD [EAX+1]
;      10E:       D9CC             FXCH FR4
;      110:       DCCC             FMUL-STI FR4
;      112:       9B               WAIT
;      113:       DDD8             FSTPD FR0
;      115:       DD4009           FLDD [EAX+9]
;      118:       DDDD             FSTPD FR5
;      11A:       DD4009           FLDD [EAX+9]
;      11D:       D9CD             FXCH FR5
;      11F:       D8CD             FMULD FR5
;      121:       9B               WAIT
;      122:       DCC4             FADD-STI FR4
;      124:       9B               WAIT
;      125:       DDD8             FSTPD FR0
;      127:       DD4011           FLDD [EAX+17]
;      12A:       DDDD             FSTPD FR5
;      12C:       DD4011           FLDD [EAX+17]
;      12F:       D9CD             FXCH FR5
;      131:       D8CD             FMULD FR5
;      133:       9B               WAIT
;      134:       D8C4             FADDD FR4
;      136:       9B               WAIT
;      137:       DCEB             FSUB-STI FR3
;      139:       9B               WAIT
;      13A:       DDD8             FSTPD FR0
;      13C:       D9C1             FLDD FR1
;      13E:       D8CA             FMULD FR2
;      140:       9B               WAIT
;      141:       D8C3             FADDD FR3
;      143:       9B               WAIT
;      144:       D9E4             FTST
;      146:       DFE0             FNSTSW
;      148:       80E445           AND AH, 69
;      14B:       80FC01           CMP AH, 1
;      14E:       7510             JNE L5
;      150:       8B1511000000     MOV EDX, [#x11]
;      156: L4:   8D65F8           LEA ESP, [EBP-8]
;      159:       F8               CLC
;      15A:       8B6DFC           MOV EBP, [EBP-4]
;      15D:       C20400           RET 4
;      160: L5:   D9FA             FSQRT
;      162:       DDD2             FSTD FR2
;      164:       DDD8             FSTPD FR0
;      166:       D9C0             FLDD FR0
;      168:       D8C2             FADDD FR2
;      16A:       DDD3             FSTD FR3
;      16C:       DDD8             FSTPD FR0
;      16E:       D9C0             FLDD FR0
;      170:       D8E2             FSUBD FR2
;      172:       9B               WAIT
;      173:       D9CB             FXCH FR3
;      175:       D9E4             FTST
;      177:       D9CB             FXCH FR3
;      179:       DFE0             FNSTSW
;      17B:       80E445           AND AH, 69
;      17E:       80FC01           CMP AH, 1
;      181:       7508             JNE L6
;      183:       8B1511000000     MOV EDX, [#x11]
;      189:       EBCB             JMP L4
;      18B: L6:   D9E4             FTST
;      18D:       DFE0             FNSTSW
;      18F:       80E445           AND AH, 69
;      192:       7450             JEQ L11
;      194:       64               BYTE #X64
;      195:       800D4800000004   OR BYTE PTR [#x48], 4
;      19C:       BA10000000       MOV EDX, 16
;      1A1:       64               BYTE #X64
;      1A2:       031520000000     ADD EDX, [#x20]
;      1A8:       64               BYTE #X64
;      1A9:       3B1524000000     CMP EDX, [#x24]
;      1AF:       7607             JBE L8
;      1B1:       E800000000       CALL L7
;      1B6: L7:   EB0A             JMP L9
;      1B8: L8:   64               BYTE #X64
;      1B9:       891520000000     MOV [#x20], EDX
;      1BF:       83EA10           SUB EDX, 16
;      1C2: L9:   C70216030000     MOV DWORD PTR [EDX], 790
;      1C8:       8D5207           LEA EDX, [EDX+7]
;      1CB:       D9CB             FXCH FR3
;      1CD:       DD5201           FSTD [EDX+1]
;      1D0:       D9CB             FXCH FR3
;      1D2:       64               BYTE #X64
;      1D3:       80354800000004   XOR BYTE PTR [#x48], 4
;      1DA:       7403             JEQ L10
;      1DC:       0F0B09           BREAK 9                    ; pending interrupt trap
;      1DF: L10:  E972FFFFFF       JMP L4
;      1E4: L11:  64               BYTE #X64
;      1E5:       800D4800000004   OR BYTE PTR [#x48], 4
;      1EC:       BA10000000       MOV EDX, 16
;      1F1:       64               BYTE #X64
;      1F2:       031520000000     ADD EDX, [#x20]
;      1F8:       64               BYTE #X64
;      1F9:       3B1524000000     CMP EDX, [#x24]
;      1FF:       7607             JBE L13
;      201:       E800000000       CALL L12
;      206: L12:  EB0A             JMP L14
;      208: L13:  64               BYTE #X64
;      209:       891520000000     MOV [#x20], EDX
;      20F:       83EA10           SUB EDX, 16
;      212: L14:  C70216030000     MOV DWORD PTR [EDX], 790
;      218:       8D5207           LEA EDX, [EDX+7]
;      21B:       DD5201           FSTD [EDX+1]
;      21E:       64               BYTE #X64
;      21F:       80354800000004   XOR BYTE PTR [#x48], 4
;      226:       7403             JEQ L15
;      228:       0F0B09           BREAK 9                    ; pending interrupt trap
;      22B: L15:  E926FFFFFF       JMP L4

;;;; component: DOT


IR1 block 0 start c1
start stack:
  1>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
  2>  3: SB-C::CLAMBDA SRAY-SPHERE
  4>  5: #:G614
  6>  7: #:G615
  8>  9: #:G616
 10> 11: #:G617
 12> 13: cast v5 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 14> 15: cast v7 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 16> 17: cast v9 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 18> 19: cast v11 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 20>     tail local combination v3 v13 v15 v17 v19
end stack:
successors c21

IR1 block 1 start c21
start stack:
 21>     bind SB-C::CLAMBDA SRAY-SPHERE
end stack:
successors c22

IR1 block 2 start c22
start stack:
 22>     entry NIL
end stack:
successors c23

IR1 block 3 start c23
start stack:
 23>     entry NIL
 24> 25: - {GLOBAL-FUNCTION}
end stack:
successors c26

IR1 block 4 start c26
start stack:
 26>     entry NIL
 27> 28: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 29> 30: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G671))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1270A8D9}> {1270A899}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1270A949}> {1270A909}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G671
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1270A9B9}> {1270A979}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1270B381}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-672
                                  #:N-COUNT-673) {1270BD21}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G671) {1270ABF1}> {1270AA91}>)
 31>     known combination v28 v30
 32> 33: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 34> 35: CENTER
 36> 37: '0
 38> 39: known combination v33 v35 v37
end stack:
successors c40

IR1 block 5 start c40
start stack:
 40>     entry NIL
 41> 42: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 43> 44: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G674))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1270DD39}> {1270DCF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1270DDA9}> {1270DD69}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G674
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1270DE19}> {1270DDD9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1270E7E1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-675
                                  #:N-COUNT-676) {1270F181}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G674) {1270E051}> {1270DEF1}>)
 45>     known combination v42 v44
 46> 47: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 48> 49: ORIG
 50> 51: '0
 52> 53: known combination v47 v49 v51
end stack:
successors c54

IR1 block 6 start c54
start stack:
 54> 55: known combination v25 v39 v53
 56> 57: - {GLOBAL-FUNCTION}
end stack:
successors c58

IR1 block 7 start c58
start stack:
 58>     entry NIL
 59> 60: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 61> 62: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G677))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12711921}> {127118E1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12711991}> {12711951}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G677
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12711A01}> {127119C1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {127123C9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-678
                                  #:N-COUNT-679) {12712D69}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G677) {12711C39}> {12711AD9}>)
 63>     known combination v60 v62
 64> 65: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 66> 67: CENTER
 68> 69: '1
 70> 71: known combination v65 v67 v69
end stack:
successors c72

IR1 block 8 start c72
start stack:
 72>     entry NIL
 73> 74: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 75> 76: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G680))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12715019}> {12714FD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12715089}> {12715049}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G680
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {127150F9}> {127150B9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12715AC1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-681
                                  #:N-COUNT-682) {12716461}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G680) {12715331}> {127151D1}>)
 77>     known combination v74 v76
 78> 79: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 80> 81: ORIG
 82> 83: '1
 84> 85: known combination v79 v81 v83
end stack:
successors c86

IR1 block 9 start c86
start stack:
 86> 87: known combination v57 v71 v85
 88> 89: - {GLOBAL-FUNCTION}
end stack:
successors c90

IR1 block 10 start c90
start stack:
 90>     entry NIL
 91> 92: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 93> 94: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G683))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12718C01}> {12718BC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12718C71}> {12718C31}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G683
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12718CE1}> {12718CA1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {127196A9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-684
                                  #:N-COUNT-685) {1271A049}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G683) {12718F19}> {12718DB9}>)
 95>     known combination v92 v94
 96> 97: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 98> 99: CENTER
100>101: '2
102>103: known combination v97 v99 v101
end stack:
successors c104

IR1 block 11 start c104
start stack:
104>     entry NIL
105>106: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
107>108: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G686))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1271C0B9}> {1271C079}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1271C129}> {1271C0E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G686
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1271C199}> {1271C159}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1271CB61}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-687
                                  #:N-COUNT-688) {1271D501}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G686) {1271C3D1}> {1271C271}>)
109>     known combination v106 v108
110>111: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
112>113: ORIG
114>115: '2
116>117: known combination v111 v113 v115
end stack:
successors c118

IR1 block 12 start c118
start stack:
118>119: known combination v89 v103 v117
end stack:
successors c120

IR1 block 13 start c120
start stack:
120>     entry NIL
121>122: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
123>124: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
125>126: '214
127>128: '3
129>130: '6
131>132: known combination v124 v126 v128 v130
133>     local combination v122 v132
134>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
135>136: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
137>138: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G689))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12720B19}> {12720AD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12720B89}> {12720B49}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G689
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12720BF9}> {12720BB9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12721931}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-690
                                  #:N-COUNT-691) {127222D1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G689) {12720F01}> {12720DA1}>)
139>     known combination v136 v138
140>141: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
142>143: #:G1
144>145: '0
146>     known combination v141 v143 v145 v55
147>148: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
149>150: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G692))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12724489}> {12724449}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127244F9}> {127244B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G692 ..>)>)
                                                    IR1 block 14 start c151
                                                    start stack:
                                                    151>152: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                            ((SB-C::OF-TYPE
                                                                              SB-C::LAMBDA-VAR)
                                                                             (SB-C::OF-TYPE
                                                                              SB-C::LAMBDA-VAR)))
                                                    end stack:
                                                    successors c153

IR1 block 15 start c153
start stack:
153>     entry NIL
154>155: + {GLOBAL-FUNCTION}
156>157: + {GLOBAL-FUNCTION}
158>159: * {GLOBAL-FUNCTION}
end stack:
successors c160

IR1 block 16 start c160
start stack:
160>     entry NIL
161>162: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
163>164: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G635))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126DBAF9}> {126DBAB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126DBB69}> {126DBB29}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G635
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126DBBD9}> {126DBB99}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126DC771}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-636
                                  #:N-COUNT-637) {126DD181}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G635) {126DBE41}> {126DBCE1}>)
165>     known combination v162 v164
166>167: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
168>169: #:G1
170>171: '0
172>173: known combination v167 v169 v171
end stack:
successors c174

IR1 block 17 start c174
start stack:
174>     entry NIL
175>176: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
177>178: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G638))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126E06A1}> {126E0661}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126E0711}> {126E06D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G638
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126E0781}> {126E0741}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126E1149}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-639
                                  #:N-COUNT-640) {126E1AE9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G638) {126E09B9}> {126E0859}>)
179>     known combination v176 v178
180>181: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
182>183: DIR
184>185: '0
186>187: known combination v181 v183 v185
end stack:
successors c188

IR1 block 18 start c188
start stack:
188>189: known combination v159 v173 v187
190>191: * {GLOBAL-FUNCTION}
end stack:
successors c192

IR1 block 19 start c192
start stack:
192>     entry NIL
193>194: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
195>196: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G641))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126E5209}> {126E51C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126E5279}> {126E5239}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G641
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126E52E9}> {126E52A9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126E5CB1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-642
                                  #:N-COUNT-643) {126E6651}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G641) {126E5521}> {126E53C1}>)
197>     known combination v194 v196
198>199: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
200>201: #:G1
202>203: '1
204>205: known combination v199 v201 v203
end stack:
successors c206

IR1 block 20 start c206
start stack:
206>     entry NIL
207>208: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
209>210: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G644))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126E8641}> {126E8601}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126E86B1}> {126E8671}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G644
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126E8721}> {126E86E1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126E90E9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-645
                                  #:N-COUNT-646) {126E9A89}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G644) {126E8959}> {126E87F9}>)
211>     known combination v208 v210
212>213: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
214>215: DIR
216>217: '1
218>219: known combination v213 v215 v217
end stack:
successors c220

IR1 block 21 start c220
start stack:
220>221: known combination v191 v205 v219
222>223: known combination v157 v189 v221
224>225: * {GLOBAL-FUNCTION}
end stack:
successors c226

IR1 block 22 start c226
start stack:
226>     entry NIL
227>228: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
229>230: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G647))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126ECE51}> {126ECE11}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126ECEC1}> {126ECE81}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G647
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126ECF31}> {126ECEF1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126ED901}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-648
                                  #:N-COUNT-649) {126EE2A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G647) {126ED171}> {126ED011}>)
231>     known combination v228 v230
232>233: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
234>235: #:G1
236>237: '2
238>239: known combination v233 v235 v237
end stack:
successors c240

IR1 block 23 start c240
start stack:
240>     entry NIL
241>242: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
243>244: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G650))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126F0369}> {126F0329}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126F03D9}> {126F0399}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G650
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126F0449}> {126F0409}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126F0E11}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-651
                                  #:N-COUNT-652) {126F17B9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G650) {126F0681}> {126F0521}>)
245>     known combination v242 v244
246>247: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
248>249: DIR
250>251: '2
252>253: known combination v247 v249 v251
end stack:
successors c254

IR1 block 24 start c254
start stack:
254>255: known combination v225 v239 v253
256>257: known combination v155 v223 v255
end stack:
successors c258

IR1 block 25 start c258
start stack:
258>     local combination v152 v257
259>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
260>261: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
262>263: + {GLOBAL-FUNCTION}
264>265: - {GLOBAL-FUNCTION}
266>267: * {GLOBAL-FUNCTION}
268>269: B
270>271: B
272>273: known combination v267 v269 v271
end stack:
successors c274

IR1 block 26 start c274
start stack:
274>     entry NIL
275>276: + {GLOBAL-FUNCTION}
277>278: + {GLOBAL-FUNCTION}
279>280: * {GLOBAL-FUNCTION}
end stack:
successors c281

IR1 block 27 start c281
start stack:
281>     entry NIL
282>283: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
284>285: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G662))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12700BC9}> {12700B89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12700C39}> {12700BF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G662
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12700CA9}> {12700C69}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12701681}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-663
                                  #:N-COUNT-664) {12702021}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G662) {12700EE1}> {12700D81}>)
286>     known combination v283 v285
287>288: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
289>290: #:G1
291>292: '0
293>294: known combination v288 v290 v292
end stack:
successors c295

IR1 block 28 start c295
start stack:
295>     entry NIL
296>297: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
298>299: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G653))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126F44C9}> {126F4489}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126F4539}> {126F44F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G653
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126F45A9}> {126F4569}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126F4F71}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-654
                                  #:N-COUNT-655) {126F5919}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G653) {126F47E1}> {126F4681}>)
300>     known combination v297 v299
301>302: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
303>304: #:G1
305>306: '0
307>308: known combination v302 v304 v306
end stack:
successors c309

IR1 block 29 start c309
start stack:
309>310: known combination v280 v294 v308
311>312: * {GLOBAL-FUNCTION}
end stack:
successors c313

IR1 block 30 start c313
start stack:
313>     entry NIL
314>315: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
316>317: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G665))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12704029}> {12703FE9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12704099}> {12704059}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G665
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12704109}> {127040C9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12704AD1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-666
                                  #:N-COUNT-667) {12705471}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G665) {12704341}> {127041E1}>)
318>     known combination v315 v317
319>320: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
321>322: #:G1
323>324: '1
325>326: known combination v320 v322 v324
end stack:
successors c327

IR1 block 31 start c327
start stack:
327>     entry NIL
328>329: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
330>331: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G656))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126F8899}> {126F8859}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126F8909}> {126F88C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G656
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126F8979}> {126F8939}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126F9341}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-657
                                  #:N-COUNT-658) {126F9CE1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G656) {126F8BB1}> {126F8A51}>)
332>     known combination v329 v331
333>334: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
335>336: #:G1
337>338: '1
339>340: known combination v334 v336 v338
end stack:
successors c341

IR1 block 32 start c341
start stack:
341>342: known combination v312 v326 v340
343>344: known combination v278 v310 v342
345>346: * {GLOBAL-FUNCTION}
end stack:
successors c347

IR1 block 33 start c347
start stack:
347>     entry NIL
348>349: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
350>351: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G668))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12707459}> {12707419}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {127074C9}> {12707489}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G668
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12707539}> {127074F9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12707F01}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-669
                                  #:N-COUNT-670) {127088A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G668) {12707771}> {12707611}>)
352>     known combination v349 v351
353>354: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
355>356: #:G1
357>358: '2
359>360: known combination v354 v356 v358
end stack:
successors c361

IR1 block 34 start c361
start stack:
361>     entry NIL
362>363: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
364>365: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G659))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126FC999}> {126FC959}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {126FCA09}> {126FC9C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G659
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {126FCA79}> {126FCA39}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {126FD449}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-660
                                  #:N-COUNT-661) {126FDDE9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G659) {126FCCB1}> {126FCB51}>)
366>     known combination v363 v365
367>368: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
369>370: #:G1
371>372: '2
373>374: known combination v368 v370 v372
end stack:
successors c375

IR1 block 35 start c375
start stack:
375>376: known combination v346 v360 v374
377>378: known combination v276 v344 v376
end stack:
successors c379

IR1 block 36 start c379
start stack:
379>380: known combination v265 v273 v378
381>382: * {GLOBAL-FUNCTION}
383>384: RADIUS
385>386: RADIUS
387>388: known combination v382 v384 v386
389>390: known combination v263 v380 v388
391>     local combination v261 v390
392>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
393>394: < {GLOBAL-FUNCTION}
395>396: DISC
397>398: '0.0d0
399>400: known combination v394 v396 v398
401>     if v400 c402 c403
end stack:
successors c402 c403

IR1 block 39 start c403
start stack:
403>404: < {GLOBAL-FUNCTION}
405>406: + {GLOBAL-FUNCTION}
407>408: B
409>410: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
411>412: DISC
413>414: known combination v410 v412
415>416: known combination v406 v408 v414
417>418: '0.0d0
419>420: known combination v404 v416 v418
421>     if v420 c422 c423
end stack:
successors c423 c422

IR1 block 41 start c422
start stack:
422>424: 'NIL
end stack:
successors c425

IR1 block 40 start c423
start stack:
423>424: 'T
end stack:
successors c425

IR1 block 37 start c402
start stack:
402>424: 'NIL
end stack:
successors c425

IR1 block 38 start c425
start stack:
425>     return v424 SB-C::CLAMBDA SRAY-SPHERE
end stack:
successors c426


;;;; IR2 component: DOT

entries:
    L1: SRAY-SPHERE


TNs: 38 local, 21 temps, 5 constant, 4 env, 0 comp, 42 global.
Wired: 84, Unused: 0. 42 blocks, 309 global conflicts.

IR1 block 44 start c426

    IR2 block NIL start c426

IR1 block 0 start c1

    IR2 block 41 start c1
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G614!2[EDX]
    3: MOVE t3[EDI] => #:G615!4[EDI]
    4: MOVE t5[ESI] => #:G616!6[ESI]
    5: MOVE t7[S3]>t8[EAX] => #:G617!9[EAX]
    6: MOVE t10[S0]>t11[ECX] => t12[S0]<t13[ECX]
    7: SAP-MOVE t14[S1]>t15[ECX] => t16[S1]<t17[ECX]
    8: NOTE-ENVIRONMENT-START {#}
    9: MOVE-TO-DOUBLE #:G617!9[EAX] => t18[FR2]
    10: MOVE #:G614!2[EDX] => ORIG!19[EDX]
    11: MOVE #:G615!4[EDI] => DIR!20[EDI]
    12: MOVE #:G616!6[ESI] => CENTER!21[ESI]
    13: DOUBLE-MOVE t18[FR2] => RADIUS!22[FR2]
    14: MOVE t12[S0]>t23[EAX] => t24[S0]<t25[EAX]
    15: SAP-MOVE t16[S1]>t26[EAX] => t27[S1]<t28[EAX]

IR1 block 1 start c21

    IR2 block 40 start c21
    0: SAP-MOVE t27[S1]>t29[EAX] => t30[S1]<t31[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c22

    IR2 block 39 start c22

IR1 block 3 start c23

    IR2 block 38 start c23

IR1 block 4 start c26

    IR2 block 37 start c26
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI]
                                                   {0}
                                                   => t32[FR0]

IR1 block 5 start c40

    IR2 block 36 start c40
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {0} => t33[FR1]

IR1 block 6 start c54

    IR2 block 35 start c54
    0: -/DOUBLE-FLOAT t32[FR0] t33[FR1] => t34[FR1]

IR1 block 7 start c58

    IR2 block 34 start c58
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI]
                                                   {1}
                                                   => t35[FR0]

IR1 block 8 start c72

    IR2 block 33 start c72
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {1} => t36[FR3]

IR1 block 9 start c86

    IR2 block 32 start c86
    0: -/DOUBLE-FLOAT t35[FR0] t36[FR3] => t37[FR3]

IR1 block 10 start c90

    IR2 block 31 start c90
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI]
                                                   {2}
                                                   => t38[FR0]

IR1 block 11 start c104

    IR2 block 30 start c104
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {2} => t39[FR4]

IR1 block 12 start c118

    IR2 block 29 start c118
    0: -/DOUBLE-FLOAT t38[FR0] t39[FR4] => t40[FR0]

IR1 block 13 start c120

    IR2 block 28 start c120
    0: ALLOCATE-VECTOR-ON-HEAP '214!41>t42[ECX] '3!43>t44[EDX] '6!45>t46[EBX]
                               => t47[EAX]
    1: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t34[FR1]
                                                   {0}
                                                   => t48[FR1]
    2: DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t37[FR3]
                                                   {1}
                                                   => t49[FR3] ..

assembly code for #<SB-C:COMPONENT :NAME DOT {1264A959}>

in the elsewhere segment:
L2:
in the regular segment:
L3:
in the elsewhere segment:
L4:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L5:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t50[ESP]>, DWORD PTR [EBP-32]
L6:

VOP MOVE t7[S3]>t8[EAX] => #:G617!9[EAX] 
        MOV     #<TN t8[EAX]>, #<TN t7[S3]>

VOP NOTE-ENVIRONMENT-START {#} 
L7:

VOP MOVE-TO-DOUBLE #:G617!9[EAX] => t18[FR2] 
        FSTP    #<TN t18[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t18[FR2]>

L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L10:

L11:
L12:
L13:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI] {0} => t32[FR0] 
        FSTP    #<TN t32[FR0]>
        FLDD    DWORD PTR [ESI+1]

L14:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {0} => t33[FR1] 
        FSTP    #<TN t33[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t33[FR1]>

L15:

VOP -/DOUBLE-FLOAT t32[FR0] t33[FR1] => t34[FR1] 
        FSUBR-STI       #<TN t34[FR1]>
        WAIT

L16:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI] {1} => t35[FR0] 
        FSTP    #<TN t35[FR0]>
        FLDD    DWORD PTR [ESI+9]

L17:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {1} => t36[FR3] 
        FSTP    #<TN t36[FR3]>
        FLDD    DWORD PTR [EDX+9]
        FXCH    #<TN t36[FR3]>

L18:

VOP -/DOUBLE-FLOAT t35[FR0] t36[FR3] => t37[FR3] 
        FSUBR-STI       #<TN t37[FR3]>
        WAIT

L19:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT CENTER!21[ESI] {2} => t38[FR0] 
        FSTP    #<TN t38[FR0]>
        FLDD    DWORD PTR [ESI+17]

L20:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!19[EDX] {2} => t39[FR4] 
        FSTP    #<TN t39[FR4]>
        FLDD    DWORD PTR [EDX+17]
        FXCH    #<TN t39[FR4]>

L21:

VOP -/DOUBLE-FLOAT t38[FR0] t39[FR4] => t40[FR0] 
        FSUBD   #<TN t39[FR4]>
        WAIT

L22:

VOP ALLOCATE-VECTOR-ON-HEAP '214!41>t42[ECX] '3!43>t44[EDX] '6!45>t46[EBX]
                            => t47[EAX] 
        MOV     #<TN t42[ECX]>, 214
        MOV     #<TN t44[EDX]>, 12
        MOV     #<TN t46[EBX]>, 24
        LEA     #<TN t47[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t47[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t47[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t47[EAX]>, DWORD PTR [+36]
        JMP     BE, L23
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L24
L23:
        FS-SEGMENT-PREFIX
        XOR     #<TN t47[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t47[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t47[EAX]>, DWORD PTR [+32]
L24:
        LEA     #<TN t47[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t42[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t44[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L25
        BREAK   9
L25:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t34[FR1]
                                                {0}
                                                => t48[FR1] 
        FXCH    #<TN t34[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t34[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t37[FR3]
                                                {1}
                                                => t49[FR3] 
        FXCH    #<TN t37[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t37[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] t40[FR0]
                                                {2}
                                                => t51[FR0] 
        FSTD    DWORD PTR [EAX+17]

L26:
L27:
L28:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {0} => t52[FR0] 
        FSTP    #<TN t52[FR0]>
        FLDD    DWORD PTR [EAX+1]

L29:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!20[EDI] {0} => t53[FR1] 
        FSTP    #<TN t53[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t53[FR1]>

L30:

VOP */DOUBLE-FLOAT t52[FR0] t53[FR1] => t54[FR1] 
        FMUL-STI        #<TN t54[FR1]>
        WAIT

L31:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {1} => t55[FR0] 
        FSTP    #<TN t55[FR0]>
        FLDD    DWORD PTR [EAX+9]

L32:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!20[EDI] {1} => t56[FR3] 
        FSTP    #<TN t56[FR3]>
        FLDD    DWORD PTR [EDI+9]
        FXCH    #<TN t56[FR3]>

L33:

VOP */DOUBLE-FLOAT t55[FR0] t56[FR3] => t57[FR0] 
        FMULD   #<TN t56[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t54[FR1] t57[FR0] => t58[FR1] 
        FADD-STI        #<TN t58[FR1]>
        WAIT

L34:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {2} => t59[FR0] 
        FSTP    #<TN t59[FR0]>
        FLDD    DWORD PTR [EAX+17]

L35:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!20[EDI] {2} => t60[FR3] 
        FSTP    #<TN t60[FR3]>
        FLDD    DWORD PTR [EDI+17]
        FXCH    #<TN t60[FR3]>

L36:

VOP */DOUBLE-FLOAT t59[FR0] t60[FR3] => t61[FR0] 
        FMULD   #<TN t60[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t58[FR1] t61[FR0] => t62[FR1] 
        FADD-STI        #<TN t62[FR1]>
        WAIT

L37:

VOP */DOUBLE-FLOAT t62[FR1] t62[FR1] => t63[FR3] 
        FSTP    #<TN t64[FR0]>
        FLD     #<TN t65[FR0]>
        FMULD   #<TN t62[FR1]>
        FST     #<TN t63[FR3]>

L38:
L39:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {0} => t66[FR0] 
        FSTP    #<TN t66[FR0]>
        FLDD    DWORD PTR [EAX+1]

L40:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {0} => t67[FR4] 
        FSTP    #<TN t67[FR4]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t67[FR4]>

L41:

VOP */DOUBLE-FLOAT t66[FR0] t67[FR4] => t68[FR4] 
        FMUL-STI        #<TN t68[FR4]>
        WAIT

L42:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {1} => t69[FR0] 
        FSTP    #<TN t69[FR0]>
        FLDD    DWORD PTR [EAX+9]

L43:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {1} => t70[FR5] 
        FSTP    #<TN t70[FR5]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t70[FR5]>

L44:

VOP */DOUBLE-FLOAT t69[FR0] t70[FR5] => t71[FR0] 
        FMULD   #<TN t70[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t68[FR4] t71[FR0] => t72[FR4] 
        FADD-STI        #<TN t72[FR4]>
        WAIT

L45:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {2} => t73[FR0] 
        FSTP    #<TN t73[FR0]>
        FLDD    DWORD PTR [EAX+17]

L46:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t47[EAX] {2} => t74[FR5] 
        FSTP    #<TN t74[FR5]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t74[FR5]>

L47:

VOP */DOUBLE-FLOAT t73[FR0] t74[FR5] => t75[FR0] 
        FMULD   #<TN t74[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t72[FR4] t75[FR0] => t76[FR0] 
        FADDD   #<TN t72[FR4]>
        WAIT

L48:

VOP -/DOUBLE-FLOAT t63[FR3] t76[FR0] => t77[FR3] 
        FSUB-STI        #<TN t77[FR3]>
        WAIT

VOP */DOUBLE-FLOAT RADIUS!22[FR2] RADIUS!22[FR2] => t78[FR0] 
        FSTP    #<TN t64[FR0]>
        FLD     #<TN t79[FR1]>
        FMULD   #<TN RADIUS!22[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t77[FR3] t78[FR0] => t80[FR0] 
        FADDD   #<TN t77[FR3]>
        WAIT

VOP <0/DOUBLE-FLOAT t80[FR0] {# T 0.0d0} 
L49:
        FTST
        FNSTSW
        AND     #<TN t81[AH]>, 69
        CMP     #<TN t81[AH]>, 1
        JMP     NE, L50

L51:

VOP MOVE 'NIL!82 => t83[EDX] 
        MOV     #<TN t83[EDX]>, 134217739

L52:

VOP RETURN-SINGLE t24[S0] t30[S1] t84[EDX] 
L53:
        LEA     #<TN t50[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t85[EBP]>, #<TN t24[S0]>
        RET     4

L50:

VOP FSQRT t80[FR0] => t86[FR0] 
L54:
        FSQRT
        WAIT

VOP +/DOUBLE-FLOAT t62[FR1] t86[FR0] => t87[FR0] 
        FADDD   #<TN t62[FR1]>
        WAIT

VOP <0/DOUBLE-FLOAT t87[FR0] {# NIL 0.0d0} 
L55:
        FTST
        FNSTSW
        AND     #<TN t81[AH]>, 69
        CMP     #<TN t81[AH]>, 1
        JMP     E, L56

L57:

VOP MOVE 'T!88 => t83[EDX] 
        MOV     #<TN t83[EDX]>, 134217767

VOP BRANCH {#} 
        JMP     L52

L56:

VOP MOVE 'NIL!82 => t83[EDX] 
        MOV     #<TN t83[EDX]>, 134217739

VOP BRANCH {#} 
        JMP     L52

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME DOT {1264A959}>

; 00000000:       2A06             SUB AL, [ESI]
;      002:       0000             ADD [EAX], AL
;      004:       0000             ADD [EAX], AL
;      006:       0000             ADD [EAX], AL
;      008:       0000             ADD [EAX], AL
;      00A:       0000             ADD [EAX], AL
;      00C:       0000             ADD [EAX], AL
;      00E:       0000             ADD [EAX], AL
;      010:       0000             ADD [EAX], AL
;      012:       0000             ADD [EAX], AL
;      014:       0000             ADD [EAX], AL
;      016:       0000             ADD [EAX], AL
;      018:       0000             ADD [EAX], AL
;      01A:       0000             ADD [EAX], AL
;      01C:       8F45F8           POP DWORD PTR [EBP-8]
;      01F:       8D65E0           LEA ESP, [EBP-32]
;      022:       8B45F0           MOV EAX, [EBP-16]
;      025:       DDDA             FSTPD FR2
;      027:       DD4001           FLDD [EAX+1]
;      02A:       D9CA             FXCH FR2
;      02C:       DDD8             FSTPD FR0
;      02E:       DD4601           FLDD [ESI+1]
;      031:       DDD9             FSTPD FR1
;      033:       DD4201           FLDD [EDX+1]
;      036:       D9C9             FXCH FR1
;      038:       DCE1             FSUBR-STI FR1
;      03A:       9B               WAIT
;      03B:       DDD8             FSTPD FR0
;      03D:       DD4609           FLDD [ESI+9]
;      040:       DDDB             FSTPD FR3
;      042:       DD4209           FLDD [EDX+9]
;      045:       D9CB             FXCH FR3
;      047:       DCE3             FSUBR-STI FR3
;      049:       9B               WAIT
;      04A:       DDD8             FSTPD FR0
;      04C:       DD4611           FLDD [ESI+17]
;      04F:       DDDC             FSTPD FR4
;      051:       DD4211           FLDD [EDX+17]
;      054:       D9CC             FXCH FR4
;      056:       D8E4             FSUBD FR4
;      058:       9B               WAIT
;      059:       B9D6000000       MOV ECX, 214
;      05E:       BA0C000000       MOV EDX, 12
;      063:       BB18000000       MOV EBX, 24
;      068:       8D430F           LEA EAX, [EBX+15]
;      06B:       83E0F8           AND EAX, -8
;      06E:       64               BYTE #X64
;      06F:       800D4800000004   OR BYTE PTR [#x48], 4
;      076:       64               BYTE #X64
;      077:       030520000000     ADD EAX, [#x20]
;      07D:       64               BYTE #X64
;      07E:       3B0524000000     CMP EAX, [#x24]
;      084:       7607             JBE L1
;      086:       E800000000       CALL L0
;      08B: L0:   EB15             JMP L2
;      08D: L1:   64               BYTE #X64
;      08E:       330520000000     XOR EAX, [#x20]
;      094:       64               BYTE #X64
;      095:       310520000000     XOR [#x20], EAX
;      09B:       64               BYTE #X64
;      09C:       330520000000     XOR EAX, [#x20]
;      0A2: L2:   8D4007           LEA EAX, [EAX+7]
;      0A5:       8948F9           MOV [EAX-7], ECX
;      0A8:       8950FD           MOV [EAX-3], EDX
;      0AB:       64               BYTE #X64
;      0AC:       80354800000004   XOR BYTE PTR [#x48], 4
;      0B3:       7403             JEQ L3
;      0B5:       0F0B09           BREAK 9                    ; pending interrupt trap
;      0B8: L3:   D9C9             FXCH FR1
;      0BA:       DD5001           FSTD [EAX+1]
;      0BD:       D9C9             FXCH FR1
;      0BF:       D9CB             FXCH FR3
;      0C1:       DD5009           FSTD [EAX+9]
;      0C4:       D9CB             FXCH FR3
;      0C6:       DD5011           FSTD [EAX+17]
;      0C9:       DDD8             FSTPD FR0
;      0CB:       DD4001           FLDD [EAX+1]
;      0CE:       DDD9             FSTPD FR1
;      0D0:       DD4701           FLDD [EDI+1]
;      0D3:       D9C9             FXCH FR1
;      0D5:       DCC9             FMUL-STI FR1
;      0D7:       9B               WAIT
;      0D8:       DDD8             FSTPD FR0
;      0DA:       DD4009           FLDD [EAX+9]
;      0DD:       DDDB             FSTPD FR3
;      0DF:       DD4709           FLDD [EDI+9]
;      0E2:       D9CB             FXCH FR3
;      0E4:       D8CB             FMULD FR3
;      0E6:       9B               WAIT
;      0E7:       DCC1             FADD-STI FR1
;      0E9:       9B               WAIT
;      0EA:       DDD8             FSTPD FR0
;      0EC:       DD4011           FLDD [EAX+17]
;      0EF:       DDDB             FSTPD FR3
;      0F1:       DD4711           FLDD [EDI+17]
;      0F4:       D9CB             FXCH FR3
;      0F6:       D8CB             FMULD FR3
;      0F8:       9B               WAIT
;      0F9:       DCC1             FADD-STI FR1
;      0FB:       9B               WAIT
;      0FC:       DDD8             FSTPD FR0
;      0FE:       D9C0             FLDD FR0
;      100:       D8C9             FMULD FR1
;      102:       DDD3             FSTD FR3
;      104:       DDD8             FSTPD FR0
;      106:       DD4001           FLDD [EAX+1]
;      109:       DDDC             FSTPD FR4
;      10B:       DD4001           FLDD [EAX+1]
;      10E:       D9CC             FXCH FR4
;      110:       DCCC             FMUL-STI FR4
;      112:       9B               WAIT
;      113:       DDD8             FSTPD FR0
;      115:       DD4009           FLDD [EAX+9]
;      118:       DDDD             FSTPD FR5
;      11A:       DD4009           FLDD [EAX+9]
;      11D:       D9CD             FXCH FR5
;      11F:       D8CD             FMULD FR5
;      121:       9B               WAIT
;      122:       DCC4             FADD-STI FR4
;      124:       9B               WAIT
;      125:       DDD8             FSTPD FR0
;      127:       DD4011           FLDD [EAX+17]
;      12A:       DDDD             FSTPD FR5
;      12C:       DD4011           FLDD [EAX+17]
;      12F:       D9CD             FXCH FR5
;      131:       D8CD             FMULD FR5
;      133:       9B               WAIT
;      134:       D8C4             FADDD FR4
;      136:       9B               WAIT
;      137:       DCEB             FSUB-STI FR3
;      139:       9B               WAIT
;      13A:       DDD8             FSTPD FR0
;      13C:       D9C1             FLDD FR1
;      13E:       D8CA             FMULD FR2
;      140:       9B               WAIT
;      141:       D8C3             FADDD FR3
;      143:       9B               WAIT
;      144:       D9E4             FTST
;      146:       DFE0             FNSTSW
;      148:       80E445           AND AH, 69
;      14B:       80FC01           CMP AH, 1
;      14E:       750F             JNE L5
;      150:       BA0B000008       MOV EDX, 134217739
;      155: L4:   8D65F8           LEA ESP, [EBP-8]
;      158:       F8               CLC
;      159:       8B6DFC           MOV EBP, [EBP-4]
;      15C:       C20400           RET 4
;      15F: L5:   D9FA             FSQRT
;      161:       9B               WAIT
;      162:       D8C1             FADDD FR1
;      164:       9B               WAIT
;      165:       D9E4             FTST
;      167:       DFE0             FNSTSW
;      169:       80E445           AND AH, 69
;      16C:       80FC01           CMP AH, 1
;      16F:       7407             JEQ L6
;      171:       BA27000008       MOV EDX, 134217767
;      176:       EBDD             JMP L4
;      178: L6:   BA0B000008       MOV EDX, 134217739
;      17D:       EBD6             JMP L4
;      17F:       90               NOP

;;;; component: (SB-C::VARARGS-ENTRY
                 (LAMBDA (&OPTIONAL ("#<...>" . "#<...>") "#<...>" . "#<...>")))


IR1 block 1 start c1
start stack:
  1>     bind SB-C::CLAMBDA INTERSECT
end stack:
successors c2

IR1 block 2 start c2
start stack:
  2>     entry NIL
  3>  4: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
  5>  6: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME AUX
             :%DEBUG-NAME (LABELS AUX)
             :KIND NIL
             :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (DOUBLE-FLOAT T T)
                                         (VALUES DOUBLE-FLOAT T &OPTIONAL))>
             :WHERE-FROM :DEFINED
             :VARS (LAM NORMAL SCENE) {118AF819}>)
  7>     known combination v4 v6
  8>  9: SB-C::CLAMBDA (LABELS AUX)
 10> 11: '1.7976931348623157d308
 12> 13: ZERO {SPECIAL}
 14> 15: SCENE
 16>     tail local combination v9 v11 v13 v15
end stack:
successors c17

IR1 block 3 start c17
start stack:
 17>     bind SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c18

IR1 block 4 start c18
start stack:
 18>     entry NIL
 19> 20: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
 21> 22: SCENE
 23> 24: cast v22 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:STRUCTURE-CLASSOID SPHERE>]
 25> 26: '1
 27> 28: known combination v20 v24 v26
 29> 30: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
 31> 32: SB-C::CLAMBDA RAY-SPHERE
 33> 34: ORIG
 35> 36: DIR
 37> 38: SB-KERNEL:%RAW-INSTANCE-REF/DOUBLE {GLOBAL-FUNCTION}
 39> 40: SCENE
 41> 42: '0
 43> 44: known combination v38 v40 v42
 45> 46: cast v34 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                         DOUBLE-FLOAT
                                                                         (3))>]
 47> 48: cast v36 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                         DOUBLE-FLOAT
                                                                         (3))>]
 49> 50: cast v28 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                         DOUBLE-FLOAT
                                                                         (3))>]
 51>     local combination v32 v46 v48 v50 v44
 52>     bind SB-C::CLAMBDA RAY-SPHERE :KIND :LET
end stack:
successors c53

IR1 block 5 start c53
start stack:
 53>     entry NIL
end stack:
successors c54

IR1 block 6 start c54
start stack:
 54>     entry NIL
 55> 56: - {GLOBAL-FUNCTION}
end stack:
successors c57

IR1 block 7 start c57
start stack:
 57>     entry NIL
 58> 59: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 60> 61: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G841))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11ABB6F9}> {11ABB6B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11ABB769}> {11ABB729}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G841
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11ABB7D9}> {11ABB799}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11ABC719}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-842
                                  #:N-COUNT-843) {11ABD149}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G841) {11ABBA59}> {11ABB8F9}>)
 62>     known combination v59 v61
 63> 64: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 65> 66: CENTER
 67> 68: '0
 69> 70: known combination v64 v66 v68
end stack:
successors c71

IR1 block 8 start c71
start stack:
 71>     entry NIL
 72> 73: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 74> 75: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G844))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AC0979}> {11AC0939}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AC09E9}> {11AC09A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G844
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11AC0A59}> {11AC0A19}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AC1489}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-845
                                  #:N-COUNT-846) {11AC1E71}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G844) {11AC0C91}> {11AC0B31}>)
 76>     known combination v73 v75
 77> 78: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 79> 80: ORIG
 81> 82: '0
 83> 84: known combination v78 v80 v82
end stack:
successors c85

IR1 block 9 start c85
start stack:
 85> 86: known combination v56 v70 v84
 87> 88: - {GLOBAL-FUNCTION}
end stack:
successors c89

IR1 block 10 start c89
start stack:
 89>     entry NIL
 90> 91: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 92> 93: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G847))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AC51E9}> {11AC51A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AC5259}> {11AC5219}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G847
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11AC52C9}> {11AC5289}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AC5C91}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-848
                                  #:N-COUNT-849) {11AC6679}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G847) {11AC5501}> {11AC53A1}>)
 94>     known combination v91 v93
 95> 96: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 97> 98: CENTER
 99>100: '1
101>102: known combination v96 v98 v100
end stack:
successors c103

IR1 block 11 start c103
start stack:
103>     entry NIL
104>105: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
106>107: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G850))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AC8841}> {11AC8801}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AC88B1}> {11AC8871}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G850
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11AC8921}> {11AC88E1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AC92F1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-851
                                  #:N-COUNT-852) {11AC9CD9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G850) {11AC8B59}> {11AC89F9}>)
108>     known combination v105 v107
109>110: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
111>112: ORIG
113>114: '1
115>116: known combination v110 v112 v114
end stack:
successors c117

IR1 block 12 start c117
start stack:
117>118: known combination v88 v102 v116
119>120: - {GLOBAL-FUNCTION}
end stack:
successors c121

IR1 block 13 start c121
start stack:
121>     entry NIL
122>123: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
124>125: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G853))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11ACCDF9}> {11ACCDB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11ACCE69}> {11ACCE29}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G853
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11ACCED9}> {11ACCE99}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AD48F1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-854
                                  #:N-COUNT-855) {11AD52D9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G853) {11AD4161}> {11AD4001}>)
126>     known combination v123 v125
127>128: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
129>130: CENTER
131>132: '2
133>134: known combination v128 v130 v132
end stack:
successors c135

IR1 block 14 start c135
start stack:
135>     entry NIL
136>137: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
138>139: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G856))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AD7541}> {11AD7501}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AD75B1}> {11AD7571}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G856
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11AD7621}> {11AD75E1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AD8001}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-857
                                  #:N-COUNT-858) {11AD89A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G856) {11AD7859}> {11AD76F9}>)
140>     known combination v137 v139
141>142: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
143>144: ORIG
145>146: '2
147>148: known combination v142 v144 v146
end stack:
successors c149

IR1 block 15 start c149
start stack:
149>150: known combination v120 v134 v148
end stack:
successors c151

IR1 block 16 start c151
start stack:
151>     entry NIL
152>153: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
154>155: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
156>157: '214
158>159: '3
160>161: '6
162>163: known combination v155 v157 v159 v161
164>     local combination v153 v163
165>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
166>167: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
168>169: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G859))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AE53D1}> {11AE5391}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AE5441}> {11AE5401}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G859
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11AE54B1}> {11AE5471}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AE63B1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-860
                                  #:N-COUNT-861) {11AE6D51}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G859) {11AE57A1}> {11AE5641}>)
170>     known combination v167 v169
171>172: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
173>174: #:G1
175>176: '0
177>     known combination v172 v174 v176 v86
178>179: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
180>181: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G862))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AE9529}> {11AE94E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AE9599}> {11AE9559}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G862 ..>)>)
                                                    IR1 block 17 start c182
                                                    start stack:
                                                    182>183: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                            ((SB-C::OF-TYPE
                                                                              SB-C::LAMBDA-VAR)
                                                                             (SB-C::OF-TYPE
                                                                              SB-C::LAMBDA-VAR)))
                                                    end stack:
                                                    successors c184

IR1 block 18 start c184
start stack:
184>     entry NIL
185>186: + {GLOBAL-FUNCTION}
187>188: + {GLOBAL-FUNCTION}
189>190: * {GLOBAL-FUNCTION}
end stack:
successors c191

IR1 block 19 start c191
start stack:
191>     entry NIL
192>193: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
194>195: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G868))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AF60D9}> {11AF6099}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AF6149}> {11AF6109}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G868
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11AF61B9}> {11AF6179}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AF6C01}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-869
                                  #:N-COUNT-870) {11AF75A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G868) {11AF63F1}> {11AF6291}>)
196>     known combination v193 v195
197>198: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
199>200: #:G1
201>202: '0
203>204: known combination v198 v200 v202
end stack:
successors c205

IR1 block 20 start c205
start stack:
205>     entry NIL
206>207: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
208>209: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G871))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AFA341}> {11AFA301}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AFA3B1}> {11AFA371}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G871
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11AFA421}> {11AFA3E1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AFAE69}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-872
                                  #:N-COUNT-873) {11AFB819}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G871) {11AFA659}> {11AFA4F9}>)
210>     known combination v207 v209
211>212: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
213>214: DIR
215>216: '0
217>218: known combination v212 v214 v216
end stack:
successors c219

IR1 block 21 start c219
start stack:
219>220: known combination v190 v204 v218
221>222: * {GLOBAL-FUNCTION}
end stack:
successors c223

IR1 block 22 start c223
start stack:
223>     entry NIL
224>225: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
226>227: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G874))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AFE7B1}> {11AFE771}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11AFE821}> {11AFE7E1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G874
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11AFE891}> {11AFE851}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11AFF271}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-875
                                  #:N-COUNT-876) {11AFFC11}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G874) {11AFEAC9}> {11AFE969}>)
228>     known combination v225 v227
229>230: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
231>232: #:G1
233>234: '1
235>236: known combination v230 v232 v234
end stack:
successors c237

IR1 block 23 start c237
start stack:
237>     entry NIL
238>239: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
240>241: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G877))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B01D19}> {11B01CD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B01D89}> {11B01D49}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G877
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B01DF9}> {11B01DB9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B027D9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-878
                                  #:N-COUNT-879) {11B03181}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G877) {11B02031}> {11B01ED1}>)
242>     known combination v239 v241
243>244: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
245>246: DIR
247>248: '1
249>250: known combination v244 v246 v248
end stack:
successors c251

IR1 block 24 start c251
start stack:
251>252: known combination v222 v236 v250
253>254: known combination v188 v220 v252
255>256: * {GLOBAL-FUNCTION}
end stack:
successors c257

IR1 block 25 start c257
start stack:
257>     entry NIL
258>259: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
260>261: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G880))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B102A9}> {11B10269}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B10319}> {11B102D9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G880
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B10389}> {11B10349}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B10DD1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-881
                                  #:N-COUNT-882) {11B117D9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G880) {11B105C1}> {11B10461}>)
262>     known combination v259 v261
263>264: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
265>266: #:G1
267>268: '2
269>270: known combination v264 v266 v268
end stack:
successors c271

IR1 block 26 start c271
start stack:
271>     entry NIL
272>273: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
274>275: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G883))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B13899}> {11B13859}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B13909}> {11B138C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G883
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B13979}> {11B13939}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B14359}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-884
                                  #:N-COUNT-885) {11B14CF9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G883) {11B13BB1}> {11B13A51}>)
276>     known combination v273 v275
277>278: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
279>280: DIR
281>282: '2
283>284: known combination v278 v280 v282
end stack:
successors c285

IR1 block 27 start c285
start stack:
285>286: known combination v256 v270 v284
287>288: known combination v186 v254 v286
end stack:
successors c289

IR1 block 28 start c289
start stack:
289>     local combination v183 v288
290>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
291>292: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
293>294: + {GLOBAL-FUNCTION}
295>296: - {GLOBAL-FUNCTION}
297>298: * {GLOBAL-FUNCTION}
299>300: B
301>302: B
303>304: known combination v298 v300 v302
end stack:
successors c305

IR1 block 29 start c305
start stack:
305>     entry NIL
306>307: + {GLOBAL-FUNCTION}
308>309: + {GLOBAL-FUNCTION}
310>311: * {GLOBAL-FUNCTION}
end stack:
successors c312

IR1 block 30 start c312
start stack:
312>     entry NIL
313>314: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
315>316: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G886))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B17E89}> {11B17E49}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B17EF9}> {11B17EB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G886
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B17F69}> {11B17F29}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B18AB9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-887
                                  #:N-COUNT-888) {11B19459}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G886) {11B181A1}> {11B18041}>)
317>     known combination v314 v316
318>319: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
320>321: #:G1
322>323: '0
324>325: known combination v319 v321 v323
end stack:
successors c326

IR1 block 31 start c326
start stack:
326>     entry NIL
327>328: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
329>330: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G889))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B1B729}> {11B1B6E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B1B799}> {11B1B759}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G889
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B1B809}> {11B1B7C9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B1C251}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-890
                                  #:N-COUNT-891) {11B1CBF1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G889) {11B1BA41}> {11B1B8E1}>)
331>     known combination v328 v330
332>333: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
334>335: #:G1
336>337: '0
338>339: known combination v333 v335 v337
end stack:
successors c340

IR1 block 32 start c340
start stack:
340>341: known combination v311 v325 v339
342>343: * {GLOBAL-FUNCTION}
end stack:
successors c344

IR1 block 33 start c344
start stack:
344>     entry NIL
345>346: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
347>348: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G892))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B1FC41}> {11B1FC01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B1FCB1}> {11B1FC71}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G892
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B1FD21}> {11B1FCE1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B20709}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-893
                                  #:N-COUNT-894) {11B210A9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G892) {11B1FF59}> {11B1FDF9}>)
349>     known combination v346 v348
350>351: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
352>353: #:G1
354>355: '1
356>357: known combination v351 v353 v355
end stack:
successors c358

IR1 block 34 start c358
start stack:
358>     entry NIL
359>360: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
361>362: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G895))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B23159}> {11B23119}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B231C9}> {11B23189}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G895
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B23239}> {11B231F9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B23C19}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-896
                                  #:N-COUNT-897) {11B245C9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G895) {11B23471}> {11B23311}>)
363>     known combination v360 v362
364>365: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
366>367: #:G1
368>369: '1
370>371: known combination v365 v367 v369
end stack:
successors c372

IR1 block 35 start c372
start stack:
372>373: known combination v343 v357 v371
374>375: known combination v309 v341 v373
376>377: * {GLOBAL-FUNCTION}
end stack:
successors c378

IR1 block 36 start c378
start stack:
378>     entry NIL
379>380: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
381>382: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G898))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B273C1}> {11B27381}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B27431}> {11B273F1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G898
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B274A1}> {11B27461}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B27E81}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-899
                                  #:N-COUNT-900) {11B28821}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G898) {11B276D9}> {11B27579}>)
383>     known combination v380 v382
384>385: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
386>387: #:G1
388>389: '2
390>391: known combination v385 v387 v389
end stack:
successors c392

IR1 block 37 start c392
start stack:
392>     entry NIL
393>394: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
395>396: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G901))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B2A879}> {11B2A839}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B2A8E9}> {11B2A8A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G901
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B2A959}> {11B2A919}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B2B349}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-902
                                  #:N-COUNT-903) {11B2BCE9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G901) {11B2AB91}> {11B2AA31}>)
397>     known combination v394 v396
398>399: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
400>401: #:G1
402>403: '2
404>405: known combination v399 v401 v403
end stack:
successors c406

IR1 block 38 start c406
start stack:
406>407: known combination v377 v391 v405
408>409: known combination v307 v375 v407
end stack:
successors c410

IR1 block 39 start c410
start stack:
410>411: known combination v296 v304 v409
412>413: * {GLOBAL-FUNCTION}
414>415: RADIUS
416>417: RADIUS
418>419: known combination v413 v415 v417
420>421: known combination v294 v411 v419
422>     local combination v292 v421
423>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
424>425: < {GLOBAL-FUNCTION}
426>427: DISC
428>429: '0.0d0
430>431: known combination v425 v427 v429
432>     if v431 c433 c434
end stack:
successors c433 c434

IR1 block 107 start c434
start stack:
434>435: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                        ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
436>437: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
438>439: DISC
440>441: known combination v437 v439
442>     local combination v435 v441
443>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
444>445: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                        ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
446>447: + {GLOBAL-FUNCTION}
448>449: B
450>451: DISC
452>453: known combination v447 v449 v451
454>     local combination v445 v453
455>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
456>457: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
458>459: - {GLOBAL-FUNCTION}
460>461: B
462>463: DISC
464>465: known combination v459 v461 v463
466>     local combination v457 v465
467>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
468>469: < {GLOBAL-FUNCTION}
470>471: T2
472>473: '0.0d0
474>475: known combination v469 v471 v473
476>     if v475 c477 c478
end stack:
successors c477 c478

IR1 block 109 start c478
start stack:
478>479: > {GLOBAL-FUNCTION}
480>481: T1
482>483: '0.0d0
484>485: known combination v479 v481 v483
486>     if v485 c487 c488
end stack:
successors c488 c487

IR1 block 111 start c487
start stack:
487>489: T1
end stack:
successors c490

IR1 block 110 start c488
start stack:
488>489: T2
end stack:
successors c490

IR1 block 108 start c477
start stack:
477>489: '1.7976931348623157d308
end stack:
successors c490

IR1 block 40 start c433
start stack:
433>489: '1.7976931348623157d308
end stack:
successors c490

IR1 block 41 start c490
start stack:
490>     local combination v30 v489
491>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
492>493: < {GLOBAL-FUNCTION}
494>495: LAMT
496>497: LAM
498>499: known combination v493 v495 v497
500>     if v499 c501 c502
end stack:
successors c501 c502

IR1 block 106 start c502
start stack:
502>503: VALUES {GLOBAL-FUNCTION}
504>505: LAM
506>507: NORMAL
508>509: known combination v503 v505 v507
end stack:
successors c510

IR1 block 42 start c501
start stack:
501>511: SB-C::CLAMBDA (LET ((#:G1012
                              (SB-KERNEL:%INSTANCE-LAYOUT "#<...>" . "#<...>")))
                         )
512>513: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
514>515: SCENE
516>517: '0
518>519: known combination v513 v515 v517
520>     local combination v511 v519
521>     bind SB-C::CLAMBDA (LET ((#:G1012
                                   (SB-KERNEL:%INSTANCE-LAYOUT "#<...>"
                                                               . "#<...>")))
                              ) :KIND :LET
522>523: EQ {GLOBAL-FUNCTION}
524>525: #:G1012
526>527: '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>
528>529: known combination v523 v525 v527
530>     if v529 c531 c532
end stack:
successors c532 c531

IR1 block 43 start c532
start stack:
532>533: > {GLOBAL-FUNCTION}
534>535: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
536>537: #:G1012
538>539: '12
540>541: known combination v535 v537 v539
542>543: '3
544>545: known combination v533 v541 v543
546>     if v545 c547 c548
end stack:
successors c548 c547

IR1 block 99 start c547
start stack:
547>549: EQ {GLOBAL-FUNCTION}
550>551: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
552>553: #:G1012
554>555: '11
556>557: known combination v551 v553 v555
558>559: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
560>561: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1013))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE SIMPLE-VECTOR>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11FF98E1}> {11FF98A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11FF9951}> {11FF9911}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1013
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11FF99C1}> {11FF9981}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11FFF889}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1014
                                  #:N-COUNT-1015) {120002B9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1013) {11FF9D61}> {11FF9C01}>)
562>     known combination v559 v561
563>564: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
565>566: '3
567>568: known combination v564 v557 v566
569>570: '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>
571>572: known combination v549 v568 v570
573>     if v572 c531 c548
end stack:
successors c531 c548

IR1 block 100 start c531
start stack:
531>     entry NIL
574>575: SB-C::CLAMBDA (LET ((#:N-LIST699 (GROUP-CHILDREN "#<...>" . "#<...>")))
                         )
576>577: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
578>579: SCENE
580>581: '2
582>583: known combination v577 v579 v581
584>     local combination v575 v583
585>     bind SB-C::CLAMBDA (LET ((#:N-LIST699
                                   (GROUP-CHILDREN "#<...>" . "#<...>")))
                              ) :KIND :LET
end stack:
successors c586

IR1 block 101 start c586
start stack:
586>     entry NIL
end stack:
successors c587

IR1 block 104 start c587
start stack:
587>588: #:N-LIST699
589>590: cast v588 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
591>     if v590 c592 c593
end stack:
successors c593 c592

IR1 block 102 start c592
start stack:
592>594: CAR {GLOBAL-FUNCTION}
595>596: #:N-LIST699
597>598: known combination v594 v596
599>600: CDR {GLOBAL-FUNCTION}
601>602: #:N-LIST699
603>604: known combination v600 v602
605>     set #:N-LIST699 v604
end stack:
successors c606

IR1 block 103 start c606
start stack:
606>     entry NIL
607>608: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
609>610: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA (&OPTIONAL (#:G701) (#:G702) &REST #:G703))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G701
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {118C2889}> {118C2849}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G702
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {118C28F9}> {118C28B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G703
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {118C2969}> {118C2929}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :MV-LET
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (#:G701 #:G702) {118C33F9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:G701 #:G702 #:N-CONTEXT-704
                                  #:N-COUNT-705) {118C3D99}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (#:G701 #:G702 #:G703) {118C2B31}> {118C29D1}>)
611>     known combination v608 v610
612>613: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                        (LAMBDA
                            (&OPTIONAL ("#<...>" . "#<...>")
                             "#<...>" . "#<...>")))
614>615: SB-C::CLAMBDA (LABELS AUX)
616>617: LAM
618>619: NORMAL
620>621: local combination v615 v617 v619 v598
622>     local mv-combination v613 v621
623>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                             (LAMBDA
                                 (&OPTIONAL ("#<...>" . "#<...>")
                                  "#<...>" . "#<...>"))) :KIND :MV-LET
624>625: #:G701
626>     set LAM v625
627>628: #:G702
629>     set NORMAL v628
end stack:
successors c587

IR1 block 105 start c593
start stack:
593>630: VALUES {GLOBAL-FUNCTION}
631>632: LAM
633>634: NORMAL
635>509: known combination v630 v632 v634
end stack:
successors c510

IR1 block 44 start c548
start stack:
548>636: VALUES {GLOBAL-FUNCTION}
637>638: LAMT
end stack:
successors c639

IR1 block 45 start c639
start stack:
639>     entry NIL
640>641: * {GLOBAL-FUNCTION}
642>643: LAMT
end stack:
successors c644

IR1 block 46 start c644
start stack:
644>     entry NIL
645>646: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
647>648: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1009))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BEF871}> {11BEF831}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BEF8E1}> {11BEF8A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1009
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BEF951}> {11BEF911}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BF0379}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1010
                                  #:N-COUNT-1011) {11BF0D29}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1009) {11BEFB89}> {11BEFA29}>)
649>     known combination v646 v648
650>651: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
652>653: DIR
654>655: '0
656>657: known combination v651 v653 v655
end stack:
successors c658

IR1 block 47 start c658
start stack:
658>659: known combination v641 v643 v657
660>661: * {GLOBAL-FUNCTION}
662>663: LAMT
end stack:
successors c664

IR1 block 48 start c664
start stack:
664>     entry NIL
665>666: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
667>668: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1006))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BEC0B9}> {11BEC079}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BEC129}> {11BEC0E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1006
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BEC199}> {11BEC159}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BECBC9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1007
                                  #:N-COUNT-1008) {11BED579}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1006) {11BEC3D1}> {11BEC271}>)
669>     known combination v666 v668
670>671: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
672>673: DIR
674>675: '1
676>677: known combination v671 v673 v675
end stack:
successors c678

IR1 block 49 start c678
start stack:
678>679: known combination v661 v663 v677
680>681: * {GLOBAL-FUNCTION}
682>683: LAMT
end stack:
successors c684

IR1 block 50 start c684
start stack:
684>     entry NIL
685>686: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
687>688: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1003))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BE8461}> {11BE8421}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BE84D1}> {11BE8491}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1003
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BE8541}> {11BE8501}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BE8F89}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1004
                                  #:N-COUNT-1005) {11BE9939}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1003) {11BE8779}> {11BE8619}>)
689>     known combination v686 v688
690>691: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
692>693: DIR
694>695: '2
696>697: known combination v691 v693 v695
end stack:
successors c698

IR1 block 51 start c698
start stack:
698>699: known combination v681 v683 v697
end stack:
successors c700

IR1 block 52 start c700
start stack:
700>     entry NIL
701>702: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
703>704: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
705>706: '214
707>708: '3
709>710: '6
711>712: known combination v704 v706 v708 v710
713>     local combination v702 v712
714>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
715>716: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
717>718: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G994))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BD5BF9}> {11BD5BB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BD5C69}> {11BD5C29}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G994
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BD5CD9}> {11BD5C99}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BD6A61}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-995
                                  #:N-COUNT-996) {11BD7459}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G994) {11BD5FF9}> {11BD5E99}>)
719>     known combination v716 v718
720>721: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
722>723: #:G1
724>725: '0
726>     known combination v721 v723 v725 v659
727>728: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
729>730: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G997))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BD9DC9}> {11BD9D89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BD9E39}> {11BD9DF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G997 ..>)>)
                                                    IR1 block 53 start c731
                                                    start stack:
                                                    731>     entry NIL
                                                    732>733: + {GLOBAL-FUNCTION}
                                                    end stack:
                                                    successors c734

IR1 block 54 start c734
start stack:
734>     entry NIL
735>736: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
737>738: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G967))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BAF979}> {11BAF939}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BAF9E9}> {11BAF9A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G967
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BAFA59}> {11BAFA19}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BB04A1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-968
                                  #:N-COUNT-969) {11BB0E41}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G967) {11BAFC91}> {11BAFB31}>)
739>     known combination v736 v738
740>741: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
742>743: ORIG
744>745: '0
746>747: known combination v741 v743 v745
end stack:
successors c748

IR1 block 55 start c748
start stack:
748>     entry NIL
749>750: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
751>752: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G970))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BB37F1}> {11BB37B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BB3861}> {11BB3821}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G970
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BB38D1}> {11BB3891}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BB42F9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-971
                                  #:N-COUNT-972) {11BB4C99}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G970) {11BB3B09}> {11BB39A9}>)
753>     known combination v750 v752
754>755: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
756>757: #:G1
758>759: '0
760>761: known combination v755 v757 v759
end stack:
successors c762

IR1 block 56 start c762
start stack:
762>763: known combination v733 v747 v761
764>765: + {GLOBAL-FUNCTION}
end stack:
successors c766

IR1 block 57 start c766
start stack:
766>     entry NIL
767>768: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
769>770: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G973))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BB7429}> {11BB73E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BB7499}> {11BB7459}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G973
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BB7509}> {11BB74C9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BB7F31}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-974
                                  #:N-COUNT-975) {11BB88D1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G973) {11BB7741}> {11BB75E1}>)
771>     known combination v768 v770
772>773: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
774>775: ORIG
776>777: '1
778>779: known combination v773 v775 v777
end stack:
successors c780

IR1 block 58 start c780
start stack:
780>     entry NIL
781>782: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
783>784: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G976))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BBA911}> {11BBA8D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BBA981}> {11BBA941}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G976
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BBA9F1}> {11BBA9B1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BBB419}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-977
                                  #:N-COUNT-978) {11BBBDB9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G976) {11BBAC29}> {11BBAAC9}>)
785>     known combination v782 v784
786>787: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
788>789: #:G1
790>791: '1
792>793: known combination v787 v789 v791
end stack:
successors c794

IR1 block 59 start c794
start stack:
794>795: known combination v765 v779 v793
796>797: + {GLOBAL-FUNCTION}
end stack:
successors c798

IR1 block 60 start c798
start stack:
798>     entry NIL
799>800: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
801>802: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G979))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BBE719}> {11BBE6D9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BBE789}> {11BBE749}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G979
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BBE7F9}> {11BBE7B9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BBF241}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-980
                                  #:N-COUNT-981) {11BBFBE1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G979) {11BBEA31}> {11BBE8D1}>)
803>     known combination v800 v802
804>805: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
806>807: ORIG
808>809: '2
810>811: known combination v805 v807 v809
end stack:
successors c812

IR1 block 61 start c812
start stack:
812>     entry NIL
813>814: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
815>816: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G982))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BC1E49}> {11BC1E09}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BC1EB9}> {11BC1E79}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G982
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BC1F29}> {11BC1EE9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BC2951}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-983
                                  #:N-COUNT-984) {11BC32F1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G982) {11BC2161}> {11BC2001}>)
817>     known combination v814 v816
818>819: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
820>821: #:G1
822>823: '2
824>825: known combination v819 v821 v823
end stack:
successors c826

IR1 block 62 start c826
start stack:
826>827: known combination v797 v811 v825
end stack:
successors c828

IR1 block 63 start c828
start stack:
828>     entry NIL
829>830: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
831>832: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
833>834: '214
835>836: '3
837>838: '6
839>840: known combination v832 v834 v836 v838
841>     local combination v830 v840
842>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
843>844: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
845>846: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G985))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BC65A9}> {11BC6569}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BC6619}> {11BC65D9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G985
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BC6689}> {11BC6649}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BC7571}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-986
                                  #:N-COUNT-987) {11BC7F11}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G985) {11BC69A9}> {11BC6849}>)
847>     known combination v844 v846
848>849: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
850>851: #:G1
852>853: '0
854>     known combination v849 v851 v853 v763
855>856: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
857>858: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G988))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BCA099}> {11BCA059}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BCA109}> {11BCA0C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G988 ..>)>)
                                                    IR1 block 64 start c859
                                                    start stack:
                                                    859>     entry NIL
                                                    860>861: - {GLOBAL-FUNCTION}
                                                    end stack:
                                                    successors c862

IR1 block 65 start c862
start stack:
862>     entry NIL
863>864: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
865>866: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G940))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B89FB1}> {11B89F71}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B8A041}> {11B8A001}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G940
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B8A0B1}> {11B8A071}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B8ABE9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-941
                                  #:N-COUNT-942) {11B8B589}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G940) {11B8A2E9}> {11B8A189}>)
867>     known combination v864 v866
868>869: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
870>871: #:G1
872>873: '0
874>875: known combination v869 v871 v873
end stack:
successors c876

IR1 block 66 start c876
start stack:
876>     entry NIL
877>878: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
879>880: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G943))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B8DF29}> {11B8DEE9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B8DF99}> {11B8DF59}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G943
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B8E009}> {11B8DFC9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B8E9E9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-944
                                  #:N-COUNT-945) {11B8F389}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G943) {11B8E241}> {11B8E0E1}>)
881>     known combination v878 v880
882>883: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
884>885: CENTER
886>887: '0
888>889: known combination v883 v885 v887
end stack:
successors c890

IR1 block 67 start c890
start stack:
890>891: known combination v861 v875 v889
892>893: - {GLOBAL-FUNCTION}
end stack:
successors c894

IR1 block 68 start c894
start stack:
894>     entry NIL
895>896: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
897>898: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G946))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B91B09}> {11B91AC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B91B79}> {11B91B39}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G946
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B91BE9}> {11B91BA9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B925C9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-947
                                  #:N-COUNT-948) {11B92F69}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G946) {11B91E21}> {11B91CC1}>)
899>     known combination v896 v898
900>901: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
902>903: #:G1
904>905: '1
906>907: known combination v901 v903 v905
end stack:
successors c908

IR1 block 69 start c908
start stack:
908>     entry NIL
909>910: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
911>912: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G949))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B94F69}> {11B94F29}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B94FD9}> {11B94F99}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G949
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B95049}> {11B95009}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B95A29}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-950
                                  #:N-COUNT-951) {11B963C9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G949) {11B95281}> {11B95121}>)
913>     known combination v910 v912
914>915: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
916>917: CENTER
918>919: '1
920>921: known combination v915 v917 v919
end stack:
successors c922

IR1 block 70 start c922
start stack:
922>923: known combination v893 v907 v921
924>925: - {GLOBAL-FUNCTION}
end stack:
successors c926

IR1 block 71 start c926
start stack:
926>     entry NIL
927>928: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
929>930: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G952))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B98C01}> {11B98BC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B98C71}> {11B98C31}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G952
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B98CE1}> {11B98CA1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B99789}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-953
                                  #:N-COUNT-954) {11B9A129}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G952) {11B98F19}> {11B98DB9}>)
931>     known combination v928 v930
932>933: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
934>935: #:G1
936>937: '2
938>939: known combination v933 v935 v937
end stack:
successors c940

IR1 block 72 start c940
start stack:
940>     entry NIL
941>942: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
943>944: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G955))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B9C4F1}> {11B9C4B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11B9C561}> {11B9C521}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G955
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11B9C5D1}> {11B9C591}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11B9CFB1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-956
                                  #:N-COUNT-957) {11B9D951}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G955) {11B9C809}> {11B9C6A9}>)
945>     known combination v942 v944
946>947: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
948>949: CENTER
950>951: '2
952>953: known combination v947 v949 v951
end stack:
successors c954

IR1 block 73 start c954
start stack:
954>955: known combination v925 v939 v953
end stack:
successors c956

IR1 block 74 start c956
start stack:
956>     entry NIL
957>958: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
959>960: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
961>962: '214
963>964: '3
965>966: '6
967>968: known combination v960 v962 v964 v966
969>     local combination v958 v968
970>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
971>972: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
973>974: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G958))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BA0BD1}> {11BA0B91}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BA0C41}> {11BA0C01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G958
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11BA0CB1}> {11BA0C71}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11BA1971}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-959
                                  #:N-COUNT-960) {11BA2311}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G958) {11BA0FD1}> {11BA0E71}>)
975>     known combination v972 v974
976>977: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
978>979: #:G1
980>981: '0
982>     known combination v977 v979 v981 v891
983>984: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
985>986: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G961))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BA4729}> {11BA46E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11BA4799}> {11BA4759}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G961 ..>)>)
                                                    IR1 block 75 start c987
                                                    start stack:
                                                    987>     entry NIL
                                                    988>989: SB-C::CLAMBDA (SB-C::LOCAL-INLINE
                                                                            *V)
                                                    990>991: / {GLOBAL-FUNCTION}
                                                    992>993: '1.0d0
                                                    end stack:
                                                    successors c994

IR1 block 76 start c994
start stack:
994>     entry NIL
end stack:
successors c995

IR1 block 77 start c995
start stack:
995>     entry NIL
996>997: + {GLOBAL-FUNCTION}
998>999: + {GLOBAL-FUNCTION}
1000>1001: * {GLOBAL-FUNCTION}
end stack:
successors c1002

IR1 block 78 start c1002
start stack:
1002>     entry NIL
1003>1004: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1005>1006: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G904))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B2EE31}> {11B2EDF1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B2EEA1}> {11B2EE61}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G904
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B2EF11}> {11B2EED1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B2F9E9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-905
                                    #:N-COUNT-906) {11B30389}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G904) {11B2F161}> {11B2F001}>)
1007>     known combination v1004 v1006
1008>1009: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1010>1011: #:G1
1012>1013: '0
1014>1015: known combination v1009 v1011 v1013
end stack:
successors c1016

IR1 block 79 start c1016
start stack:
1016>     entry NIL
1017>1018: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1019>1020: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G907))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B32809}> {11B327C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B32879}> {11B32839}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G907
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B328E9}> {11B328A9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B333B1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-908
                                    #:N-COUNT-909) {11B33D51}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G907) {11B32B21}> {11B329C1}>)
1021>     known combination v1018 v1020
1022>1023: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1024>1025: #:G1
1026>1027: '0
1028>1029: known combination v1023 v1025 v1027
end stack:
successors c1030

IR1 block 80 start c1030
start stack:
1030>1031: known combination v1001 v1015 v1029
1032>1033: * {GLOBAL-FUNCTION}
end stack:
successors c1034

IR1 block 81 start c1034
start stack:
1034>     entry NIL
1035>1036: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1037>1038: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G910))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B3AD99}> {11B3AD59}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B3AE09}> {11B3ADC9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G910
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B3AE79}> {11B3AE39}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B3B859}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-911
                                    #:N-COUNT-912) {11B3C1F9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G910) {11B3B0B1}> {11B3AF51}>)
1039>     known combination v1036 v1038
1040>1041: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1042>1043: #:G1
1044>1045: '1
1046>1047: known combination v1041 v1043 v1045
end stack:
successors c1048

IR1 block 82 start c1048
start stack:
1048>     entry NIL
1049>1050: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1051>1052: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G913))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B3E341}> {11B3E301}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B3E3B1}> {11B3E371}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G913
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B3E421}> {11B3E3E1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B3EE01}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-914
                                    #:N-COUNT-915) {11B3F7A1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G913) {11B3E659}> {11B3E4F9}>)
1053>     known combination v1050 v1052
1054>1055: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1056>1057: #:G1
1058>1059: '1
1060>1061: known combination v1055 v1057 v1059
end stack:
successors c1062

IR1 block 83 start c1062
start stack:
1062>1063: known combination v1033 v1047 v1061
1064>1065: known combination v999 v1031 v1063
1066>1067: * {GLOBAL-FUNCTION}
end stack:
successors c1068

IR1 block 84 start c1068
start stack:
1068>     entry NIL
1069>1070: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1071>1072: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G916))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B43751}> {11B43711}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B437C1}> {11B43781}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G916
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B43831}> {11B437F1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B44339}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-917
                                    #:N-COUNT-918) {11B44CD9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G916) {11B43A69}> {11B43909}>)
1073>     known combination v1070 v1072
1074>1075: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1076>1077: #:G1
1078>1079: '2
1080>1081: known combination v1075 v1077 v1079
end stack:
successors c1082

IR1 block 85 start c1082
start stack:
1082>     entry NIL
1083>1084: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1085>1086: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G919))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B48D01}> {11B48CC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B48D71}> {11B48D31}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G919
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B48DE1}> {11B48DA1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B497C1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-920
                                    #:N-COUNT-921) {11B4A181}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G919) {11B49019}> {11B48EB9}>)
1087>     known combination v1084 v1086
1088>1089: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1090>1091: #:G1
1092>1093: '2
1094>1095: known combination v1089 v1091 v1093
end stack:
successors c1096

IR1 block 86 start c1096
start stack:
1096>1097: known combination v1067 v1081 v1095
1098>1099: known combination v997 v1065 v1097
end stack:
successors c1100

IR1 block 87 start c1100
start stack:
1100>1101: cast v1099 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (DOUBLE-FLOAT
                                                                               0.0d0)>]
1102>1103: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
1104>1105: known combination v1103 v1101
end stack:
successors c1106

IR1 block 88 start c1106
start stack:
1106>1107: known combination v991 v993 v1105
1108>     local combination v989 v1107 <none>
1109>     bind SB-C::CLAMBDA (SB-C::LOCAL-INLINE *V) :KIND :LET
end stack:
successors c1110

IR1 block 89 start c1110
start stack:
1110>     entry NIL
1111>1112: * {GLOBAL-FUNCTION}
1113>1114: S
end stack:
successors c1115

IR1 block 90 start c1115
start stack:
1115>     entry NIL
1116>1117: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1118>1119: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G922))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B4D869}> {11B4D829}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B4D8D9}> {11B4D899}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G922
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B4D949}> {11B4D909}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B6A349}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-923
                                    #:N-COUNT-924) {11B6ACE9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G922) {11B4DB81}> {11B4DA21}>)
1120>     known combination v1117 v1119
1121>1122: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1123>1124: #:G1
1125>1126: '0
1127>1128: known combination v1122 v1124 v1126
end stack:
successors c1129

IR1 block 91 start c1129
start stack:
1129>1130: known combination v1112 v1114 v1128
1131>1132: * {GLOBAL-FUNCTION}
1133>1134: S
end stack:
successors c1135

IR1 block 92 start c1135
start stack:
1135>     entry NIL
1136>1137: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1138>1139: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G925))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B6E0E1}> {11B6E0A1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B6E151}> {11B6E111}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G925
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B6E1C1}> {11B6E181}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B6EBA1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-926
                                    #:N-COUNT-927) {11B6F541}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G925) {11B6E3F9}> {11B6E299}>)
1140>     known combination v1137 v1139
1141>1142: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1143>1144: #:G1
1145>1146: '1
1147>1148: known combination v1142 v1144 v1146
end stack:
successors c1149

IR1 block 93 start c1149
start stack:
1149>1150: known combination v1132 v1134 v1148
1151>1152: * {GLOBAL-FUNCTION}
1153>1154: S
end stack:
successors c1155

IR1 block 94 start c1155
start stack:
1155>     entry NIL
1156>1157: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1158>1159: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G928))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B72A69}> {11B72A29}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B72AD9}> {11B72A99}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G928
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B72B49}> {11B72B09}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B73529}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-929
                                    #:N-COUNT-930) {11B73EC9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G928) {11B72D81}> {11B72C21}>)
1160>     known combination v1157 v1159
1161>1162: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1163>1164: #:G1
1165>1166: '2
1167>1168: known combination v1162 v1164 v1166
end stack:
successors c1169

IR1 block 95 start c1169
start stack:
1169>1170: known combination v1152 v1154 v1168
end stack:
successors c1171

IR1 block 96 start c1171
start stack:
1171>     entry NIL
1172>1173: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1174>1175: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1176>1177: '214
1178>1179: '3
1180>1181: '6
1182>1183: known combination v1175 v1177 v1179 v1181
1184>     local combination v1173 v1183
1185>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1186>1187: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1188>1189: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G931))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B77DB1}> {11B77D71}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B77E21}> {11B77DE1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G931
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11B77E91}> {11B77E51}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11B78B21}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-932
                                    #:N-COUNT-933) {11B794C1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G931) {11B78181}> {11B78021}>)
1190>     known combination v1187 v1189
1191>1192: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1193>1194: #:G1
1195>1196: '0
1197>     known combination v1192 v1194 v1196 v1130
1198>1199: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1200>1201: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G934))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B7BBC9}> {11B7BB89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11B7BC39}> {11B7BBF9}> ..)>)
                                                                                    IR1 block 97 start c1202
                                                                                    start stack:
                                                                                    1202>509: known combination v636 v638 v1203 
                                                                                    end stack:
                                                                                    successors c510

IR1 block 98 start c510
start stack:
510>     return v509 SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c1204

IR1 block 0 start c1205
start stack:
1205>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
1206>1207: SB-C::CLAMBDA INTERSECT
1208>1209: #:G716
1210>1211: #:G717
1212>1213: #:G718
1214>1215: local combination v1207 v1209 v1211 v1213
1216>     return v1215 SB-C::CLAMBDA (SB-C::TL-XEP NIL)
end stack:
successors c1204


;;;; IR2 component: (SB-C::VARARGS-ENTRY
                     (LAMBDA
                         (&OPTIONAL ("#<...>" . "#<...>") "#<...>" . "#<...>")))

entries:
    L1: INTERSECT


TNs: 94 local, 50 temps, 13 constant, 6 env, 0 comp, 102 global.
Wired: 202, Unused: 0. 112 blocks, 1037 global conflicts.

IR1 block 114 start c1204

    IR2 block NIL start c1204

IR1 block 0 start c1205

    IR2 block 0 start c1205
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G716!2[EDX]
    3: MOVE t3[EDI] => #:G717!4[ECX]
    4: MOVE t5[ESI] => #:G718!6[EBX]
    5: MOVE t7[S0]>t8[EAX] => t9[S0]<t10[EAX]
    6: SAP-MOVE t11[S1]>t12[EAX] => t13[S1]<t14[EAX]
    7: NOTE-ENVIRONMENT-START {#}
    8: CURRENT-FP => t15[S2]
    9: ALLOCATE-FRAME {#} => t16[EAX] t17[IGNORE-ME]
    10: MOVE-ARG #:G716!2[EDX] t16[EAX] => ORIG!18[EDI]
    11: MOVE-ARG #:G717!4[ECX] t16[EAX] => DIR!19[ESI]
    12: MOVE-ARG #:G718!6[EBX] t16[EAX] => SCENE!20[EBX]
    13: MOVE-ARG t15[S2]>t21[ECX] t16[EAX] => t22[S0]
    14: KNOWN-CALL-LOCAL t16[EAX] t17[IGNORE-ME] ORIG!18[EDI] DIR!19[ESI]
                         SCENE!20[EBX] t22[S0]
                         {# # #}
                         => t23[EAX] t24[EBX]
    15: MOVE t23[EAX] => t25[EDX]
    16: MOVE t24[EBX] => t26[EDI]
    17: RETURN t9[S0] t13[S1] t25[EDX] t26[EDI] {2}

IR1 block 1 start c1

    IR2 block 111 start c1
    L2:
    0: SAP-MOVE t27[S1]>t28[EAX] => t29[S1]<t30[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c2

    IR2 block 110 start c2
    0: FAST-SYMBOL-VALUE 'ZERO!31[Const6]>t32[EAX] => t33[EDX]
    1: MOVE '1.7976931348623157d308!34[Const7]>t35[ECX] => LAM!36[S6]<t37[EAX]
    2: MOVE t33[EDX] => NORMAL!38[S7]<t39[EDX]
    3: MOVE SCENE!20[EBX] => SCENE!40[S8]<t41[EBX]
    4: MOVE DIR!19[ESI] => t42[ESI]
    5: MOVE ORIG!18[EDI] => t43[EDI]
    6: MOVE t22[S0]>t44[EAX] => t45[S0]<t46[EAX]
    7: SAP-MOVE t29[S1]>t47[EAX] => t48[S1]<t49[EAX]

IR1 block 3 start c17

    IR2 block 109 start c17
    L3:
    0: SAP-MOVE t48[S1]>t50[EAX] => t51[S1]<t52[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 4 start c18

    IR2 block 108 start c18
    0: INSTANCE-INDEX-REF SCENE!40[S8]>t53[EAX] '1!54 => t55[S2]<t56[EAX]
    1: RAW-INSTANCE-REF/DOUBLE SCENE!40[S8]>t57[ECX] '0!58 => t59[FR2]

IR1 block 5 start c53

    IR2 block 107 start c53

IR1 block 6 start c54

    IR2 block 106 start c54

IR1 block 7 start c57

    IR2 block 105 start c57
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t55[S2]>t60[EAX]
                                                   {0}
                                                   => t61[FR0]

IR1 block 8 start c71

    IR2 block 104 start c71
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[EDI] {0} => t62[FR1]

IR1 block 9 start c85

    IR2 block 103 start c85
    0: -/DOUBLE-FLOAT t61[FR0] t62[FR1] => t63[FR1]

IR1 block 10 start c89

    IR2 block 102 start c89
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t55[S2]>t64[EAX]
                                                   {1}
                                                   => t65[FR0]

IR1 block 11 start c103

    IR2 block 101 start c103
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[EDI] {1} => t66[FR3]

IR1 block 12 start c117
 ..

assembly code for #<SB-C:COMPONENT
                    :NAME (SB-C::VARARGS-ENTRY
                           (LAMBDA
                               (&OPTIONAL ("#<...>" . "#<...>")
                                "#<...>" . "#<...>"))) {1190D489}>

in the elsewhere segment:
L4:
in the regular segment:
L5:
in the elsewhere segment:
L6:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L7:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t67[ESP]>, DWORD PTR [EBP-64]
L8:

VOP MOVE t3[EDI] => #:G717!4[ECX] 
        MOV     #<TN #:G717!4[ECX]>, #<TN t3[EDI]>

VOP MOVE t5[ESI] => #:G718!6[EBX] 
        MOV     #<TN #:G718!6[EBX]>, #<TN t5[ESI]>

VOP NOTE-ENVIRONMENT-START {#} 
L9:

VOP CURRENT-FP => t15[S2] 
        MOV     #<TN t15[S2]>, #<TN t68[EBP]>

VOP ALLOCATE-FRAME {#} => t16[EAX] t17[IGNORE-ME] 
        MOV     #<TN t16[EAX]>, #<TN t67[ESP]>
        SUB     #<TN t67[ESP]>, 64

VOP MOVE-ARG #:G716!2[EDX] t16[EAX] => ORIG!18[EDI] 
        MOV     #<TN ORIG!18[EDI]>, #<TN #:G716!2[EDX]>

VOP MOVE-ARG #:G717!4[ECX] t16[EAX] => DIR!19[ESI] 
        MOV     #<TN DIR!19[ESI]>, #<TN #:G717!4[ECX]>

VOP MOVE-ARG t15[S2]>t21[ECX] t16[EAX] => t22[S0] 
        MOV     #<TN t21[ECX]>, #<TN t15[S2]>
        MOV     DWORD PTR [EAX-4], #<TN t21[ECX]>

VOP KNOWN-CALL-LOCAL t16[EAX] t17[IGNORE-ME] ORIG!18[EDI] DIR!19[ESI]
                     SCENE!20[EBX] t22[S0]
                     {# # #}
                     => t23[EAX] t24[EBX] 
L10:
        MOV     #<TN t68[EBP]>, #<TN t16[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L11)
L12:
        JMP     L2
L11:
L13:
L14:

VOP MOVE t23[EAX] => t25[EDX] 
        MOV     #<TN t25[EDX]>, #<TN t23[EAX]>

VOP MOVE t24[EBX] => t26[EDI] 
        MOV     #<TN t26[EDI]>, #<TN t24[EBX]>

VOP RETURN t9[S0] t13[S1] t25[EDX] t26[EDI] {2} 
L15:
        MOV     #<TN t69[EBX]>, #<TN t68[EBP]>
        MOV     #<TN t70[ECX]>, 8
        MOV     #<TN t68[EBP]>, #<TN t9[S0]>
        LEA     #<TN t67[ESP]>, DWORD PTR [EBX-8]
        MOV     #<TN t71[ESI]>, 134217739
        STC
        JMP     DWORD PTR [EBX-8]
L16:

L2:
in the elsewhere segment:
L17:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L18:

L19:

VOP FAST-SYMBOL-VALUE 'ZERO!31[Const6]>t32[EAX] => t33[EDX] 
        MOV     #<TN t32[EAX]>, #<TN 'ZERO!31[Const6]>
        MOV     #<TN t33[EDX]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t33[EDX]>, DWORD PTR [EDX+0]
        CMP     #<TN t33[EDX]>, 90
        JMP     NE, L20
        MOV     #<TN t33[EDX]>, DWORD PTR [EAX-3]
L20:

VOP MOVE '1.7976931348623157d308!34[Const7]>t35[ECX] => LAM!36[S6]<t37[EAX] 
        MOV     #<TN t35[ECX]>, #<TN '1.7976931348623157d308!34[Const7]>
        MOV     #<TN t37[EAX]>, #<TN t35[ECX]>
        MOV     #<TN LAM!36[S6]>, #<TN t37[EAX]>

VOP MOVE t33[EDX] => NORMAL!38[S7]<t39[EDX] 
        MOV     #<TN NORMAL!38[S7]>, #<TN t33[EDX]>

VOP MOVE SCENE!20[EBX] => SCENE!40[S8]<t41[EBX] 
        MOV     #<TN SCENE!40[S8]>, #<TN SCENE!20[EBX]>

L3:
in the elsewhere segment:
L21:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L22:

L23:

VOP INSTANCE-INDEX-REF SCENE!40[S8]>t53[EAX] '1!54 => t55[S2]<t56[EAX] 
        MOV     #<TN t53[EAX]>, #<TN SCENE!40[S8]>
        MOV     #<TN t56[EAX]>, DWORD PTR [EAX+7]
        MOV     #<TN t55[S2]>, #<TN t56[EAX]>

VOP RAW-INSTANCE-REF/DOUBLE SCENE!40[S8]>t57[ECX] '0!58 => t59[FR2] 
        MOV     #<TN t57[ECX]>, #<TN SCENE!40[S8]>
        MOV     #<TN t72[EAX]>, DWORD PTR [ECX-1]
        SHR     #<TN t72[EAX]>, 8
        FSTP    #<TN t59[FR2]>
        FLDD    DWORD PTR [ECX+EAX*4-5]
        FXCH    #<TN t59[FR2]>

L24:
L25:
L26:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t55[S2]>t60[EAX]
                                                {0}
                                                => t61[FR0] 
        MOV     #<TN t60[EAX]>, #<TN t55[S2]>
        FSTP    #<TN t61[FR0]>
        FLDD    DWORD PTR [EAX+1]

L27:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[EDI] {0} => t62[FR1] 
        FSTP    #<TN t62[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t62[FR1]>

L28:

VOP -/DOUBLE-FLOAT t61[FR0] t62[FR1] => t63[FR1] 
        FSUBR-STI       #<TN t63[FR1]>
        WAIT

L29:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t55[S2]>t64[EAX]
                                                {1}
                                                => t65[FR0] 
        MOV     #<TN t64[EAX]>, #<TN t55[S2]>
        FSTP    #<TN t65[FR0]>
        FLDD    DWORD PTR [EAX+9]

L30:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[EDI] {1} => t66[FR3] 
        FSTP    #<TN t66[FR3]>
        FLDD    DWORD PTR [EDI+9]
        FXCH    #<TN t66[FR3]>

L31:

VOP -/DOUBLE-FLOAT t65[FR0] t66[FR3] => t73[FR3] 
        FSUBR-STI       #<TN t73[FR3]>
        WAIT

L32:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t55[S2]>t74[EAX]
                                                {2}
                                                => t75[FR0] 
        MOV     #<TN t74[EAX]>, #<TN t55[S2]>
        FSTP    #<TN t75[FR0]>
        FLDD    DWORD PTR [EAX+17]

L33:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[EDI] {2} => t76[FR4] 
        FSTP    #<TN t76[FR4]>
        FLDD    DWORD PTR [EDI+17]
        FXCH    #<TN t76[FR4]>

L34:

VOP -/DOUBLE-FLOAT t75[FR0] t76[FR4] => t77[FR0] 
        FSUBD   #<TN t76[FR4]>
        WAIT

L35:

VOP ALLOCATE-VECTOR-ON-HEAP '214!78>t79[ECX] '3!80>t81[EDX] '6!82>t83[EBX]
                            => t84[EAX] 
        MOV     #<TN t79[ECX]>, 214
        MOV     #<TN t81[EDX]>, 12
        MOV     #<TN t83[EBX]>, 24
        LEA     #<TN t84[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t84[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t84[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t84[EAX]>, DWORD PTR [+36]
        JMP     BE, L36
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L37
L36:
        FS-SEGMENT-PREFIX
        XOR     #<TN t84[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t84[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t84[EAX]>, DWORD PTR [+32]
L37:
        LEA     #<TN t84[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t79[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t81[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L38
        BREAK   9
L38:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] t63[FR1]
                                                {0}
                                                => t85[FR1] 
        FXCH    #<TN t63[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t63[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] t73[FR3]
                                                {1}
                                                => t86[FR3] 
        FXCH    #<TN t73[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t73[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] t77[FR0]
                                                {2}
                                                => t87[FR0] 
        FSTD    DWORD PTR [EAX+17]

L39:
L40:
L41:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {0} => t88[FR0] 
        FSTP    #<TN t88[FR0]>
        FLDD    DWORD PTR [EAX+1]

L42:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t42[ESI] {0} => t89[FR1] 
        FSTP    #<TN t89[FR1]>
        FLDD    DWORD PTR [ESI+1]
        FXCH    #<TN t89[FR1]>

L43:

VOP */DOUBLE-FLOAT t88[FR0] t89[FR1] => t90[FR1] 
        FMUL-STI        #<TN t90[FR1]>
        WAIT

L44:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {1} => t91[FR0] 
        FSTP    #<TN t91[FR0]>
        FLDD    DWORD PTR [EAX+9]

L45:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t42[ESI] {1} => t92[FR3] 
        FSTP    #<TN t92[FR3]>
        FLDD    DWORD PTR [ESI+9]
        FXCH    #<TN t92[FR3]>

L46:

VOP */DOUBLE-FLOAT t91[FR0] t92[FR3] => t93[FR0] 
        FMULD   #<TN t92[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t90[FR1] t93[FR0] => t94[FR1] 
        FADD-STI        #<TN t94[FR1]>
        WAIT

L47:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {2} => t95[FR0] 
        FSTP    #<TN t95[FR0]>
        FLDD    DWORD PTR [EAX+17]

L48:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t42[ESI] {2} => t96[FR3] 
        FSTP    #<TN t96[FR3]>
        FLDD    DWORD PTR [ESI+17]
        FXCH    #<TN t96[FR3]>

L49:

VOP */DOUBLE-FLOAT t95[FR0] t96[FR3] => t97[FR0] 
        FMULD   #<TN t96[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t94[FR1] t97[FR0] => t98[FR1] 
        FADD-STI        #<TN t98[FR1]>
        WAIT

L50:

VOP */DOUBLE-FLOAT t98[FR1] t98[FR1] => t99[FR3] 
        FSTP    #<TN t100[FR0]>
        FLD     #<TN t101[FR0]>
        FMULD   #<TN t98[FR1]>
        FST     #<TN t99[FR3]>

L51:
L52:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {0} => t102[FR0] 
        FSTP    #<TN t102[FR0]>
        FLDD    DWORD PTR [EAX+1]

L53:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {0} => t103[FR4] 
        FSTP    #<TN t103[FR4]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t103[FR4]>

L54:

VOP */DOUBLE-FLOAT t102[FR0] t103[FR4] => t104[FR4] 
        FMUL-STI        #<TN t104[FR4]>
        WAIT

L55:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {1} => t105[FR0] 
        FSTP    #<TN t105[FR0]>
        FLDD    DWORD PTR [EAX+9]

L56:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {1} => t106[FR5] 
        FSTP    #<TN t106[FR5]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t106[FR5]>

L57:

VOP */DOUBLE-FLOAT t105[FR0] t106[FR5] => t107[FR0] 
        FMULD   #<TN t106[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t104[FR4] t107[FR0] => t108[FR4] 
        FADD-STI        #<TN t108[FR4]>
        WAIT

L58:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {2} => t109[FR0] 
        FSTP    #<TN t109[FR0]>
        FLDD    DWORD PTR [EAX+17]

L59:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t84[EAX] {2} => t110[FR5] 
        FSTP    #<TN t110[FR5]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t110[FR5]>

L60:

VOP */DOUBLE-FLOAT t109[FR0] t110[FR5] => t111[FR0] 
        FMULD   #<TN t110[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t108[FR4] t111[FR0] => t112[FR0] 
        FADDD   #<TN t108[FR4]>
        WAIT

L61:

VOP -/DOUBLE-FLOAT t99[FR3] t112[FR0] => t113[FR3] 
        FSUB-STI        #<TN t113[FR3]>
        WAIT

VOP */DOUBLE-FLOAT t59[FR2] t59[FR2] => t114[FR0] 
        FSTP    #<TN t100[FR0]>
        FLD     #<TN t115[FR1]>
        FMULD   #<TN t59[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t113[FR3] t114[FR0] => t116[FR0] 
        FADDD   #<TN t113[FR3]>
        WAIT

VOP <0/DOUBLE-FLOAT t116[FR0] {# T 0.0d0} 
L62:
        FTST
        FNSTSW
        AND     #<TN t117[AH]>, 69
        CMP     #<TN t117[AH]>, 1
        JMP     NE, L63

L64:

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!34[Const7]>t118[EAX] => t119[FR1] 
        MOV     #<TN t118[EAX]>, #<TN '1.7976931348623157d308!34[Const7]>
        FSTP    #<TN t119[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t119[FR1]>

L65:

VOP <DOUBLE-FLOAT t119[FR1] LAM!36[S6]>t120[EAX] {# T} 
        MOV     #<TN t120[EAX]>, #<TN LAM!36[S6]>
        FSTP    #<TN t100[FR0]>
        FLD     #<TN t121[FR0]>
        FCOMD   DWORD PTR [EAX+1]
        FNSTSW
        AND     #<TN t117[AH]>, 69
        CMP     #<TN t117[AH]>, 1
        JMP     NE, L66

L67:

VOP INSTANCE-INDEX-REF SCENE!40[S8]>t122[EAX] '0!58 => t123[EAX] 
        MOV     #<TN t122[EAX]>, #<TN SCENE!40[S8]>
        MOV     #<TN t123[EAX]>, DWORD PTR [EAX+3]

VOP IF-EQ t123[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>!124[Const8]>t125[ECX]
          {# NIL}
          
        CMP     #<TN t123[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>!124[Const8]>
        JMP     E, L68

L69:

VOP INSTANCE-INDEX-REF t123[EAX] '12!126 => t127[S3]<t128[ECX] 
        MOV     #<TN t128[ECX]>, DWORD PTR [EAX+51]
        MOV     #<TN t127[S3]>, #<TN t128[ECX]>

VOP FAST-IF->-C/FIXNUM t127[S3] {# NIL 3} 
        CMP     #<TN t127[S3]>, 12
        JMP     G, L70

L71:
L72:
L73:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t42[ESI] {0} => t129[FR0] 
        FSTP    #<TN t129[FR0]>
        FLDD    DWORD PTR [ESI+1]

L74:

VOP */DOUBLE-FLOAT t119[FR1] t129[FR0] => t130[FR2] 
        FMULD   #<TN t119[FR1]>
        FST     #<TN t130[FR2]>

L75:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t42[ESI] {1} => t131[FR0] 
        FSTP    #<TN t131[FR0]>
        FLDD    DWORD PTR [ESI+9]

L76:

VOP */DOUBLE-FLOAT t119[FR1] t131[FR0] => t132[FR3] 
        FMULD   #<TN t119[FR1]>
        FST     #<TN t132[FR3]>

L77:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t42[ESI] {2} => t133[FR0] 
        FSTP    #<TN t133[FR0]>
        FLDD    DWORD PTR [ESI+17]

L78:

VOP */DOUBLE-FLOAT t119[FR1] t133[FR0] => t134[FR0] 
        FMULD   #<TN t119[FR1]>
        WAIT

L79:

VOP ALLOCATE-VECTOR-ON-HEAP '214!78>t135[ECX] '3!80>t136[EDX] '6!82>t137[EBX]
                            => t138[EAX] 
        MOV     #<TN t135[ECX]>, 214
        MOV     #<TN t136[EDX]>, 12
        MOV     #<TN t137[EBX]>, 24
        LEA     #<TN t138[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t138[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t138[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t138[EAX]>, DWORD PTR [+36]
        JMP     BE, L80
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L81
L80:
        FS-SEGMENT-PREFIX
        XOR     #<TN t138[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t138[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t138[EAX]>, DWORD PTR [+32]
L81:
        LEA     #<TN t138[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t135[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t136[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L82
        BREAK   9
L82:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t138[EAX] t130[FR2]
                                                {0}
                                                => t139[FR2] 
        FXCH    #<TN t130[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t130[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t138[EAX] t132[FR3]
                                                {1}
                                                => t140[FR3] 
        FXCH    #<TN t132[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t132[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t138[EAX] t134[FR0]
                                                {2}
                                                => t141[FR0] 
        FSTD    DWORD PTR [EAX+17]

L83:
L84:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[EDI] {0} => t142[FR0] 
        FSTP    #<TN t142[FR0]>
        FLDD    DWORD PTR [EDI+1]

L85:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t138[EAX] {0} => t143[FR2] 
        FSTP    #<TN t143[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t143[FR2]>

L86:

VOP +/DOUBLE-FLOAT t142[FR0] t143[FR2] => t144[FR2] 
        FADD-STI        #<TN t144[FR2]>
        WAIT

L87:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[EDI] {1} => t145[FR0] 
        FSTP    #<TN t145[FR0]>
        FLDD    DWORD PTR [EDI+9]

L88:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t138[EAX] {1} => t146[FR3] 
        FSTP    #<TN t146[FR3]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t146[FR3]>

L89:

VOP +/DOUBLE-FLOAT t145[FR0] t146[FR3] => t147[FR3] 
        FADD-STI        #<TN t147[FR3]>
        WAIT

L90:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[EDI] {2} => t148[FR0] 
        FSTP    #<TN t148[FR0]>
        FLDD    DWORD PTR [EDI+17]

L91:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t138[EAX] {2} => t149[FR4] 
        FSTP    #<TN t149[FR4]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t149[FR4]>

L92:

VOP +/DOUBLE-FLOAT t148[FR0] t149[FR4] => t150[FR0] 
        FADDD   #<TN t149[FR4]>
        WAIT

L93:

VOP ALLOCATE-VECTOR-ON-HEAP '214!78>t151[ECX] '3!80>t152[EDX] '6!82>t153[EBX]
                            => t154[EAX] 
        MOV     #<TN t151[ECX]>, 214
        MOV     #<TN t152[EDX]>, 12
        MOV     #<TN t153[EBX]>, 24
        LEA     #<TN t154[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t154[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t154[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t154[EAX]>, DWORD PTR [+36]
        JMP     BE, L94
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L95
L94:
        FS-SEGMENT-PREFIX
        XOR     #<TN t154[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t154[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t154[EAX]>, DWORD PTR [+32]
L95:
        LEA     #<TN t154[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t151[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t152[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L96
        BREAK   9
L96:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t154[EAX] t144[FR2]
                                                {0}
                                                => t155[FR2] 
        FXCH    #<TN t144[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t144[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t154[EAX] t147[FR3]
                                                {1}
                                                => t156[FR3] 
        FXCH    #<TN t147[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t147[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t154[EAX] t150[FR0]
                                                {2}
                                                => t157[FR0] 
        FSTD    DWORD PTR [EAX+17]

L97:
L98:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t154[EAX] {0} => t158[FR0] 
        FSTP    #<TN t158[FR0]>
        FLDD    DWORD PTR [EAX+1]

L99:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t55[S2]>t159[ECX]
                                                {0}
                                                => t160[FR2] 
        MOV     #<TN t159[ECX]>, #<TN t55[S2]>
        FSTP    #<TN t160[FR2]>
        FLDD    DWORD PTR [ECX+1]
        FXCH    #<TN t160[FR2]>

L100:

VOP -/DOUBLE-FLOAT t158[FR0] t160[FR2] => t161[FR2] 
        FSUBR-STI       #<TN t161[FR2]>
        WAIT

L101:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t154[EAX] {1} => t162[FR0] 
        FSTP    #<TN t162[FR0]>
        FLDD    DWORD PTR [EAX+9]

L102:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t55[S2]>t163[ECX]
                                                {1}
                                                => t164[FR3] 
        MOV     #<TN t163[ECX]>, #<TN t55[S2]>
        FSTP    #<TN t164[FR3]>
        FLDD    DWORD PTR [ECX+9]
        FXCH    #<TN t164[FR3]>

L103:

VOP -/DOUBLE-FLOAT t162[FR0] t164[FR3] => t165[FR3] 
        FSUBR-STI       #<TN t165[FR3]>
        WAIT

L104:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t154[EAX] {2} => t166[FR0] 
        FSTP    #<TN t166[FR0]>
        FLDD    DWORD PTR [EAX+17]

L105:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t55[S2]>t167[EAX]
                                                {2}
                                                => t168[FR4] 
        MOV     #<TN t167[EAX]>, #<TN t55[S2]>
        FSTP    #<TN t168[FR4]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t168[FR4]>

L106:

VOP -/DOUBLE-FLOAT t166[FR0] t168[FR4] => t169[FR0] 
        FSUBD   #<TN t168[FR4]>
        WAIT

L107:

VOP ALLOCATE-VECTOR-ON-HEAP '214!78>t170[ECX] '3!80>t171[EDX] '6!82>t172[EBX]
                            => t173[EAX] 
        MOV     #<TN t170[ECX]>, 214
        MOV     #<TN t171[EDX]>, 12
        MOV     #<TN t172[EBX]>, 24
        LEA     #<TN t173[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t173[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t173[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t173[EAX]>, DWORD PTR [+36]
        JMP     BE, L108
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L109
L108:
        FS-SEGMENT-PREFIX
        XOR     #<TN t173[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t173[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t173[EAX]>, DWORD PTR [+32]
L109:
        LEA     #<TN t173[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t170[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t171[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L110
        BREAK   9
L110:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] t161[FR2]
                                                {0}
                                                => t174[FR2] 
        FXCH    #<TN t161[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t161[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] t165[FR3]
                                                {1}
                                                => t175[FR3] 
        FXCH    #<TN t165[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t165[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] t169[FR0]
                                                {2}
                                                => t176[FR0] 
        FSTD    DWORD PTR [EAX+17]

L111:
L112:
L113:
L114:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {0} => t177[FR0] 
        FSTP    #<TN t177[FR0]>
        FLDD    DWORD PTR [EAX+1]

L115:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {0} => t178[FR2] 
        FSTP    #<TN t178[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t178[FR2]>

L116:

VOP */DOUBLE-FLOAT t177[FR0] t178[FR2] => t179[FR2] 
        FMUL-STI        #<TN t179[FR2]>
        WAIT

L117:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {1} => t180[FR0] 
        FSTP    #<TN t180[FR0]>
        FLDD    DWORD PTR [EAX+9]

L118:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {1} => t181[FR3] 
        FSTP    #<TN t181[FR3]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t181[FR3]>

L119:

VOP */DOUBLE-FLOAT t180[FR0] t181[FR3] => t182[FR0] 
        FMULD   #<TN t181[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t179[FR2] t182[FR0] => t183[FR2] 
        FADD-STI        #<TN t183[FR2]>
        WAIT

L120:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {2} => t184[FR0] 
        FSTP    #<TN t184[FR0]>
        FLDD    DWORD PTR [EAX+17]

L121:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {2} => t185[FR3] 
        FSTP    #<TN t185[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t185[FR3]>

L122:

VOP */DOUBLE-FLOAT t184[FR0] t185[FR3] => t186[FR0] 
        FMULD   #<TN t185[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t183[FR2] t186[FR0] => t187[FR0] 
        FADDD   #<TN t183[FR2]>
        WAIT

L123:

VOP FSQRT t187[FR0] => t188[FR0] 
L124:
        FSQRT
        WAIT

L125:

VOP //DOUBLE-FLOAT '1.0d0!189>t190[FR2] t188[FR0] => t191[FR2] 
        FSTP    #<TN t190[FR2]>
        FLD1
        FXCH    #<TN t190[FR2]>
        FDIV-STI        #<TN t191[FR2]>
        WAIT

L126:
L127:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {0} => t192[FR0] 
        FSTP    #<TN t192[FR0]>
        FLDD    DWORD PTR [EAX+1]

L128:

VOP */DOUBLE-FLOAT t191[FR2] t192[FR0] => t193[FR3] 
        FMULD   #<TN t191[FR2]>
        FST     #<TN t193[FR3]>

L129:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {1} => t194[FR0] 
        FSTP    #<TN t194[FR0]>
        FLDD    DWORD PTR [EAX+9]

L130:

VOP */DOUBLE-FLOAT t191[FR2] t194[FR0] => t195[FR4] 
        FMULD   #<TN t191[FR2]>
        FST     #<TN t195[FR4]>

L131:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t173[EAX] {2} => t196[FR0] 
        FSTP    #<TN t196[FR0]>
        FLDD    DWORD PTR [EAX+17]

L132:

VOP */DOUBLE-FLOAT t191[FR2] t196[FR0] => t197[FR0] 
        FMULD   #<TN t191[FR2]>
        WAIT

L133:

VOP ALLOCATE-VECTOR-ON-HEAP '214!78>t198[ECX] '3!80>t199[EDX] '6!82>t200[EBX]
                            => t201[EAX] 
        MOV     #<TN t198[ECX]>, 214
        MOV     #<TN t199[EDX]>, 12
        MOV     #<TN t200[EBX]>, 24
        LEA     #<TN t201[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t201[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t201[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t201[EAX]>, DWORD PTR [+36]
        JMP     BE, L134
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L135
L134:
        FS-SEGMENT-PREFIX
        XOR     #<TN t201[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t201[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t201[EAX]>, DWORD PTR [+32]
L135:
        LEA     #<TN t201[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t198[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t199[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L136
        BREAK   9
L136:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t201[EAX] t193[FR3]
                                                {0}
                                                => t202[FR3] 
        FXCH    #<TN t193[FR3]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t193[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t201[EAX] t195[FR4]
                                                {1}
                                                => t203[FR4] 
        FXCH    #<TN t195[FR4]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t195[FR4]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t201[EAX] t197[FR0]
                                                {2}
                                                => t204[FR0] 
        FSTD    DWORD PTR [EAX+17]

L137:

VOP DOUBLE-MOVE t119[FR1] => t205[FR0] 
        FSTP    #<TN t100[FR0]>
        FLD     #<TN t206[FR0]>

VOP MOVE t201[EAX] => t207[EBX] 
        MOV     #<TN t207[EBX]>, #<TN t201[EAX]>

L138:

VOP MOVE-FROM-DOUBLE t205[FR0] => t208[EAX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t208[EAX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t208[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t208[EAX]>, DWORD PTR [+36]
        JMP     BE, L139
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L140
L139:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t208[EAX]>
        SUB     #<TN t208[EAX]>, 16
L140:
        MOV     DWORD PTR [EAX+0], 790
        LEA     #<TN t208[EAX]>, BYTE PTR [EAX+7]
        FSTD    DWORD PTR [EAX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L141
        BREAK   9
L141:

VOP KNOWN-RETURN t45[S0] t51[S1] t23[EAX] t24[EBX] {#} 
L142:
        LEA     #<TN t67[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t68[EBP]>, #<TN t45[S0]>
        RET     4
L143:

L70:

VOP INSTANCE-INDEX-REF t123[EAX] '11!209 => t210[EAX] 
        MOV     #<TN t210[EAX]>, DWORD PTR [EAX+47]

VOP DATA-VECTOR-REF/SIMPLE-VECTOR t210[EAX] '3!80 => t211[EAX] 
        MOV     #<TN t211[EAX]>, DWORD PTR [EAX+13]

VOP IF-EQ t211[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>!124[Const8]>t212[ECX]
          {# T}
          
        CMP     #<TN t211[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>!124[Const8]>
        JMP     NE, L71

L68:

VOP INSTANCE-INDEX-REF SCENE!40[S8]>t213[EAX] '2!214 => t215[EAX] 
        MOV     #<TN t213[EAX]>, #<TN SCENE!40[S8]>
        MOV     #<TN t215[EAX]>, DWORD PTR [EAX+11]

VOP MOVE t215[EAX] => #:N-LIST699!216[S2]<t217[EAX] 
        MOV     #<TN #:N-LIST699!216[S2]>, #<TN t215[EAX]>

L144:

VOP BRANCH {#} 
        JMP     L145

L146:

VOP SLOT #:N-LIST699!216[S2]>t218[EAX] {CAR 0 3} => t219[EBX] 
        MOV     #<TN t218[EAX]>, #<TN #:N-LIST699!216[S2]>
        MOV     #<TN t219[EBX]>, DWORD PTR [EAX-3]

VOP SLOT #:N-LIST699!216[S2]>t220[EAX] {CDR 1 3} => t221[EAX] 
        MOV     #<TN t220[EAX]>, #<TN #:N-LIST699!216[S2]>
        MOV     #<TN t221[EAX]>, DWORD PTR [EAX+1]

VOP MOVE t221[EAX] => #:N-LIST699!216[S2]<t222[EAX] 
        MOV     #<TN #:N-LIST699!216[S2]>, #<TN t221[EAX]>

L147:

VOP MOVE-OPERAND t43[EDI] {SB-VM::STORE-STACK} => t223[S4] 
        MOV     #<TN t223[S4]>, #<TN t43[EDI]>

VOP MOVE-OPERAND t42[ESI] {SB-VM::STORE-STACK} => t224[S5] 
        MOV     #<TN t224[S5]>, #<TN t42[ESI]>

VOP MOVE LAM!36[S6]>t225[ECX] => t226[ECX] 
        MOV     #<TN t225[ECX]>, #<TN LAM!36[S6]>

VOP MOVE NORMAL!38[S7]>t227[EDX] => t228[EDX] 
        MOV     #<TN t227[EDX]>, #<TN NORMAL!38[S7]>

VOP CURRENT-FP => t229[S3] 
        MOV     #<TN t229[S3]>, #<TN t68[EBP]>

VOP ALLOCATE-FRAME {#} => t230[EAX] t231[IGNORE-ME] 
        MOV     #<TN t230[EAX]>, #<TN t67[ESP]>
        SUB     #<TN t67[ESP]>, 64

VOP MOVE-ARG t226[ECX] t230[EAX] => LAM!36[S6] 
        MOV     DWORD PTR [EAX-28], #<TN t226[ECX]>

VOP MOVE-ARG t228[EDX] t230[EAX] => NORMAL!38[S7] 
        MOV     DWORD PTR [EAX-32], #<TN t228[EDX]>

VOP MOVE-ARG t219[EBX] t230[EAX] => SCENE!40[S8] 
        MOV     DWORD PTR [EAX-36], #<TN t219[EBX]>

VOP MOVE-ARG t229[S3]>t232[ECX] t230[EAX] => t45[S0] 
        MOV     #<TN t232[ECX]>, #<TN t229[S3]>
        MOV     DWORD PTR [EAX-4], #<TN t232[ECX]>

VOP KNOWN-CALL-LOCAL t230[EAX] t231[IGNORE-ME] LAM!36[S6] NORMAL!38[S7]
                     SCENE!40[S8] t42[ESI] t43[EDI] t45[S0]
                     {# # #}
                     => t23[EAX] t24[EBX] 
L148:
        MOV     #<TN t68[EBP]>, #<TN t230[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L149)
L150:
        JMP     L3
L149:
L151:
L152:

VOP MOVE-OPERAND t224[S5] {SB-VM::LOAD-STACK} => t42[ESI] 
        MOV     #<TN t42[ESI]>, #<TN t224[S5]>

VOP MOVE-OPERAND t223[S4] {SB-VM::LOAD-STACK} => t43[EDI] 
        MOV     #<TN t43[EDI]>, #<TN t223[S4]>

VOP MOVE t23[EAX] => LAM!36[S6]<t233[EAX] 
        MOV     #<TN LAM!36[S6]>, #<TN t23[EAX]>

VOP MOVE t24[EBX] => NORMAL!38[S7]<t234[EBX] 
        MOV     #<TN NORMAL!38[S7]>, #<TN t24[EBX]>

L145:

VOP IF-EQ #:N-LIST699!216[S2] 'NIL!235 {# T} 
        CMP     #<TN #:N-LIST699!216[S2]>, 134217739
        JMP     NE, L146

L153:

VOP MOVE-TO-DOUBLE LAM!36[S6]>t236[EAX] => t205[FR0] 
        MOV     #<TN t236[EAX]>, #<TN LAM!36[S6]>
        FSTP    #<TN t205[FR0]>
        FLDD    DWORD PTR [EAX+1]

VOP MOVE NORMAL!38[S7]>t237[EBX] => t207[EBX] 
        MOV     #<TN t237[EBX]>, #<TN NORMAL!38[S7]>

VOP BRANCH {#} 
        JMP     L138

L66:

VOP MOVE-TO-DOUBLE LAM!36[S6]>t238[EAX] => t205[FR0] 
        MOV     #<TN t238[EAX]>, #<TN LAM!36[S6]>
        FSTP    #<TN t205[FR0]>
        FLDD    DWORD PTR [EAX+1]

VOP MOVE NORMAL!38[S7]>t239[EBX] => t207[EBX] 
        MOV     #<TN t239[EBX]>, #<TN NORMAL!38[S7]>

VOP BRANCH {#} 
        JMP     L138

L63:

VOP FSQRT t116[FR0] => t240[FR2] 
L154:
        FSQRT
        FST     #<TN t240[FR2]>

VOP +/DOUBLE-FLOAT t98[FR1] t240[FR2] => t241[FR3] 
        FSTP    #<TN t100[FR0]>
        FLD     #<TN t242[FR0]>
        FADDD   #<TN t240[FR2]>
        FST     #<TN t241[FR3]>

VOP -/DOUBLE-FLOAT t98[FR1] t240[FR2] => t243[FR0] 
        FSTP    #<TN t100[FR0]>
        FLD     #<TN t244[FR0]>
        FSUBD   #<TN t240[FR2]>
        WAIT

VOP <0/DOUBLE-FLOAT t241[FR3] {# T 0.0d0} 
L155:
        FXCH    #<TN t241[FR3]>
        FTST
        FXCH    #<TN t241[FR3]>
        FNSTSW
        AND     #<TN t117[AH]>, 69
        CMP     #<TN t117[AH]>, 1
        JMP     NE, L156

L157:

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!34[Const7]>t245[EAX] => t119[FR1] 
        MOV     #<TN t245[EAX]>, #<TN '1.7976931348623157d308!34[Const7]>
        FSTP    #<TN t119[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t119[FR1]>

VOP BRANCH {#} 
        JMP     L65

L156:

VOP >0/DOUBLE-FLOAT t243[FR0] {# NIL 0.0d0} 
L158:
        FTST
        FNSTSW
        AND     #<TN t117[AH]>, 69
        JMP     E, L159

L160:

VOP DOUBLE-MOVE t241[FR3] => t119[FR1] 
        FXCH    #<TN t241[FR3]>
        FSTD    #<TN t119[FR1]>
        FXCH    #<TN t241[FR3]>

VOP BRANCH {#} 
        JMP     L65

L159:

VOP DOUBLE-MOVE t243[FR0] => t119[FR1] 
        FSTD    #<TN t119[FR1]>

VOP BRANCH {#} 
        JMP     L65

        .align  3

disassembly of code for #<SB-C:COMPONENT
                          :NAME (SB-C::VARARGS-ENTRY
                                 (LAMBDA
                                     (&OPTIONAL ("#<...>" . "#<...>")
                                      "#<...>" . "#<...>"))) {1190D489}>

; 00000000:       2A0A             SUB CL, [EDX]
;      002:       0000             ADD [EAX], AL
;      004:       0000             ADD [EAX], AL
;      006:       0000             ADD [EAX], AL
;      008:       0000             ADD [EAX], AL
;      00A:       0000             ADD [EAX], AL
;      00C:       0000             ADD [EAX], AL
;      00E:       0000             ADD [EAX], AL
;      010:       0000             ADD [EAX], AL
;      012:       0000             ADD [EAX], AL
;      014:       0000             ADD [EAX], AL
;      016:       0000             ADD [EAX], AL
;      018:       0000             ADD [EAX], AL
;      01A:       0000             ADD [EAX], AL
;      01C:       8F45F8           POP DWORD PTR [EBP-8]
;      01F:       8D65C0           LEA ESP, [EBP-64]
;      022:       8BCF             MOV ECX, EDI
;      024:       8BDE             MOV EBX, ESI
;      026:       896DF4           MOV [EBP-12], EBP
;      029:       8BC4             MOV EAX, ESP
;      02B:       83EC40           SUB ESP, 64
;      02E:       8BFA             MOV EDI, EDX
;      030:       8BF1             MOV ESI, ECX
;      032:       8B4DF4           MOV ECX, [EBP-12]
;      035:       8948FC           MOV [EAX-4], ECX
;      038:       8BE8             MOV EBP, EAX
;      03A:       C745F864000000   MOV DWORD PTR [EBP-8], 100
;      041:       EB1A             JMP L0
;      043:       8BD0             MOV EDX, EAX
;      045:       8BFB             MOV EDI, EBX
;      047:       8BDD             MOV EBX, EBP
;      049:       B908000000       MOV ECX, 8
;      04E:       8B6DFC           MOV EBP, [EBP-4]
;      051:       8D63F8           LEA ESP, [EBX-8]
;      054:       BE0B000008       MOV ESI, 134217739
;      059:       F9               STC
;      05A:       FF63F8           JMP DWORD PTR [EBX-8]
;      05D: L0:   8B0511000000     MOV EAX, [#x11]
;      063:       8B5011           MOV EDX, [EAX+17]
;      066:       64               BYTE #X64
;      067:       8B12             MOV EDX, [EDX]
;      069:       83FA5A           CMP EDX, 90
;      06C:       7503             JNE L1
;      06E:       8B50FD           MOV EDX, [EAX-3]
;      071: L1:   8B0D15000000     MOV ECX, [#x15]
;      077:       8BC1             MOV EAX, ECX
;      079:       8945E4           MOV [EBP-28], EAX
;      07C:       8955E0           MOV [EBP-32], EDX
;      07F:       895DDC           MOV [EBP-36], EBX
;      082: L2:   8B45DC           MOV EAX, [EBP-36]
;      085:       8B4007           MOV EAX, [EAX+7]
;      088:       8945F4           MOV [EBP-12], EAX
;      08B:       8B4DDC           MOV ECX, [EBP-36]
;      08E:       8B41FF           MOV EAX, [ECX-1]
;      091:       C1E808           SHR EAX, 8
;      094:       DDDA             FSTPD FR2
;      096:       DD4481FB         FLDD [ECX+EAX*4-5]
;      09A:       D9CA             FXCH FR2
;      09C:       8B45F4           MOV EAX, [EBP-12]
;      09F:       DDD8             FSTPD FR0
;      0A1:       DD4001           FLDD [EAX+1]
;      0A4:       DDD9             FSTPD FR1
;      0A6:       DD4701           FLDD [EDI+1]
;      0A9:       D9C9             FXCH FR1
;      0AB:       DCE1             FSUBR-STI FR1
;      0AD:       9B               WAIT
;      0AE:       8B45F4           MOV EAX, [EBP-12]
;      0B1:       DDD8             FSTPD FR0
;      0B3:       DD4009           FLDD [EAX+9]
;      0B6:       DDDB             FSTPD FR3
;      0B8:       DD4709           FLDD [EDI+9]
;      0BB:       D9CB             FXCH FR3
;      0BD:       DCE3             FSUBR-STI FR3
;      0BF:       9B               WAIT
;      0C0:       8B45F4           MOV EAX, [EBP-12]
;      0C3:       DDD8             FSTPD FR0
;      0C5:       DD4011           FLDD [EAX+17]
;      0C8:       DDDC             FSTPD FR4
;      0CA:       DD4711           FLDD [EDI+17]
;      0CD:       D9CC             FXCH FR4
;      0CF:       D8E4             FSUBD FR4
;      0D1:       9B               WAIT
;      0D2:       B9D6000000       MOV ECX, 214
;      0D7:       BA0C000000       MOV EDX, 12
;      0DC:       BB18000000       MOV EBX, 24
;      0E1:       8D430F           LEA EAX, [EBX+15]
;      0E4:       83E0F8           AND EAX, -8
;      0E7:       64               BYTE #X64
;      0E8:       800D4800000004   OR BYTE PTR [#x48], 4
;      0EF:       64               BYTE #X64
;      0F0:       030520000000     ADD EAX, [#x20]
;      0F6:       64               BYTE #X64
;      0F7:       3B0524000000     CMP EAX, [#x24]
;      0FD:       7607             JBE L4
;      0FF:       E800000000       CALL L3
;      104: L3:   EB15             JMP L5
;      106: L4:   64               BYTE #X64
;      107:       330520000000     XOR EAX, [#x20]
;      10D:       64               BYTE #X64
;      10E:       310520000000     XOR [#x20], EAX
;      114:       64               BYTE #X64
;      115:       330520000000     XOR EAX, [#x20]
;      11B: L5:   8D4007           LEA EAX, [EAX+7]
;      11E:       8948F9           MOV [EAX-7], ECX
;      121:       8950FD           MOV [EAX-3], EDX
;      124:       64               BYTE #X64
;      125:       80354800000004   XOR BYTE PTR [#x48], 4
;      12C:       7403             JEQ L6
;      12E:       0F0B09           BREAK 9                    ; pending interrupt trap
;      131: L6:   D9C9             FXCH FR1
;      133:       DD5001           FSTD [EAX+1]
;      136:       D9C9             FXCH FR1
;      138:       D9CB             FXCH FR3
;      13A:       DD5009           FSTD [EAX+9]
;      13D:       D9CB             FXCH FR3
;      13F:       DD5011           FSTD [EAX+17]
;      142:       DDD8             FSTPD FR0
;      144:       DD4001           FLDD [EAX+1]
;      147:       DDD9             FSTPD FR1
;      149:       DD4601           FLDD [ESI+1]
;      14C:       D9C9             FXCH FR1
;      14E:       DCC9             FMUL-STI FR1
;      150:       9B               WAIT
;      151:       DDD8             FSTPD FR0
;      153:       DD4009           FLDD [EAX+9]
;      156:       DDDB             FSTPD FR3
;      158:       DD4609           FLDD [ESI+9]
;      15B:       D9CB             FXCH FR3
;      15D:       D8CB             FMULD FR3
;      15F:       9B               WAIT
;      160:       DCC1             FADD-STI FR1
;      162:       9B               WAIT
;      163:       DDD8             FSTPD FR0
;      165:       DD4011           FLDD [EAX+17]
;      168:       DDDB             FSTPD FR3
;      16A:       DD4611           FLDD [ESI+17]
;      16D:       D9CB             FXCH FR3
;      16F:       D8CB             FMULD FR3
;      171:       9B               WAIT
;      172:       DCC1             FADD-STI FR1
;      174:       9B               WAIT
;      175:       DDD8             FSTPD FR0
;      177:       D9C0             FLDD FR0
;      179:       D8C9             FMULD FR1
;      17B:       DDD3             FSTD FR3
;      17D:       DDD8             FSTPD FR0
;      17F:       DD4001           FLDD [EAX+1]
;      182:       DDDC             FSTPD FR4
;      184:       DD4001           FLDD [EAX+1]
;      187:       D9CC             FXCH FR4
;      189:       DCCC             FMUL-STI FR4
;      18B:       9B               WAIT
;      18C:       DDD8             FSTPD FR0
;      18E:       DD4009           FLDD [EAX+9]
;      191:       DDDD             FSTPD FR5
;      193:       DD4009           FLDD [EAX+9]
;      196:       D9CD             FXCH FR5
;      198:       D8CD             FMULD FR5
;      19A:       9B               WAIT
;      19B:       DCC4             FADD-STI FR4
;      19D:       9B               WAIT
;      19E:       DDD8             FSTPD FR0
;      1A0:       DD4011           FLDD [EAX+17]
;      1A3:       DDDD             FSTPD FR5
;      1A5:       DD4011           FLDD [EAX+17]
;      1A8:       D9CD             FXCH FR5
;      1AA:       D8CD             FMULD FR5
;      1AC:       9B               WAIT
;      1AD:       D8C4             FADDD FR4
;      1AF:       9B               WAIT
;      1B0:       DCEB             FSUB-STI FR3
;      1B2:       9B               WAIT
;      1B3:       DDD8             FSTPD FR0
;      1B5:       D9C1             FLDD FR1
;      1B7:       D8CA             FMULD FR2
;      1B9:       9B               WAIT
;      1BA:       D8C3             FADDD FR3
;      1BC:       9B               WAIT
;      1BD:       D9E4             FTST
;      1BF:       DFE0             FNSTSW
;      1C1:       80E445           AND AH, 69
;      1C4:       80FC01           CMP AH, 1
;      1C7:       0F85C5030000     JNE L35
;      1CD:       8B0515000000     MOV EAX, [#x15]
;      1D3:       DDD9             FSTPD FR1
;      1D5:       DD4001           FLDD [EAX+1]
;      1D8:       D9C9             FXCH FR1
;      1DA: L7:   8B45E4           MOV EAX, [EBP-28]
;      1DD:       DDD8             FSTPD FR0
;      1DF:       D9C0             FLDD FR0
;      1E1:       DC5001           FCOMD [EAX+1]
;      1E4:       DFE0             FNSTSW
;      1E6:       80E445           AND AH, 69
;      1E9:       80FC01           CMP AH, 1
;      1EC:       0F8590030000     JNE L34
;      1F2:       8B45DC           MOV EAX, [EBP-36]
;      1F5:       8B4003           MOV EAX, [EAX+3]
;      1F8:       3B0519000000     CMP EAX, [#x19]
;      1FE:       0F840E030000     JEQ L31
;      204:       8B4833           MOV ECX, [EAX+51]
;      207:       894DF0           MOV [EBP-16], ECX
;      20A:       837DF00C         CMP DWORD PTR [EBP-16], 12
;      20E:       0F8FEC020000     JNLE L30
;      214: L8:   DDD8             FSTPD FR0
;      216:       DD4601           FLDD [ESI+1]
;      219:       D8C9             FMULD FR1
;      21B:       DDD2             FSTD FR2
;      21D:       DDD8             FSTPD FR0
;      21F:       DD4609           FLDD [ESI+9]
;      222:       D8C9             FMULD FR1
;      224:       DDD3             FSTD FR3
;      226:       DDD8             FSTPD FR0
;      228:       DD4611           FLDD [ESI+17]
;      22B:       D8C9             FMULD FR1
;      22D:       9B               WAIT
;      22E:       B9D6000000       MOV ECX, 214
;      233:       BA0C000000       MOV EDX, 12
;      238:       BB18000000       MOV EBX, 24
;      23D:       8D430F           LEA EAX, [EBX+15]
;      240:       83E0F8           AND EAX, -8
;      243:       64               BYTE #X64
;      244:       800D4800000004   OR BYTE PTR [#x48], 4
;      24B:       64               BYTE #X64
;      24C:       030520000000     ADD EAX, [#x20]
;      252:       64               BYTE #X64
;      253:       3B0524000000     CMP EAX, [#x24]
;      259:       7607             JBE L10
;      25B:       E800000000       CALL L9
;      260: L9:   EB15             JMP L11
;      262: L10:  64               BYTE #X64
;      263:       330520000000     XOR EAX, [#x20]
;      269:       64               BYTE #X64
;      26A:       310520000000     XOR [#x20], EAX
;      270:       64               BYTE #X64
;      271:       330520000000     XOR EAX, [#x20]
;      277: L11:  8D4007           LEA EAX, [EAX+7]
;      27A:       8948F9           MOV [EAX-7], ECX
;      27D:       8950FD           MOV [EAX-3], EDX
;      280:       64               BYTE #X64
;      281:       80354800000004   XOR BYTE PTR [#x48], 4
;      288:       7403             JEQ L12
;      28A:       0F0B09           BREAK 9                    ; pending interrupt trap
;      28D: L12:  D9CA             FXCH FR2
;      28F:       DD5001           FSTD [EAX+1]
;      292:       D9CA             FXCH FR2
;      294:       D9CB             FXCH FR3
;      296:       DD5009           FSTD [EAX+9]
;      299:       D9CB             FXCH FR3
;      29B:       DD5011           FSTD [EAX+17]
;      29E:       DDD8             FSTPD FR0
;      2A0:       DD4701           FLDD [EDI+1]
;      2A3:       DDDA             FSTPD FR2
;      2A5:       DD4001           FLDD [EAX+1]
;      2A8:       D9CA             FXCH FR2
;      2AA:       DCC2             FADD-STI FR2
;      2AC:       9B               WAIT
;      2AD:       DDD8             FSTPD FR0
;      2AF:       DD4709           FLDD [EDI+9]
;      2B2:       DDDB             FSTPD FR3
;      2B4:       DD4009           FLDD [EAX+9]
;      2B7:       D9CB             FXCH FR3
;      2B9:       DCC3             FADD-STI FR3
;      2BB:       9B               WAIT
;      2BC:       DDD8             FSTPD FR0
;      2BE:       DD4711           FLDD [EDI+17]
;      2C1:       DDDC             FSTPD FR4
;      2C3:       DD4011           FLDD [EAX+17]
;      2C6:       D9CC             FXCH FR4
;      2C8:       D8C4             FADDD FR4
;      2CA:       9B               WAIT
;      2CB:       B9D6000000       MOV ECX, 214
;      2D0:       BA0C000000       MOV EDX, 12
;      2D5:       BB18000000       MOV EBX, 24
;      2DA:       8D430F           LEA EAX, [EBX+15]
;      2DD:       83E0F8           AND EAX, -8
;      2E0:       64               BYTE #X64
;      2E1:       800D4800000004   OR BYTE PTR [#x48], 4
;      2E8:       64               BYTE #X64
;      2E9:       030520000000     ADD EAX, [#x20]
;      2EF:       64               BYTE #X64
;      2F0:       3B0524000000     CMP EAX, [#x24]
;      2F6:       7607             JBE L14
;      2F8:       E800000000       CALL L13
;      2FD: L13:  EB15             JMP L15
;      2FF: L14:  64               BYTE #X64
;      300:       330520000000     XOR EAX, [#x20]
;      306:       64               BYTE #X64
;      307:       310520000000     XOR [#x20], EAX
;      30D:       64               BYTE #X64
;      30E:       330520000000     XOR EAX, [#x20]
;      314: L15:  8D4007           LEA EAX, [EAX+7]
;      317:       8948F9           MOV [EAX-7], ECX
;      31A:       8950FD           MOV [EAX-3], EDX
;      31D:       64               BYTE #X64
;      31E:       80354800000004   XOR BYTE PTR [#x48], 4
;      325:       7403             JEQ L16
;      327:       0F0B09           BREAK 9                    ; pending interrupt trap
;      32A: L16:  D9CA             FXCH FR2
;      32C:       DD5001           FSTD [EAX+1]
;      32F:       D9CA             FXCH FR2
;      331:       D9CB             FXCH FR3
;      333:       DD5009           FSTD [EAX+9]
;      336:       D9CB             FXCH FR3
;      338:       DD5011           FSTD [EAX+17]
;      33B:       DDD8             FSTPD FR0
;      33D:       DD4001           FLDD [EAX+1]
;      340:       8B4DF4           MOV ECX, [EBP-12]
;      343:       DDDA             FSTPD FR2
;      345:       DD4101           FLDD [ECX+1]
;      348:       D9CA             FXCH FR2
;      34A:       DCE2             FSUBR-STI FR2
;      34C:       9B               WAIT
;      34D:       DDD8             FSTPD FR0
;      34F:       DD4009           FLDD [EAX+9]
;      352:       8B4DF4           MOV ECX, [EBP-12]
;      355:       DDDB             FSTPD FR3
;      357:       DD4109           FLDD [ECX+9]
;      35A:       D9CB             FXCH FR3
;      35C:       DCE3             FSUBR-STI FR3
;      35E:       9B               WAIT
;      35F:       DDD8             FSTPD FR0
;      361:       DD4011           FLDD [EAX+17]
;      364:       8B45F4           MOV EAX, [EBP-12]
;      367:       DDDC             FSTPD FR4
;      369:       DD4011           FLDD [EAX+17]
;      36C:       D9CC             FXCH FR4
;      36E:       D8E4             FSUBD FR4
;      370:       9B               WAIT
;      371:       B9D6000000       MOV ECX, 214
;      376:       BA0C000000       MOV EDX, 12
;      37B:       BB18000000       MOV EBX, 24
;      380:       8D430F           LEA EAX, [EBX+15]
;      383:       83E0F8           AND EAX, -8
;      386:       64               BYTE #X64
;      387:       800D4800000004   OR BYTE PTR [#x48], 4
;      38E:       64               BYTE #X64
;      38F:       030520000000     ADD EAX, [#x20]
;      395:       64               BYTE #X64
;      396:       3B0524000000     CMP EAX, [#x24]
;      39C:       7607             JBE L18
;      39E:       E800000000       CALL L17
;      3A3: L17:  EB15             JMP L19
;      3A5: L18:  64               BYTE #X64
;      3A6:       330520000000     XOR EAX, [#x20]
;      3AC:       64               BYTE #X64
;      3AD:       310520000000     XOR [#x20], EAX
;      3B3:       64               BYTE #X64
;      3B4:       330520000000     XOR EAX, [#x20]
;      3BA: L19:  8D4007           LEA EAX, [EAX+7]
;      3BD:       8948F9           MOV [EAX-7], ECX
;      3C0:       8950FD           MOV [EAX-3], EDX
;      3C3:       64               BYTE #X64
;      3C4:       80354800000004   XOR BYTE PTR [#x48], 4
;      3CB:       7403             JEQ L20
;      3CD:       0F0B09           BREAK 9                    ; pending interrupt trap
;      3D0: L20:  D9CA             FXCH FR2
;      3D2:       DD5001           FSTD [EAX+1]
;      3D5:       D9CA             FXCH FR2
;      3D7:       D9CB             FXCH FR3
;      3D9:       DD5009           FSTD [EAX+9]
;      3DC:       D9CB             FXCH FR3
;      3DE:       DD5011           FSTD [EAX+17]
;      3E1:       DDD8             FSTPD FR0
;      3E3:       DD4001           FLDD [EAX+1]
;      3E6:       DDDA             FSTPD FR2
;      3E8:       DD4001           FLDD [EAX+1]
;      3EB:       D9CA             FXCH FR2
;      3ED:       DCCA             FMUL-STI FR2
;      3EF:       9B               WAIT
;      3F0:       DDD8             FSTPD FR0
;      3F2:       DD4009           FLDD [EAX+9]
;      3F5:       DDDB             FSTPD FR3
;      3F7:       DD4009           FLDD [EAX+9]
;      3FA:       D9CB             FXCH FR3
;      3FC:       D8CB             FMULD FR3
;      3FE:       9B               WAIT
;      3FF:       DCC2             FADD-STI FR2
;      401:       9B               WAIT
;      402:       DDD8             FSTPD FR0
;      404:       DD4011           FLDD [EAX+17]
;      407:       DDDB             FSTPD FR3
;      409:       DD4011           FLDD [EAX+17]
;      40C:       D9CB             FXCH FR3
;      40E:       D8CB             FMULD FR3
;      410:       9B               WAIT
;      411:       D8C2             FADDD FR2
;      413:       9B               WAIT
;      414:       D9FA             FSQRT
;      416:       9B               WAIT
;      417:       DDDA             FSTPD FR2
;      419:       D9E8             FLD1
;      41B:       D9CA             FXCH FR2
;      41D:       DCFA             FDIV-STI FR2
;      41F:       9B               WAIT
;      420:       DDD8             FSTPD FR0
;      422:       DD4001           FLDD [EAX+1]
;      425:       D8CA             FMULD FR2
;      427:       DDD3             FSTD FR3
;      429:       DDD8             FSTPD FR0
;      42B:       DD4009           FLDD [EAX+9]
;      42E:       D8CA             FMULD FR2
;      430:       DDD4             FSTD FR4
;      432:       DDD8             FSTPD FR0
;      434:       DD4011           FLDD [EAX+17]
;      437:       D8CA             FMULD FR2
;      439:       9B               WAIT
;      43A:       B9D6000000       MOV ECX, 214
;      43F:       BA0C000000       MOV EDX, 12
;      444:       BB18000000       MOV EBX, 24
;      449:       8D430F           LEA EAX, [EBX+15]
;      44C:       83E0F8           AND EAX, -8
;      44F:       64               BYTE #X64
;      450:       800D4800000004   OR BYTE PTR [#x48], 4
;      457:       64               BYTE #X64
;      458:       030520000000     ADD EAX, [#x20]
;      45E:       64               BYTE #X64
;      45F:       3B0524000000     CMP EAX, [#x24]
;      465:       7607             JBE L22
;      467:       E800000000       CALL L21
;      46C: L21:  EB15             JMP L23
;      46E: L22:  64               BYTE #X64
;      46F:       330520000000     XOR EAX, [#x20]
;      475:       64               BYTE #X64
;      476:       310520000000     XOR [#x20], EAX
;      47C:       64               BYTE #X64
;      47D:       330520000000     XOR EAX, [#x20]
;      483: L23:  8D4007           LEA EAX, [EAX+7]
;      486:       8948F9           MOV [EAX-7], ECX
;      489:       8950FD           MOV [EAX-3], EDX
;      48C:       64               BYTE #X64
;      48D:       80354800000004   XOR BYTE PTR [#x48], 4
;      494:       7403             JEQ L24
;      496:       0F0B09           BREAK 9                    ; pending interrupt trap
;      499: L24:  D9CB             FXCH FR3
;      49B:       DD5001           FSTD [EAX+1]
;      49E:       D9CB             FXCH FR3
;      4A0:       D9CC             FXCH FR4
;      4A2:       DD5009           FSTD [EAX+9]
;      4A5:       D9CC             FXCH FR4
;      4A7:       DD5011           FSTD [EAX+17]
;      4AA:       DDD8             FSTPD FR0
;      4AC:       D9C0             FLDD FR0
;      4AE:       8BD8             MOV EBX, EAX
;      4B0: L25:  64               BYTE #X64
;      4B1:       800D4800000004   OR BYTE PTR [#x48], 4
;      4B8:       B810000000       MOV EAX, 16
;      4BD:       64               BYTE #X64
;      4BE:       030520000000     ADD EAX, [#x20]
;      4C4:       64               BYTE #X64
;      4C5:       3B0524000000     CMP EAX, [#x24]
;      4CB:       7607             JBE L27
;      4CD:       E800000000       CALL L26
;      4D2: L26:  EB0A             JMP L28
;      4D4: L27:  64               BYTE #X64
;      4D5:       890520000000     MOV [#x20], EAX
;      4DB:       83E810           SUB EAX, 16
;      4DE: L28:  C70016030000     MOV DWORD PTR [EAX], 790
;      4E4:       8D4007           LEA EAX, [EAX+7]
;      4E7:       DD5001           FSTD [EAX+1]
;      4EA:       64               BYTE #X64
;      4EB:       80354800000004   XOR BYTE PTR [#x48], 4
;      4F2:       7403             JEQ L29
;      4F4:       0F0B09           BREAK 9                    ; pending interrupt trap
;      4F7: L29:  8D65F8           LEA ESP, [EBP-8]
;      4FA:       8B6DFC           MOV EBP, [EBP-4]
;      4FD:       C20400           RET 4
;      500: L30:  8B402F           MOV EAX, [EAX+47]
;      503:       8B400D           MOV EAX, [EAX+13]
;      506:       3B0519000000     CMP EAX, [#x19]
;      50C:       0F8502FDFFFF     JNE L8
;      512: L31:  8B45DC           MOV EAX, [EBP-36]
;      515:       8B400B           MOV EAX, [EAX+11]
;      518:       8945F4           MOV [EBP-12], EAX
;      51B:       EB4C             JMP L33
;      51D: L32:  8B45F4           MOV EAX, [EBP-12]
;      520:       8B58FD           MOV EBX, [EAX-3]
;      523:       8B45F4           MOV EAX, [EBP-12]
;      526:       8B4001           MOV EAX, [EAX+1]
;      529:       8945F4           MOV [EBP-12], EAX
;      52C:       897DEC           MOV [EBP-20], EDI
;      52F:       8975E8           MOV [EBP-24], ESI
;      532:       8B4DE4           MOV ECX, [EBP-28]
;      535:       8B55E0           MOV EDX, [EBP-32]
;      538:       896DF0           MOV [EBP-16], EBP
;      53B:       8BC4             MOV EAX, ESP
;      53D:       83EC40           SUB ESP, 64
;      540:       8948E4           MOV [EAX-28], ECX
;      543:       8950E0           MOV [EAX-32], EDX
;      546:       8958DC           MOV [EAX-36], EBX
;      549:       8B4DF0           MOV ECX, [EBP-16]
;      54C:       8948FC           MOV [EAX-4], ECX
;      54F:       8BE8             MOV EBP, EAX
;      551:       C745F87E050000   MOV DWORD PTR [EBP-8], 1406
;      558:       E925FBFFFF       JMP L2
;      55D:       8B75E8           MOV ESI, [EBP-24]
;      560:       8B7DEC           MOV EDI, [EBP-20]
;      563:       8945E4           MOV [EBP-28], EAX
;      566:       895DE0           MOV [EBP-32], EBX
;      569: L33:  817DF40B000008   CMP DWORD PTR [EBP-12], 134217739
;      570:       75AB             JNE L32
;      572:       8B45E4           MOV EAX, [EBP-28]
;      575:       DDD8             FSTPD FR0
;      577:       DD4001           FLDD [EAX+1]
;      57A:       8B5DE0           MOV EBX, [EBP-32]
;      57D:       E92EFFFFFF       JMP L25
;      582: L34:  8B45E4           MOV EAX, [EBP-28]
;      585:       DDD8             FSTPD FR0
;      587:       DD4001           FLDD [EAX+1]
;      58A:       8B5DE0           MOV EBX, [EBP-32]
;      58D:       E91EFFFFFF       JMP L25
;      592: L35:  D9FA             FSQRT
;      594:       DDD2             FSTD FR2
;      596:       DDD8             FSTPD FR0
;      598:       D9C0             FLDD FR0
;      59A:       D8C2             FADDD FR2
;      59C:       DDD3             FSTD FR3
;      59E:       DDD8             FSTPD FR0
;      5A0:       D9C0             FLDD FR0
;      5A2:       D8E2             FSUBD FR2
;      5A4:       9B               WAIT
;      5A5:       D9CB             FXCH FR3
;      5A7:       D9E4             FTST
;      5A9:       D9CB             FXCH FR3
;      5AB:       DFE0             FNSTSW
;      5AD:       80E445           AND AH, 69
;      5B0:       80FC01           CMP AH, 1
;      5B3:       7512             JNE L36
;      5B5:       8B0515000000     MOV EAX, [#x15]
;      5BB:       DDD9             FSTPD FR1
;      5BD:       DD4001           FLDD [EAX+1]
;      5C0:       D9C9             FXCH FR1
;      5C2:       E913FCFFFF       JMP L7
;      5C7: L36:  D9E4             FTST
;      5C9:       DFE0             FNSTSW
;      5CB:       80E445           AND AH, 69
;      5CE:       740B             JEQ L37
;      5D0:       D9CB             FXCH FR3
;      5D2:       DDD1             FSTD FR1
;      5D4:       D9CB             FXCH FR3
;      5D6:       E9FFFBFFFF       JMP L7
;      5DB: L37:  DDD1             FSTD FR1
;      5DD:       E9F8FBFFFF       JMP L7
;      5E2:       90               NOP
;      5E3:       90               NOP
;      5E4:       90               NOP
;      5E5:       90               NOP
;      5E6:       90               NOP
;      5E7:       90               NOP

;;;; component: DOT


IR1 block 1 start c1
start stack:
  1>     bind SB-C::CLAMBDA SINTERSECT
end stack:
successors c2

IR1 block 2 start c2
start stack:
  2>     entry NIL
  3>  4: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
  5>  6: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME AUX
             :%DEBUG-NAME (LABELS AUX)
             :KIND NIL
             :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (T) (VALUES T &OPTIONAL))>
             :WHERE-FROM :DEFINED
             :VARS (SCENE) {1293E0A1}>)
  7>     known combination v4 v6
  8>  9: SB-C::CLAMBDA (LABELS AUX)
 10> 11: SCENE
 12>     tail local combination v9 v11
end stack:
successors c13

IR1 block 3 start c13
start stack:
 13>     bind SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c14

IR1 block 4 start c14
start stack:
 14>     entry NIL
 15> 16: SB-C::CLAMBDA SRAY-SPHERE
 17> 18: ORIG
 19> 20: DIR
 21> 22: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
 23> 24: SCENE
 25> 26: cast v24 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:STRUCTURE-CLASSOID SPHERE>]
 27> 28: '1
 29> 30: known combination v22 v26 v28
 31> 32: SB-KERNEL:%RAW-INSTANCE-REF/DOUBLE {GLOBAL-FUNCTION}
 33> 34: SCENE
 35> 36: '0
 37> 38: known combination v32 v34 v36
 39> 40: cast v18 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                         DOUBLE-FLOAT
                                                                         (3))>]
 41> 42: cast v20 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                         DOUBLE-FLOAT
                                                                         (3))>]
 43> 44: cast v30 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                         DOUBLE-FLOAT
                                                                         (3))>]
 45>     local combination v16 <none> <none> <none> v38
 46>     bind SB-C::CLAMBDA SRAY-SPHERE :KIND :LET
end stack:
successors c47

IR1 block 5 start c47
start stack:
 47>     entry NIL
 48> 49: SB-C::CLAMBDA -V
 50>     local combination v49 v44 v40
 51>     bind SB-C::CLAMBDA -V :KIND :LET
end stack:
successors c52

IR1 block 6 start c52
start stack:
 52>     entry NIL
 53> 54: - {GLOBAL-FUNCTION}
end stack:
successors c55

IR1 block 7 start c55
start stack:
 55>     entry NIL
 56> 57: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 58> 59: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1098))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A4EB61}> {12A4EB21}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A4EBD1}> {12A4EB91}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1098
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A4EC41}> {12A4EC01}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A4F621}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1099
                                  #:N-COUNT-1100) {12A50029}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1098) {12A4EE79}> {12A4ED19}>)
 60>     known combination v57 v59
 61> 62: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 63> 64: A
 65> 66: '0
 67> 68: known combination v62 v64 v66
end stack:
successors c69

IR1 block 8 start c69
start stack:
 69>     entry NIL
 70> 71: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 72> 73: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1101))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A52101}> {12A520C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A52171}> {12A52131}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1101
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A521E1}> {12A521A1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A52BC1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1102
                                  #:N-COUNT-1103) {12A535B9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1101) {12A52419}> {12A522B9}>)
 74>     known combination v71 v73
 75> 76: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 77> 78: B
 79> 80: '0
 81> 82: known combination v76 v78 v80
end stack:
successors c83

IR1 block 9 start c83
start stack:
 83> 84: known combination v54 v68 v82
 85> 86: - {GLOBAL-FUNCTION}
end stack:
successors c87

IR1 block 10 start c87
start stack:
 87>     entry NIL
 88> 89: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 90> 91: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1104))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A55E21}> {12A55DE1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A55E91}> {12A55E51}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1104
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A55F01}> {12A55EC1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A568E1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1105
                                  #:N-COUNT-1106) {12A572E1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1104) {12A56139}> {12A55FD9}>)
 92>     known combination v89 v91
 93> 94: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 95> 96: A
 97> 98: '1
 99>100: known combination v94 v96 v98
end stack:
successors c101

IR1 block 11 start c101
start stack:
101>     entry NIL
102>103: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
104>105: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1107))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A59409}> {12A593C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A59479}> {12A59439}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1107
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A594E9}> {12A594A9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A59EC9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1108
                                  #:N-COUNT-1109) {12A5A8C1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1107) {12A59721}> {12A595C1}>)
106>     known combination v103 v105
107>108: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
109>110: B
111>112: '1
113>114: known combination v108 v110 v112
end stack:
successors c115

IR1 block 12 start c115
start stack:
115>116: known combination v86 v100 v114
117>118: - {GLOBAL-FUNCTION}
end stack:
successors c119

IR1 block 13 start c119
start stack:
119>     entry NIL
120>121: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
122>123: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1110))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A5D0E1}> {12A5D0A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A5D151}> {12A5D111}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1110
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A5D1C1}> {12A5D181}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A5DBA1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1111
                                  #:N-COUNT-1112) {12A5E599}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1110) {12A5D3F9}> {12A5D299}>)
124>     known combination v121 v123
125>126: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
127>128: A
129>130: '2
131>132: known combination v126 v128 v130
end stack:
successors c133

IR1 block 14 start c133
start stack:
133>     entry NIL
134>135: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
136>137: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1113))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A60621}> {12A605E1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A60691}> {12A60651}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1113
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A60701}> {12A606C1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A610E1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1114
                                  #:N-COUNT-1115) {12A61AD9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1113) {12A60939}> {12A607D9}>)
138>     known combination v135 v137
139>140: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
141>142: B
143>144: '2
145>146: known combination v140 v142 v144
end stack:
successors c147

IR1 block 15 start c147
start stack:
147>148: known combination v118 v132 v146
end stack:
successors c149

IR1 block 16 start c149
start stack:
149>     entry NIL
150>151: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
152>153: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
154>155: '214
156>157: '3
158>159: '6
160>161: known combination v153 v155 v157 v159
162>     local combination v151 v161
163>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
164>165: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
166>167: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1116))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A65439}> {12A653F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A654A9}> {12A65469}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1116
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A65519}> {12A654D9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A664B1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1117
                                  #:N-COUNT-1118) {12A66E61}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1116) {12A65821}> {12A656C1}>)
168>     known combination v165 v167
169>170: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
171>172: #:G1
173>174: '0
175>     known combination v170 v172 v174 v84
176>177: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
178>179: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1119))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A694C9}> {12A69489}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A69539}> {12A694F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1119 ..>)>)
                                                     IR1 block 17 start c180
                                                     start stack:
                                                     180>181: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                             ((SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)
                                                                              (SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)))
                                                     182>183: SB-C::CLAMBDA (SB-C::LOCAL-INLINE
                                                                             DOT)
                                                     184>     local combination v183 <none> v42
                                                     185>     bind SB-C::CLAMBDA (SB-C::LOCAL-INLINE
                                                                                  DOT) :KIND :LET
                                                     end stack:
                                                     successors c186

IR1 block 18 start c186
start stack:
186>     entry NIL
187>188: + {GLOBAL-FUNCTION}
189>190: + {GLOBAL-FUNCTION}
191>192: * {GLOBAL-FUNCTION}
end stack:
successors c193

IR1 block 19 start c193
start stack:
193>     entry NIL
194>195: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
196>197: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1062))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A1C5B1}> {12A1C571}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A1C621}> {12A1C5E1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1062
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A1C691}> {12A1C651}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A1D571}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1063
                                  #:N-COUNT-1064) {12A1DF69}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1062) {12A1C911}> {12A1C7B1}>)
198>     known combination v195 v197
199>200: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
201>202: #:G1
203>204: '0
205>206: known combination v200 v202 v204
end stack:
successors c207

IR1 block 20 start c207
start stack:
207>     entry NIL
208>209: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
210>211: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1065))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A214D9}> {12A21499}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A21549}> {12A21509}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1065
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A215B9}> {12A21579}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A21F99}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1066
                                  #:N-COUNT-1067) {12A22991}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1065) {12A217F1}> {12A21691}>)
212>     known combination v209 v211
213>214: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
215>216: B
217>218: '0
219>220: known combination v214 v216 v218
end stack:
successors c221

IR1 block 21 start c221
start stack:
221>222: known combination v192 v206 v220
223>224: * {GLOBAL-FUNCTION}
end stack:
successors c225

IR1 block 22 start c225
start stack:
225>     entry NIL
226>227: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
228>229: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1068))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A26169}> {12A26129}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A261D9}> {12A26199}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1068
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A26249}> {12A26209}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A26C29}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1069
                                  #:N-COUNT-1070) {12A27621}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1068) {12A26481}> {12A26321}>)
230>     known combination v227 v229
231>232: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
233>234: #:G1
235>236: '1
237>238: known combination v232 v234 v236
end stack:
successors c239

IR1 block 23 start c239
start stack:
239>     entry NIL
240>241: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
242>243: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1071))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A29A11}> {12A299D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A29A81}> {12A29A41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1071
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A29AF1}> {12A29AB1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A2A4D1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1072
                                  #:N-COUNT-1073) {12A2AEC9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1071) {12A29D29}> {12A29BC9}>)
244>     known combination v241 v243
245>246: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
247>248: B
249>250: '1
251>252: known combination v246 v248 v250
end stack:
successors c253

IR1 block 24 start c253
start stack:
253>254: known combination v224 v238 v252
255>256: known combination v190 v222 v254
257>258: * {GLOBAL-FUNCTION}
end stack:
successors c259

IR1 block 25 start c259
start stack:
259>     entry NIL
260>261: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
262>263: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1074))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A2E451}> {12A2E411}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A2E4C1}> {12A2E481}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1074
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A2E531}> {12A2E4F1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A2EF11}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1075
                                  #:N-COUNT-1076) {12A2F909}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1074) {12A2E769}> {12A2E609}>)
264>     known combination v261 v263
265>266: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
267>268: #:G1
269>270: '2
271>272: known combination v266 v268 v270
end stack:
successors c273

IR1 block 26 start c273
start stack:
273>     entry NIL
274>275: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
276>277: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1077))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A31A09}> {12A319C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A31A79}> {12A31A39}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1077
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A31AE9}> {12A31AA9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A324C9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1078
                                  #:N-COUNT-1079) {12A32EC1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1077) {12A31D21}> {12A31BC1}>)
278>     known combination v275 v277
279>280: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
281>282: B
283>284: '2
285>286: known combination v280 v282 v284
end stack:
successors c287

IR1 block 27 start c287
start stack:
287>288: known combination v258 v272 v286
289>290: known combination v188 v256 v288
end stack:
successors c291

IR1 block 28 start c291
start stack:
291>     local combination v181 v290
292>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
293>294: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
295>296: + {GLOBAL-FUNCTION}
297>298: - {GLOBAL-FUNCTION}
299>300: * {GLOBAL-FUNCTION}
301>302: B
303>304: B
305>306: known combination v300 v302 v304
end stack:
successors c307

IR1 block 29 start c307
start stack:
307>     entry NIL
308>309: + {GLOBAL-FUNCTION}
310>311: + {GLOBAL-FUNCTION}
312>313: * {GLOBAL-FUNCTION}
end stack:
successors c314

IR1 block 30 start c314
start stack:
314>     entry NIL
315>316: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
317>318: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1089))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A44659}> {12A44619}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A446C9}> {12A44689}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1089
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A44739}> {12A446F9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A45129}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1090
                                  #:N-COUNT-1091) {12A45B21}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1089) {12A44971}> {12A44811}>)
319>     known combination v316 v318
320>321: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
322>323: #:G1
324>325: '0
326>327: known combination v321 v323 v325
end stack:
successors c328

IR1 block 31 start c328
start stack:
328>     entry NIL
329>330: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
331>332: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1080))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A35DA1}> {12A35D61}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A35E11}> {12A35DD1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1080
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A35E81}> {12A35E41}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A36861}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1081
                                  #:N-COUNT-1082) {12A37259}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1080) {12A360B9}> {12A35F59}>)
333>     known combination v330 v332
334>335: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
336>337: #:G1
338>339: '0
340>341: known combination v335 v337 v339
end stack:
successors c342

IR1 block 32 start c342
start stack:
342>343: known combination v313 v327 v341
344>345: * {GLOBAL-FUNCTION}
end stack:
successors c346

IR1 block 33 start c346
start stack:
346>     entry NIL
347>348: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
349>350: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1092))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A48049}> {12A48009}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A480B9}> {12A48079}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1092
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A48129}> {12A480E9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A48B09}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1093
                                  #:N-COUNT-1094) {12A49501}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1092) {12A48361}> {12A48201}>)
351>     known combination v348 v350
352>353: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
354>355: #:G1
356>357: '1
358>359: known combination v353 v355 v357
end stack:
successors c360

IR1 block 34 start c360
start stack:
360>     entry NIL
361>362: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
363>364: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1083))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A3A091}> {12A3A051}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A3A101}> {12A3A0C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1083
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A3A171}> {12A3A131}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A3AB51}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1084
                                  #:N-COUNT-1085) {12A3B549}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1083) {12A3A3A9}> {12A3A249}>)
365>     known combination v362 v364
366>367: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
368>369: #:G1
370>371: '1
372>373: known combination v367 v369 v371
end stack:
successors c374

IR1 block 35 start c374
start stack:
374>375: known combination v345 v359 v373
376>377: known combination v311 v343 v375
378>379: * {GLOBAL-FUNCTION}
end stack:
successors c380

IR1 block 36 start c380
start stack:
380>     entry NIL
381>382: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
383>384: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1095))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A4B5F1}> {12A4B5B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12A4B661}> {12A4B621}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1095
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12A4B6D1}> {12A4B691}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12A4C0B1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1096
                                  #:N-COUNT-1097) {12A4CAA9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1095) {12A4B909}> {12A4B7A9}>)
385>     known combination v382 v384
386>387: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
388>389: #:G1
390>391: '2
392>393: known combination v387 v389 v391
end stack:
successors c394

IR1 block 37 start c394
start stack:
394>     entry NIL
395>396: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
397>398: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1086))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12D37569}> {12D1EE21}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12D37589}> {12D1EE61}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1086
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12D5B661}> {12D535B1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12D375A9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1087
                                  #:N-COUNT-1088) {12D53679}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1086) {12D30FB1}> {12D43FE9}>)
399>     known combination v396 v398
400>401: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
402>403: #:G1
404>405: '2
406>407: known combination v401 v403 v405
end stack:
successors c408

IR1 block 38 start c408
start stack:
408>409: known combination v379 v393 v407
410>411: known combination v309 v377 v409
end stack:
successors c412

IR1 block 39 start c412
start stack:
412>413: known combination v298 v306 v411
414>415: * {GLOBAL-FUNCTION}
416>417: RADIUS
418>419: RADIUS
420>421: known combination v415 v417 v419
422>423: known combination v296 v413 v421
424>     local combination v294 v423
425>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
426>427: < {GLOBAL-FUNCTION}
428>429: DISC
430>431: '0.0d0
432>433: known combination v427 v429 v431
434>     if v433 c435 c436
end stack:
successors c435 c436

IR1 block 42 start c436
start stack:
436>437: < {GLOBAL-FUNCTION}
438>439: + {GLOBAL-FUNCTION}
440>441: B
442>443: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
444>445: DISC
446>447: known combination v443 v445
448>449: known combination v439 v441 v447
450>451: '0.0d0
452>453: known combination v437 v449 v451
454>     if v453 c435 c455
end stack:
successors c455 c435

IR1 block 43 start c455
start stack:
455>456: SB-C::CLAMBDA (LET ((#:G1125
                              (SB-KERNEL:%INSTANCE-LAYOUT "#<...>" . "#<...>")))
                         )
457>458: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
459>460: SCENE
461>462: '0
463>464: known combination v458 v460 v462
465>     local combination v456 v464
466>     bind SB-C::CLAMBDA (LET ((#:G1125
                                   (SB-KERNEL:%INSTANCE-LAYOUT "#<...>"
                                                               . "#<...>")))
                              ) :KIND :LET
467>468: EQ {GLOBAL-FUNCTION}
469>470: #:G1125
471>472: '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>
473>474: known combination v468 v470 v472
475>     if v474 c476 c477
end stack:
successors c477 c476

IR1 block 44 start c477
start stack:
477>478: > {GLOBAL-FUNCTION}
479>480: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
481>482: #:G1125
483>484: '12
485>486: known combination v480 v482 v484
487>488: '3
489>490: known combination v478 v486 v488
491>     if v490 c492 c493
end stack:
successors c493 c492

IR1 block 46 start c492
start stack:
492>494: EQ {GLOBAL-FUNCTION}
495>496: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
497>498: #:G1125
499>500: '11
501>502: known combination v496 v498 v500
503>504: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
505>506: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1126))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE SIMPLE-VECTOR>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12D40D59}> {12D2B949}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12D40D79}> {12D2B989}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1126
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12D51121}> {12D40A79}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12D40AC9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1127
                                  #:N-COUNT-1128) {12D2B4E1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1126) {12D2B569}> {12D16E51}>)
507>     known combination v504 v506
508>509: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
510>511: '3
512>513: known combination v509 v502 v511
514>515: '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>
516>517: known combination v494 v513 v515
518>     if v517 c476 c493
end stack:
successors c476 c493

IR1 block 47 start c476
start stack:
476>     entry NIL
519>520: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
521>522: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA (#:G1026))
             :KIND :ZOMBIE
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS (#:G1026) {12D061E1}>)
523>     known combination v520 v522
524>525: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
526>527: SCENE
528>529: '2
530>531: known combination v525 v527 v529
end stack:
successors c532

IR1 block 48 start c532
start stack:
532>     entry NIL
533>534: SB-C::CLAMBDA (LET ((#:INDEX1057 #:G1056))
                         )
535>     local combination v534 v531
536>     bind SB-C::CLAMBDA (LET ((#:INDEX1057 #:G1056))
                              ) :KIND :LET
end stack:
successors c537

IR1 block 49 start c537
start stack:
537>     entry NIL
end stack:
successors c538

IR1 block 52 start c538
start stack:
538>539: #:INDEX1057
540>     if v539 c541 c542
end stack:
successors c542 c541

IR1 block 50 start c541
start stack:
541>     entry NIL
543>544: CAR {GLOBAL-FUNCTION}
545>546: #:INDEX1057
547>548: known combination v544 v546
549>550: SB-C::CLAMBDA (LET ((SB-IMPL::PRED-VALUE
                              (FUNCALL "#<...>" . "#<...>")))
                         )
551>552: SB-C::CLAMBDA (LABELS AUX)
553>554: local combination v552 v548
555>     local combination v550 v554
556>     bind SB-C::CLAMBDA (LET ((SB-IMPL::PRED-VALUE
                                   (FUNCALL "#<...>" . "#<...>")))
                              ) :KIND :LET
557>558: SB-IMPL::PRED-VALUE
559>     if v558 c560 c561
end stack:
successors c561 c560

IR1 block 54 start c560
start stack:
560>562: SB-IMPL::PRED-VALUE
end stack:
successors c563

IR1 block 51 start c561
start stack:
561>564: CDR {GLOBAL-FUNCTION}
565>566: #:INDEX1057
567>568: known combination v564 v566
569>570: cast v568 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
571>     set #:INDEX1057 v570
end stack:
successors c538

IR1 block 53 start c542
start stack:
542>562: 'NIL
end stack:
successors c563

IR1 block 45 start c493
start stack:
493>562: 'T
end stack:
successors c563

IR1 block 40 start c435
start stack:
435>562: 'NIL
end stack:
successors c563

IR1 block 41 start c563
start stack:
563>     return v562 SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c572

IR1 block 0 start c573
start stack:
573>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
574>575: SB-C::CLAMBDA SINTERSECT
576>577: #:G1030
578>579: #:G1031
580>581: #:G1032
582>583: local combination v575 v577 v579 v581
584>     return v583 SB-C::CLAMBDA (SB-C::TL-XEP NIL)
end stack:
successors c572


;;;; IR2 component: DOT

entries:
    L1: SINTERSECT


TNs: 48 local, 22 temps, 12 constant, 6 env, 0 comp, 50 global.
Wired: 104, Unused: 0. 55 blocks, 462 global conflicts.

IR1 block 57 start c572

    IR2 block NIL start c572

IR1 block 0 start c573

    IR2 block 0 start c573
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G1030!2[EBX]
    3: MOVE t3[EDI] => #:G1031!4[EDI]
    4: MOVE t5[ESI] => #:G1032!6[ESI]
    5: MOVE t7[S0]>t8[EAX] => t9[S0]<t10[EAX]
    6: SAP-MOVE t11[S1]>t12[EAX] => t13[S1]<t14[EAX]
    7: NOTE-ENVIRONMENT-START {#}
    8: CURRENT-FP => t15[ECX]
    9: ALLOCATE-FRAME {#} => t16[EAX] t17[IGNORE-ME]
    10: MOVE-ARG #:G1030!2[EBX] t16[EAX] => ORIG!18[EBX]
    11: MOVE-ARG #:G1031!4[EDI] t16[EAX] => DIR!19[EDI]
    12: MOVE-ARG #:G1032!6[ESI] t16[EAX] => SCENE!20[ESI]
    13: MOVE-ARG t15[ECX] t16[EAX] => t21[S0]
    14: KNOWN-CALL-LOCAL t16[EAX] t17[IGNORE-ME] ORIG!18[EBX] DIR!19[EDI]
                         SCENE!20[ESI] t21[S0]
                         {# # #}
                         => t22[EAX]
    15: MOVE t22[EAX] => t23[EDX]
    16: RETURN-SINGLE t9[S0] t13[S1] t23[EDX]

IR1 block 1 start c1

    IR2 block 54 start c1
    L2:
    0: SAP-MOVE t24[S1]>t25[EAX] => t26[S1]<t27[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c2

    IR2 block 53 start c2
    0: MOVE SCENE!20[ESI] => SCENE!28[S5]<t29[ESI]
    1: MOVE DIR!19[EDI] => t30[EDX]
    2: MOVE ORIG!18[EBX] => t31[EBX]
    3: MOVE t21[S0]>t32[EAX] => t33[S0]<t34[EAX]
    4: SAP-MOVE t26[S1]>t35[EAX] => t36[S1]<t37[EAX]

IR1 block 3 start c13

    IR2 block 52 start c13
    L3:
    0: SAP-MOVE t36[S1]>t38[EAX] => t39[S1]<t40[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 4 start c14

    IR2 block 51 start c14
    0: INSTANCE-INDEX-REF SCENE!28[S5]>t41[EAX] '1!42 => t43[ESI]
    1: RAW-INSTANCE-REF/DOUBLE SCENE!28[S5]>t44[ECX] '0!45 => t46[FR2]

IR1 block 5 start c47

    IR2 block 50 start c47

IR1 block 6 start c52

    IR2 block 49 start c52

IR1 block 7 start c55

    IR2 block 48 start c55
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[ESI] {0} => t47[FR0]

IR1 block 8 start c69

    IR2 block 47 start c69
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t31[EBX] {0} => t48[FR1]

IR1 block 9 start c83

    IR2 block 46 start c83
    0: -/DOUBLE-FLOAT t47[FR0] t48[FR1] => t49[FR1]

IR1 block 10 start c87

    IR2 block 45 start c87
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[ESI] {1} => t50[FR0]

IR1 block 11 start c101

    IR2 block 44 start c101
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t31[EBX] {1} => t51[FR3]

IR1 block 12 start c115

    IR2 block 43 start c115
    0: -/DOUBLE-FLOAT t50[FR0] t51[FR3] => t52[FR3]

IR1 block 13 start c119

    IR2 block 42 start c119
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[ESI] {2} => t53[FR0]
 ..

assembly code for #<SB-C:COMPONENT :NAME DOT {1296E001}>

in the elsewhere segment:
L4:
in the regular segment:
L5:
in the elsewhere segment:
L6:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L7:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t54[ESP]>, DWORD PTR [EBP-32]
L8:

VOP MOVE t1[EDX] => #:G1030!2[EBX] 
        MOV     #<TN #:G1030!2[EBX]>, #<TN t1[EDX]>

VOP NOTE-ENVIRONMENT-START {#} 
L9:

VOP CURRENT-FP => t15[ECX] 
        MOV     #<TN t15[ECX]>, #<TN t55[EBP]>

VOP ALLOCATE-FRAME {#} => t16[EAX] t17[IGNORE-ME] 
        MOV     #<TN t16[EAX]>, #<TN t54[ESP]>
        SUB     #<TN t54[ESP]>, 32

VOP MOVE-ARG t15[ECX] t16[EAX] => t21[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t15[ECX]>

VOP KNOWN-CALL-LOCAL t16[EAX] t17[IGNORE-ME] ORIG!18[EBX] DIR!19[EDI]
                     SCENE!20[ESI] t21[S0]
                     {# # #}
                     => t22[EAX] 
L10:
        MOV     #<TN t55[EBP]>, #<TN t16[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L11)
L12:
        JMP     L2
L11:
L13:
L14:

VOP MOVE t22[EAX] => t23[EDX] 
        MOV     #<TN t23[EDX]>, #<TN t22[EAX]>

VOP RETURN-SINGLE t9[S0] t13[S1] t23[EDX] 
L15:
        LEA     #<TN t54[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t55[EBP]>, #<TN t9[S0]>
        RET     4

L2:
in the elsewhere segment:
L16:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L17:

L18:

VOP MOVE SCENE!20[ESI] => SCENE!28[S5]<t29[ESI] 
        MOV     #<TN SCENE!28[S5]>, #<TN SCENE!20[ESI]>

VOP MOVE DIR!19[EDI] => t30[EDX] 
        MOV     #<TN t30[EDX]>, #<TN DIR!19[EDI]>

L3:
in the elsewhere segment:
L19:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L20:

L21:

VOP INSTANCE-INDEX-REF SCENE!28[S5]>t41[EAX] '1!42 => t43[ESI] 
        MOV     #<TN t41[EAX]>, #<TN SCENE!28[S5]>
        MOV     #<TN t43[ESI]>, DWORD PTR [EAX+7]

VOP RAW-INSTANCE-REF/DOUBLE SCENE!28[S5]>t44[ECX] '0!45 => t46[FR2] 
        MOV     #<TN t44[ECX]>, #<TN SCENE!28[S5]>
        MOV     #<TN t56[EAX]>, DWORD PTR [ECX-1]
        SHR     #<TN t56[EAX]>, 8
        FSTP    #<TN t46[FR2]>
        FLDD    DWORD PTR [ECX+EAX*4-5]
        FXCH    #<TN t46[FR2]>

L22:
L23:
L24:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[ESI] {0} => t47[FR0] 
        FSTP    #<TN t47[FR0]>
        FLDD    DWORD PTR [ESI+1]

L25:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t31[EBX] {0} => t48[FR1] 
        FSTP    #<TN t48[FR1]>
        FLDD    DWORD PTR [EBX+1]
        FXCH    #<TN t48[FR1]>

L26:

VOP -/DOUBLE-FLOAT t47[FR0] t48[FR1] => t49[FR1] 
        FSUBR-STI       #<TN t49[FR1]>
        WAIT

L27:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[ESI] {1} => t50[FR0] 
        FSTP    #<TN t50[FR0]>
        FLDD    DWORD PTR [ESI+9]

L28:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t31[EBX] {1} => t51[FR3] 
        FSTP    #<TN t51[FR3]>
        FLDD    DWORD PTR [EBX+9]
        FXCH    #<TN t51[FR3]>

L29:

VOP -/DOUBLE-FLOAT t50[FR0] t51[FR3] => t52[FR3] 
        FSUBR-STI       #<TN t52[FR3]>
        WAIT

L30:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t43[ESI] {2} => t53[FR0] 
        FSTP    #<TN t53[FR0]>
        FLDD    DWORD PTR [ESI+17]

L31:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t31[EBX] {2} => t57[FR4] 
        FSTP    #<TN t57[FR4]>
        FLDD    DWORD PTR [EBX+17]
        FXCH    #<TN t57[FR4]>

L32:

VOP -/DOUBLE-FLOAT t53[FR0] t57[FR4] => t58[FR0] 
        FSUBD   #<TN t57[FR4]>
        WAIT

L33:

VOP ALLOCATE-VECTOR-ON-HEAP '214!59>t60[ESI] '3!61>t62[EDI] '6!63>t64[ECX]
                            => t65[EAX] 
        MOV     #<TN t60[ESI]>, 214
        MOV     #<TN t62[EDI]>, 12
        MOV     #<TN t64[ECX]>, 24
        LEA     #<TN t65[EAX]>, BYTE PTR [ECX+15]
        AND     #<TN t65[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t65[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t65[EAX]>, DWORD PTR [+36]
        JMP     BE, L34
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L35
L34:
        FS-SEGMENT-PREFIX
        XOR     #<TN t65[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t65[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t65[EAX]>, DWORD PTR [+32]
L35:
        LEA     #<TN t65[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t60[ESI]>
        MOV     DWORD PTR [EAX-3], #<TN t62[EDI]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L36
        BREAK   9
L36:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] t49[FR1]
                                                {0}
                                                => t66[FR1] 
        FXCH    #<TN t49[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t49[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] t52[FR3]
                                                {1}
                                                => t67[FR3] 
        FXCH    #<TN t52[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t52[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] t58[FR0]
                                                {2}
                                                => t68[FR0] 
        FSTD    DWORD PTR [EAX+17]

L37:
L38:
L39:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {0} => t69[FR0] 
        FSTP    #<TN t69[FR0]>
        FLDD    DWORD PTR [EAX+1]

L40:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t30[EDX] {0} => t70[FR1] 
        FSTP    #<TN t70[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t70[FR1]>

L41:

VOP */DOUBLE-FLOAT t69[FR0] t70[FR1] => t71[FR1] 
        FMUL-STI        #<TN t71[FR1]>
        WAIT

L42:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {1} => t72[FR0] 
        FSTP    #<TN t72[FR0]>
        FLDD    DWORD PTR [EAX+9]

L43:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t30[EDX] {1} => t73[FR3] 
        FSTP    #<TN t73[FR3]>
        FLDD    DWORD PTR [EDX+9]
        FXCH    #<TN t73[FR3]>

L44:

VOP */DOUBLE-FLOAT t72[FR0] t73[FR3] => t74[FR0] 
        FMULD   #<TN t73[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t71[FR1] t74[FR0] => t75[FR1] 
        FADD-STI        #<TN t75[FR1]>
        WAIT

L45:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {2} => t76[FR0] 
        FSTP    #<TN t76[FR0]>
        FLDD    DWORD PTR [EAX+17]

L46:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t30[EDX] {2} => t77[FR3] 
        FSTP    #<TN t77[FR3]>
        FLDD    DWORD PTR [EDX+17]
        FXCH    #<TN t77[FR3]>

L47:

VOP */DOUBLE-FLOAT t76[FR0] t77[FR3] => t78[FR0] 
        FMULD   #<TN t77[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t75[FR1] t78[FR0] => t79[FR1] 
        FADD-STI        #<TN t79[FR1]>
        WAIT

L48:

VOP */DOUBLE-FLOAT t79[FR1] t79[FR1] => t80[FR3] 
        FSTP    #<TN t81[FR0]>
        FLD     #<TN t82[FR0]>
        FMULD   #<TN t79[FR1]>
        FST     #<TN t80[FR3]>

L49:
L50:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {0} => t83[FR0] 
        FSTP    #<TN t83[FR0]>
        FLDD    DWORD PTR [EAX+1]

L51:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {0} => t84[FR4] 
        FSTP    #<TN t84[FR4]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t84[FR4]>

L52:

VOP */DOUBLE-FLOAT t83[FR0] t84[FR4] => t85[FR4] 
        FMUL-STI        #<TN t85[FR4]>
        WAIT

L53:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {1} => t86[FR0] 
        FSTP    #<TN t86[FR0]>
        FLDD    DWORD PTR [EAX+9]

L54:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {1} => t87[FR5] 
        FSTP    #<TN t87[FR5]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t87[FR5]>

L55:

VOP */DOUBLE-FLOAT t86[FR0] t87[FR5] => t88[FR0] 
        FMULD   #<TN t87[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t85[FR4] t88[FR0] => t89[FR4] 
        FADD-STI        #<TN t89[FR4]>
        WAIT

L56:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {2} => t90[FR0] 
        FSTP    #<TN t90[FR0]>
        FLDD    DWORD PTR [EAX+17]

L57:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t65[EAX] {2} => t91[FR5] 
        FSTP    #<TN t91[FR5]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t91[FR5]>

L58:

VOP */DOUBLE-FLOAT t90[FR0] t91[FR5] => t92[FR0] 
        FMULD   #<TN t91[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t89[FR4] t92[FR0] => t93[FR0] 
        FADDD   #<TN t89[FR4]>
        WAIT

L59:

VOP -/DOUBLE-FLOAT t80[FR3] t93[FR0] => t94[FR3] 
        FSUB-STI        #<TN t94[FR3]>
        WAIT

VOP */DOUBLE-FLOAT t46[FR2] t46[FR2] => t95[FR0] 
        FSTP    #<TN t81[FR0]>
        FLD     #<TN t96[FR1]>
        FMULD   #<TN t46[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t94[FR3] t95[FR0] => t97[FR0] 
        FADDD   #<TN t94[FR3]>
        WAIT

VOP <0/DOUBLE-FLOAT t97[FR0] {# T 0.0d0} 
L60:
        FTST
        FNSTSW
        AND     #<TN t98[AH]>, 69
        CMP     #<TN t98[AH]>, 1
        JMP     NE, L61

L62:

VOP MOVE 'NIL!99 => t100[EAX] 
        MOV     #<TN t100[EAX]>, 134217739

L63:

VOP KNOWN-RETURN t33[S0] t39[S1] t22[EAX] {#} 
L64:
        LEA     #<TN t54[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t55[EBP]>, #<TN t33[S0]>
        RET     4
L65:

L61:

VOP FSQRT t97[FR0] => t101[FR0] 
L66:
        FSQRT
        WAIT

VOP +/DOUBLE-FLOAT t79[FR1] t101[FR0] => t102[FR0] 
        FADDD   #<TN t79[FR1]>
        WAIT

VOP <0/DOUBLE-FLOAT t102[FR0] {# NIL 0.0d0} 
L67:
        FTST
        FNSTSW
        AND     #<TN t98[AH]>, 69
        CMP     #<TN t98[AH]>, 1
        JMP     E, L62

L68:

VOP INSTANCE-INDEX-REF SCENE!28[S5]>t103[EAX] '0!45 => t104[EAX] 
        MOV     #<TN t103[EAX]>, #<TN SCENE!28[S5]>
        MOV     #<TN t104[EAX]>, DWORD PTR [EAX+3]

VOP IF-EQ t104[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>!105[Const6]>t106[ECX]
          {# NIL}
          
        CMP     #<TN t104[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>!105[Const6]>
        JMP     E, L69

L70:

VOP INSTANCE-INDEX-REF t104[EAX] '12!107 => t108[ESI] 
        MOV     #<TN t108[ESI]>, DWORD PTR [EAX+51]

VOP FAST-IF->-C/FIXNUM t108[ESI] {# NIL 3} 
        CMP     #<TN t108[ESI]>, 12
        JMP     G, L71

L72:

VOP MOVE 'T!109 => t100[EAX] 
        MOV     #<TN t100[EAX]>, 134217767

VOP BRANCH {#} 
        JMP     L63

L71:

VOP INSTANCE-INDEX-REF t104[EAX] '11!110 => t111[EAX] 
        MOV     #<TN t111[EAX]>, DWORD PTR [EAX+47]

VOP DATA-VECTOR-REF/SIMPLE-VECTOR t111[EAX] '3!61 => t112[EAX] 
        MOV     #<TN t112[EAX]>, DWORD PTR [EAX+13]

VOP IF-EQ t112[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>!105[Const6]>t113[ECX]
          {# T}
          
        CMP     #<TN t112[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {1177DF59}>!105[Const6]>
        JMP     NE, L72

L69:

VOP INSTANCE-INDEX-REF SCENE!28[S5]>t114[EAX] '2!115 => t116[ESI] 
        MOV     #<TN t114[EAX]>, #<TN SCENE!28[S5]>
        MOV     #<TN t116[ESI]>, DWORD PTR [EAX+11]

L73:
L74:

VOP BRANCH {#} 
        JMP     L75

L76:

VOP MOVE-OPERAND #:INDEX1057!117[ESI] {SB-VM::STORE-STACK} => t118[S2] 
        MOV     #<TN t118[S2]>, #<TN #:INDEX1057!117[ESI]>

VOP MOVE-OPERAND t31[EBX] {SB-VM::STORE-STACK} => t119[S3] 
        MOV     #<TN t119[S3]>, #<TN t31[EBX]>

VOP MOVE-OPERAND t30[EDX] {SB-VM::STORE-STACK} => t120[S4] 
        MOV     #<TN t120[S4]>, #<TN t30[EDX]>

VOP SLOT #:INDEX1057!117[ESI] {CAR 0 3} => t121[ECX] 
        MOV     #<TN t121[ECX]>, DWORD PTR [ESI-3]

VOP CURRENT-FP => t122[EDI] 
        MOV     #<TN t122[EDI]>, #<TN t55[EBP]>

VOP ALLOCATE-FRAME {#} => t123[EAX] t124[IGNORE-ME] 
        MOV     #<TN t123[EAX]>, #<TN t54[ESP]>
        SUB     #<TN t54[ESP]>, 32

VOP MOVE-ARG t121[ECX] t123[EAX] => SCENE!28[S5] 
        MOV     DWORD PTR [EAX-24], #<TN t121[ECX]>

VOP MOVE-ARG t122[EDI] t123[EAX] => t33[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t122[EDI]>

VOP KNOWN-CALL-LOCAL t123[EAX] t124[IGNORE-ME] SCENE!28[S5] t30[EDX] t31[EBX]
                     t33[S0]
                     {# # #}
                     => t22[EAX] 
L77:
        MOV     #<TN t55[EBP]>, #<TN t123[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L78)
L79:
        JMP     L3
L78:
L80:
L81:

VOP MOVE-OPERAND t120[S4] {SB-VM::LOAD-STACK} => t30[EDX] 
        MOV     #<TN t30[EDX]>, #<TN t120[S4]>

VOP MOVE-OPERAND t119[S3] {SB-VM::LOAD-STACK} => t31[EBX] 
        MOV     #<TN t31[EBX]>, #<TN t119[S3]>

VOP MOVE-OPERAND t118[S2] {SB-VM::LOAD-STACK} => #:INDEX1057!117[ESI] 
        MOV     #<TN #:INDEX1057!117[ESI]>, #<TN t118[S2]>

VOP IF-EQ t22[EAX] 'NIL!125 {# T} 
        CMP     #<TN t22[EAX]>, 134217739
        JMP     NE, L82

L83:

VOP SLOT #:INDEX1057!117[ESI] {CDR 1 3} => t126[ESI] 
        MOV     #<TN t126[ESI]>, DWORD PTR [ESI+1]

L75:

VOP IF-EQ #:INDEX1057!117[ESI] 'NIL!125 {# T} 
        CMP     #<TN #:INDEX1057!117[ESI]>, 134217739
        JMP     NE, L76

L84:

VOP MOVE 'NIL!99 => t100[EAX] 
        MOV     #<TN t100[EAX]>, 134217739

VOP BRANCH {#} 
        JMP     L63

L82:

VOP BRANCH {#} 
        JMP     L63

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME DOT {1296E001}>

; 00000000:       2A08             SUB CL, [EAX]
;      002:       0000             ADD [EAX], AL
;      004:       0000             ADD [EAX], AL
;      006:       0000             ADD [EAX], AL
;      008:       0000             ADD [EAX], AL
;      00A:       0000             ADD [EAX], AL
;      00C:       0000             ADD [EAX], AL
;      00E:       0000             ADD [EAX], AL
;      010:       0000             ADD [EAX], AL
;      012:       0000             ADD [EAX], AL
;      014:       0000             ADD [EAX], AL
;      016:       0000             ADD [EAX], AL
;      018:       0000             ADD [EAX], AL
;      01A:       0000             ADD [EAX], AL
;      01C:       8F45F8           POP DWORD PTR [EBP-8]
;      01F:       8D65E0           LEA ESP, [EBP-32]
;      022:       8BDA             MOV EBX, EDX
;      024:       8BCD             MOV ECX, EBP
;      026:       8BC4             MOV EAX, ESP
;      028:       83EC20           SUB ESP, 32
;      02B:       8948FC           MOV [EAX-4], ECX
;      02E:       8BE8             MOV EBP, EAX
;      030:       C745F852000000   MOV DWORD PTR [EBP-8], 82
;      037:       EB0C             JMP L0
;      039:       8BD0             MOV EDX, EAX
;      03B:       8D65F8           LEA ESP, [EBP-8]
;      03E:       F8               CLC
;      03F:       8B6DFC           MOV EBP, [EBP-4]
;      042:       C20400           RET 4
;      045: L0:   8975E8           MOV [EBP-24], ESI
;      048:       8BD7             MOV EDX, EDI
;      04A: L1:   8B45E8           MOV EAX, [EBP-24]
;      04D:       8B7007           MOV ESI, [EAX+7]
;      050:       8B4DE8           MOV ECX, [EBP-24]
;      053:       8B41FF           MOV EAX, [ECX-1]
;      056:       C1E808           SHR EAX, 8
;      059:       DDDA             FSTPD FR2
;      05B:       DD4481FB         FLDD [ECX+EAX*4-5]
;      05F:       D9CA             FXCH FR2
;      061:       DDD8             FSTPD FR0
;      063:       DD4601           FLDD [ESI+1]
;      066:       DDD9             FSTPD FR1
;      068:       DD4301           FLDD [EBX+1]
;      06B:       D9C9             FXCH FR1
;      06D:       DCE1             FSUBR-STI FR1
;      06F:       9B               WAIT
;      070:       DDD8             FSTPD FR0
;      072:       DD4609           FLDD [ESI+9]
;      075:       DDDB             FSTPD FR3
;      077:       DD4309           FLDD [EBX+9]
;      07A:       D9CB             FXCH FR3
;      07C:       DCE3             FSUBR-STI FR3
;      07E:       9B               WAIT
;      07F:       DDD8             FSTPD FR0
;      081:       DD4611           FLDD [ESI+17]
;      084:       DDDC             FSTPD FR4
;      086:       DD4311           FLDD [EBX+17]
;      089:       D9CC             FXCH FR4
;      08B:       D8E4             FSUBD FR4
;      08D:       9B               WAIT
;      08E:       BED6000000       MOV ESI, 214
;      093:       BF0C000000       MOV EDI, 12
;      098:       B918000000       MOV ECX, 24
;      09D:       8D410F           LEA EAX, [ECX+15]
;      0A0:       83E0F8           AND EAX, -8
;      0A3:       64               BYTE #X64
;      0A4:       800D4800000004   OR BYTE PTR [#x48], 4
;      0AB:       64               BYTE #X64
;      0AC:       030520000000     ADD EAX, [#x20]
;      0B2:       64               BYTE #X64
;      0B3:       3B0524000000     CMP EAX, [#x24]
;      0B9:       7607             JBE L3
;      0BB:       E800000000       CALL L2
;      0C0: L2:   EB15             JMP L4
;      0C2: L3:   64               BYTE #X64
;      0C3:       330520000000     XOR EAX, [#x20]
;      0C9:       64               BYTE #X64
;      0CA:       310520000000     XOR [#x20], EAX
;      0D0:       64               BYTE #X64
;      0D1:       330520000000     XOR EAX, [#x20]
;      0D7: L4:   8D4007           LEA EAX, [EAX+7]
;      0DA:       8970F9           MOV [EAX-7], ESI
;      0DD:       8978FD           MOV [EAX-3], EDI
;      0E0:       64               BYTE #X64
;      0E1:       80354800000004   XOR BYTE PTR [#x48], 4
;      0E8:       7403             JEQ L5
;      0EA:       0F0B09           BREAK 9                    ; pending interrupt trap
;      0ED: L5:   D9C9             FXCH FR1
;      0EF:       DD5001           FSTD [EAX+1]
;      0F2:       D9C9             FXCH FR1
;      0F4:       D9CB             FXCH FR3
;      0F6:       DD5009           FSTD [EAX+9]
;      0F9:       D9CB             FXCH FR3
;      0FB:       DD5011           FSTD [EAX+17]
;      0FE:       DDD8             FSTPD FR0
;      100:       DD4001           FLDD [EAX+1]
;      103:       DDD9             FSTPD FR1
;      105:       DD4201           FLDD [EDX+1]
;      108:       D9C9             FXCH FR1
;      10A:       DCC9             FMUL-STI FR1
;      10C:       9B               WAIT
;      10D:       DDD8             FSTPD FR0
;      10F:       DD4009           FLDD [EAX+9]
;      112:       DDDB             FSTPD FR3
;      114:       DD4209           FLDD [EDX+9]
;      117:       D9CB             FXCH FR3
;      119:       D8CB             FMULD FR3
;      11B:       9B               WAIT
;      11C:       DCC1             FADD-STI FR1
;      11E:       9B               WAIT
;      11F:       DDD8             FSTPD FR0
;      121:       DD4011           FLDD [EAX+17]
;      124:       DDDB             FSTPD FR3
;      126:       DD4211           FLDD [EDX+17]
;      129:       D9CB             FXCH FR3
;      12B:       D8CB             FMULD FR3
;      12D:       9B               WAIT
;      12E:       DCC1             FADD-STI FR1
;      130:       9B               WAIT
;      131:       DDD8             FSTPD FR0
;      133:       D9C0             FLDD FR0
;      135:       D8C9             FMULD FR1
;      137:       DDD3             FSTD FR3
;      139:       DDD8             FSTPD FR0
;      13B:       DD4001           FLDD [EAX+1]
;      13E:       DDDC             FSTPD FR4
;      140:       DD4001           FLDD [EAX+1]
;      143:       D9CC             FXCH FR4
;      145:       DCCC             FMUL-STI FR4
;      147:       9B               WAIT
;      148:       DDD8             FSTPD FR0
;      14A:       DD4009           FLDD [EAX+9]
;      14D:       DDDD             FSTPD FR5
;      14F:       DD4009           FLDD [EAX+9]
;      152:       D9CD             FXCH FR5
;      154:       D8CD             FMULD FR5
;      156:       9B               WAIT
;      157:       DCC4             FADD-STI FR4
;      159:       9B               WAIT
;      15A:       DDD8             FSTPD FR0
;      15C:       DD4011           FLDD [EAX+17]
;      15F:       DDDD             FSTPD FR5
;      161:       DD4011           FLDD [EAX+17]
;      164:       D9CD             FXCH FR5
;      166:       D8CD             FMULD FR5
;      168:       9B               WAIT
;      169:       D8C4             FADDD FR4
;      16B:       9B               WAIT
;      16C:       DCEB             FSUB-STI FR3
;      16E:       9B               WAIT
;      16F:       DDD8             FSTPD FR0
;      171:       D9C1             FLDD FR1
;      173:       D8CA             FMULD FR2
;      175:       9B               WAIT
;      176:       D8C3             FADDD FR3
;      178:       9B               WAIT
;      179:       D9E4             FTST
;      17B:       DFE0             FNSTSW
;      17D:       80E445           AND AH, 69
;      180:       80FC01           CMP AH, 1
;      183:       750E             JNE L8
;      185: L6:   B80B000008       MOV EAX, 134217739
;      18A: L7:   8D65F8           LEA ESP, [EBP-8]
;      18D:       8B6DFC           MOV EBP, [EBP-4]
;      190:       C20400           RET 4
;      193: L8:   D9FA             FSQRT
;      195:       9B               WAIT
;      196:       D8C1             FADDD FR1
;      198:       9B               WAIT
;      199:       D9E4             FTST
;      19B:       DFE0             FNSTSW
;      19D:       80E445           AND AH, 69
;      1A0:       80FC01           CMP AH, 1
;      1A3:       74E0             JEQ L6
;      1A5:       8B45E8           MOV EAX, [EBP-24]
;      1A8:       8B4003           MOV EAX, [EAX+3]
;      1AB:       3B0511000000     CMP EAX, [#x11]
;      1B1:       741D             JEQ L11
;      1B3:       8B7033           MOV ESI, [EAX+51]
;      1B6:       83FE0C           CMP ESI, 12
;      1B9:       7F07             JNLE L10
;      1BB: L9:   B827000008       MOV EAX, 134217767
;      1C0:       EBC8             JMP L7
;      1C2: L10:  8B402F           MOV EAX, [EAX+47]
;      1C5:       8B400D           MOV EAX, [EAX+13]
;      1C8:       3B0511000000     CMP EAX, [#x11]
;      1CE:       75EB             JNE L9
;      1D0: L11:  8B45E8           MOV EAX, [EBP-24]
;      1D3:       8B700B           MOV ESI, [EAX+11]
;      1D6:       EB3A             JMP L13
;      1D8: L12:  8975F4           MOV [EBP-12], ESI
;      1DB:       895DF0           MOV [EBP-16], EBX
;      1DE:       8955EC           MOV [EBP-20], EDX
;      1E1:       8B4EFD           MOV ECX, [ESI-3]
;      1E4:       8BFD             MOV EDI, EBP
;      1E6:       8BC4             MOV EAX, ESP
;      1E8:       83EC20           SUB ESP, 32
;      1EB:       8948E8           MOV [EAX-24], ECX
;      1EE:       8978FC           MOV [EAX-4], EDI
;      1F1:       8BE8             MOV EBP, EAX
;      1F3:       C745F818020000   MOV DWORD PTR [EBP-8], 536
;      1FA:       E94BFEFFFF       JMP L1
;      1FF:       8B55EC           MOV EDX, [EBP-20]
;      202:       8B5DF0           MOV EBX, [EBP-16]
;      205:       8B75F4           MOV ESI, [EBP-12]
;      208:       3D0B000008       CMP EAX, 134217739
;      20D:       7515             JNE L14
;      20F:       8B7601           MOV ESI, [ESI+1]
;      212: L13:  81FE0B000008     CMP ESI, 134217739
;      218:       75BE             JNE L12
;      21A:       B80B000008       MOV EAX, 134217739
;      21F:       E966FFFFFF       JMP L7
;      224: L14:  E961FFFFFF       JMP L7
;      229:       90               NOP
;      22A:       90               NOP
;      22B:       90               NOP
;      22C:       90               NOP
;      22D:       90               NOP
;      22E:       90               NOP
;      22F:       90               NOP

;;;; component: +V


IR1 block 169 start c1
start stack:
  1>     bind SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c2

IR1 block 170 start c2
start stack:
  2>     entry NIL
  3>  4: SB-C::CLAMBDA SRAY-SPHERE
  5>  6: NEG-LIGHT
  7>  8: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
  9> 10: SCENE
 11> 12: cast v10 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:STRUCTURE-CLASSOID SPHERE>]
 13> 14: '1
 15> 16: known combination v8 v12 v14
 17> 18: SB-KERNEL:%RAW-INSTANCE-REF/DOUBLE {GLOBAL-FUNCTION}
 19> 20: SCENE
 21> 22: '0
 23> 24: known combination v18 v20 v22
 25> 26: cast v6 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                        DOUBLE-FLOAT
                                                                        (3))>]
 27> 28: cast v16 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                         DOUBLE-FLOAT
                                                                         (3))>]
 29>     local combination v4 <none> <none> <none> v24
 30>     bind SB-C::CLAMBDA SRAY-SPHERE :KIND :LET
end stack:
successors c31

IR1 block 171 start c31
start stack:
 31>     entry NIL
 32> 33: SB-C::CLAMBDA -V
 34>     local combination v33 v28 <none>
 35>     bind SB-C::CLAMBDA -V :KIND :LET
end stack:
successors c36

IR1 block 172 start c36
start stack:
 36>     entry NIL
 37> 38: - {GLOBAL-FUNCTION}
end stack:
successors c39

IR1 block 173 start c39
start stack:
 39>     entry NIL
 40> 41: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 42> 43: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1639))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CBDC9}> {11984329}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CBDA9}> {119842E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1639
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CBD89}> {119842A9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11984511}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1640
                                  #:N-COUNT-1641) {11984471}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1639) {1193A809}> {1195C869}>)
 44>     known combination v41 v43
 45> 46: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 47> 48: A
 49> 50: '0
 51> 52: known combination v46 v48 v50
end stack:
successors c53

IR1 block 174 start c53
start stack:
 53>     entry NIL
 54> 55: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 56> 57: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1642))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CBAF9}> {11983DF1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CBAD9}> {11983DB1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1642
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CBAB9}> {11983D71}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11983FD9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1643
                                  #:N-COUNT-1644) {11983F39}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1642) {1193A5D1}> {1195C5A1}>)
 58>     known combination v55 v57
 59> 60: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 61> 62: ORIG
 63> 64: '0
 65> 66: known combination v60 v62 v64
end stack:
successors c67

IR1 block 175 start c67
start stack:
 67> 68: known combination v38 v52 v66
 69> 70: - {GLOBAL-FUNCTION}
end stack:
successors c71

IR1 block 176 start c71
start stack:
 71>     entry NIL
 72> 73: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 74> 75: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1645))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CB931}> {119839A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CB911}> {11983961}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1645
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CB8F1}> {11983921}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11983B89}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1646
                                  #:N-COUNT-1647) {11983AE9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1645) {1193A399}> {1195C331}>)
 76>     known combination v73 v75
 77> 78: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 79> 80: A
 81> 82: '1
 83> 84: known combination v78 v80 v82
end stack:
successors c85

IR1 block 177 start c85
start stack:
 85>     entry NIL
 86> 87: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 88> 89: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1648))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CB631}> {11983469}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CB611}> {11983429}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1648
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CB5F1}> {119833E9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11983651}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1649
                                  #:N-COUNT-1650) {119835B1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1648) {1193A161}> {1195C069}>)
 90>     known combination v87 v89
 91> 92: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 93> 94: ORIG
 95> 96: '1
 97> 98: known combination v92 v94 v96
end stack:
successors c99

IR1 block 178 start c99
start stack:
 99>100: known combination v70 v84 v98
101>102: - {GLOBAL-FUNCTION}
end stack:
successors c103

IR1 block 179 start c103
start stack:
103>     entry NIL
104>105: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
106>107: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1651))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CB469}> {11983019}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CB449}> {11982FD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1651
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CB429}> {11982F99}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11983201}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1652
                                  #:N-COUNT-1653) {11983161}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1651) {11939F29}> {1195BDF9}>)
108>     known combination v105 v107
109>110: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
111>112: A
113>114: '2
115>116: known combination v110 v112 v114
end stack:
successors c117

IR1 block 180 start c117
start stack:
117>     entry NIL
118>119: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
120>121: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1654))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CB079}> {11982A71}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CB059}> {11982A31}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1654
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CB039}> {119829F1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11982C59}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1655
                                  #:N-COUNT-1656) {11982BB9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1654) {11939CF1}> {1195BAF1}>)
122>     known combination v119 v121
123>124: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
125>126: ORIG
127>128: '2
129>130: known combination v124 v126 v128
end stack:
successors c131

IR1 block 181 start c131
start stack:
131>132: known combination v102 v116 v130
end stack:
successors c133

IR1 block 182 start c133
start stack:
133>     entry NIL
134>135: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
136>137: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
138>139: '214
140>141: '3
142>143: '6
144>145: known combination v137 v139 v141 v143
146>     local combination v135 v145
147>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
148>149: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
150>151: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1657))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119FDDC9}> {119C4F41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119FDDE9}> {119C4F81}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1657
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11A22659}> {119E9781}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119B0AA9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1658
                                  #:N-COUNT-1659) {119B0A21}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1657) {119B0201}> {1196EE51}>)
152>     known combination v149 v151
153>154: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
155>156: #:G1
157>158: '0
159>     known combination v154 v156 v158 v68
160>161: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
162>163: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1660))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119FDE09}> {119C4FC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119FDE29}> {119C5001}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1660 ..>)>)
                                                     IR1 block 183 start c164
                                                     start stack:
                                                     164>165: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                             ((SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)
                                                                              (SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)))
                                                     166>167: SB-C::CLAMBDA (SB-C::LOCAL-INLINE
                                                                             DOT)
                                                     168>     local combination v167 <none> v26
                                                     169>     bind SB-C::CLAMBDA (SB-C::LOCAL-INLINE
                                                                                  DOT) :KIND :LET
                                                     end stack:
                                                     successors c170

IR1 block 184 start c170
start stack:
170>     entry NIL
171>172: + {GLOBAL-FUNCTION}
173>174: + {GLOBAL-FUNCTION}
175>176: * {GLOBAL-FUNCTION}
end stack:
successors c177

IR1 block 185 start c177
start stack:
177>     entry NIL
178>179: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
180>181: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1603))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CF589}> {11989559}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CF569}> {11989519}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1603
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CF549}> {119894D9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11989741}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1604
                                  #:N-COUNT-1605) {119896A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1603) {1193E2F9}> {1195ECC9}>)
182>     known combination v179 v181
183>184: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
185>186: #:G1
187>188: '0
189>190: known combination v184 v186 v188
end stack:
successors c191

IR1 block 186 start c191
start stack:
191>     entry NIL
192>193: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
194>195: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1606))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CF099}> {11988E41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CF079}> {11988E01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1606
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CF059}> {11988DC1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11989029}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1607
                                  #:N-COUNT-1608) {11988F89}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1606) {1193E0C1}> {1195E9B1}>)
196>     known combination v193 v195
197>198: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
199>200: B
201>202: '0
203>204: known combination v198 v200 v202
end stack:
successors c205

IR1 block 187 start c205
start stack:
205>206: known combination v176 v190 v204
207>208: * {GLOBAL-FUNCTION}
end stack:
successors c209

IR1 block 188 start c209
start stack:
209>     entry NIL
210>211: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
212>213: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1609))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CEE01}> {11988839}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CEDE1}> {119887F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1609
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CEDC1}> {119887B9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11988A21}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1610
                                  #:N-COUNT-1611) {11988981}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1609) {1193BE39}> {1195E6F1}>)
214>     known combination v211 v213
215>216: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
217>218: #:G1
219>220: '1
221>222: known combination v216 v218 v220
end stack:
successors c223

IR1 block 189 start c223
start stack:
223>     entry NIL
224>225: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
226>227: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1612))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CE8C1}> {11988121}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CE8A1}> {119880E1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1612
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CE881}> {119880A1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11988309}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1613
                                  #:N-COUNT-1614) {11988269}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1612) {1193BC01}> {1195E3D9}>)
228>     known combination v225 v227
229>230: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
231>232: B
233>234: '1
235>236: known combination v230 v232 v234
end stack:
successors c237

IR1 block 190 start c237
start stack:
237>238: known combination v208 v222 v236
239>240: known combination v174 v206 v238
241>242: * {GLOBAL-FUNCTION}
end stack:
successors c243

IR1 block 191 start c243
start stack:
243>     entry NIL
244>245: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
246>247: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1615))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CE629}> {11987B19}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CE609}> {11987AD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1615
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CE5E9}> {11987A99}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11987D01}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1616
                                  #:N-COUNT-1617) {11987C61}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1615) {1193B9C9}> {1195E119}>)
248>     known combination v245 v247
249>250: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
251>252: #:G1
253>254: '2
255>256: known combination v250 v252 v254
end stack:
successors c257

IR1 block 192 start c257
start stack:
257>     entry NIL
258>259: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
260>261: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1618))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CE0C9}> {11987401}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CE0A9}> {119873C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1618
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CE089}> {11987381}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119875E9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1619
                                  #:N-COUNT-1620) {11987549}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1618) {1193B791}> {1195DE01}>)
262>     known combination v259 v261
263>264: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
265>266: B
267>268: '2
269>270: known combination v264 v266 v268
end stack:
successors c271

IR1 block 193 start c271
start stack:
271>272: known combination v242 v256 v270
273>274: known combination v172 v240 v272
end stack:
successors c275

IR1 block 194 start c275
start stack:
275>     local combination v165 v274
276>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
277>278: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
279>280: + {GLOBAL-FUNCTION}
281>282: - {GLOBAL-FUNCTION}
283>284: * {GLOBAL-FUNCTION}
285>286: B
287>288: B
289>290: known combination v284 v286 v288
end stack:
successors c291

IR1 block 195 start c291
start stack:
291>     entry NIL
292>293: + {GLOBAL-FUNCTION}
294>295: + {GLOBAL-FUNCTION}
296>297: * {GLOBAL-FUNCTION}
end stack:
successors c298

IR1 block 196 start c298
start stack:
298>     entry NIL
299>300: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
301>302: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1630))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CCFB1}> {11985929}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CCF91}> {119858E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1630
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CCF71}> {119858A9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11985B11}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1631
                                  #:N-COUNT-1632) {11985A71}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1630) {1193AEB1}> {1195D211}>)
303>     known combination v300 v302
304>305: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
306>307: #:G1
308>309: '0
310>311: known combination v305 v307 v309
end stack:
successors c312

IR1 block 197 start c312
start stack:
312>     entry NIL
313>314: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
315>316: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1621))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CDA91}> {11986C41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CDA71}> {11986C01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1621
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CDA51}> {11986BC1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11986E29}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1622
                                  #:N-COUNT-1623) {11986D89}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1621) {1193B559}> {1195DAA9}>)
317>     known combination v314 v316
318>319: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
320>321: #:G1
322>323: '0
324>325: known combination v319 v321 v323
end stack:
successors c326

IR1 block 198 start c326
start stack:
326>327: known combination v297 v311 v325
328>329: * {GLOBAL-FUNCTION}
end stack:
successors c330

IR1 block 199 start c330
start stack:
330>     entry NIL
331>332: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
333>334: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1633))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CC961}> {119851A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CC941}> {11985169}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1633
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CC921}> {11985129}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11985391}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1634
                                  #:N-COUNT-1635) {119852F1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1633) {1193AC79}> {1195CED9}>)
335>     known combination v332 v334
336>337: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
338>339: #:G1
340>341: '1
342>343: known combination v337 v339 v341
end stack:
successors c344

IR1 block 200 start c344
start stack:
344>     entry NIL
345>346: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
347>348: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1624))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CD7F9}> {11986651}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CD7D9}> {11986611}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1624
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CD7B9}> {119865D1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11986839}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1625
                                  #:N-COUNT-1626) {11986799}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1624) {1193B321}> {1195D7E9}>)
349>     known combination v346 v348
350>351: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
352>353: #:G1
354>355: '1
356>357: known combination v351 v353 v355
end stack:
successors c358

IR1 block 201 start c358
start stack:
358>359: known combination v329 v343 v357
360>361: known combination v295 v327 v359
362>363: * {GLOBAL-FUNCTION}
end stack:
successors c364

IR1 block 202 start c364
start stack:
364>     entry NIL
365>366: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
367>368: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1636))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CC411}> {11984A69}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CC3F1}> {11984A29}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1636
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CC3D1}> {119849E9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11984C51}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1637
                                  #:N-COUNT-1638) {11984BB1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1636) {1193AA41}> {1195CBC1}>)
369>     known combination v366 v368
370>371: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
372>373: #:G1
374>375: '2
376>377: known combination v371 v373 v375
end stack:
successors c378

IR1 block 203 start c378
start stack:
378>     entry NIL
379>380: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
381>382: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1627))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CD561}> {11986061}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119CD541}> {11986021}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1627
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119CD521}> {11985FE1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {11986249}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1628
                                  #:N-COUNT-1629) {119861A9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1627) {1193B0E9}> {1195D529}>)
383>     known combination v380 v382
384>385: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
386>387: #:G1
388>389: '2
390>391: known combination v385 v387 v389
end stack:
successors c392

IR1 block 204 start c392
start stack:
392>393: known combination v363 v377 v391
394>395: known combination v293 v361 v393
end stack:
successors c396

IR1 block 205 start c396
start stack:
396>397: known combination v282 v290 v395
398>399: * {GLOBAL-FUNCTION}
400>401: RADIUS
402>403: RADIUS
404>405: known combination v399 v401 v403
406>407: known combination v280 v397 v405
408>     local combination v278 v407
409>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
410>411: < {GLOBAL-FUNCTION}
412>413: DISC
414>415: '0.0d0
416>417: known combination v411 v413 v415
418>     if v417 c419 c420
end stack:
successors c419 c420

IR1 block 208 start c420
start stack:
420>421: < {GLOBAL-FUNCTION}
422>423: + {GLOBAL-FUNCTION}
424>425: B
426>427: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
428>429: DISC
430>431: known combination v427 v429
432>433: known combination v423 v425 v431
434>435: '0.0d0
436>437: known combination v421 v433 v435
438>     if v437 c419 c439
end stack:
successors c439 c419

IR1 block 209 start c439
start stack:
439>440: SB-C::CLAMBDA (LET ((#:G1711
                              (SB-KERNEL:%INSTANCE-LAYOUT "#<...>" . "#<...>")))
                         )
441>442: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
443>444: SCENE
445>446: '0
447>448: known combination v442 v444 v446
449>     local combination v440 v448
450>     bind SB-C::CLAMBDA (LET ((#:G1711
                                   (SB-KERNEL:%INSTANCE-LAYOUT "#<...>"
                                                               . "#<...>")))
                              ) :KIND :LET
451>452: EQ {GLOBAL-FUNCTION}
453>454: #:G1711
455>456: '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>
457>458: known combination v452 v454 v456
459>     if v458 c460 c461
end stack:
successors c461 c460

IR1 block 210 start c461
start stack:
461>462: > {GLOBAL-FUNCTION}
463>464: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
465>466: #:G1711
467>468: '12
469>470: known combination v464 v466 v468
471>472: '3
473>474: known combination v462 v470 v472
475>     if v474 c476 c477
end stack:
successors c477 c476

IR1 block 212 start c476
start stack:
476>478: EQ {GLOBAL-FUNCTION}
479>480: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
481>482: #:G1711
483>484: '11
485>486: known combination v480 v482 v484
487>488: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
489>490: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1713))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE SIMPLE-VECTOR>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119C3BC1}> {1197DCF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119C3BA1}> {1197DCB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1713
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119C3B81}> {1197DC79}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1197EE11}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1714
                                  #:N-COUNT-1715) {1197DE41}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1713) {11938461}> {11956D79}>)
491>     known combination v488 v490
492>493: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
494>495: '3
496>497: known combination v493 v486 v495
498>499: '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>
500>501: known combination v478 v497 v499
502>     if v501 c460 c477
end stack:
successors c460 c477

IR1 block 213 start c460
start stack:
460>     entry NIL
503>504: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
505>506: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA (#:G1140))
             :KIND :ZOMBIE
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS (#:G1140) {119FC999}>)
507>     known combination v504 v506
508>509: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
510>511: SCENE
512>513: '2
514>515: known combination v509 v511 v513
end stack:
successors c516

IR1 block 214 start c516
start stack:
516>     entry NIL
517>518: SB-C::CLAMBDA (LET ((#:INDEX1598 #:G1597))
                         )
519>     local combination v518 v515
520>     bind SB-C::CLAMBDA (LET ((#:INDEX1598 #:G1597))
                              ) :KIND :LET
end stack:
successors c521

IR1 block 215 start c521
start stack:
521>     entry NIL
end stack:
successors c522

IR1 block 218 start c522
start stack:
522>523: #:INDEX1598
524>     if v523 c525 c526
end stack:
successors c526 c525

IR1 block 216 start c525
start stack:
525>     entry NIL
527>528: CAR {GLOBAL-FUNCTION}
529>530: #:INDEX1598
531>532: known combination v528 v530
533>534: SB-C::CLAMBDA (LET ((SB-IMPL::PRED-VALUE
                              (FUNCALL "#<...>" . "#<...>")))
                         )
535>536: SB-C::CLAMBDA (LABELS AUX)
537>538: local combination v536 v532
539>     local combination v534 v538
540>     bind SB-C::CLAMBDA (LET ((SB-IMPL::PRED-VALUE
                                   (FUNCALL "#<...>" . "#<...>")))
                              ) :KIND :LET
541>542: SB-IMPL::PRED-VALUE
543>     if v542 c544 c545
end stack:
successors c545 c544

IR1 block 220 start c544
start stack:
544>546: SB-IMPL::PRED-VALUE
end stack:
successors c547

IR1 block 217 start c545
start stack:
545>548: CDR {GLOBAL-FUNCTION}
549>550: #:INDEX1598
551>552: known combination v548 v550
553>554: cast v552 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
555>     set #:INDEX1598 v554
end stack:
successors c522

IR1 block 219 start c526
start stack:
526>546: 'NIL
end stack:
successors c547

IR1 block 211 start c477
start stack:
477>546: 'T
end stack:
successors c547

IR1 block 206 start c419
start stack:
419>546: 'NIL
end stack:
successors c547

IR1 block 207 start c547
start stack:
547>     return v546 SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c556

IR1 block 57 start c557
start stack:
557>     bind SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c558

IR1 block 58 start c558
start stack:
558>     entry NIL
559>560: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
561>562: SCENE
563>564: cast v562 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:STRUCTURE-CLASSOID SPHERE>]
565>566: '1
567>568: known combination v560 v564 v566
569>570: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
571>572: SB-C::CLAMBDA RAY-SPHERE
573>574: ORIG
575>576: DIR
577>578: SB-KERNEL:%RAW-INSTANCE-REF/DOUBLE {GLOBAL-FUNCTION}
579>580: SCENE
581>582: '0
583>584: known combination v578 v580 v582
585>586: cast v574 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                          DOUBLE-FLOAT
                                                                          (3))>]
587>588: cast v576 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                          DOUBLE-FLOAT
                                                                          (3))>]
589>590: cast v568 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                          DOUBLE-FLOAT
                                                                          (3))>]
591>     local combination v572 v586 v588 v590 v584
592>     bind SB-C::CLAMBDA RAY-SPHERE :KIND :LET
end stack:
successors c593

IR1 block 59 start c593
start stack:
593>     entry NIL
end stack:
successors c594

IR1 block 60 start c594
start stack:
594>     entry NIL
595>596: - {GLOBAL-FUNCTION}
end stack:
successors c597

IR1 block 61 start c597
start stack:
597>     entry NIL
598>599: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
600>601: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1390))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E1531}> {119A5061}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E1511}> {119A5021}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1390
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119E14F1}> {119A4FE1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A5249}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1391
                                  #:N-COUNT-1392) {119A51A9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1390) {119451D1}> {11967D81}>)
602>     known combination v599 v601
603>604: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
605>606: CENTER
607>608: '0
609>610: known combination v604 v606 v608
end stack:
successors c611

IR1 block 62 start c611
start stack:
611>     entry NIL
612>613: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
614>615: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1393))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E0EB1}> {119A48C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E0E91}> {119A4881}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1393
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119E0E71}> {119A4841}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A4AA9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1394
                                  #:N-COUNT-1395) {119A4A09}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1393) {11944F99}> {11967A91}>)
616>     known combination v613 v615
617>618: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
619>620: ORIG
621>622: '0
623>624: known combination v618 v620 v622
end stack:
successors c625

IR1 block 63 start c625
start stack:
625>626: known combination v596 v610 v624
627>628: - {GLOBAL-FUNCTION}
end stack:
successors c629

IR1 block 64 start c629
start stack:
629>     entry NIL
630>631: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
632>633: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1396))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E0BF1}> {119A42B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E0BD1}> {119A4271}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1396
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119E0BB1}> {119A4231}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A4499}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1397
                                  #:N-COUNT-1398) {119A43F9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1396) {11944D61}> {119677F9}>)
634>     known combination v631 v633
635>636: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
637>638: CENTER
639>640: '1
641>642: known combination v636 v638 v640
end stack:
successors c643

IR1 block 65 start c643
start stack:
643>     entry NIL
644>645: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
646>647: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1399))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E0681}> {119A3B69}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E0661}> {119A3B29}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1399
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119E0641}> {119A3AE9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A3D51}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1400
                                  #:N-COUNT-1401) {119A3CB1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1399) {11944B29}> {11967509}>)
648>     known combination v645 v647
649>650: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
651>652: ORIG
653>654: '1
655>656: known combination v650 v652 v654
end stack:
successors c657

IR1 block 66 start c657
start stack:
657>658: known combination v628 v642 v656
659>660: - {GLOBAL-FUNCTION}
end stack:
successors c661

IR1 block 67 start c661
start stack:
661>     entry NIL
662>663: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
664>665: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1402))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E03C1}> {119A3559}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119E03A1}> {119A3519}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1402
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119E0381}> {119A34D9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A3741}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1403
                                  #:N-COUNT-1404) {119A36A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1402) {119448F1}> {11967271}>)
666>     known combination v663 v665
667>668: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
669>670: CENTER
671>672: '2
673>674: known combination v668 v670 v672
end stack:
successors c675

IR1 block 68 start c675
start stack:
675>     entry NIL
676>677: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
678>679: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1405))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DFE89}> {119A2E51}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DFE69}> {119A2E11}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1405
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DFE49}> {119A2DD1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A3039}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1406
                                  #:N-COUNT-1407) {119A2F99}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1405) {119446B9}> {11966F81}>)
680>     known combination v677 v679
681>682: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
683>684: ORIG
685>686: '2
687>688: known combination v682 v684 v686
end stack:
successors c689

IR1 block 69 start c689
start stack:
689>690: known combination v660 v674 v688
end stack:
successors c691

IR1 block 70 start c691
start stack:
691>     entry NIL
692>693: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
694>695: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
696>697: '214
698>699: '3
700>701: '6
702>703: known combination v695 v697 v699 v701
704>     local combination v693 v703
705>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
706>707: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
708>709: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1408))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11A31D61}> {119F6CB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11A31D81}> {119F6CF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1408
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {11A31DA1}> {119F6D39}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119BE601}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1409
                                  #:N-COUNT-1410) {119BE579}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1408) {119BDE71}> {119791E9}>)
710>     known combination v707 v709
711>712: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
713>714: #:G1
715>716: '0
717>     known combination v712 v714 v716 v626
718>719: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
720>721: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1411))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11A31879}> {119F6919}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {11A31899}> {119F6959}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1411 ..>)>)
                                                     IR1 block 71 start c722
                                                     start stack:
                                                     722>723: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                             ((SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)
                                                                              (SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)))
                                                     end stack:
                                                     successors c724

IR1 block 72 start c724
start stack:
724>     entry NIL
725>726: + {GLOBAL-FUNCTION}
727>728: + {GLOBAL-FUNCTION}
729>730: * {GLOBAL-FUNCTION}
end stack:
successors c731

IR1 block 73 start c731
start stack:
731>     entry NIL
732>733: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
734>735: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1417))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DFA51}> {119A2789}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DFA31}> {119A2749}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1417
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DFA11}> {119A2709}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A2971}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1418
                                  #:N-COUNT-1419) {119A28D1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1417) {11944481}> {11966C91}>)
736>     known combination v733 v735
737>738: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
739>740: #:G1
741>742: '0
743>744: known combination v738 v740 v742
end stack:
successors c745

IR1 block 74 start c745
start stack:
745>     entry NIL
746>747: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
748>749: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1420))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DF4B9}> {119A2031}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DF499}> {119A1FF1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1420
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DF479}> {119A1FB1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A2219}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1421
                                  #:N-COUNT-1422) {119A2179}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1420) {11944249}> {119669A1}>)
750>     known combination v747 v749
751>752: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
753>754: DIR
755>756: '0
757>758: known combination v752 v754 v756
end stack:
successors c759

IR1 block 75 start c759
start stack:
759>760: known combination v730 v744 v758
761>762: * {GLOBAL-FUNCTION}
end stack:
successors c763

IR1 block 76 start c763
start stack:
763>     entry NIL
764>765: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
766>767: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1423))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DF1F9}> {119A1A11}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DF1D9}> {119A19D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1423
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DF1B9}> {119A1991}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A1BF9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1424
                                  #:N-COUNT-1425) {119A1B59}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1423) {11944011}> {11966709}>)
768>     known combination v765 v767
769>770: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
771>772: #:G1
773>774: '1
775>776: known combination v770 v772 v774
end stack:
successors c777

IR1 block 77 start c777
start stack:
777>     entry NIL
778>779: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
780>781: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1426))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DEC39}> {119A12B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DEC19}> {119A1279}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1426
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DEBF9}> {119A1239}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {119A14A1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1427
                                  #:N-COUNT-1428) {119A1401}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1426) {11943DD9}> {11966419}>)
782>     known combination v779 v781
783>784: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
785>786: DIR
787>788: '1
789>790: known combination v784 v786 v788
end stack:
successors c791

IR1 block 78 start c791
start stack:
791>792: known combination v762 v776 v790
793>794: known combination v728 v760 v792
795>796: * {GLOBAL-FUNCTION}
end stack:
successors c797

IR1 block 79 start c797
start stack:
797>     entry NIL
798>799: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
800>801: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1429))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DE979}> {1199DC99}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DE959}> {1199DC59}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1429
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DE939}> {1199DC19}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1199DE81}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1430
                                  #:N-COUNT-1431) {1199DDE1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1429) {11943BA1}> {11966181}>)
802>     known combination v799 v801
803>804: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
805>806: #:G1
807>808: '2
809>810: known combination v804 v806 v808
end stack:
successors c811

IR1 block 80 start c811
start stack:
811>     entry NIL
812>813: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
814>815: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1432))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DE399}> {1199D541}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DE379}> {1199D501}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1432
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DE359}> {1199D4C1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1199D729}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1433
                                  #:N-COUNT-1434) {1199D689}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1432) {11943969}> {11965E91}>)
816>     known combination v813 v815
817>818: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
819>820: DIR
821>822: '2
823>824: known combination v818 v820 v822
end stack:
successors c825

IR1 block 81 start c825
start stack:
825>826: known combination v796 v810 v824
827>828: known combination v726 v794 v826
end stack:
successors c829

IR1 block 82 start c829
start stack:
829>     local combination v723 v828
830>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
831>832: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
833>834: + {GLOBAL-FUNCTION}
835>836: - {GLOBAL-FUNCTION}
837>838: * {GLOBAL-FUNCTION}
839>840: B
841>842: B
843>844: known combination v838 v840 v842
end stack:
successors c845

IR1 block 83 start c845
start stack:
845>     entry NIL
846>847: + {GLOBAL-FUNCTION}
848>849: + {GLOBAL-FUNCTION}
850>851: * {GLOBAL-FUNCTION}
end stack:
successors c852

IR1 block 84 start c852
start stack:
852>     entry NIL
853>854: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
855>856: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1435))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DDDB9}> {1199CE09}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DDD99}> {1199CDC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1435
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DDD79}> {1199CD89}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1199D001}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1436
                                  #:N-COUNT-1437) {1199CF51}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1435) {11943731}> {11965BA1}>)
857>     known combination v854 v856
858>859: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
860>861: #:G1
862>863: '0
864>865: known combination v859 v861 v863
end stack:
successors c866

IR1 block 85 start c866
start stack:
866>     entry NIL
867>868: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
869>870: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1438))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DD731}> {1199C649}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DD711}> {1199C609}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1438
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DD6F1}> {1199C5C9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1199C831}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1439
                                  #:N-COUNT-1440) {1199C791}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1438) {119434F9}> {119658B1}>)
871>     known combination v868 v870
872>873: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
874>875: #:G1
876>877: '0
878>879: known combination v873 v875 v877
end stack:
successors c880

IR1 block 86 start c880
start stack:
880>881: known combination v851 v865 v879
882>883: * {GLOBAL-FUNCTION}
end stack:
successors c884

IR1 block 87 start c884
start stack:
884>     entry NIL
885>886: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
887>888: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1441))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DD471}> {1199C019}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DD451}> {1199BFD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1441
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DD431}> {1199BF99}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1199C201}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1442
                                  #:N-COUNT-1443) {1199C161}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1441) {119432C1}> {11965619}>)
889>     known combination v886 v888
890>891: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
892>893: #:G1
894>895: '1
896>897: known combination v891 v893 v895
end stack:
successors c898

IR1 block 88 start c898
start stack:
898>     entry NIL
899>900: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
901>902: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1444))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DCE71}> {1199B8B1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DCE51}> {1199B871}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1444
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DCE31}> {1199B831}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1199BA99}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1445
                                  #:N-COUNT-1446) {1199B9F9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1444) {11943089}> {11965329}>)
903>     known combination v900 v902
904>905: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
906>907: #:G1
908>909: '1
910>911: known combination v905 v907 v909
end stack:
successors c912

IR1 block 89 start c912
start stack:
912>913: known combination v883 v897 v911
914>915: known combination v849 v881 v913
916>917: * {GLOBAL-FUNCTION}
end stack:
successors c918

IR1 block 90 start c918
start stack:
918>     entry NIL
919>920: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
921>922: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1447))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DCBB1}> {1199B281}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DCB91}> {1199B241}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1447
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DCB71}> {1199B201}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1199B469}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1448
                                  #:N-COUNT-1449) {1199B3C9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1447) {11942E51}> {11965091}>)
923>     known combination v920 v922
924>925: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
926>927: #:G1
928>929: '2
930>931: known combination v925 v927 v929
end stack:
successors c932

IR1 block 91 start c932
start stack:
932>     entry NIL
933>934: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
935>936: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1450))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DC591}> {1199AB19}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {119DC571}> {1199AAD9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1450
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {119DC551}> {1199AA99}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1199AD01}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1451
                                  #:N-COUNT-1452) {1199AC61}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1450) {11942C19}> {11964DA1}>)
937>     known combination v934 v936
938>939: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
940>941: #:G1
942>943: '2
944>945: known combination v939 v941 v943
end stack:
successors c946

IR1 block 92 start c946
start stack:
946>947: known combination v917 v931 v945
948>949: known combination v847 v915 v947
end stack:
successors c950

IR1 block 93 start c950
start stack:
950>951: known combination v836 v844 v949
952>953: * {GLOBAL-FUNCTION}
954>955: RADIUS
956>957: RADIUS
958>959: known combination v953 v955 v957
960>961: known combination v834 v951 v959
962>     local combination v832 v961
963>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
964>965: < {GLOBAL-FUNCTION}
966>967: DISC
968>969: '0.0d0
970>971: known combination v965 v967 v969
972>     if v971 c973 c974
end stack:
successors c973 c974

IR1 block 164 start c974
start stack:
974>975: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                        ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
976>977: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
978>979: DISC
980>981: known combination v977 v979
982>     local combination v975 v981
983>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
984>985: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                        ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
986>987: + {GLOBAL-FUNCTION}
988>989: B
990>991: DISC
992>993: known combination v987 v989 v991
994>     local combination v985 v993
995>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
996>997: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
998>999: - {GLOBAL-FUNCTION}
1000>1001: B
1002>1003: DISC
1004>1005: known combination v999 v1001 v1003
1006>     local combination v997 v1005
1007>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                              ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
1008>1009: < {GLOBAL-FUNCTION}
1010>1011: T2
1012>1013: '0.0d0
1014>1015: known combination v1009 v1011 v1013
1016>     if v1015 c1017 c1018
end stack:
successors c1017 c1018

IR1 block 166 start c1018
start stack:
1018>1019: > {GLOBAL-FUNCTION}
1020>1021: T1
1022>1023: '0.0d0
1024>1025: known combination v1019 v1021 v1023
1026>     if v1025 c1027 c1028
end stack:
successors c1028 c1027

IR1 block 168 start c1027
start stack:
1027>1029: T1
end stack:
successors c1030

IR1 block 167 start c1028
start stack:
1028>1029: T2
end stack:
successors c1030

IR1 block 165 start c1017
start stack:
1017>1029: '1.7976931348623157d308
end stack:
successors c1030

IR1 block 94 start c973
start stack:
973>1029: '1.7976931348623157d308
end stack:
successors c1030

IR1 block 95 start c1030
start stack:
1030>     local combination v570 v1029
1031>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                              ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
1032>1033: < {GLOBAL-FUNCTION}
1034>1035: LAMT
1036>1037: LAM
1038>1039: known combination v1033 v1035 v1037
1040>     if v1039 c1041 c1042
end stack:
successors c1041 c1042

IR1 block 163 start c1042
start stack:
1042>1043: VALUES {GLOBAL-FUNCTION}
1044>1045: LAM
1046>1047: NORMAL
1048>1049: known combination v1043 v1045 v1047
end stack:
successors c1050

IR1 block 96 start c1041
start stack:
1041>1051: SB-C::CLAMBDA (LET ((#:G1712
                                (SB-KERNEL:%INSTANCE-LAYOUT "#<...>"
                                                            . "#<...>")))
                           )
1052>1053: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
1054>1055: SCENE
1056>1057: '0
1058>1059: known combination v1053 v1055 v1057
1060>     local combination v1051 v1059
1061>     bind SB-C::CLAMBDA (LET ((#:G1712
                                    (SB-KERNEL:%INSTANCE-LAYOUT "#<...>"
                                                                . "#<...>")))
                               ) :KIND :LET
1062>1063: EQ {GLOBAL-FUNCTION}
1064>1065: #:G1712
1066>1067: '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>
1068>1069: known combination v1063 v1065 v1067
1070>     if v1069 c1071 c1072
end stack:
successors c1072 c1071

IR1 block 97 start c1072
start stack:
1072>1073: > {GLOBAL-FUNCTION}
1074>1075: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
1076>1077: #:G1712
1078>1079: '12
1080>1081: known combination v1075 v1077 v1079
1082>1083: '3
1084>1085: known combination v1073 v1081 v1083
1086>     if v1085 c1087 c1088
end stack:
successors c1088 c1087

IR1 block 156 start c1087
start stack:
1087>1089: EQ {GLOBAL-FUNCTION}
1090>1091: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
1092>1093: #:G1712
1094>1095: '11
1096>1097: known combination v1091 v1093 v1095
1098>1099: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1100>1101: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1716))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE SIMPLE-VECTOR>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {118FF9F1}> {118FA8F1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {118FFA11}> {118FA931}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1716
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {118FFA31}> {118FA971}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {118FA9C1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1717
                                    #:N-COUNT-1718) {118F8441}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1716) {118F84C9}> {118F2EC9}>)
1102>     known combination v1099 v1101
1103>1104: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1105>1106: '3
1107>1108: known combination v1104 v1097 v1106
1109>1110: '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>
1111>1112: known combination v1089 v1108 v1110
1113>     if v1112 c1071 c1088
end stack:
successors c1071 c1088

IR1 block 157 start c1071
start stack:
1071>     entry NIL
1114>1115: SB-C::CLAMBDA (LET ((#:N-LIST1146
                                (GROUP-CHILDREN "#<...>" . "#<...>")))
                           )
1116>1117: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
1118>1119: SCENE
1120>1121: '2
1122>1123: known combination v1117 v1119 v1121
1124>     local combination v1115 v1123
1125>     bind SB-C::CLAMBDA (LET ((#:N-LIST1146
                                    (GROUP-CHILDREN "#<...>" . "#<...>")))
                               ) :KIND :LET
end stack:
successors c1126

IR1 block 158 start c1126
start stack:
1126>     entry NIL
end stack:
successors c1127

IR1 block 161 start c1127
start stack:
1127>1128: #:N-LIST1146
1129>1130: cast v1128 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
1131>     if v1130 c1132 c1133
end stack:
successors c1133 c1132

IR1 block 159 start c1132
start stack:
1132>1134: CAR {GLOBAL-FUNCTION}
1135>1136: #:N-LIST1146
1137>1138: known combination v1134 v1136
1139>1140: CDR {GLOBAL-FUNCTION}
1141>1142: #:N-LIST1146
1143>1144: known combination v1140 v1142
1145>     set #:N-LIST1146 v1144
end stack:
successors c1146

IR1 block 160 start c1146
start stack:
1146>     entry NIL
1147>1148: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1149>1150: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (#:G1148) (#:G1149) &REST #:G1150))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1148
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A43549}> {11A1BA19}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1149
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A43529}> {11A1B9B9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1150
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11A43509}> {11A1B979}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :MV-LET
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (#:G1148 #:G1149) {119A7301}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (#:G1148 #:G1149 #:N-CONTEXT-1151
                                    #:N-COUNT-1152) {119A7279}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (#:G1148 #:G1149
                                    #:G1150) {119A5A69}> {119E1C31}>)
1151>     known combination v1148 v1150
1152>1153: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                          (LAMBDA
                              (&OPTIONAL ("#<...>" . "#<...>")
                               "#<...>" . "#<...>")))
1154>1155: SB-C::CLAMBDA (LABELS AUX)
1156>1157: LAM
1158>1159: NORMAL
1160>1161: local combination v1155 v1157 v1159 v1138
1162>     local mv-combination v1153 v1161
1163>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                              (LAMBDA
                                  (&OPTIONAL ("#<...>" . "#<...>")
                                   "#<...>" . "#<...>"))) :KIND :MV-LET
1164>1165: #:G1148
1166>     set LAM v1165
1167>1168: #:G1149
1169>     set NORMAL v1168
end stack:
successors c1127

IR1 block 162 start c1133
start stack:
1133>1170: VALUES {GLOBAL-FUNCTION}
1171>1172: LAM
1173>1174: NORMAL
1175>1049: known combination v1170 v1172 v1174
end stack:
successors c1050

IR1 block 98 start c1088
start stack:
1088>1176: VALUES {GLOBAL-FUNCTION}
1177>1178: LAMT
end stack:
successors c1179

IR1 block 99 start c1179
start stack:
1179>     entry NIL
1180>1181: * {GLOBAL-FUNCTION}
1182>1183: LAMT
1184>1185: DIR
end stack:
successors c1186

IR1 block 100 start c1186
start stack:
1186>     entry NIL
1187>1188: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1189>1190: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1489))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D8CB9}> {11996339}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D8C99}> {119962F9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1489
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D8C79}> {119962B9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11996521}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1490
                                    #:N-COUNT-1491) {11996481}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1489) {11941699}> {119630F1}>)
1191>     known combination v1188 v1190
1192>1193: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1194>1195: '0
1196>1197: known combination v1193 v1185 v1195
end stack:
successors c1198

IR1 block 101 start c1198
start stack:
1198>1199: known combination v1181 v1183 v1197
1200>1201: * {GLOBAL-FUNCTION}
1202>1203: LAMT
1204>1205: DIR
end stack:
successors c1206

IR1 block 102 start c1206
start stack:
1206>     entry NIL
1207>1208: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1209>1210: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1492))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D8A89}> {11995F51}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D8A69}> {11995F11}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1492
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D8A49}> {11995ED1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11996139}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1493
                                    #:N-COUNT-1494) {11996099}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1492) {119414B9}> {11962EF9}>)
1211>     known combination v1208 v1210
1212>1213: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1214>1215: '1
1216>1217: known combination v1213 v1205 v1215
end stack:
successors c1218

IR1 block 103 start c1218
start stack:
1218>1219: known combination v1201 v1203 v1217
1220>1221: * {GLOBAL-FUNCTION}
1222>1223: LAMT
1224>1225: DIR
end stack:
successors c1226

IR1 block 104 start c1226
start stack:
1226>     entry NIL
1227>1228: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1229>1230: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1495))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D87D1}> {119958E9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D87B1}> {119958A9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1495
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D8791}> {11995869}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11995AD1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1496
                                    #:N-COUNT-1497) {11995A31}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1495) {11941281}> {11962C51}>)
1231>     known combination v1228 v1230
1232>1233: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1234>1235: '2
1236>1237: known combination v1233 v1225 v1235
end stack:
successors c1238

IR1 block 105 start c1238
start stack:
1238>1239: known combination v1221 v1223 v1237
end stack:
successors c1240

IR1 block 106 start c1240
start stack:
1240>     entry NIL
1241>1242: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1243>1244: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1245>1246: '214
1247>1248: '3
1249>1250: '6
1251>1252: known combination v1244 v1246 v1248 v1250
1253>     local combination v1242 v1252
1254>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1255>1256: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1257>1258: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1498))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2C6A9}> {119F11B1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2C6C9}> {119F11F1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1498
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11A2C6E9}> {119F1231}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119B9DC1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1499
                                    #:N-COUNT-1500) {119B9D39}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1498) {119B9519}> {11975781}>)
1259>     known combination v1256 v1258
1260>1261: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1262>1263: #:G1
1264>1265: '0
1266>     known combination v1261 v1263 v1265 v1199
1267>1268: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1269>1270: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1501))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2C049}> {119F0D81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2C069}> {119F0DC1}> ..)>)
                                                                                    IR1 block 107 start c1271
                                                                                    start stack:
                                                                                    1271>     entry NIL
                                                                                    1272>1273: + {GLOBAL-FUNCTION}
                                                                                    1274>1275: ORIG
                                                                                    end stack:
                                                                                    successors c1276

IR1 block 108 start c1276
start stack:
1276>     entry NIL
1277>1278: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1279>1280: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1507))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D7F41}> {119950A9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D7F21}> {11995069}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1507
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D7F01}> {11995029}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11995291}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1508
                                    #:N-COUNT-1509) {119951F1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1507) {11941049}> {119628F9}>)
1281>     known combination v1278 v1280
1282>1283: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1284>1285: '0
1286>1287: known combination v1283 v1275 v1285
end stack:
successors c1288

IR1 block 109 start c1288
start stack:
1288>     entry NIL
1289>1290: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1291>1292: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1510))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D7981}> {11994921}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D7961}> {119948E1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1510
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D7941}> {119948A1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11994B09}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1511
                                    #:N-COUNT-1512) {11994A69}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1510) {11940E11}> {119625E1}>)
1293>     known combination v1290 v1292
1294>1295: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1296>1297: #:G1
1298>1299: '0
1300>1301: known combination v1295 v1297 v1299
end stack:
successors c1302

IR1 block 110 start c1302
start stack:
1302>1303: known combination v1273 v1287 v1301
1304>1305: + {GLOBAL-FUNCTION}
1306>1307: ORIG
end stack:
successors c1308

IR1 block 111 start c1308
start stack:
1308>     entry NIL
1309>1310: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1311>1312: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1513))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D7699}> {11994279}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D7679}> {11994239}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1513
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D7659}> {119941F9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11994461}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1514
                                    #:N-COUNT-1515) {119943C1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1513) {11940BD9}> {11962339}>)
1313>     known combination v1310 v1312
1314>1315: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1316>1317: '1
1318>1319: known combination v1315 v1307 v1317
end stack:
successors c1320

IR1 block 112 start c1320
start stack:
1320>     entry NIL
1321>1322: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1323>1324: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1516))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D70C9}> {11993AE9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D70A9}> {11993AA9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1516
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D7089}> {11993A69}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11993CD1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1517
                                    #:N-COUNT-1518) {11993C31}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1516) {119409A1}> {11961FF1}>)
1325>     known combination v1322 v1324
1326>1327: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1328>1329: #:G1
1330>1331: '1
1332>1333: known combination v1327 v1329 v1331
end stack:
successors c1334

IR1 block 113 start c1334
start stack:
1334>1335: known combination v1305 v1319 v1333
1336>1337: + {GLOBAL-FUNCTION}
1338>1339: ORIG
end stack:
successors c1340

IR1 block 114 start c1340
start stack:
1340>     entry NIL
1341>1342: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1343>1344: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1519))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D6DE1}> {11993441}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D6DC1}> {11993401}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1519
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D6DA1}> {119933C1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11993629}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1520
                                    #:N-COUNT-1521) {11993589}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1519) {11940769}> {11961D49}>)
1345>     known combination v1342 v1344
1346>1347: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1348>1349: '2
1350>1351: known combination v1347 v1339 v1349
end stack:
successors c1352

IR1 block 115 start c1352
start stack:
1352>     entry NIL
1353>1354: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1355>1356: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1522))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D6861}> {11992CF9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D6841}> {11992CB9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1522
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D6821}> {11992C79}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11992EE1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1523
                                    #:N-COUNT-1524) {11992E41}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1522) {11940531}> {11961A31}>)
1357>     known combination v1354 v1356
1358>1359: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1360>1361: #:G1
1362>1363: '2
1364>1365: known combination v1359 v1361 v1363
end stack:
successors c1366

IR1 block 116 start c1366
start stack:
1366>1367: known combination v1337 v1351 v1365
end stack:
successors c1368

IR1 block 117 start c1368
start stack:
1368>     entry NIL
1369>1370: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1371>1372: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1373>1374: '214
1375>1376: '3
1377>1378: '6
1379>1380: known combination v1372 v1374 v1376 v1378
1381>     local combination v1370 v1380
1382>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1383>1384: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1385>1386: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1525))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2A729}> {119EF8A9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2A749}> {119EF8E9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1525
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11A2A769}> {119EF929}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119B7F19}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1526
                                    #:N-COUNT-1527) {119B7E91}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1525) {119B7671}> {11974301}>)
1387>     known combination v1384 v1386
1388>1389: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1390>1391: #:G1
1392>1393: '0
1394>     known combination v1389 v1391 v1393 v1303
1395>1396: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1397>1398: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1528))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2A0C9}> {119EF479}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2A0E9}> {119EF4B9}> ..)>)
                                                                                    IR1 block 118 start c1399
                                                                                    start stack:
                                                                                    1399>     entry NIL
                                                                                    1400>1401: - {GLOBAL-FUNCTION}
                                                                                    end stack:
                                                                                    successors c1402

IR1 block 119 start c1402
start stack:
1402>     entry NIL
1403>1404: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1405>1406: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1534))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D60C1}> {11992509}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D60A1}> {119924C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1534
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D6081}> {11992489}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119926F1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1535
                                    #:N-COUNT-1536) {11992651}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1534) {119402F9}> {119616D9}>)
1407>     known combination v1404 v1406
1408>1409: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1410>1411: #:G1
1412>1413: '0
1414>1415: known combination v1409 v1411 v1413
end stack:
successors c1416

IR1 block 120 start c1416
start stack:
1416>1417: CENTER
end stack:
successors c1418

IR1 block 121 start c1418
start stack:
1418>     entry NIL
1419>1420: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1421>1422: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1537))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D5AB1}> {11991D19}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D5A91}> {11991CD9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1537
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D5A71}> {11991C99}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11991F01}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1538
                                    #:N-COUNT-1539) {11991E61}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1537) {119400C1}> {119613D9}>)
1423>     known combination v1420 v1422
1424>1425: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1426>1427: '0
1428>1429: known combination v1425 v1417 v1427
end stack:
successors c1430

IR1 block 122 start c1430
start stack:
1430>1431: known combination v1401 v1415 v1429
1432>1433: - {GLOBAL-FUNCTION}
end stack:
successors c1434

IR1 block 123 start c1434
start stack:
1434>     entry NIL
1435>1436: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1437>1438: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1540))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D5549}> {11991599}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D5529}> {11991559}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1540
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D5509}> {11991519}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11991781}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1541
                                    #:N-COUNT-1542) {119916E1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1540) {1193FE89}> {119610C1}>)
1439>     known combination v1436 v1438
1440>1441: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1442>1443: #:G1
1444>1445: '1
1446>1447: known combination v1441 v1443 v1445
end stack:
successors c1448

IR1 block 124 start c1448
start stack:
1448>1449: CENTER
end stack:
successors c1450

IR1 block 125 start c1450
start stack:
1450>     entry NIL
1451>1452: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1453>1454: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1543))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D4F49}> {11990DA9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D4F29}> {11990D69}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1543
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D4F09}> {11990D29}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11990F91}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1544
                                    #:N-COUNT-1545) {11990EF1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1543) {1193FC51}> {11960DB1}>)
1455>     known combination v1452 v1454
1456>1457: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1458>1459: '1
1460>1461: known combination v1457 v1449 v1459
end stack:
successors c1462

IR1 block 126 start c1462
start stack:
1462>1463: known combination v1433 v1447 v1461
1464>1465: - {GLOBAL-FUNCTION}
end stack:
successors c1466

IR1 block 127 start c1466
start stack:
1466>     entry NIL
1467>1468: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1469>1470: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1546))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D49E1}> {11990629}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D49C1}> {119905E9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1546
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D49A1}> {119905A9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11990811}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1547
                                    #:N-COUNT-1548) {11990771}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1546) {1193FA19}> {11960A99}>)
1471>     known combination v1468 v1470
1472>1473: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1474>1475: #:G1
1476>1477: '2
1478>1479: known combination v1473 v1475 v1477
end stack:
successors c1480

IR1 block 128 start c1480
start stack:
1480>1481: CENTER
end stack:
successors c1482

IR1 block 129 start c1482
start stack:
1482>     entry NIL
1483>1484: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1485>1486: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1549))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D42F1}> {1198FE39}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D42D1}> {1198FDF9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1549
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D42B1}> {1198FDB9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11990021}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1550
                                    #:N-COUNT-1551) {1198FF81}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1549) {1193F7E1}> {11960759}>)
1487>     known combination v1484 v1486
1488>1489: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1490>1491: '2
1492>1493: known combination v1489 v1481 v1491
end stack:
successors c1494

IR1 block 130 start c1494
start stack:
1494>1495: known combination v1465 v1479 v1493
end stack:
successors c1496

IR1 block 131 start c1496
start stack:
1496>     entry NIL
1497>1498: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1499>1500: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1501>1502: '214
1503>1504: '3
1505>1506: '6
1507>1508: known combination v1500 v1502 v1504 v1506
1509>     local combination v1498 v1508
1510>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1511>1512: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1513>1514: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1552))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A26779}> {119EDF79}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A26799}> {119EDFB9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1552
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11A267B9}> {119EDFF9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119B60B9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1553
                                    #:N-COUNT-1554) {119B6031}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1552) {119B5811}> {11972ED9}>)
1515>     known combination v1512 v1514
1516>1517: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1518>1519: #:G1
1520>1521: '0
1522>     known combination v1517 v1519 v1521 v1431
1523>1524: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1525>1526: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1555))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A26119}> {119EDB49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A26139}> {119EDB89}> ..)>)
                                                                                    IR1 block 132 start c1527
                                                                                    start stack:
                                                                                    1527>     entry NIL
                                                                                    1528>1529: SB-C::CLAMBDA (SB-C::LOCAL-INLINE
                                                                                                              *V)
                                                                                    1530>1531: / {GLOBAL-FUNCTION}
                                                                                    1532>1533: '1.0d0
                                                                                    end stack:
                                                                                    successors c1534

IR1 block 133 start c1534
start stack:
1534>     entry NIL
end stack:
successors c1535

IR1 block 134 start c1535
start stack:
1535>     entry NIL
1536>1537: + {GLOBAL-FUNCTION}
1538>1539: + {GLOBAL-FUNCTION}
1540>1541: * {GLOBAL-FUNCTION}
end stack:
successors c1542

IR1 block 135 start c1542
start stack:
1542>     entry NIL
1543>1544: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1545>1546: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1453))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DBF81}> {1199A3E1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DBF61}> {1199A3A1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1453
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119DBF41}> {1199A361}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1199A5C9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1454
                                    #:N-COUNT-1455) {1199A529}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1453) {119429E1}> {11964AB1}>)
1547>     known combination v1544 v1546
1548>1549: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1550>1551: #:G1
1552>1553: '0
1554>1555: known combination v1549 v1551 v1553
end stack:
successors c1556

IR1 block 136 start c1556
start stack:
1556>     entry NIL
1557>1558: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1559>1560: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1456))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DB839}> {11999B71}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DB819}> {11999B31}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1456
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119DB7F9}> {11999AF1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11999D59}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1457
                                    #:N-COUNT-1458) {11999CB9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1456) {119427A9}> {11964799}>)
1561>     known combination v1558 v1560
1562>1563: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1564>1565: #:G1
1566>1567: '0
1568>1569: known combination v1563 v1565 v1567
end stack:
successors c1570

IR1 block 137 start c1570
start stack:
1570>1571: known combination v1541 v1555 v1569
1572>1573: * {GLOBAL-FUNCTION}
end stack:
successors c1574

IR1 block 138 start c1574
start stack:
1574>     entry NIL
1575>1576: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1577>1578: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1459))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DB579}> {119994A9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DB559}> {11999469}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1459
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119DB539}> {11999429}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11999691}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1460
                                    #:N-COUNT-1461) {119995F1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1459) {11942571}> {119644D9}>)
1579>     known combination v1576 v1578
1580>1581: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1582>1583: #:G1
1584>1585: '1
1586>1587: known combination v1581 v1583 v1585
end stack:
successors c1588

IR1 block 139 start c1588
start stack:
1588>     entry NIL
1589>1590: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1591>1592: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1462))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DAEF9}> {11998CA9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DAED9}> {11998C69}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1462
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119DAEB9}> {11998C29}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11998E91}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1463
                                    #:N-COUNT-1464) {11998DF1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1462) {11942339}> {119641C1}>)
1593>     known combination v1590 v1592
1594>1595: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1596>1597: #:G1
1598>1599: '1
1600>1601: known combination v1595 v1597 v1599
end stack:
successors c1602

IR1 block 140 start c1602
start stack:
1602>1603: known combination v1573 v1587 v1601
1604>1605: known combination v1539 v1571 v1603
1606>1607: * {GLOBAL-FUNCTION}
end stack:
successors c1608

IR1 block 141 start c1608
start stack:
1608>     entry NIL
1609>1610: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1611>1612: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1465))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DA899}> {119984E9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DA879}> {119984A9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1465
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119DA859}> {11998469}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119986D1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1466
                                    #:N-COUNT-1467) {11998631}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1465) {11942101}> {11963EA9}>)
1613>     known combination v1610 v1612
1614>1615: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1616>1617: #:G1
1618>1619: '2
1620>1621: known combination v1615 v1617 v1619
end stack:
successors c1622

IR1 block 142 start c1622
start stack:
1622>     entry NIL
1623>1624: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1625>1626: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1468))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DA5F1}> {119980D1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DA5D1}> {11998091}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1468
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119DA5B1}> {11998051}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119982B9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1469
                                    #:N-COUNT-1470) {11998219}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1468) {11941F21}> {11963CB1}>)
1627>     known combination v1624 v1626
1628>1629: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1630>1631: #:G1
1632>1633: '2
1634>1635: known combination v1629 v1631 v1633
end stack:
successors c1636

IR1 block 143 start c1636
start stack:
1636>1637: known combination v1607 v1621 v1635
1638>1639: known combination v1537 v1605 v1637
end stack:
successors c1640

IR1 block 144 start c1640
start stack:
1640>1641: cast v1639 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (DOUBLE-FLOAT
                                                                               0.0d0)>]
1642>1643: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
1644>1645: known combination v1643 v1641
end stack:
successors c1646

IR1 block 145 start c1646
start stack:
1646>1647: known combination v1531 v1533 v1645
1648>     local combination v1529 v1647 <none>
1649>     bind SB-C::CLAMBDA (SB-C::LOCAL-INLINE *V) :KIND :LET
end stack:
successors c1650

IR1 block 146 start c1650
start stack:
1650>     entry NIL
1651>1652: * {GLOBAL-FUNCTION}
1653>1654: S
end stack:
successors c1655

IR1 block 147 start c1655
start stack:
1655>     entry NIL
1656>1657: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1658>1659: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1471))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DA3B9}> {11997CB9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119DA399}> {11997C79}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1471
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119DA379}> {11997C39}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11997EA1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1472
                                    #:N-COUNT-1473) {11997E01}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1471) {11941D41}> {11963AB9}>)
1660>     known combination v1657 v1659
1661>1662: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1663>1664: #:G1
1665>1666: '0
1667>1668: known combination v1662 v1664 v1666
end stack:
successors c1669

IR1 block 148 start c1669
start stack:
1669>1670: known combination v1652 v1654 v1668
1671>1672: * {GLOBAL-FUNCTION}
1673>1674: S
end stack:
successors c1675

IR1 block 149 start c1675
start stack:
1675>     entry NIL
1676>1677: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1678>1679: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1474))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D9C19}> {11997441}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D9BF9}> {11997401}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1474
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D9BD9}> {119973C1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11997629}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1475
                                    #:N-COUNT-1476) {11997589}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1474) {11941B09}> {119637A1}>)
1680>     known combination v1677 v1679
1681>1682: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1683>1684: #:G1
1685>1686: '1
1687>1688: known combination v1682 v1684 v1686
end stack:
successors c1689

IR1 block 150 start c1689
start stack:
1689>1690: known combination v1672 v1674 v1688
1691>1692: * {GLOBAL-FUNCTION}
1693>1694: S
end stack:
successors c1695

IR1 block 151 start c1695
start stack:
1695>     entry NIL
1696>1697: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1698>1699: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1477))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D9659}> {11996C59}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D9639}> {11996C19}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1477
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D9619}> {11996BD9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11996E41}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1478
                                    #:N-COUNT-1479) {11996DA1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1477) {119418D1}> {11963489}>)
1700>     known combination v1697 v1699
1701>1702: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1703>1704: #:G1
1705>1706: '2
1707>1708: known combination v1702 v1704 v1706
end stack:
successors c1709

IR1 block 152 start c1709
start stack:
1709>1710: known combination v1692 v1694 v1708
end stack:
successors c1711

IR1 block 153 start c1711
start stack:
1711>     entry NIL
1712>1713: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1714>1715: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1716>1717: '214
1718>1719: '3
1720>1721: '6
1722>1723: known combination v1715 v1717 v1719 v1721
1724>     local combination v1713 v1723
1725>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1726>1727: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1728>1729: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1480))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2DE71}> {119F23D9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2DE91}> {119F2419}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1480
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11A2DEB1}> {119F2459}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119BB391}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1481
                                    #:N-COUNT-1482) {119BB309}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1480) {119BAAD9}> {119765D1}>)
1730>     known combination v1727 v1729
1731>1732: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1733>1734: #:G1
1735>1736: '0
1737>     known combination v1732 v1734 v1736 v1670
1738>1739: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1740>1741: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1483))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2D829}> {119F1FA9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A2D849}> {119F1FE9}> ..)>)
                                                                                    IR1 block 154 start c1742
                                                                                    start stack:
                                                                                    1742>1049: known combination v1176 v1178 v1743
                                                                                    end stack:
                                                                                    successors c1050

IR1 block 155 start c1050
start stack:
1050>     return v1049 SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c556

IR1 block 0 start c1744
start stack:
1744>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
1745>1746: SB-C::CLAMBDA RAY-TRACE
1747>1748: #:G1154
1749>1750: #:G1155
1751>1752: #:G1156
1753>1754: #:G1157
1755>     tail local combination v1746 v1748 v1750 v1752 v1754
end stack:
successors c1756

IR1 block 1 start c1756
start stack:
1756>     bind SB-C::CLAMBDA RAY-TRACE
end stack:
successors c1757

IR1 block 2 start c1757
start stack:
1757>     entry NIL
1758>1759: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1760>1761: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA (&OPTIONAL (LAM) (NORMAL) &REST #:G1129))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME LAM
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11903141}> {118FF439}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME NORMAL
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11903121}> {118FF3F9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1129
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11903101}> {118FF3B9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :MV-LET
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (LAM NORMAL) {1190B759}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (LAM NORMAL #:N-CONTEXT-1143
                                    #:N-COUNT-1144) {1190B6C1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (LAM NORMAL #:G1129) {118FF521}> {11903239}>)
1762>     known combination v1759 v1761
1763>1764: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                          (LAMBDA
                              (&OPTIONAL ("#<...>" . "#<...>")
                               "#<...>" . "#<...>")))
end stack:
successors c1765

IR1 block 3 start c1765
start stack:
1765>     entry NIL
1766>1767: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1768>1769: '(#<SB-C::CLAMBDA
               :%SOURCE-NAME AUX
               :%DEBUG-NAME (LABELS AUX)
               :KIND NIL
               :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (DOUBLE-FLOAT T T)
                                           (VALUES DOUBLE-FLOAT T &OPTIONAL))>
               :WHERE-FROM :DEFINED
               :VARS (LAM NORMAL SCENE) {1255F1F9}>)
1770>     known combination v1767 v1769
1771>1772: SB-C::CLAMBDA (LABELS AUX)
1773>1774: '1.7976931348623157d308
1775>1776: ZERO {SPECIAL}
1777>1778: SCENE
1779>1780: local combination v1772 v1774 v1776 v1778
end stack:
successors c1781

IR1 block 4 start c1781
start stack:
1781>     local mv-combination v1764 v1780
1782>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                              (LAMBDA
                                  (&OPTIONAL ("#<...>" . "#<...>")
                                   "#<...>" . "#<...>"))) :KIND :MV-LET
1783>1784: = {GLOBAL-FUNCTION}
1785>1786: LAM
1787>1788: '1.7976931348623157d308
1789>1790: known combination v1784 v1786 v1788
1791>     if v1790 c1792 c1793
end stack:
successors c1792 c1793

IR1 block 7 start c1793
start stack:
1793>1794: SB-C::CLAMBDA (LET ((G (DOT "#<...>" . "#<...>")))
                           )
end stack:
successors c1795

IR1 block 8 start c1795
start stack:
1795>     entry NIL
1796>1797: + {GLOBAL-FUNCTION}
1798>1799: + {GLOBAL-FUNCTION}
1800>1801: * {GLOBAL-FUNCTION}
1802>1803: NORMAL
1804>1805: cast v1803 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                             DOUBLE-FLOAT
                                                                             (*))>]
end stack:
successors c1806

IR1 block 9 start c1806
start stack:
1806>     entry NIL
1807>1808: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1809>1810: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1561))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D39B1}> {1198F5F1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D3991}> {1198F5B1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1561
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D3971}> {1198F571}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198F7D9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1562
                                    #:N-COUNT-1563) {1198F739}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1561) {1193F5A9}> {11960401}>)
1811>     known combination v1808 v1810
1812>1813: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1814>1815: '0
1816>1817: known combination v1813 v1805 v1815
end stack:
successors c1818

IR1 block 10 start c1818
start stack:
1818>1819: NEG-LIGHT
1820>1821: cast v1819 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                             DOUBLE-FLOAT
                                                                             (*))>]
end stack:
successors c1822

IR1 block 11 start c1822
start stack:
1822>     entry NIL
1823>1824: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1825>1826: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1564))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D3749}> {1198F239}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D3729}> {1198F1F9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1564
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D3709}> {1198F1B9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198F421}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1565
                                    #:N-COUNT-1566) {1198F381}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1564) {1193F3C9}> {11960221}>)
1827>     known combination v1824 v1826
1828>1829: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1830>1831: '0
1832>1833: known combination v1829 v1821 v1831
end stack:
successors c1834

IR1 block 12 start c1834
start stack:
1834>1835: known combination v1801 v1817 v1833
1836>1837: * {GLOBAL-FUNCTION}
1838>1839: NORMAL
end stack:
successors c1840

IR1 block 13 start c1840
start stack:
1840>     entry NIL
1841>1842: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1843>1844: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1567))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D3589}> {1198EE41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D3569}> {1198EE01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1567
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D3549}> {1198EDC1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198F029}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1568
                                    #:N-COUNT-1569) {1198EF89}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1567) {1193F191}> {1195FFC9}>)
1845>     known combination v1842 v1844
1846>1847: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1848>1849: '1
1850>1851: known combination v1847 v1839 v1849
end stack:
successors c1852

IR1 block 14 start c1852
start stack:
1852>1853: NEG-LIGHT
end stack:
successors c1854

IR1 block 15 start c1854
start stack:
1854>     entry NIL
1855>1856: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1857>1858: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1570))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D3291}> {1198E979}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D3271}> {1198E939}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1570
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D3251}> {1198E8F9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198EB61}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1571
                                    #:N-COUNT-1572) {1198EAC1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1570) {1193EF59}> {1195FD19}>)
1859>     known combination v1856 v1858
1860>1861: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1862>1863: '1
1864>1865: known combination v1861 v1853 v1863
end stack:
successors c1866

IR1 block 16 start c1866
start stack:
1866>1867: known combination v1837 v1851 v1865
1868>1869: known combination v1799 v1835 v1867
1870>1871: * {GLOBAL-FUNCTION}
1872>1873: NORMAL
end stack:
successors c1874

IR1 block 17 start c1874
start stack:
1874>     entry NIL
1875>1876: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1877>1878: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1573))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D2F49}> {1198E439}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D2F29}> {1198E3F9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1573
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D2F09}> {1198E3B9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198E621}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1574
                                    #:N-COUNT-1575) {1198E581}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1573) {1193ED21}> {1195FA11}>)
1879>     known combination v1876 v1878
1880>1881: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1882>1883: '2
1884>1885: known combination v1881 v1873 v1883
end stack:
successors c1886

IR1 block 18 start c1886
start stack:
1886>1887: NEG-LIGHT
end stack:
successors c1888

IR1 block 19 start c1888
start stack:
1888>     entry NIL
1889>1890: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1891>1892: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1576))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D2D89}> {1198E0E9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D2D69}> {1198E0A9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1576
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D2D49}> {1198E069}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198E2D1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1577
                                    #:N-COUNT-1578) {1198E231}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1576) {1193EB81}> {1195F869}>)
1893>     known combination v1890 v1892
1894>1895: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1896>1897: '2
1898>1899: known combination v1895 v1887 v1897
end stack:
successors c1900

IR1 block 20 start c1900
start stack:
1900>1901: known combination v1871 v1885 v1899
1902>1903: known combination v1797 v1869 v1901
end stack:
successors c1904

IR1 block 21 start c1904
start stack:
1904>     local combination v1794 v1903
1905>     bind SB-C::CLAMBDA (LET ((G (DOT "#<...>" . "#<...>")))
                               ) :KIND :LET
1906>1907: < {GLOBAL-FUNCTION}
1908>1909: G
1910>1911: '0.0d0
1912>1913: known combination v1907 v1909 v1911
1914>     if v1913 c1915 c1916
end stack:
successors c1915 c1916

IR1 block 23 start c1916
start stack:
1916>1917: +V {GLOBAL-FUNCTION}
1918>1919: SB-C::CLAMBDA +V
1920>1921: ORIG
1922>1923: SB-C::CLAMBDA *V
1924>1925: DIR
1926>1927: cast v1925 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                             DOUBLE-FLOAT
                                                                             (3))>]
1928>     local combination v1923 <none> v1927
1929>     bind SB-C::CLAMBDA *V :KIND :LET
end stack:
successors c1930

IR1 block 24 start c1930
start stack:
1930>     entry NIL
1931>1932: * {GLOBAL-FUNCTION}
1933>1934: LAM
end stack:
successors c1935

IR1 block 25 start c1935
start stack:
1935>     entry NIL
1936>1937: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1938>1939: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1666))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CAD51}> {11982541}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CAD31}> {11982501}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1666
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119CAD11}> {119824C1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11982729}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1667
                                    #:N-COUNT-1668) {11982689}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1666) {11939AB9}> {1195B7E9}>)
1940>     known combination v1937 v1939
1941>1942: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1943>1944: A
1945>1946: '0
1947>1948: known combination v1942 v1944 v1946
end stack:
successors c1949

IR1 block 26 start c1949
start stack:
1949>1950: known combination v1932 v1934 v1948
1951>1952: * {GLOBAL-FUNCTION}
1953>1954: LAM
end stack:
successors c1955

IR1 block 27 start c1955
start stack:
1955>     entry NIL
1956>1957: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1958>1959: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1669))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CAB39}> {11982159}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CAB19}> {11982119}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1669
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119CAAF9}> {119820D9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11982341}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1670
                                    #:N-COUNT-1671) {119822A1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1669) {119398D9}> {1195B5F1}>)
1960>     known combination v1957 v1959
1961>1962: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1963>1964: A
1965>1966: '1
1967>1968: known combination v1962 v1964 v1966
end stack:
successors c1969

IR1 block 28 start c1969
start stack:
1969>1970: known combination v1952 v1954 v1968
1971>1972: * {GLOBAL-FUNCTION}
1973>1974: LAM
end stack:
successors c1975

IR1 block 29 start c1975
start stack:
1975>     entry NIL
1976>1977: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1978>1979: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1672))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CA971}> {11981C79}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CA951}> {11981C39}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1672
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119CA931}> {11981BF9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11981E61}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1673
                                    #:N-COUNT-1674) {11981DC1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1672) {119396A1}> {1195B381}>)
1980>     known combination v1977 v1979
1981>1982: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1983>1984: A
1985>1986: '2
1987>1988: known combination v1982 v1984 v1986
end stack:
successors c1989

IR1 block 30 start c1989
start stack:
1989>1990: known combination v1972 v1974 v1988
end stack:
successors c1991

IR1 block 31 start c1991
start stack:
1991>     entry NIL
1992>1993: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1994>1995: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1996>1997: '214
1998>1999: '3
2000>2001: '6
2002>2003: known combination v1995 v1997 v1999 v2001
2004>     local combination v1993 v2003
2005>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
2006>2007: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2008>2009: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1675))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A21739}> {119E8469}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A21759}> {119E84A9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1675
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11A21779}> {119E84E9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119AF319}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1676
                                    #:N-COUNT-1677) {119AF291}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1675) {119ACA99}> {1196DFB1}>)
2010>     known combination v2007 v2009
2011>2012: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
2013>2014: #:G1
2015>2016: '0
2017>     known combination v2012 v2014 v2016 v1950
2018>2019: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2020>2021: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1678))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A210D9}> {119E8039}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A210F9}> {119E8079}> ..)>)
                                                                                    IR1 block 32 start c2022
                                                                                    start stack:
                                                                                    2022>2023: cast v1921 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                                                                                                                 DOUBLE-FLOAT
                                                                                                                                                                 (3))>]
                                                                                    2024>     local combination v1919 v2023 <none>
                                                                                    2025>     bind SB-C::CLAMBDA +V :KIND :LET
                                                                                    end stack:
                                                                                    successors c2026

IR1 block 33 start c2026
start stack:
2026>     entry NIL
2027>2028: + {GLOBAL-FUNCTION}
end stack:
successors c2029

IR1 block 34 start c2029
start stack:
2029>     entry NIL
2030>2031: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2032>2033: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1684))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CA491}> {11981641}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CA471}> {11981601}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1684
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119CA451}> {119815C1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11981829}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1685
                                    #:N-COUNT-1686) {11981789}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1684) {11939469}> {1195B049}>)
2034>     known combination v2031 v2033
2035>2036: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2037>2038: A
2039>2040: '0
2041>2042: known combination v2036 v2038 v2040
end stack:
successors c2043

IR1 block 35 start c2043
start stack:
2043>     entry NIL
2044>2045: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2046>2047: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1687))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CA0F9}> {11980F89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119CA0D9}> {11980F49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1687
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119CA0B9}> {11980F09}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11981171}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1688
                                    #:N-COUNT-1689) {119810D1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1687) {119391E9}> {11957DB1}>)
2048>     known combination v2045 v2047
2049>2050: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2051>2052: #:G1
2053>2054: '0
2055>2056: known combination v2050 v2052 v2054
end stack:
successors c2057

IR1 block 36 start c2057
start stack:
2057>2058: known combination v2028 v2042 v2056
2059>2060: + {GLOBAL-FUNCTION}
end stack:
successors c2061

IR1 block 37 start c2061
start stack:
2061>     entry NIL
2062>2063: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2064>2065: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1690))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119C9E69}> {11980921}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119C9E49}> {119808E1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1690
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119C9E29}> {119808A1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {11980B09}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1691
                                    #:N-COUNT-1692) {11980A69}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1690) {11938FB1}> {11957B19}>)
2066>     known combination v2063 v2065
2067>2068: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2069>2070: A
2071>2072: '1
2073>2074: known combination v2068 v2070 v2072
end stack:
successors c2075

IR1 block 38 start c2075
start stack:
2075>     entry NIL
2076>2077: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2078>2079: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1693))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119C9931}> {11980209}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119C9911}> {119801C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1693
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119C98F1}> {11980189}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119803F1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1694
                                    #:N-COUNT-1695) {11980351}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1693) {11938D31}> {11957811}>)
2080>     known combination v2077 v2079
2081>2082: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2083>2084: #:G1
2085>2086: '1
2087>2088: known combination v2082 v2084 v2086
end stack:
successors c2089

IR1 block 39 start c2089
start stack:
2089>2090: known combination v2060 v2074 v2088
2091>2092: + {GLOBAL-FUNCTION}
end stack:
successors c2093

IR1 block 40 start c2093
start stack:
2093>     entry NIL
2094>2095: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2096>2097: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1696))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119C96A1}> {1197FBA1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119C9681}> {1197FB61}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1696
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119C9661}> {1197FB21}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1197FD89}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1697
                                    #:N-COUNT-1698) {1197FCE9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1696) {11938AF9}> {11957579}>)
2098>     known combination v2095 v2097
2099>2100: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2101>2102: A
2103>2104: '2
2105>2106: known combination v2100 v2102 v2104
end stack:
successors c2107

IR1 block 41 start c2107
start stack:
2107>     entry NIL
2108>2109: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2110>2111: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1699))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119C9169}> {1197F489}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119C9149}> {1197F449}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1699
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119C9129}> {1197F409}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1197F671}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1700
                                    #:N-COUNT-1701) {1197F5D1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1699) {11938871}> {11957271}>)
2112>     known combination v2109 v2111
2113>2114: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2115>2116: #:G1
2117>2118: '2
2119>2120: known combination v2114 v2116 v2118
end stack:
successors c2121

IR1 block 42 start c2121
start stack:
2121>2122: known combination v2092 v2106 v2120
end stack:
successors c2123

IR1 block 43 start c2123
start stack:
2123>     entry NIL
2124>2125: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
2126>2127: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
2128>2129: '214
2130>2131: '3
2132>2133: '6
2134>2135: known combination v2127 v2129 v2131 v2133
2136>     local combination v2125 v2135
2137>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
2138>2139: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2140>2141: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1702))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A1F891}> {119E6BA1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A1F8B1}> {119E6BE1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1702
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11A1F8D1}> {119E6C21}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119AB5C9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1703
                                    #:N-COUNT-1704) {119AB541}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1702) {119AAD11}> {1196CB49}>)
2142>     known combination v2139 v2141
2143>2144: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
2145>2146: #:G1
2147>2148: '0
2149>     known combination v2144 v2146 v2148 v2058
2150>2151: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2152>2153: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1705))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A1F231}> {119E6771}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A1F251}> {119E67B1}> ..)>)
                                                                                    IR1 block 44 start c2154
                                                                                    start stack:
                                                                                    2154>     entry NIL
                                                                                    2155>2156: NORMAL
                                                                                    end stack:
                                                                                    successors c2157

IR1 block 45 start c2157
start stack:
2157>     entry NIL
2158>2159: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2160>2161: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1579))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D2B39}> {1198DD41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D2B19}> {1198DD01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1579
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D2AF9}> {1198DCC1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198DF29}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1580
                                    #:N-COUNT-1581) {1198DE89}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1579) {1193E9A1}> {1195F6A1}>)
2162>     known combination v2159 v2161
2163>2164: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2165>2166: '0
2167>2168: known combination v2164 v2156 v2166
end stack:
successors c2169

IR1 block 46 start c2169
start stack:
2169>2170: * {GLOBAL-FUNCTION}
2171>2172: '1.0536712127723509d-8
2173>2174: known combination v2170 v2168 v2172
2175>2176: NORMAL
end stack:
successors c2177

IR1 block 47 start c2177
start stack:
2177>     entry NIL
2178>2179: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2180>2181: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1582))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D25E1}> {1198D5E9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D25C1}> {1198D5A9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1582
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D25A1}> {1198D569}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198D7D1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1583
                                    #:N-COUNT-1584) {1198D731}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1582) {1193E769}> {1195F3A1}>)
2182>     known combination v2179 v2181
2183>2184: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2185>2186: '1
2187>2188: known combination v2184 v2176 v2186
end stack:
successors c2189

IR1 block 48 start c2189
start stack:
2189>2190: * {GLOBAL-FUNCTION}
2191>2192: '1.0536712127723509d-8
2193>2194: known combination v2190 v2188 v2192
2195>2196: NORMAL
end stack:
successors c2197

IR1 block 49 start c2197
start stack:
2197>     entry NIL
2198>2199: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2200>2201: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1585))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D2099}> {11989EB1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {119D2079}> {11989E71}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1585
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {119D2059}> {11989E31}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1198D0A1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1586
                                    #:N-COUNT-1587) {1198D001}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1585) {1193E531}> {1195F071}>)
2202>     known combination v2199 v2201
2203>2204: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2205>2206: '2
2207>2208: known combination v2204 v2196 v2206
end stack:
successors c2209

IR1 block 50 start c2209
start stack:
2209>2210: * {GLOBAL-FUNCTION}
2211>2212: '1.0536712127723509d-8
2213>2214: known combination v2210 v2208 v2212
end stack:
successors c2215

IR1 block 51 start c2215
start stack:
2215>     entry NIL
2216>2217: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
2218>2219: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
2220>2221: '214
2222>2223: '3
2224>2225: '6
2226>2227: known combination v2219 v2221 v2223 v2225
2228>     local combination v2217 v2227
2229>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
2230>2231: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2232>2233: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1588))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A240A1}> {119EC031}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A240C1}> {119EC071}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1588
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {11A240E1}> {119EC0B1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {119B3D31}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1589
                                    #:N-COUNT-1590) {119B3CA9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G1588) {119B3489}> {11971621}>)
2234>     known combination v2231 v2233
2235>2236: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
2237>2238: #:G1
2239>2240: '0
2241>     known combination v2236 v2238 v2240 v2174
2242>2243: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2244>2245: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G1591))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A23A41}> {119EBC01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {11A23A61}> {119EBC41}> ..)>)
                                                                                    IR1 block 52 start c2246
                                                                                    start stack:
                                                                                    2246>2247: full combination v1917 v2248 v2249
                                                                                    2250>2251: SB-C::CLAMBDA SINTERSECT
                                                                                    2252>     local combination v2251 v2247 <none> <none>
                                                                                    2253>     bind SB-C::CLAMBDA SINTERSECT :KIND :LET
                                                                                    end stack:
                                                                                    successors c2254

IR1 block 53 start c2254
start stack:
2254>     entry NIL
2255>2256: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2257>2258: '(#<SB-C::CLAMBDA
               :%SOURCE-NAME AUX
               :%DEBUG-NAME (LABELS AUX)
               :KIND NIL
               :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (T) (VALUES T &OPTIONAL))>
               :WHERE-FROM :DEFINED
               :VARS (SCENE) {11956DE9}>)
2259>     known combination v2256 v2258
2260>2261: SB-C::CLAMBDA (LABELS AUX)
2262>2263: SCENE
2264>2265: local combination v2261 v2263
end stack:
successors c2266

IR1 block 54 start c2266
start stack:
2266>     if v2265 c2267 c2268
end stack:
successors c2267 c2268

IR1 block 56 start c2268
start stack:
2268>2269: G
end stack:
successors c2270

IR1 block 55 start c2267
start stack:
2267>2269: '0.0d0
end stack:
successors c2270

IR1 block 22 start c1915
start stack:
1915>2269: '0.0d0
end stack:
successors c2270

IR1 block 5 start c1792
start stack:
1792>2269: '0.0d0
end stack:
successors c2270

IR1 block 6 start c2270
start stack:
2270>     return v2269 SB-C::CLAMBDA RAY-TRACE
end stack:
successors c556


;;;; IR2 component: +V

entries:
    L1: RAY-TRACE


TNs: 171 local, 85 temps, 18 constant, 8 env, 0 comp, 180 global.
Wired: 359, Unused: 0. 221 blocks, 1990 global conflicts.

IR1 block 223 start c556

    IR2 block NIL start c556

IR1 block 0 start c1744

    IR2 block 56 start c1744
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G1154!2[EDX]
    3: MOVE t3[EDI] => #:G1155!4[EDI]
    4: MOVE t5[ESI] => #:G1156!6[ESI]
    5: MOVE t7[S3]>t8[EAX] => #:G1157!9[EAX]
    6: MOVE t10[S0]>t11[ECX] => t12[S0]<t13[ECX]
    7: SAP-MOVE t14[S1]>t15[ECX] => t16[S1]<t17[ECX]
    8: NOTE-ENVIRONMENT-START {#}
    9: MOVE #:G1154!2[EDX] => NEG-LIGHT!18[S4]<t19[EDX]
    10: MOVE #:G1155!4[EDI] => ORIG!20[EDI]
    11: MOVE #:G1156!6[ESI] => DIR!21[S2]<t22[ESI]
    12: MOVE #:G1157!9[EAX] => SCENE!23[S5]<t24[EAX]
    13: MOVE t12[S0]>t25[EAX] => t26[S0]<t27[EAX]
    14: SAP-MOVE t16[S1]>t28[EAX] => t29[S1]<t30[EAX]

IR1 block 1 start c1756

    IR2 block 55 start c1756
    0: SAP-MOVE t29[S1]>t31[EAX] => t32[S1]<t33[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c1757

    IR2 block 54 start c1757

IR1 block 3 start c1765

    IR2 block 53 start c1765
    0: MOVE-OPERAND ORIG!20[EDI] {SB-VM::STORE-STACK} => t34[S8]
    1: FAST-SYMBOL-VALUE 'ZERO!35[Const6]>t36[EAX] => t37[ECX]
    2: CURRENT-FP => t38[S3]
    3: MOVE-TO-DOUBLE '1.7976931348623157d308!39[Const7]>t40[EAX] => t41[FR1]
    4: ALLOCATE-FRAME {#} => t42[EAX] t43[IGNORE-ME]
    5: MOVE-DOUBLE-FLOAT-ARG t41[FR1] t42[EAX] => LAM!44[FR1]
    6: MOVE-ARG t37[ECX] t42[EAX] => NORMAL!45[S9]
    7: MOVE-ARG SCENE!23[S5]>t46[EDX] t42[EAX] => SCENE!47[S10]
    8: MOVE-ARG DIR!21[S2]>t48[EBX] t42[EAX] => t49[S7]
    9: MOVE-ARG ORIG!20[EDI] t42[EAX] => t50[ESI]
    10: MOVE-ARG t38[S3]>t51[EDI] t42[EAX] => t52[S0]
    11: KNOWN-CALL-LOCAL t42[EAX] t43[IGNORE-ME] LAM!44[FR1] NORMAL!45[S9]
                         SCENE!47[S10] t49[S7] t50[ESI] t52[S0]
                         {# # #}
                         => t53[FR1] t54[ECX]
    12: MOVE-OPERAND t34[S8] {SB-VM::LOAD-STACK} => ORIG!20[EDI]

IR1 block 4 start c1781

    IR2 block 52 start c1781
    0: MOVE-TO-DOUBLE '1.7976931348623157d308!39[Const7]>t55[EAX] => t56[FR0]
    1: =/DOUBLE-FLOAT t53[FR1] t56[FR0] {# T}

IR1 block 5 start c1792

    IR2 block 1 start c1792
    0: MOVE-FROM-FP-CONSTANT '0.0d0!57 => t58[EDX]

IR1 block 6 start c2270

    IR2 block 0 start c2270
    L2:
    0: MOVE t58[EDX] => t59[EDX]
    1: RETURN-SINGLE t26[S0] t32[S1] t59[EDX]

IR1 block 7 start c1793

    IR2 block 51 start c1793
    L3:

IR1 block 8 start c1795

    IR2 block 50 start c1795

IR1 block 9 start c1806

    IR2 block 49 start c1806
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t54[ECX] {0} => t60[FR0]

IR1 block 10 start c1818

    IR2 block 48 start c1818

IR1 block 11 start c1822

    IR2 block 47 start c1822
    0: DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT NEG-LIGHT!18[S4]>t61[EAX]
                                                   {0}
                                                   => t62[FR2]

IR1 block 12 start c1834

    IR2 block 46 start c1834
    0: */DOUBLE-FLOAT t60[FR0] t62[FR2] => t63[FR2] ..

assembly code for #<SB-C:COMPONENT :NAME +V {12618281}>

in the elsewhere segment:
L4:
in the regular segment:
L5:
in the elsewhere segment:
L6:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L7:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t64[ESP]>, DWORD PTR [EBP-64]
L8:

VOP MOVE t7[S3]>t8[EAX] => #:G1157!9[EAX] 
        MOV     #<TN t8[EAX]>, #<TN t7[S3]>

VOP NOTE-ENVIRONMENT-START {#} 
L9:

VOP MOVE #:G1154!2[EDX] => NEG-LIGHT!18[S4]<t19[EDX] 
        MOV     #<TN NEG-LIGHT!18[S4]>, #<TN #:G1154!2[EDX]>

VOP MOVE #:G1156!6[ESI] => DIR!21[S2]<t22[ESI] 
        MOV     #<TN DIR!21[S2]>, #<TN #:G1156!6[ESI]>

VOP MOVE #:G1157!9[EAX] => SCENE!23[S5]<t24[EAX] 
        MOV     #<TN SCENE!23[S5]>, #<TN #:G1157!9[EAX]>

L10:
in the elsewhere segment:
L11:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L12:

L13:
L14:

VOP MOVE-OPERAND ORIG!20[EDI] {SB-VM::STORE-STACK} => t34[S8] 
        MOV     #<TN t34[S8]>, #<TN ORIG!20[EDI]>

VOP FAST-SYMBOL-VALUE 'ZERO!35[Const6]>t36[EAX] => t37[ECX] 
        MOV     #<TN t36[EAX]>, #<TN 'ZERO!35[Const6]>
        MOV     #<TN t37[ECX]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t37[ECX]>, DWORD PTR [ECX+0]
        CMP     #<TN t37[ECX]>, 90
        JMP     NE, L15
        MOV     #<TN t37[ECX]>, DWORD PTR [EAX-3]
L15:

VOP CURRENT-FP => t38[S3] 
        MOV     #<TN t38[S3]>, #<TN t65[EBP]>

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!39[Const7]>t40[EAX] => t41[FR1] 
        MOV     #<TN t40[EAX]>, #<TN '1.7976931348623157d308!39[Const7]>
        FSTP    #<TN t41[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t41[FR1]>

VOP ALLOCATE-FRAME {#} => t42[EAX] t43[IGNORE-ME] 
        MOV     #<TN t42[EAX]>, #<TN t64[ESP]>
        SUB     #<TN t64[ESP]>, 64

VOP MOVE-ARG t37[ECX] t42[EAX] => NORMAL!45[S9] 
        MOV     DWORD PTR [EAX-40], #<TN t37[ECX]>

VOP MOVE-ARG SCENE!23[S5]>t46[EDX] t42[EAX] => SCENE!47[S10] 
        MOV     #<TN t46[EDX]>, #<TN SCENE!23[S5]>
        MOV     DWORD PTR [EAX-44], #<TN t46[EDX]>

VOP MOVE-ARG DIR!21[S2]>t48[EBX] t42[EAX] => t49[S7] 
        MOV     #<TN t48[EBX]>, #<TN DIR!21[S2]>
        MOV     DWORD PTR [EAX-32], #<TN t48[EBX]>

VOP MOVE-ARG ORIG!20[EDI] t42[EAX] => t50[ESI] 
        MOV     #<TN t50[ESI]>, #<TN ORIG!20[EDI]>

VOP MOVE-ARG t38[S3]>t51[EDI] t42[EAX] => t52[S0] 
        MOV     #<TN t51[EDI]>, #<TN t38[S3]>
        MOV     DWORD PTR [EAX-4], #<TN t51[EDI]>

VOP KNOWN-CALL-LOCAL t42[EAX] t43[IGNORE-ME] LAM!44[FR1] NORMAL!45[S9]
                     SCENE!47[S10] t49[S7] t50[ESI] t52[S0]
                     {# # #}
                     => t53[FR1] t54[ECX] 
L16:
        MOV     #<TN t65[EBP]>, #<TN t42[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L17)
L18:
        JMP     L19
L17:
L20:
L21:

VOP MOVE-OPERAND t34[S8] {SB-VM::LOAD-STACK} => ORIG!20[EDI] 
        MOV     #<TN ORIG!20[EDI]>, #<TN t34[S8]>

L22:

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!39[Const7]>t55[EAX] => t56[FR0] 
        MOV     #<TN t55[EAX]>, #<TN '1.7976931348623157d308!39[Const7]>
        FSTP    #<TN t56[FR0]>
        FLDD    DWORD PTR [EAX+1]

VOP =/DOUBLE-FLOAT t53[FR1] t56[FR0] {# T} 
L23:
        FUCOM   #<TN t53[FR1]>
        FNSTSW
        AND     #<TN t66[AH]>, 69
        CMP     #<TN t66[AH]>, 64
        JMP     NE, L3

L24:

VOP MOVE-FROM-FP-CONSTANT '0.0d0!57 => t58[EDX] 
        MOV     #<TN t58[EDX]>, DWORD PTR [+134218980]

L2:

VOP RETURN-SINGLE t26[S0] t32[S1] t59[EDX] 
L25:
        LEA     #<TN t64[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t65[EBP]>, #<TN t26[S0]>
        RET     4

L3:
L26:
L27:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t54[ECX] {0} => t60[FR0] 
        FSTP    #<TN t60[FR0]>
        FLDD    DWORD PTR [ECX+1]

L28:
L29:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT NEG-LIGHT!18[S4]>t61[EAX]
                                                {0}
                                                => t62[FR2] 
        MOV     #<TN t61[EAX]>, #<TN NEG-LIGHT!18[S4]>
        FSTP    #<TN t62[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t62[FR2]>

L30:

VOP */DOUBLE-FLOAT t60[FR0] t62[FR2] => t63[FR2] 
        FMUL-STI        #<TN t63[FR2]>
        WAIT

L31:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t54[ECX] {1} => t67[FR0] 
        FSTP    #<TN t67[FR0]>
        FLDD    DWORD PTR [ECX+9]

L32:
L33:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT NEG-LIGHT!18[S4]>t68[EAX]
                                                {1}
                                                => t69[FR3] 
        MOV     #<TN t68[EAX]>, #<TN NEG-LIGHT!18[S4]>
        FSTP    #<TN t69[FR3]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t69[FR3]>

L34:

VOP */DOUBLE-FLOAT t67[FR0] t69[FR3] => t70[FR0] 
        FMULD   #<TN t69[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t63[FR2] t70[FR0] => t71[FR2] 
        FADD-STI        #<TN t71[FR2]>
        WAIT

L35:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t54[ECX] {2} => t72[FR0] 
        FSTP    #<TN t72[FR0]>
        FLDD    DWORD PTR [ECX+17]

L36:
L37:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT NEG-LIGHT!18[S4]>t73[EAX]
                                                {2}
                                                => t74[FR3] 
        MOV     #<TN t73[EAX]>, #<TN NEG-LIGHT!18[S4]>
        FSTP    #<TN t74[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t74[FR3]>

L38:

VOP */DOUBLE-FLOAT t72[FR0] t74[FR3] => t75[FR0] 
        FMULD   #<TN t74[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t71[FR2] t75[FR0] => t76[S6] 
        FADDD   #<TN t71[FR2]>
        FSTD    DWORD PTR [EBP-32]

L39:

VOP <0/DOUBLE-FLOAT t76[S6]>t77[FR0] {# T 0.0d0} 
        FSTP    #<TN t77[FR0]>
        FLDD    DWORD PTR [EBP-32]
L40:
        FTST
        FNSTSW
        AND     #<TN t66[AH]>, 69
        CMP     #<TN t66[AH]>, 1
        JMP     NE, L41

L42:

VOP MOVE-FROM-FP-CONSTANT '0.0d0!57 => t58[EDX] 
        MOV     #<TN t58[EDX]>, DWORD PTR [+134218980]

VOP BRANCH {#} 
        JMP     L2

L41:
L43:
L44:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!21[S2]>t78[EAX]
                                                {0}
                                                => t79[FR0] 
        MOV     #<TN t78[EAX]>, #<TN DIR!21[S2]>
        FSTP    #<TN t79[FR0]>
        FLDD    DWORD PTR [EAX+1]

L45:

VOP */DOUBLE-FLOAT t53[FR1] t79[FR0] => t80[FR2] 
        FMULD   #<TN t53[FR1]>
        FST     #<TN t80[FR2]>

L46:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!21[S2]>t81[EAX]
                                                {1}
                                                => t82[FR0] 
        MOV     #<TN t81[EAX]>, #<TN DIR!21[S2]>
        FSTP    #<TN t82[FR0]>
        FLDD    DWORD PTR [EAX+9]

L47:

VOP */DOUBLE-FLOAT t53[FR1] t82[FR0] => t83[FR3] 
        FMULD   #<TN t53[FR1]>
        FST     #<TN t83[FR3]>

L48:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT DIR!21[S2]>t84[EAX]
                                                {2}
                                                => t85[FR0] 
        MOV     #<TN t84[EAX]>, #<TN DIR!21[S2]>
        FSTP    #<TN t85[FR0]>
        FLDD    DWORD PTR [EAX+17]

L49:

VOP */DOUBLE-FLOAT t53[FR1] t85[FR0] => t86[FR0] 
        FMULD   #<TN t53[FR1]>
        WAIT

L50:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t88[EDX] '3!89>t90[EBX] '6!91>t92[ESI]
                            => t93[EAX] 
        MOV     #<TN t88[EDX]>, 214
        MOV     #<TN t90[EBX]>, 12
        MOV     #<TN t92[ESI]>, 24
        LEA     #<TN t93[EAX]>, BYTE PTR [ESI+15]
        AND     #<TN t93[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t93[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t93[EAX]>, DWORD PTR [+36]
        JMP     BE, L51
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L52
L51:
        FS-SEGMENT-PREFIX
        XOR     #<TN t93[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t93[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t93[EAX]>, DWORD PTR [+32]
L52:
        LEA     #<TN t93[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t88[EDX]>
        MOV     DWORD PTR [EAX-3], #<TN t90[EBX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L53
        BREAK   9
L53:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t93[EAX] t80[FR2]
                                                {0}
                                                => t94[FR2] 
        FXCH    #<TN t80[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t80[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t93[EAX] t83[FR3]
                                                {1}
                                                => t95[FR3] 
        FXCH    #<TN t83[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t83[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t93[EAX] t86[FR0]
                                                {2}
                                                => t96[FR0] 
        FSTD    DWORD PTR [EAX+17]

L54:
L55:
L56:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!20[EDI] {0} => t97[FR0] 
        FSTP    #<TN t97[FR0]>
        FLDD    DWORD PTR [EDI+1]

L57:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t93[EAX] {0} => t98[FR1] 
        FSTP    #<TN t98[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t98[FR1]>

L58:

VOP +/DOUBLE-FLOAT t97[FR0] t98[FR1] => t99[FR1] 
        FADD-STI        #<TN t99[FR1]>
        WAIT

L59:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!20[EDI] {1} => t100[FR0] 
        FSTP    #<TN t100[FR0]>
        FLDD    DWORD PTR [EDI+9]

L60:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t93[EAX] {1} => t101[FR2] 
        FSTP    #<TN t101[FR2]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t101[FR2]>

L61:

VOP +/DOUBLE-FLOAT t100[FR0] t101[FR2] => t102[FR2] 
        FADD-STI        #<TN t102[FR2]>
        WAIT

L62:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT ORIG!20[EDI] {2} => t103[FR0] 
        FSTP    #<TN t103[FR0]>
        FLDD    DWORD PTR [EDI+17]

L63:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t93[EAX] {2} => t104[FR3] 
        FSTP    #<TN t104[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t104[FR3]>

L64:

VOP +/DOUBLE-FLOAT t103[FR0] t104[FR3] => t105[FR0] 
        FADDD   #<TN t104[FR3]>
        WAIT

L65:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t106[EDX] '3!89>t107[EBX] '6!91>t108[ESI]
                            => t109[EAX] 
        MOV     #<TN t106[EDX]>, 214
        MOV     #<TN t107[EBX]>, 12
        MOV     #<TN t108[ESI]>, 24
        LEA     #<TN t109[EAX]>, BYTE PTR [ESI+15]
        AND     #<TN t109[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t109[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t109[EAX]>, DWORD PTR [+36]
        JMP     BE, L66
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L67
L66:
        FS-SEGMENT-PREFIX
        XOR     #<TN t109[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t109[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t109[EAX]>, DWORD PTR [+32]
L67:
        LEA     #<TN t109[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t106[EDX]>
        MOV     DWORD PTR [EAX-3], #<TN t107[EBX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L68
        BREAK   9
L68:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t109[EAX] t99[FR1]
                                                {0}
                                                => t110[FR1] 
        FXCH    #<TN t99[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t99[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t109[EAX] t102[FR2]
                                                {1}
                                                => t111[FR2] 
        FXCH    #<TN t102[FR2]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t102[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t109[EAX] t105[FR0]
                                                {2}
                                                => t112[FR0] 
        FSTD    DWORD PTR [EAX+17]

L69:
L70:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t54[ECX] {0} => t113[FR0] 
        FSTP    #<TN t113[FR0]>
        FLDD    DWORD PTR [ECX+1]

L71:

VOP MOVE-TO-DOUBLE '1.0536712127723509d-8!114[Const8]>t115[EDX] => t116[FR1] 
        MOV     #<TN t115[EDX]>, #<TN '1.0536712127723509d-8!114[Const8]>
        FSTP    #<TN t116[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t116[FR1]>

VOP */DOUBLE-FLOAT t113[FR0] t116[FR1] => t117[FR1] 
        FMUL-STI        #<TN t117[FR1]>
        WAIT

L72:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t54[ECX] {1} => t118[FR0] 
        FSTP    #<TN t118[FR0]>
        FLDD    DWORD PTR [ECX+9]

L73:

VOP MOVE-TO-DOUBLE '1.0536712127723509d-8!114[Const8]>t119[EDX] => t120[FR2] 
        MOV     #<TN t119[EDX]>, #<TN '1.0536712127723509d-8!114[Const8]>
        FSTP    #<TN t120[FR2]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t120[FR2]>

VOP */DOUBLE-FLOAT t118[FR0] t120[FR2] => t121[FR2] 
        FMUL-STI        #<TN t121[FR2]>
        WAIT

L74:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t54[ECX] {2} => t122[FR0] 
        FSTP    #<TN t122[FR0]>
        FLDD    DWORD PTR [ECX+17]

L75:

VOP MOVE-TO-DOUBLE '1.0536712127723509d-8!114[Const8]>t123[ECX] => t124[FR3] 
        MOV     #<TN t123[ECX]>, #<TN '1.0536712127723509d-8!114[Const8]>
        FSTP    #<TN t124[FR3]>
        FLDD    DWORD PTR [ECX+1]
        FXCH    #<TN t124[FR3]>

VOP */DOUBLE-FLOAT t122[FR0] t124[FR3] => t125[FR0] 
        FMULD   #<TN t124[FR3]>
        WAIT

L76:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t126[EDX] '3!89>t127[EBX] '6!91>t128[ESI]
                            => t129[ECX] 
        MOV     #<TN t126[EDX]>, 214
        MOV     #<TN t127[EBX]>, 12
        MOV     #<TN t128[ESI]>, 24
        LEA     #<TN t129[ECX]>, BYTE PTR [ESI+15]
        AND     #<TN t129[ECX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t129[ECX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t129[ECX]>, DWORD PTR [+36]
        JMP     BE, L77
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_ecx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L78
L77:
        FS-SEGMENT-PREFIX
        XOR     #<TN t129[ECX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t129[ECX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t129[ECX]>, DWORD PTR [+32]
L78:
        LEA     #<TN t129[ECX]>, BYTE PTR [ECX+7]
        MOV     DWORD PTR [ECX-7], #<TN t126[EDX]>
        MOV     DWORD PTR [ECX-3], #<TN t127[EBX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L79
        BREAK   9
L79:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t129[ECX] t117[FR1]
                                                {0}
                                                => t130[FR1] 
        FXCH    #<TN t117[FR1]>
        FSTD    DWORD PTR [ECX+1]
        FXCH    #<TN t117[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t129[ECX] t121[FR2]
                                                {1}
                                                => t131[FR2] 
        FXCH    #<TN t121[FR2]>
        FSTD    DWORD PTR [ECX+9]
        FXCH    #<TN t121[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t129[ECX] t125[FR0]
                                                {2}
                                                => t132[FR0] 
        FSTD    DWORD PTR [ECX+17]

L80:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t133[EBX] 
        MOV     #<TN t133[EBX]>, #<TN t64[ESP]>
        SUB     #<TN t64[ESP]>, 12

VOP MOVE-ARG t109[EAX] t133[EBX] => t134[EDX] 
        MOV     #<TN t134[EDX]>, #<TN t109[EAX]>

VOP MOVE-ARG t129[ECX] t133[EBX] => t135[EDI] 
        MOV     #<TN t135[EDI]>, #<TN t129[ECX]>

VOP CALL-NAMED t133[EBX] t136[Const9]>t137[EAX] t134[EDX] t135[EDI]
               {# 2 1 NIL}
               => t138[EDX] 
        MOV     #<TN t137[EAX]>, #<TN t136[Const9]>
L81:
        MOV     #<TN t139[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t65[EBP]>
        MOV     #<TN t65[EBP]>, #<TN t133[EBX]>
L82:
L83:
        CALL    DWORD PTR [EAX+5]
L84:
        JMP     NC, L85
        MOV     #<TN t64[ESP]>, #<TN t140[EBX]>
L85:
L86:

L87:

VOP CURRENT-FP => t141[ESI] 
        MOV     #<TN t141[ESI]>, #<TN t65[EBP]>

VOP ALLOCATE-FRAME {#} => t142[EAX] t143[IGNORE-ME] 
        MOV     #<TN t142[EAX]>, #<TN t64[ESP]>
        SUB     #<TN t64[ESP]>, 64

VOP MOVE-ARG SCENE!23[S5]>t144[ECX] t142[EAX] => SCENE!145[S8] 
        MOV     #<TN t144[ECX]>, #<TN SCENE!23[S5]>
        MOV     DWORD PTR [EAX-36], #<TN t144[ECX]>

VOP MOVE-ARG NEG-LIGHT!18[S4]>t146[EBX] t142[EAX] => t147[EBX] 
        MOV     #<TN t147[EBX]>, #<TN NEG-LIGHT!18[S4]>

VOP MOVE-ARG t141[ESI] t142[EAX] => t148[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t141[ESI]>

VOP KNOWN-CALL-LOCAL t142[EAX] t143[IGNORE-ME] SCENE!145[S8] t149[EDX]
                     t147[EBX] t148[S0]
                     {# # #}
                     => t150[EAX] 
L88:
        MOV     #<TN t65[EBP]>, #<TN t142[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L89)
L90:
        JMP     L91
L89:
L92:
L93:

L94:

VOP IF-EQ t150[EAX] 'NIL!151 {# NIL} 
        CMP     #<TN t150[EAX]>, 134217739
        JMP     E, L95

L96:

VOP MOVE-FROM-FP-CONSTANT '0.0d0!57 => t58[EDX] 
        MOV     #<TN t58[EDX]>, DWORD PTR [+134218980]

VOP BRANCH {#} 
        JMP     L2

L95:

VOP MOVE-FROM-DOUBLE t76[S6]>t152[FR0] => t58[EDX] 
        FSTP    #<TN t152[FR0]>
        FLDD    DWORD PTR [EBP-32]
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t58[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t58[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t58[EDX]>, DWORD PTR [+36]
        JMP     BE, L97
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L98
L97:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t58[EDX]>
        SUB     #<TN t58[EDX]>, 16
L98:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t58[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L99
        BREAK   9
L99:

VOP BRANCH {#} 
        JMP     L2

L19:
in the elsewhere segment:
L100:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L101:

L102:

VOP INSTANCE-INDEX-REF SCENE!47[S10]>t153[EAX] '1!154 => t155[EDI] 
        MOV     #<TN t153[EAX]>, #<TN SCENE!47[S10]>
        MOV     #<TN t155[EDI]>, DWORD PTR [EAX+7]

VOP RAW-INSTANCE-REF/DOUBLE SCENE!47[S10]>t156[ECX] '0!157 => t158[FR3] 
        MOV     #<TN t156[ECX]>, #<TN SCENE!47[S10]>
        MOV     #<TN t159[EAX]>, DWORD PTR [ECX-1]
        SHR     #<TN t159[EAX]>, 8
        FSTP    #<TN t158[FR3]>
        FLDD    DWORD PTR [ECX+EAX*4-5]
        FXCH    #<TN t158[FR3]>

L103:
L104:
L105:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t155[EDI] {0} => t160[FR0] 
        FSTP    #<TN t160[FR0]>
        FLDD    DWORD PTR [EDI+1]

L106:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t50[ESI] {0} => t161[FR2] 
        FSTP    #<TN t161[FR2]>
        FLDD    DWORD PTR [ESI+1]
        FXCH    #<TN t161[FR2]>

L107:

VOP -/DOUBLE-FLOAT t160[FR0] t161[FR2] => t162[FR2] 
        FSUBR-STI       #<TN t162[FR2]>
        WAIT

L108:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t155[EDI] {1} => t163[FR0] 
        FSTP    #<TN t163[FR0]>
        FLDD    DWORD PTR [EDI+9]

L109:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t50[ESI] {1} => t164[FR4] 
        FSTP    #<TN t164[FR4]>
        FLDD    DWORD PTR [ESI+9]
        FXCH    #<TN t164[FR4]>

L110:

VOP -/DOUBLE-FLOAT t163[FR0] t164[FR4] => t165[FR4] 
        FSUBR-STI       #<TN t165[FR4]>
        WAIT

L111:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t155[EDI] {2} => t166[FR0] 
        FSTP    #<TN t166[FR0]>
        FLDD    DWORD PTR [EDI+17]

L112:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t50[ESI] {2} => t167[FR5] 
        FSTP    #<TN t167[FR5]>
        FLDD    DWORD PTR [ESI+17]
        FXCH    #<TN t167[FR5]>

L113:

VOP -/DOUBLE-FLOAT t166[FR0] t167[FR5] => t168[FR0] 
        FSUBD   #<TN t167[FR5]>
        WAIT

L114:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t169[ECX] '3!89>t170[EDX] '6!91>t171[EBX]
                            => t172[EAX] 
        MOV     #<TN t169[ECX]>, 214
        MOV     #<TN t170[EDX]>, 12
        MOV     #<TN t171[EBX]>, 24
        LEA     #<TN t172[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t172[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t172[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t172[EAX]>, DWORD PTR [+36]
        JMP     BE, L115
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L116
L115:
        FS-SEGMENT-PREFIX
        XOR     #<TN t172[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t172[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t172[EAX]>, DWORD PTR [+32]
L116:
        LEA     #<TN t172[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t169[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t170[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L117
        BREAK   9
L117:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] t162[FR2]
                                                {0}
                                                => t173[FR2] 
        FXCH    #<TN t162[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t162[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] t165[FR4]
                                                {1}
                                                => t174[FR4] 
        FXCH    #<TN t165[FR4]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t165[FR4]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] t168[FR0]
                                                {2}
                                                => t175[FR0] 
        FSTD    DWORD PTR [EAX+17]

L118:
L119:
L120:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {0} => t176[FR0] 
        FSTP    #<TN t176[FR0]>
        FLDD    DWORD PTR [EAX+1]

L121:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[S7]>t177[ECX]
                                                {0}
                                                => t178[FR2] 
        MOV     #<TN t177[ECX]>, #<TN t49[S7]>
        FSTP    #<TN t178[FR2]>
        FLDD    DWORD PTR [ECX+1]
        FXCH    #<TN t178[FR2]>

L122:

VOP */DOUBLE-FLOAT t176[FR0] t178[FR2] => t179[FR2] 
        FMUL-STI        #<TN t179[FR2]>
        WAIT

L123:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {1} => t180[FR0] 
        FSTP    #<TN t180[FR0]>
        FLDD    DWORD PTR [EAX+9]

L124:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[S7]>t181[ECX]
                                                {1}
                                                => t182[FR4] 
        MOV     #<TN t181[ECX]>, #<TN t49[S7]>
        FSTP    #<TN t182[FR4]>
        FLDD    DWORD PTR [ECX+9]
        FXCH    #<TN t182[FR4]>

L125:

VOP */DOUBLE-FLOAT t180[FR0] t182[FR4] => t183[FR0] 
        FMULD   #<TN t182[FR4]>
        WAIT

VOP +/DOUBLE-FLOAT t179[FR2] t183[FR0] => t184[FR2] 
        FADD-STI        #<TN t184[FR2]>
        WAIT

L126:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {2} => t185[FR0] 
        FSTP    #<TN t185[FR0]>
        FLDD    DWORD PTR [EAX+17]

L127:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[S7]>t186[ECX]
                                                {2}
                                                => t187[FR4] 
        MOV     #<TN t186[ECX]>, #<TN t49[S7]>
        FSTP    #<TN t187[FR4]>
        FLDD    DWORD PTR [ECX+17]
        FXCH    #<TN t187[FR4]>

L128:

VOP */DOUBLE-FLOAT t185[FR0] t187[FR4] => t188[FR0] 
        FMULD   #<TN t187[FR4]>
        WAIT

VOP +/DOUBLE-FLOAT t184[FR2] t188[FR0] => t189[FR2] 
        FADD-STI        #<TN t189[FR2]>
        WAIT

L129:

VOP */DOUBLE-FLOAT t189[FR2] t189[FR2] => t190[FR4] 
        FSTP    #<TN t191[FR0]>
        FLD     #<TN t192[FR1]>
        FMULD   #<TN t189[FR2]>
        FST     #<TN t190[FR4]>

L130:
L131:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {0} => t193[FR0] 
        FSTP    #<TN t193[FR0]>
        FLDD    DWORD PTR [EAX+1]

L132:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {0} => t194[FR5] 
        FSTP    #<TN t194[FR5]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t194[FR5]>

L133:

VOP */DOUBLE-FLOAT t193[FR0] t194[FR5] => t195[FR5] 
        FMUL-STI        #<TN t195[FR5]>
        WAIT

L134:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {1} => t196[FR0] 
        FSTP    #<TN t196[FR0]>
        FLDD    DWORD PTR [EAX+9]

L135:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {1} => t197[FR6] 
        FSTP    #<TN t197[FR6]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t197[FR6]>

L136:

VOP */DOUBLE-FLOAT t196[FR0] t197[FR6] => t198[FR0] 
        FMULD   #<TN t197[FR6]>
        WAIT

VOP +/DOUBLE-FLOAT t195[FR5] t198[FR0] => t199[FR5] 
        FADD-STI        #<TN t199[FR5]>
        WAIT

L137:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {2} => t200[FR0] 
        FSTP    #<TN t200[FR0]>
        FLDD    DWORD PTR [EAX+17]

L138:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t172[EAX] {2} => t201[FR6] 
        FSTP    #<TN t201[FR6]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t201[FR6]>

L139:

VOP */DOUBLE-FLOAT t200[FR0] t201[FR6] => t202[FR0] 
        FMULD   #<TN t201[FR6]>
        WAIT

VOP +/DOUBLE-FLOAT t199[FR5] t202[FR0] => t203[FR0] 
        FADDD   #<TN t199[FR5]>
        WAIT

L140:

VOP -/DOUBLE-FLOAT t190[FR4] t203[FR0] => t204[FR4] 
        FSUB-STI        #<TN t204[FR4]>
        WAIT

VOP */DOUBLE-FLOAT t158[FR3] t158[FR3] => t205[FR0] 
        FSTP    #<TN t191[FR0]>
        FLD     #<TN t206[FR2]>
        FMULD   #<TN t158[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t204[FR4] t205[FR0] => t207[FR0] 
        FADDD   #<TN t204[FR4]>
        WAIT

VOP <0/DOUBLE-FLOAT t207[FR0] {# T 0.0d0} 
L141:
        FTST
        FNSTSW
        AND     #<TN t66[AH]>, 69
        CMP     #<TN t66[AH]>, 1
        JMP     NE, L142

L143:

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!39[Const7]>t208[EAX] => t209[FR2] 
        MOV     #<TN t208[EAX]>, #<TN '1.7976931348623157d308!39[Const7]>
        FSTP    #<TN t209[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t209[FR2]>

L144:

VOP <DOUBLE-FLOAT t209[FR2] LAM!44[FR1] {# T} 
        FSTP    #<TN t191[FR0]>
        FLD     #<TN t210[FR1]>
        FCOMD   #<TN LAM!44[FR1]>
        FNSTSW
        AND     #<TN t66[AH]>, 69
        CMP     #<TN t66[AH]>, 1
        JMP     NE, L145

L146:

VOP INSTANCE-INDEX-REF SCENE!47[S10]>t211[EAX] '0!157 => t212[EAX] 
        MOV     #<TN t211[EAX]>, #<TN SCENE!47[S10]>
        MOV     #<TN t212[EAX]>, DWORD PTR [EAX+3]

VOP IF-EQ t212[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!213[Const10]>t214[ECX]
          {# NIL}
          
        CMP     #<TN t212[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!213[Const10]>
        JMP     E, L147

L148:

VOP INSTANCE-INDEX-REF t212[EAX] '12!215 => t216[S2]<t217[ECX] 
        MOV     #<TN t217[ECX]>, DWORD PTR [EAX+51]
        MOV     #<TN t216[S2]>, #<TN t217[ECX]>

VOP FAST-IF->-C/FIXNUM t216[S2] {# NIL 3} 
        CMP     #<TN t216[S2]>, 12
        JMP     G, L149

L150:
L151:
L152:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[S7]>t218[EAX]
                                                {0}
                                                => t219[FR0] 
        MOV     #<TN t218[EAX]>, #<TN t49[S7]>
        FSTP    #<TN t219[FR0]>
        FLDD    DWORD PTR [EAX+1]

L153:

VOP */DOUBLE-FLOAT t209[FR2] t219[FR0] => t220[FR1] 
        FMULD   #<TN t209[FR2]>
        FST     #<TN t220[FR1]>

L154:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[S7]>t221[EAX]
                                                {1}
                                                => t222[FR0] 
        MOV     #<TN t221[EAX]>, #<TN t49[S7]>
        FSTP    #<TN t222[FR0]>
        FLDD    DWORD PTR [EAX+9]

L155:

VOP */DOUBLE-FLOAT t209[FR2] t222[FR0] => t223[FR3] 
        FMULD   #<TN t209[FR2]>
        FST     #<TN t223[FR3]>

L156:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t49[S7]>t224[EAX]
                                                {2}
                                                => t225[FR0] 
        MOV     #<TN t224[EAX]>, #<TN t49[S7]>
        FSTP    #<TN t225[FR0]>
        FLDD    DWORD PTR [EAX+17]

L157:

VOP */DOUBLE-FLOAT t209[FR2] t225[FR0] => t226[FR0] 
        FMULD   #<TN t209[FR2]>
        WAIT

L158:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t227[ECX] '3!89>t228[EDX] '6!91>t229[EBX]
                            => t230[EAX] 
        MOV     #<TN t227[ECX]>, 214
        MOV     #<TN t228[EDX]>, 12
        MOV     #<TN t229[EBX]>, 24
        LEA     #<TN t230[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t230[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t230[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t230[EAX]>, DWORD PTR [+36]
        JMP     BE, L159
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L160
L159:
        FS-SEGMENT-PREFIX
        XOR     #<TN t230[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t230[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t230[EAX]>, DWORD PTR [+32]
L160:
        LEA     #<TN t230[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t227[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t228[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L161
        BREAK   9
L161:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t230[EAX] t220[FR1]
                                                {0}
                                                => t231[FR1] 
        FXCH    #<TN t220[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t220[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t230[EAX] t223[FR3]
                                                {1}
                                                => t232[FR3] 
        FXCH    #<TN t223[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t223[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t230[EAX] t226[FR0]
                                                {2}
                                                => t233[FR0] 
        FSTD    DWORD PTR [EAX+17]

L162:
L163:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t50[ESI] {0} => t234[FR0] 
        FSTP    #<TN t234[FR0]>
        FLDD    DWORD PTR [ESI+1]

L164:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t230[EAX] {0} => t235[FR1] 
        FSTP    #<TN t235[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t235[FR1]>

L165:

VOP +/DOUBLE-FLOAT t234[FR0] t235[FR1] => t236[FR1] 
        FADD-STI        #<TN t236[FR1]>
        WAIT

L166:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t50[ESI] {1} => t237[FR0] 
        FSTP    #<TN t237[FR0]>
        FLDD    DWORD PTR [ESI+9]

L167:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t230[EAX] {1} => t238[FR3] 
        FSTP    #<TN t238[FR3]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t238[FR3]>

L168:

VOP +/DOUBLE-FLOAT t237[FR0] t238[FR3] => t239[FR3] 
        FADD-STI        #<TN t239[FR3]>
        WAIT

L169:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t50[ESI] {2} => t240[FR0] 
        FSTP    #<TN t240[FR0]>
        FLDD    DWORD PTR [ESI+17]

L170:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t230[EAX] {2} => t241[FR4] 
        FSTP    #<TN t241[FR4]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t241[FR4]>

L171:

VOP +/DOUBLE-FLOAT t240[FR0] t241[FR4] => t242[FR0] 
        FADDD   #<TN t241[FR4]>
        WAIT

L172:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t243[ECX] '3!89>t244[EDX] '6!91>t245[EBX]
                            => t246[EAX] 
        MOV     #<TN t243[ECX]>, 214
        MOV     #<TN t244[EDX]>, 12
        MOV     #<TN t245[EBX]>, 24
        LEA     #<TN t246[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t246[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t246[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t246[EAX]>, DWORD PTR [+36]
        JMP     BE, L173
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L174
L173:
        FS-SEGMENT-PREFIX
        XOR     #<TN t246[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t246[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t246[EAX]>, DWORD PTR [+32]
L174:
        LEA     #<TN t246[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t243[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t244[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L175
        BREAK   9
L175:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t246[EAX] t236[FR1]
                                                {0}
                                                => t247[FR1] 
        FXCH    #<TN t236[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t236[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t246[EAX] t239[FR3]
                                                {1}
                                                => t248[FR3] 
        FXCH    #<TN t239[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t239[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t246[EAX] t242[FR0]
                                                {2}
                                                => t249[FR0] 
        FSTD    DWORD PTR [EAX+17]

L176:
L177:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t246[EAX] {0} => t250[FR0] 
        FSTP    #<TN t250[FR0]>
        FLDD    DWORD PTR [EAX+1]

L178:
L179:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t155[EDI] {0} => t251[FR1] 
        FSTP    #<TN t251[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t251[FR1]>

L180:

VOP -/DOUBLE-FLOAT t250[FR0] t251[FR1] => t252[FR1] 
        FSUBR-STI       #<TN t252[FR1]>
        WAIT

L181:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t246[EAX] {1} => t253[FR0] 
        FSTP    #<TN t253[FR0]>
        FLDD    DWORD PTR [EAX+9]

L182:
L183:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t155[EDI] {1} => t254[FR3] 
        FSTP    #<TN t254[FR3]>
        FLDD    DWORD PTR [EDI+9]
        FXCH    #<TN t254[FR3]>

L184:

VOP -/DOUBLE-FLOAT t253[FR0] t254[FR3] => t255[FR3] 
        FSUBR-STI       #<TN t255[FR3]>
        WAIT

L185:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t246[EAX] {2} => t256[FR0] 
        FSTP    #<TN t256[FR0]>
        FLDD    DWORD PTR [EAX+17]

L186:
L187:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t155[EDI] {2} => t257[FR4] 
        FSTP    #<TN t257[FR4]>
        FLDD    DWORD PTR [EDI+17]
        FXCH    #<TN t257[FR4]>

L188:

VOP -/DOUBLE-FLOAT t256[FR0] t257[FR4] => t258[FR0] 
        FSUBD   #<TN t257[FR4]>
        WAIT

L189:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t259[ECX] '3!89>t260[EDX] '6!91>t261[EBX]
                            => t262[EAX] 
        MOV     #<TN t259[ECX]>, 214
        MOV     #<TN t260[EDX]>, 12
        MOV     #<TN t261[EBX]>, 24
        LEA     #<TN t262[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t262[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t262[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t262[EAX]>, DWORD PTR [+36]
        JMP     BE, L190
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L191
L190:
        FS-SEGMENT-PREFIX
        XOR     #<TN t262[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t262[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t262[EAX]>, DWORD PTR [+32]
L191:
        LEA     #<TN t262[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t259[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t260[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L192
        BREAK   9
L192:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] t252[FR1]
                                                {0}
                                                => t263[FR1] 
        FXCH    #<TN t252[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t252[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] t255[FR3]
                                                {1}
                                                => t264[FR3] 
        FXCH    #<TN t255[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t255[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] t258[FR0]
                                                {2}
                                                => t265[FR0] 
        FSTD    DWORD PTR [EAX+17]

L193:
L194:
L195:
L196:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {0} => t266[FR0] 
        FSTP    #<TN t266[FR0]>
        FLDD    DWORD PTR [EAX+1]

L197:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {0} => t267[FR1] 
        FSTP    #<TN t267[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t267[FR1]>

L198:

VOP */DOUBLE-FLOAT t266[FR0] t267[FR1] => t268[FR1] 
        FMUL-STI        #<TN t268[FR1]>
        WAIT

L199:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {1} => t269[FR0] 
        FSTP    #<TN t269[FR0]>
        FLDD    DWORD PTR [EAX+9]

L200:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {1} => t270[FR3] 
        FSTP    #<TN t270[FR3]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t270[FR3]>

L201:

VOP */DOUBLE-FLOAT t269[FR0] t270[FR3] => t271[FR0] 
        FMULD   #<TN t270[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t268[FR1] t271[FR0] => t272[FR1] 
        FADD-STI        #<TN t272[FR1]>
        WAIT

L202:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {2} => t273[FR0] 
        FSTP    #<TN t273[FR0]>
        FLDD    DWORD PTR [EAX+17]

L203:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {2} => t274[FR3] 
        FSTP    #<TN t274[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t274[FR3]>

L204:

VOP */DOUBLE-FLOAT t273[FR0] t274[FR3] => t275[FR0] 
        FMULD   #<TN t274[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t272[FR1] t275[FR0] => t276[FR0] 
        FADDD   #<TN t272[FR1]>
        WAIT

L205:

VOP FSQRT t276[FR0] => t277[FR0] 
L206:
        FSQRT
        WAIT

L207:

VOP //DOUBLE-FLOAT '1.0d0!278>t279[FR1] t277[FR0] => t280[FR1] 
        FSTP    #<TN t279[FR1]>
        FLD1
        FXCH    #<TN t279[FR1]>
        FDIV-STI        #<TN t280[FR1]>
        WAIT

L208:
L209:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {0} => t281[FR0] 
        FSTP    #<TN t281[FR0]>
        FLDD    DWORD PTR [EAX+1]

L210:

VOP */DOUBLE-FLOAT t280[FR1] t281[FR0] => t282[FR3] 
        FMULD   #<TN t280[FR1]>
        FST     #<TN t282[FR3]>

L211:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {1} => t283[FR0] 
        FSTP    #<TN t283[FR0]>
        FLDD    DWORD PTR [EAX+9]

L212:

VOP */DOUBLE-FLOAT t280[FR1] t283[FR0] => t284[FR4] 
        FMULD   #<TN t280[FR1]>
        FST     #<TN t284[FR4]>

L213:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t262[EAX] {2} => t285[FR0] 
        FSTP    #<TN t285[FR0]>
        FLDD    DWORD PTR [EAX+17]

L214:

VOP */DOUBLE-FLOAT t280[FR1] t285[FR0] => t286[FR0] 
        FMULD   #<TN t280[FR1]>
        WAIT

L215:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t287[ECX] '3!89>t288[EDX] '6!91>t289[EBX]
                            => t290[EAX] 
        MOV     #<TN t287[ECX]>, 214
        MOV     #<TN t288[EDX]>, 12
        MOV     #<TN t289[EBX]>, 24
        LEA     #<TN t290[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t290[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t290[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t290[EAX]>, DWORD PTR [+36]
        JMP     BE, L216
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L217
L216:
        FS-SEGMENT-PREFIX
        XOR     #<TN t290[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t290[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t290[EAX]>, DWORD PTR [+32]
L217:
        LEA     #<TN t290[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t287[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t288[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L218
        BREAK   9
L218:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t290[EAX] t282[FR3]
                                                {0}
                                                => t291[FR3] 
        FXCH    #<TN t282[FR3]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t282[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t290[EAX] t284[FR4]
                                                {1}
                                                => t292[FR4] 
        FXCH    #<TN t284[FR4]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t284[FR4]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t290[EAX] t286[FR0]
                                                {2}
                                                => t293[FR0] 
        FSTD    DWORD PTR [EAX+17]

L219:

VOP DOUBLE-MOVE t209[FR2] => t294[FR1] 
        FXCH    #<TN t209[FR2]>
        FSTD    #<TN t294[FR1]>
        FXCH    #<TN t209[FR2]>

VOP MOVE t290[EAX] => t295[ECX] 
        MOV     #<TN t295[ECX]>, #<TN t290[EAX]>

L220:

VOP KNOWN-RETURN t52[S0] t296[S1] t53[FR1] t54[ECX] {#} 
L221:
        LEA     #<TN t64[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t65[EBP]>, #<TN t52[S0]>
        RET     4
L222:

L149:

VOP INSTANCE-INDEX-REF t212[EAX] '11!297 => t298[EAX] 
        MOV     #<TN t298[EAX]>, DWORD PTR [EAX+47]

VOP DATA-VECTOR-REF/SIMPLE-VECTOR t298[EAX] '3!89 => t299[EAX] 
        MOV     #<TN t299[EAX]>, DWORD PTR [EAX+13]

VOP IF-EQ t299[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!213[Const10]>t300[ECX]
          {# T}
          
        CMP     #<TN t299[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!213[Const10]>
        JMP     NE, L150

L147:

VOP INSTANCE-INDEX-REF SCENE!47[S10]>t301[EAX] '2!302 => t303[EDI] 
        MOV     #<TN t301[EAX]>, #<TN SCENE!47[S10]>
        MOV     #<TN t303[EDI]>, DWORD PTR [EAX+11]

L223:

VOP BRANCH {#} 
        JMP     L224

L225:

VOP SLOT #:N-LIST1146!304[EDI] {CAR 0 3} => t305[EDX] 
        MOV     #<TN t305[EDX]>, DWORD PTR [EDI-3]

VOP SLOT #:N-LIST1146!304[EDI] {CDR 1 3} => t306[EDI] 
        MOV     #<TN t306[EDI]>, DWORD PTR [EDI+1]

L226:

VOP MOVE-OPERAND #:N-LIST1146!304[EDI] {SB-VM::STORE-STACK} => t307[S3] 
        MOV     #<TN t307[S3]>, #<TN #:N-LIST1146!304[EDI]>

VOP MOVE-OPERAND t50[ESI] {SB-VM::STORE-STACK} => t308[S6] 
        MOV     #<TN t308[S6]>, #<TN t50[ESI]>

VOP MOVE NORMAL!45[S9]>t309[ECX] => t310[ECX] 
        MOV     #<TN t309[ECX]>, #<TN NORMAL!45[S9]>

VOP CURRENT-FP => t311[S2] 
        MOV     #<TN t311[S2]>, #<TN t65[EBP]>

VOP ALLOCATE-FRAME {#} => t312[EAX] t313[IGNORE-ME] 
        MOV     #<TN t312[EAX]>, #<TN t64[ESP]>
        SUB     #<TN t64[ESP]>, 64

VOP MOVE-ARG t310[ECX] t312[EAX] => NORMAL!45[S9] 
        MOV     DWORD PTR [EAX-40], #<TN t310[ECX]>

VOP MOVE-ARG t305[EDX] t312[EAX] => SCENE!47[S10] 
        MOV     DWORD PTR [EAX-44], #<TN t305[EDX]>

VOP MOVE-ARG t49[S7]>t314[ECX] t312[EAX] => t49[S7] 
        MOV     #<TN t314[ECX]>, #<TN t49[S7]>
        MOV     DWORD PTR [EAX-32], #<TN t314[ECX]>

VOP MOVE-ARG t311[S2]>t315[ECX] t312[EAX] => t52[S0] 
        MOV     #<TN t315[ECX]>, #<TN t311[S2]>
        MOV     DWORD PTR [EAX-4], #<TN t315[ECX]>

VOP KNOWN-CALL-LOCAL t312[EAX] t313[IGNORE-ME] LAM!44[FR1] NORMAL!45[S9]
                     SCENE!47[S10] t49[S7] t50[ESI] t52[S0]
                     {# # #}
                     => t53[FR1] t54[ECX] 
L227:
        MOV     #<TN t65[EBP]>, #<TN t312[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L228)
L229:
        JMP     L19
L228:
L230:
L231:

VOP MOVE-OPERAND t308[S6] {SB-VM::LOAD-STACK} => t50[ESI] 
        MOV     #<TN t50[ESI]>, #<TN t308[S6]>

VOP MOVE-OPERAND t307[S3] {SB-VM::LOAD-STACK} => #:N-LIST1146!304[EDI] 
        MOV     #<TN #:N-LIST1146!304[EDI]>, #<TN t307[S3]>

VOP MOVE t54[ECX] => NORMAL!45[S9]<t316[ECX] 
        MOV     #<TN NORMAL!45[S9]>, #<TN t54[ECX]>

L224:

VOP IF-EQ #:N-LIST1146!304[EDI] 'NIL!151 {# T} 
        CMP     #<TN #:N-LIST1146!304[EDI]>, 134217739
        JMP     NE, L225

L232:

VOP MOVE NORMAL!45[S9]>t317[ECX] => t295[ECX] 
        MOV     #<TN t317[ECX]>, #<TN NORMAL!45[S9]>

VOP BRANCH {#} 
        JMP     L220

L145:

VOP MOVE NORMAL!45[S9]>t318[ECX] => t295[ECX] 
        MOV     #<TN t318[ECX]>, #<TN NORMAL!45[S9]>

VOP BRANCH {#} 
        JMP     L220

L142:

VOP FSQRT t207[FR0] => t319[FR3] 
L233:
        FSQRT
        FST     #<TN t319[FR3]>

VOP +/DOUBLE-FLOAT t189[FR2] t319[FR3] => t320[FR4] 
        FSTP    #<TN t191[FR0]>
        FLD     #<TN t321[FR1]>
        FADDD   #<TN t319[FR3]>
        FST     #<TN t320[FR4]>

VOP -/DOUBLE-FLOAT t189[FR2] t319[FR3] => t322[FR0] 
        FSTP    #<TN t191[FR0]>
        FLD     #<TN t323[FR1]>
        FSUBD   #<TN t319[FR3]>
        WAIT

VOP <0/DOUBLE-FLOAT t320[FR4] {# T 0.0d0} 
L234:
        FXCH    #<TN t320[FR4]>
        FTST
        FXCH    #<TN t320[FR4]>
        FNSTSW
        AND     #<TN t66[AH]>, 69
        CMP     #<TN t66[AH]>, 1
        JMP     NE, L235

L236:

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!39[Const7]>t324[EAX] => t209[FR2] 
        MOV     #<TN t324[EAX]>, #<TN '1.7976931348623157d308!39[Const7]>
        FSTP    #<TN t209[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t209[FR2]>

VOP BRANCH {#} 
        JMP     L144

L235:

VOP >0/DOUBLE-FLOAT t322[FR0] {# NIL 0.0d0} 
L237:
        FTST
        FNSTSW
        AND     #<TN t66[AH]>, 69
        JMP     E, L238

L239:

VOP DOUBLE-MOVE t320[FR4] => t209[FR2] 
        FXCH    #<TN t320[FR4]>
        FSTD    #<TN t209[FR2]>
        FXCH    #<TN t320[FR4]>

VOP BRANCH {#} 
        JMP     L144

L238:

VOP DOUBLE-MOVE t322[FR0] => t209[FR2] 
        FSTD    #<TN t209[FR2]>

VOP BRANCH {#} 
        JMP     L144

L91:
in the elsewhere segment:
L240:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L241:

L242:

VOP INSTANCE-INDEX-REF SCENE!145[S8]>t325[EAX] '1!154 => t326[ESI] 
        MOV     #<TN t325[EAX]>, #<TN SCENE!145[S8]>
        MOV     #<TN t326[ESI]>, DWORD PTR [EAX+7]

VOP RAW-INSTANCE-REF/DOUBLE SCENE!145[S8]>t327[ECX] '0!157 => t328[FR2] 
        MOV     #<TN t327[ECX]>, #<TN SCENE!145[S8]>
        MOV     #<TN t329[EAX]>, DWORD PTR [ECX-1]
        SHR     #<TN t329[EAX]>, 8
        FSTP    #<TN t328[FR2]>
        FLDD    DWORD PTR [ECX+EAX*4-5]
        FXCH    #<TN t328[FR2]>

L243:
L244:
L245:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t326[ESI] {0} => t330[FR0] 
        FSTP    #<TN t330[FR0]>
        FLDD    DWORD PTR [ESI+1]

L246:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t149[EDX] {0} => t331[FR1] 
        FSTP    #<TN t331[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t331[FR1]>

L247:

VOP -/DOUBLE-FLOAT t330[FR0] t331[FR1] => t332[FR1] 
        FSUBR-STI       #<TN t332[FR1]>
        WAIT

L248:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t326[ESI] {1} => t333[FR0] 
        FSTP    #<TN t333[FR0]>
        FLDD    DWORD PTR [ESI+9]

L249:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t149[EDX] {1} => t334[FR3] 
        FSTP    #<TN t334[FR3]>
        FLDD    DWORD PTR [EDX+9]
        FXCH    #<TN t334[FR3]>

L250:

VOP -/DOUBLE-FLOAT t333[FR0] t334[FR3] => t335[FR3] 
        FSUBR-STI       #<TN t335[FR3]>
        WAIT

L251:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t326[ESI] {2} => t336[FR0] 
        FSTP    #<TN t336[FR0]>
        FLDD    DWORD PTR [ESI+17]

L252:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t149[EDX] {2} => t337[FR4] 
        FSTP    #<TN t337[FR4]>
        FLDD    DWORD PTR [EDX+17]
        FXCH    #<TN t337[FR4]>

L253:

VOP -/DOUBLE-FLOAT t336[FR0] t337[FR4] => t338[FR0] 
        FSUBD   #<TN t337[FR4]>
        WAIT

L254:

VOP ALLOCATE-VECTOR-ON-HEAP '214!87>t339[ESI] '3!89>t340[EDI] '6!91>t341[ECX]
                            => t342[EAX] 
        MOV     #<TN t339[ESI]>, 214
        MOV     #<TN t340[EDI]>, 12
        MOV     #<TN t341[ECX]>, 24
        LEA     #<TN t342[EAX]>, BYTE PTR [ECX+15]
        AND     #<TN t342[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t342[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t342[EAX]>, DWORD PTR [+36]
        JMP     BE, L255
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L256
L255:
        FS-SEGMENT-PREFIX
        XOR     #<TN t342[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t342[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t342[EAX]>, DWORD PTR [+32]
L256:
        LEA     #<TN t342[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t339[ESI]>
        MOV     DWORD PTR [EAX-3], #<TN t340[EDI]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L257
        BREAK   9
L257:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] t332[FR1]
                                                {0}
                                                => t343[FR1] 
        FXCH    #<TN t332[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t332[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] t335[FR3]
                                                {1}
                                                => t344[FR3] 
        FXCH    #<TN t335[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t335[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] t338[FR0]
                                                {2}
                                                => t345[FR0] 
        FSTD    DWORD PTR [EAX+17]

L258:
L259:
L260:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {0} => t346[FR0] 
        FSTP    #<TN t346[FR0]>
        FLDD    DWORD PTR [EAX+1]

L261:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t147[EBX] {0} => t347[FR1] 
        FSTP    #<TN t347[FR1]>
        FLDD    DWORD PTR [EBX+1]
        FXCH    #<TN t347[FR1]>

L262:

VOP */DOUBLE-FLOAT t346[FR0] t347[FR1] => t348[FR1] 
        FMUL-STI        #<TN t348[FR1]>
        WAIT

L263:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {1} => t349[FR0] 
        FSTP    #<TN t349[FR0]>
        FLDD    DWORD PTR [EAX+9]

L264:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t147[EBX] {1} => t350[FR3] 
        FSTP    #<TN t350[FR3]>
        FLDD    DWORD PTR [EBX+9]
        FXCH    #<TN t350[FR3]>

L265:

VOP */DOUBLE-FLOAT t349[FR0] t350[FR3] => t351[FR0] 
        FMULD   #<TN t350[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t348[FR1] t351[FR0] => t352[FR1] 
        FADD-STI        #<TN t352[FR1]>
        WAIT

L266:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {2} => t353[FR0] 
        FSTP    #<TN t353[FR0]>
        FLDD    DWORD PTR [EAX+17]

L267:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t147[EBX] {2} => t354[FR3] 
        FSTP    #<TN t354[FR3]>
        FLDD    DWORD PTR [EBX+17]
        FXCH    #<TN t354[FR3]>

L268:

VOP */DOUBLE-FLOAT t353[FR0] t354[FR3] => t355[FR0] 
        FMULD   #<TN t354[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t352[FR1] t355[FR0] => t356[FR1] 
        FADD-STI        #<TN t356[FR1]>
        WAIT

L269:

VOP */DOUBLE-FLOAT t356[FR1] t356[FR1] => t357[FR3] 
        FSTP    #<TN t191[FR0]>
        FLD     #<TN t358[FR0]>
        FMULD   #<TN t356[FR1]>
        FST     #<TN t357[FR3]>

L270:
L271:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {0} => t359[FR0] 
        FSTP    #<TN t359[FR0]>
        FLDD    DWORD PTR [EAX+1]

L272:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {0} => t360[FR4] 
        FSTP    #<TN t360[FR4]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t360[FR4]>

L273:

VOP */DOUBLE-FLOAT t359[FR0] t360[FR4] => t361[FR4] 
        FMUL-STI        #<TN t361[FR4]>
        WAIT

L274:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {1} => t362[FR0] 
        FSTP    #<TN t362[FR0]>
        FLDD    DWORD PTR [EAX+9]

L275:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {1} => t363[FR5] 
        FSTP    #<TN t363[FR5]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t363[FR5]>

L276:

VOP */DOUBLE-FLOAT t362[FR0] t363[FR5] => t364[FR0] 
        FMULD   #<TN t363[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t361[FR4] t364[FR0] => t365[FR4] 
        FADD-STI        #<TN t365[FR4]>
        WAIT

L277:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {2} => t366[FR0] 
        FSTP    #<TN t366[FR0]>
        FLDD    DWORD PTR [EAX+17]

L278:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t342[EAX] {2} => t367[FR5] 
        FSTP    #<TN t367[FR5]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t367[FR5]>

L279:

VOP */DOUBLE-FLOAT t366[FR0] t367[FR5] => t368[FR0] 
        FMULD   #<TN t367[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t365[FR4] t368[FR0] => t369[FR0] 
        FADDD   #<TN t365[FR4]>
        WAIT

L280:

VOP -/DOUBLE-FLOAT t357[FR3] t369[FR0] => t370[FR3] 
        FSUB-STI        #<TN t370[FR3]>
        WAIT

VOP */DOUBLE-FLOAT t328[FR2] t328[FR2] => t371[FR0] 
        FSTP    #<TN t191[FR0]>
        FLD     #<TN t372[FR1]>
        FMULD   #<TN t328[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t370[FR3] t371[FR0] => t373[FR0] 
        FADDD   #<TN t370[FR3]>
        WAIT

VOP <0/DOUBLE-FLOAT t373[FR0] {# T 0.0d0} 
L281:
        FTST
        FNSTSW
        AND     #<TN t66[AH]>, 69
        CMP     #<TN t66[AH]>, 1
        JMP     NE, L282

L283:

VOP MOVE 'NIL!374 => t375[EAX] 
        MOV     #<TN t375[EAX]>, 134217739

L284:

VOP KNOWN-RETURN t148[S0] t376[S1] t150[EAX] {#} 
L285:
        LEA     #<TN t64[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t65[EBP]>, #<TN t148[S0]>
        RET     4
L286:

L282:

VOP FSQRT t373[FR0] => t377[FR0] 
L287:
        FSQRT
        WAIT

VOP +/DOUBLE-FLOAT t356[FR1] t377[FR0] => t378[FR0] 
        FADDD   #<TN t356[FR1]>
        WAIT

VOP <0/DOUBLE-FLOAT t378[FR0] {# NIL 0.0d0} 
L288:
        FTST
        FNSTSW
        AND     #<TN t66[AH]>, 69
        CMP     #<TN t66[AH]>, 1
        JMP     E, L283

L289:

VOP INSTANCE-INDEX-REF SCENE!145[S8]>t379[EAX] '0!157 => t380[EAX] 
        MOV     #<TN t379[EAX]>, #<TN SCENE!145[S8]>
        MOV     #<TN t380[EAX]>, DWORD PTR [EAX+3]

VOP IF-EQ t380[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!213[Const10]>t381[ECX]
          {# NIL}
          
        CMP     #<TN t380[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!213[Const10]>
        JMP     E, L290

L291:

VOP INSTANCE-INDEX-REF t380[EAX] '12!215 => t382[ESI] 
        MOV     #<TN t382[ESI]>, DWORD PTR [EAX+51]

VOP FAST-IF->-C/FIXNUM t382[ESI] {# NIL 3} 
        CMP     #<TN t382[ESI]>, 12
        JMP     G, L292

L293:

VOP MOVE 'T!383 => t375[EAX] 
        MOV     #<TN t375[EAX]>, 134217767

VOP BRANCH {#} 
        JMP     L284

L292:

VOP INSTANCE-INDEX-REF t380[EAX] '11!297 => t384[EAX] 
        MOV     #<TN t384[EAX]>, DWORD PTR [EAX+47]

VOP DATA-VECTOR-REF/SIMPLE-VECTOR t384[EAX] '3!89 => t385[EAX] 
        MOV     #<TN t385[EAX]>, DWORD PTR [EAX+13]

VOP IF-EQ t385[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!213[Const10]>t386[ECX]
          {# T}
          
        CMP     #<TN t385[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!213[Const10]>
        JMP     NE, L293

L290:

VOP INSTANCE-INDEX-REF SCENE!145[S8]>t387[EAX] '2!302 => t388[ESI] 
        MOV     #<TN t387[EAX]>, #<TN SCENE!145[S8]>
        MOV     #<TN t388[ESI]>, DWORD PTR [EAX+11]

L294:
L295:

VOP BRANCH {#} 
        JMP     L296

L297:

VOP MOVE-OPERAND #:INDEX1598!389[ESI] {SB-VM::STORE-STACK} => t390[S2] 
        MOV     #<TN t390[S2]>, #<TN #:INDEX1598!389[ESI]>

VOP MOVE-OPERAND t147[EBX] {SB-VM::STORE-STACK} => t391[S3] 
        MOV     #<TN t391[S3]>, #<TN t147[EBX]>

VOP MOVE-OPERAND t149[EDX] {SB-VM::STORE-STACK} => t392[S5] 
        MOV     #<TN t392[S5]>, #<TN t149[EDX]>

VOP SLOT #:INDEX1598!389[ESI] {CAR 0 3} => t393[ECX] 
        MOV     #<TN t393[ECX]>, DWORD PTR [ESI-3]

VOP CURRENT-FP => t394[EDI] 
        MOV     #<TN t394[EDI]>, #<TN t65[EBP]>

VOP ALLOCATE-FRAME {#} => t395[EAX] t396[IGNORE-ME] 
        MOV     #<TN t395[EAX]>, #<TN t64[ESP]>
        SUB     #<TN t64[ESP]>, 64

VOP MOVE-ARG t393[ECX] t395[EAX] => SCENE!145[S8] 
        MOV     DWORD PTR [EAX-36], #<TN t393[ECX]>

VOP MOVE-ARG t394[EDI] t395[EAX] => t148[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t394[EDI]>

VOP KNOWN-CALL-LOCAL t395[EAX] t396[IGNORE-ME] SCENE!145[S8] t149[EDX]
                     t147[EBX] t148[S0]
                     {# # #}
                     => t150[EAX] 
L298:
        MOV     #<TN t65[EBP]>, #<TN t395[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L299)
L300:
        JMP     L91
L299:
L301:
L302:

VOP MOVE-OPERAND t392[S5] {SB-VM::LOAD-STACK} => t149[EDX] 
        MOV     #<TN t149[EDX]>, #<TN t392[S5]>

VOP MOVE-OPERAND t391[S3] {SB-VM::LOAD-STACK} => t147[EBX] 
        MOV     #<TN t147[EBX]>, #<TN t391[S3]>

VOP MOVE-OPERAND t390[S2] {SB-VM::LOAD-STACK} => #:INDEX1598!389[ESI] 
        MOV     #<TN #:INDEX1598!389[ESI]>, #<TN t390[S2]>

VOP IF-EQ t150[EAX] 'NIL!151 {# T} 
        CMP     #<TN t150[EAX]>, 134217739
        JMP     NE, L303

L304:

VOP SLOT #:INDEX1598!389[ESI] {CDR 1 3} => t397[ESI] 
        MOV     #<TN t397[ESI]>, DWORD PTR [ESI+1]

L296:

VOP IF-EQ #:INDEX1598!389[ESI] 'NIL!151 {# T} 
        CMP     #<TN #:INDEX1598!389[ESI]>, 134217739
        JMP     NE, L297

L305:

VOP MOVE 'NIL!374 => t375[EAX] 
        MOV     #<TN t375[EAX]>, 134217739

VOP BRANCH {#} 
        JMP     L284

L303:

VOP BRANCH {#} 
        JMP     L284

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME +V {12618281}>

; 00000000:       2A0C00           SUB CL, [EAX+EAX]
;      003:       0000             ADD [EAX], AL
;      005:       0000             ADD [EAX], AL
;      007:       0000             ADD [EAX], AL
;      009:       0000             ADD [EAX], AL
;      00B:       0000             ADD [EAX], AL
;      00D:       0000             ADD [EAX], AL
;      00F:       0000             ADD [EAX], AL
;      011:       0000             ADD [EAX], AL
;      013:       0000             ADD [EAX], AL
;      015:       0000             ADD [EAX], AL
;      017:       0000             ADD [EAX], AL
;      019:       0000             ADD [EAX], AL
;      01B:       008F45F88D65     ADD [EDI+1703802949], CL
;      021:       C08B45F08955EC   ROR BYTE PTR [EBX+1435103301], -20
;      028:       8975F4           MOV [EBP-12], ESI
;      02B:       8945E8           MOV [EBP-24], EAX
;      02E:       897DDC           MOV [EBP-36], EDI
;      031:       8B0511000000     MOV EAX, [#x11]
;      037:       8B4811           MOV ECX, [EAX+17]
;      03A:       64               BYTE #X64
;      03B:       8B09             MOV ECX, [ECX]
;      03D:       83F95A           CMP ECX, 90
;      040:       7503             JNE L0
;      042:       8B48FD           MOV ECX, [EAX-3]
;      045: L0:   896DF0           MOV [EBP-16], EBP
;      048:       8B0515000000     MOV EAX, [#x15]
;      04E:       DDD9             FSTPD FR1
;      050:       DD4001           FLDD [EAX+1]
;      053:       D9C9             FXCH FR1
;      055:       8BC4             MOV EAX, ESP
;      057:       83EC40           SUB ESP, 64
;      05A:       8948D8           MOV [EAX-40], ECX
;      05D:       8B55E8           MOV EDX, [EBP-24]
;      060:       8950D4           MOV [EAX-44], EDX
;      063:       8B5DF4           MOV EBX, [EBP-12]
;      066:       8958E0           MOV [EAX-32], EBX
;      069:       8BF7             MOV ESI, EDI
;      06B:       8B7DF0           MOV EDI, [EBP-16]
;      06E:       8978FC           MOV [EAX-4], EDI
;      071:       8BE8             MOV EBP, EAX
;      073:       C745F8A8000000   MOV DWORD PTR [EBP-8], 168
;      07A:       E904030000       JMP L22
;      07F:       8B7DDC           MOV EDI, [EBP-36]
;      082:       8B0515000000     MOV EAX, [#x15]
;      088:       DDD8             FSTPD FR0
;      08A:       DD4001           FLDD [EAX+1]
;      08D:       DDE1             FUCOM FR1
;      08F:       DFE0             FNSTSW
;      091:       80E445           AND AH, 69
;      094:       80FC40           CMP AH, 64
;      097:       7510             JNE L2
;      099:       8B15E4040008     MOV EDX, [#x80004E4]
;      09F: L1:   8D65F8           LEA ESP, [EBP-8]
;      0A2:       F8               CLC
;      0A3:       8B6DFC           MOV EBP, [EBP-4]
;      0A6:       C20400           RET 4
;      0A9: L2:   DDD8             FSTPD FR0
;      0AB:       DD4101           FLDD [ECX+1]
;      0AE:       8B45EC           MOV EAX, [EBP-20]
;      0B1:       DDDA             FSTPD FR2
;      0B3:       DD4001           FLDD [EAX+1]
;      0B6:       D9CA             FXCH FR2
;      0B8:       DCCA             FMUL-STI FR2
;      0BA:       9B               WAIT
;      0BB:       DDD8             FSTPD FR0
;      0BD:       DD4109           FLDD [ECX+9]
;      0C0:       8B45EC           MOV EAX, [EBP-20]
;      0C3:       DDDB             FSTPD FR3
;      0C5:       DD4009           FLDD [EAX+9]
;      0C8:       D9CB             FXCH FR3
;      0CA:       D8CB             FMULD FR3
;      0CC:       9B               WAIT
;      0CD:       DCC2             FADD-STI FR2
;      0CF:       9B               WAIT
;      0D0:       DDD8             FSTPD FR0
;      0D2:       DD4111           FLDD [ECX+17]
;      0D5:       8B45EC           MOV EAX, [EBP-20]
;      0D8:       DDDB             FSTPD FR3
;      0DA:       DD4011           FLDD [EAX+17]
;      0DD:       D9CB             FXCH FR3
;      0DF:       D8CB             FMULD FR3
;      0E1:       9B               WAIT
;      0E2:       D8C2             FADDD FR2
;      0E4:       DD55E0           FSTD [EBP-32]
;      0E7:       DDD8             FSTPD FR0
;      0E9:       DD45E0           FLDD [EBP-32]
;      0EC:       D9E4             FTST
;      0EE:       DFE0             FNSTSW
;      0F0:       80E445           AND AH, 69
;      0F3:       80FC01           CMP AH, 1
;      0F6:       7508             JNE L3
;      0F8:       8B15E4040008     MOV EDX, [#x80004E4]
;      0FE:       EB9F             JMP L1
;      100: L3:   8B45F4           MOV EAX, [EBP-12]
;      103:       DDD8             FSTPD FR0
;      105:       DD4001           FLDD [EAX+1]
;      108:       D8C9             FMULD FR1
;      10A:       DDD2             FSTD FR2
;      10C:       8B45F4           MOV EAX, [EBP-12]
;      10F:       DDD8             FSTPD FR0
;      111:       DD4009           FLDD [EAX+9]
;      114:       D8C9             FMULD FR1
;      116:       DDD3             FSTD FR3
;      118:       8B45F4           MOV EAX, [EBP-12]
;      11B:       DDD8             FSTPD FR0
;      11D:       DD4011           FLDD [EAX+17]
;      120:       D8C9             FMULD FR1
;      122:       9B               WAIT
;      123:       BAD6000000       MOV EDX, 214
;      128:       BB0C000000       MOV EBX, 12
;      12D:       BE18000000       MOV ESI, 24
;      132:       8D460F           LEA EAX, [ESI+15]
;      135:       83E0F8           AND EAX, -8
;      138:       64               BYTE #X64
;      139:       800D4800000004   OR BYTE PTR [#x48], 4
;      140:       64               BYTE #X64
;      141:       030520000000     ADD EAX, [#x20]
;      147:       64               BYTE #X64
;      148:       3B0524000000     CMP EAX, [#x24]
;      14E:       7607             JBE L5
;      150:       E800000000       CALL L4
;      155: L4:   EB15             JMP L6
;      157: L5:   64               BYTE #X64
;      158:       330520000000     XOR EAX, [#x20]
;      15E:       64               BYTE #X64
;      15F:       310520000000     XOR [#x20], EAX
;      165:       64               BYTE #X64
;      166:       330520000000     XOR EAX, [#x20]
;      16C: L6:   8D4007           LEA EAX, [EAX+7]
;      16F:       8950F9           MOV [EAX-7], EDX
;      172:       8958FD           MOV [EAX-3], EBX
;      175:       64               BYTE #X64
;      176:       80354800000004   XOR BYTE PTR [#x48], 4
;      17D:       7403             JEQ L7
;      17F:       0F0B09           BREAK 9                    ; pending interrupt trap
;      182: L7:   D9CA             FXCH FR2
;      184:       DD5001           FSTD [EAX+1]
;      187:       D9CA             FXCH FR2
;      189:       D9CB             FXCH FR3
;      18B:       DD5009           FSTD [EAX+9]
;      18E:       D9CB             FXCH FR3
;      190:       DD5011           FSTD [EAX+17]
;      193:       DDD8             FSTPD FR0
;      195:       DD4701           FLDD [EDI+1]
;      198:       DDD9             FSTPD FR1
;      19A:       DD4001           FLDD [EAX+1]
;      19D:       D9C9             FXCH FR1
;      19F:       DCC1             FADD-STI FR1
;      1A1:       9B               WAIT
;      1A2:       DDD8             FSTPD FR0
;      1A4:       DD4709           FLDD [EDI+9]
;      1A7:       DDDA             FSTPD FR2
;      1A9:       DD4009           FLDD [EAX+9]
;      1AC:       D9CA             FXCH FR2
;      1AE:       DCC2             FADD-STI FR2
;      1B0:       9B               WAIT
;      1B1:       DDD8             FSTPD FR0
;      1B3:       DD4711           FLDD [EDI+17]
;      1B6:       DDDB             FSTPD FR3
;      1B8:       DD4011           FLDD [EAX+17]
;      1BB:       D9CB             FXCH FR3
;      1BD:       D8C3             FADDD FR3
;      1BF:       9B               WAIT
;      1C0:       BAD6000000       MOV EDX, 214
;      1C5:       BB0C000000       MOV EBX, 12
;      1CA:       BE18000000       MOV ESI, 24
;      1CF:       8D460F           LEA EAX, [ESI+15]
;      1D2:       83E0F8           AND EAX, -8
;      1D5:       64               BYTE #X64
;      1D6:       800D4800000004   OR BYTE PTR [#x48], 4
;      1DD:       64               BYTE #X64
;      1DE:       030520000000     ADD EAX, [#x20]
;      1E4:       64               BYTE #X64
;      1E5:       3B0524000000     CMP EAX, [#x24]
;      1EB:       7607             JBE L9
;      1ED:       E800000000       CALL L8
;      1F2: L8:   EB15             JMP L10
;      1F4: L9:   64               BYTE #X64
;      1F5:       330520000000     XOR EAX, [#x20]
;      1FB:       64               BYTE #X64
;      1FC:       310520000000     XOR [#x20], EAX
;      202:       64               BYTE #X64
;      203:       330520000000     XOR EAX, [#x20]
;      209: L10:  8D4007           LEA EAX, [EAX+7]
;      20C:       8950F9           MOV [EAX-7], EDX
;      20F:       8958FD           MOV [EAX-3], EBX
;      212:       64               BYTE #X64
;      213:       80354800000004   XOR BYTE PTR [#x48], 4
;      21A:       7403             JEQ L11
;      21C:       0F0B09           BREAK 9                    ; pending interrupt trap
;      21F: L11:  D9C9             FXCH FR1
;      221:       DD5001           FSTD [EAX+1]
;      224:       D9C9             FXCH FR1
;      226:       D9CA             FXCH FR2
;      228:       DD5009           FSTD [EAX+9]
;      22B:       D9CA             FXCH FR2
;      22D:       DD5011           FSTD [EAX+17]
;      230:       DDD8             FSTPD FR0
;      232:       DD4101           FLDD [ECX+1]
;      235:       8B1519000000     MOV EDX, [#x19]
;      23B:       DDD9             FSTPD FR1
;      23D:       DD4201           FLDD [EDX+1]
;      240:       D9C9             FXCH FR1
;      242:       DCC9             FMUL-STI FR1
;      244:       9B               WAIT
;      245:       DDD8             FSTPD FR0
;      247:       DD4109           FLDD [ECX+9]
;      24A:       8B1519000000     MOV EDX, [#x19]
;      250:       DDDA             FSTPD FR2
;      252:       DD4201           FLDD [EDX+1]
;      255:       D9CA             FXCH FR2
;      257:       DCCA             FMUL-STI FR2
;      259:       9B               WAIT
;      25A:       DDD8             FSTPD FR0
;      25C:       DD4111           FLDD [ECX+17]
;      25F:       8B0D19000000     MOV ECX, [#x19]
;      265:       DDDB             FSTPD FR3
;      267:       DD4101           FLDD [ECX+1]
;      26A:       D9CB             FXCH FR3
;      26C:       D8CB             FMULD FR3
;      26E:       9B               WAIT
;      26F:       BAD6000000       MOV EDX, 214
;      274:       BB0C000000       MOV EBX, 12
;      279:       BE18000000       MOV ESI, 24
;      27E:       8D4E0F           LEA ECX, [ESI+15]
;      281:       83E1F8           AND ECX, -8
;      284:       64               BYTE #X64
;      285:       800D4800000004   OR BYTE PTR [#x48], 4
;      28C:       64               BYTE #X64
;      28D:       030D20000000     ADD ECX, [#x20]
;      293:       64               BYTE #X64
;      294:       3B0D24000000     CMP ECX, [#x24]
;      29A:       7607             JBE L13
;      29C:       E800000000       CALL L12
;      2A1: L12:  EB15             JMP L14
;      2A3: L13:  64               BYTE #X64
;      2A4:       330D20000000     XOR ECX, [#x20]
;      2AA:       64               BYTE #X64
;      2AB:       310D20000000     XOR [#x20], ECX
;      2B1:       64               BYTE #X64
;      2B2:       330D20000000     XOR ECX, [#x20]
;      2B8: L14:  8D4907           LEA ECX, [ECX+7]
;      2BB:       8951F9           MOV [ECX-7], EDX
;      2BE:       8959FD           MOV [ECX-3], EBX
;      2C1:       64               BYTE #X64
;      2C2:       80354800000004   XOR BYTE PTR [#x48], 4
;      2C9:       7403             JEQ L15
;      2CB:       0F0B09           BREAK 9                    ; pending interrupt trap
;      2CE: L15:  D9C9             FXCH FR1
;      2D0:       DD5101           FSTD [ECX+1]
;      2D3:       D9C9             FXCH FR1
;      2D5:       D9CA             FXCH FR2
;      2D7:       DD5109           FSTD [ECX+9]
;      2DA:       D9CA             FXCH FR2
;      2DC:       DD5111           FSTD [ECX+17]
;      2DF:       8BDC             MOV EBX, ESP
;      2E1:       83EC0C           SUB ESP, 12
;      2E4:       8BD0             MOV EDX, EAX
;      2E6:       8BF9             MOV EDI, ECX
;      2E8:       8B051D000000     MOV EAX, [#x1D]
;      2EE:       B908000000       MOV ECX, 8
;      2F3:       896BFC           MOV [EBX-4], EBP
;      2F6:       8BEB             MOV EBP, EBX
;      2F8:       FF5005           CALL DWORD PTR [EAX+5]
;      2FB:       7302             JNB L16
;      2FD:       8BE3             MOV ESP, EBX
;      2FF: L16:  8BF5             MOV ESI, EBP
;      301:       8BC4             MOV EAX, ESP
;      303:       83EC40           SUB ESP, 64
;      306:       8B4DE8           MOV ECX, [EBP-24]
;      309:       8948DC           MOV [EAX-36], ECX
;      30C:       8B5DEC           MOV EBX, [EBP-20]
;      30F:       8970FC           MOV [EAX-4], ESI
;      312:       8BE8             MOV EBP, EAX
;      314:       C745F849030000   MOV DWORD PTR [EBP-8], 841
;      31B:       E951050000       JMP L54
;      320:       3D0B000008       CMP EAX, 134217739
;      325:       740B             JEQ L17
;      327:       8B15E4040008     MOV EDX, [#x80004E4]
;      32D:       E96DFDFFFF       JMP L1
;      332: L17:  DDD8             FSTPD FR0
;      334:       DD45E0           FLDD [EBP-32]
;      337:       64               BYTE #X64
;      338:       800D4800000004   OR BYTE PTR [#x48], 4
;      33F:       BA10000000       MOV EDX, 16
;      344:       64               BYTE #X64
;      345:       031520000000     ADD EDX, [#x20]
;      34B:       64               BYTE #X64
;      34C:       3B1524000000     CMP EDX, [#x24]
;      352:       7607             JBE L19
;      354:       E800000000       CALL L18
;      359: L18:  EB0A             JMP L20
;      35B: L19:  64               BYTE #X64
;      35C:       891520000000     MOV [#x20], EDX
;      362:       83EA10           SUB EDX, 16
;      365: L20:  C70216030000     MOV DWORD PTR [EDX], 790
;      36B:       8D5207           LEA EDX, [EDX+7]
;      36E:       DD5201           FSTD [EDX+1]
;      371:       64               BYTE #X64
;      372:       80354800000004   XOR BYTE PTR [#x48], 4
;      379:       7403             JEQ L21
;      37B:       0F0B09           BREAK 9                    ; pending interrupt trap
;      37E: L21:  E91CFDFFFF       JMP L1
;      383: L22:  8B45D4           MOV EAX, [EBP-44]
;      386:       8B7807           MOV EDI, [EAX+7]
;      389:       8B4DD4           MOV ECX, [EBP-44]
;      38C:       8B41FF           MOV EAX, [ECX-1]
;      38F:       C1E808           SHR EAX, 8
;      392:       DDDB             FSTPD FR3
;      394:       DD4481FB         FLDD [ECX+EAX*4-5]
;      398:       D9CB             FXCH FR3
;      39A:       DDD8             FSTPD FR0
;      39C:       DD4701           FLDD [EDI+1]
;      39F:       DDDA             FSTPD FR2
;      3A1:       DD4601           FLDD [ESI+1]
;      3A4:       D9CA             FXCH FR2
;      3A6:       DCE2             FSUBR-STI FR2
;      3A8:       9B               WAIT
;      3A9:       DDD8             FSTPD FR0
;      3AB:       DD4709           FLDD [EDI+9]
;      3AE:       DDDC             FSTPD FR4
;      3B0:       DD4609           FLDD [ESI+9]
;      3B3:       D9CC             FXCH FR4
;      3B5:       DCE4             FSUBR-STI FR4
;      3B7:       9B               WAIT
;      3B8:       DDD8             FSTPD FR0
;      3BA:       DD4711           FLDD [EDI+17]
;      3BD:       DDDD             FSTPD FR5
;      3BF:       DD4611           FLDD [ESI+17]
;      3C2:       D9CD             FXCH FR5
;      3C4:       D8E5             FSUBD FR5
;      3C6:       9B               WAIT
;      3C7:       B9D6000000       MOV ECX, 214
;      3CC:       BA0C000000       MOV EDX, 12
;      3D1:       BB18000000       MOV EBX, 24
;      3D6:       8D430F           LEA EAX, [EBX+15]
;      3D9:       83E0F8           AND EAX, -8
;      3DC:       64               BYTE #X64
;      3DD:       800D4800000004   OR BYTE PTR [#x48], 4
;      3E4:       64               BYTE #X64
;      3E5:       030520000000     ADD EAX, [#x20]
;      3EB:       64               BYTE #X64
;      3EC:       3B0524000000     CMP EAX, [#x24]
;      3F2:       7607             JBE L24
;      3F4:       E800000000       CALL L23
;      3F9: L23:  EB15             JMP L25
;      3FB: L24:  64               BYTE #X64
;      3FC:       330520000000     XOR EAX, [#x20]
;      402:       64               BYTE #X64
;      403:       310520000000     XOR [#x20], EAX
;      409:       64               BYTE #X64
;      40A:       330520000000     XOR EAX, [#x20]
;      410: L25:  8D4007           LEA EAX, [EAX+7]
;      413:       8948F9           MOV [EAX-7], ECX
;      416:       8950FD           MOV [EAX-3], EDX
;      419:       64               BYTE #X64
;      41A:       80354800000004   XOR BYTE PTR [#x48], 4
;      421:       7403             JEQ L26
;      423:       0F0B09           BREAK 9                    ; pending interrupt trap
;      426: L26:  D9CA             FXCH FR2
;      428:       DD5001           FSTD [EAX+1]
;      42B:       D9CA             FXCH FR2
;      42D:       D9CC             FXCH FR4
;      42F:       DD5009           FSTD [EAX+9]
;      432:       D9CC             FXCH FR4
;      434:       DD5011           FSTD [EAX+17]
;      437:       DDD8             FSTPD FR0
;      439:       DD4001           FLDD [EAX+1]
;      43C:       8B4DE0           MOV ECX, [EBP-32]
;      43F:       DDDA             FSTPD FR2
;      441:       DD4101           FLDD [ECX+1]
;      444:       D9CA             FXCH FR2
;      446:       DCCA             FMUL-STI FR2
;      448:       9B               WAIT
;      449:       DDD8             FSTPD FR0
;      44B:       DD4009           FLDD [EAX+9]
;      44E:       8B4DE0           MOV ECX, [EBP-32]
;      451:       DDDC             FSTPD FR4
;      453:       DD4109           FLDD [ECX+9]
;      456:       D9CC             FXCH FR4
;      458:       D8CC             FMULD FR4
;      45A:       9B               WAIT
;      45B:       DCC2             FADD-STI FR2
;      45D:       9B               WAIT
;      45E:       DDD8             FSTPD FR0
;      460:       DD4011           FLDD [EAX+17]
;      463:       8B4DE0           MOV ECX, [EBP-32]
;      466:       DDDC             FSTPD FR4
;      468:       DD4111           FLDD [ECX+17]
;      46B:       D9CC             FXCH FR4
;      46D:       D8CC             FMULD FR4
;      46F:       9B               WAIT
;      470:       DCC2             FADD-STI FR2
;      472:       9B               WAIT
;      473:       DDD8             FSTPD FR0
;      475:       D9C1             FLDD FR1
;      477:       D8CA             FMULD FR2
;      479:       DDD4             FSTD FR4
;      47B:       DDD8             FSTPD FR0
;      47D:       DD4001           FLDD [EAX+1]
;      480:       DDDD             FSTPD FR5
;      482:       DD4001           FLDD [EAX+1]
;      485:       D9CD             FXCH FR5
;      487:       DCCD             FMUL-STI FR5
;      489:       9B               WAIT
;      48A:       DDD8             FSTPD FR0
;      48C:       DD4009           FLDD [EAX+9]
;      48F:       DDDE             FSTPD FR6
;      491:       DD4009           FLDD [EAX+9]
;      494:       D9CE             FXCH FR6
;      496:       D8CE             FMULD FR6
;      498:       9B               WAIT
;      499:       DCC5             FADD-STI FR5
;      49B:       9B               WAIT
;      49C:       DDD8             FSTPD FR0
;      49E:       DD4011           FLDD [EAX+17]
;      4A1:       DDDE             FSTPD FR6
;      4A3:       DD4011           FLDD [EAX+17]
;      4A6:       D9CE             FXCH FR6
;      4A8:       D8CE             FMULD FR6
;      4AA:       9B               WAIT
;      4AB:       D8C5             FADDD FR5
;      4AD:       9B               WAIT
;      4AE:       DCEC             FSUB-STI FR4
;      4B0:       9B               WAIT
;      4B1:       DDD8             FSTPD FR0
;      4B3:       D9C2             FLDD FR2
;      4B5:       D8CB             FMULD FR3
;      4B7:       9B               WAIT
;      4B8:       D8C4             FADDD FR4
;      4BA:       9B               WAIT
;      4BB:       D9E4             FTST
;      4BD:       DFE0             FNSTSW
;      4BF:       80E445           AND AH, 69
;      4C2:       80FC01           CMP AH, 1
;      4C5:       0F8556030000     JNE L51
;      4CB:       8B0515000000     MOV EAX, [#x15]
;      4D1:       DDDA             FSTPD FR2
;      4D3:       DD4001           FLDD [EAX+1]
;      4D6:       D9CA             FXCH FR2
;      4D8: L27:  DDD8             FSTPD FR0
;      4DA:       D9C1             FLDD FR1
;      4DC:       D8D1             FCOMD FR1
;      4DE:       DFE0             FNSTSW
;      4E0:       80E445           AND AH, 69
;      4E3:       80FC01           CMP AH, 1
;      4E6:       0F8530030000     JNE L50
;      4EC:       8B45D4           MOV EAX, [EBP-44]
;      4EF:       8B4003           MOV EAX, [EAX+3]
;      4F2:       3B0521000000     CMP EAX, [#x21]
;      4F8:       0F84C9020000     JEQ L47
;      4FE:       8B4833           MOV ECX, [EAX+51]
;      501:       894DF4           MOV [EBP-12], ECX
;      504:       837DF40C         CMP DWORD PTR [EBP-12], 12
;      508:       0F8FA7020000     JNLE L46
;      50E: L28:  8B45E0           MOV EAX, [EBP-32]
;      511:       DDD8             FSTPD FR0
;      513:       DD4001           FLDD [EAX+1]
;      516:       D8CA             FMULD FR2
;      518:       DDD1             FSTD FR1
;      51A:       8B45E0           MOV EAX, [EBP-32]
;      51D:       DDD8             FSTPD FR0
;      51F:       DD4009           FLDD [EAX+9]
;      522:       D8CA             FMULD FR2
;      524:       DDD3             FSTD FR3
;      526:       8B45E0           MOV EAX, [EBP-32]
;      529:       DDD8             FSTPD FR0
;      52B:       DD4011           FLDD [EAX+17]
;      52E:       D8CA             FMULD FR2
;      530:       9B               WAIT
;      531:       B9D6000000       MOV ECX, 214
;      536:       BA0C000000       MOV EDX, 12
;      53B:       BB18000000       MOV EBX, 24
;      540:       8D430F           LEA EAX, [EBX+15]
;      543:       83E0F8           AND EAX, -8
;      546:       64               BYTE #X64
;      547:       800D4800000004   OR BYTE PTR [#x48], 4
;      54E:       64               BYTE #X64
;      54F:       030520000000     ADD EAX, [#x20]
;      555:       64               BYTE #X64
;      556:       3B0524000000     CMP EAX, [#x24]
;      55C:       7607             JBE L30
;      55E:       E800000000       CALL L29
;      563: L29:  EB15             JMP L31
;      565: L30:  64               BYTE #X64
;      566:       330520000000     XOR EAX, [#x20]
;      56C:       64               BYTE #X64
;      56D:       310520000000     XOR [#x20], EAX
;      573:       64               BYTE #X64
;      574:       330520000000     XOR EAX, [#x20]
;      57A: L31:  8D4007           LEA EAX, [EAX+7]
;      57D:       8948F9           MOV [EAX-7], ECX
;      580:       8950FD           MOV [EAX-3], EDX
;      583:       64               BYTE #X64
;      584:       80354800000004   XOR BYTE PTR [#x48], 4
;      58B:       7403             JEQ L32
;      58D:       0F0B09           BREAK 9                    ; pending interrupt trap
;      590: L32:  D9C9             FXCH FR1
;      592:       DD5001           FSTD [EAX+1]
;      595:       D9C9             FXCH FR1
;      597:       D9CB             FXCH FR3
;      599:       DD5009           FSTD [EAX+9]
;      59C:       D9CB             FXCH FR3
;      59E:       DD5011           FSTD [EAX+17]
;      5A1:       DDD8             FSTPD FR0
;      5A3:       DD4601           FLDD [ESI+1]
;      5A6:       DDD9             FSTPD FR1
;      5A8:       DD4001           FLDD [EAX+1]
;      5AB:       D9C9             FXCH FR1
;      5AD:       DCC1             FADD-STI FR1
;      5AF:       9B               WAIT
;      5B0:       DDD8             FSTPD FR0
;      5B2:       DD4609           FLDD [ESI+9]
;      5B5:       DDDB             FSTPD FR3
;      5B7:       DD4009           FLDD [EAX+9]
;      5BA:       D9CB             FXCH FR3
;      5BC:       DCC3             FADD-STI FR3
;      5BE:       9B               WAIT
;      5BF:       DDD8             FSTPD FR0
;      5C1:       DD4611           FLDD [ESI+17]
;      5C4:       DDDC             FSTPD FR4
;      5C6:       DD4011           FLDD [EAX+17]
;      5C9:       D9CC             FXCH FR4
;      5CB:       D8C4             FADDD FR4
;      5CD:       9B               WAIT
;      5CE:       B9D6000000       MOV ECX, 214
;      5D3:       BA0C000000       MOV EDX, 12
;      5D8:       BB18000000       MOV EBX, 24
;      5DD:       8D430F           LEA EAX, [EBX+15]
;      5E0:       83E0F8           AND EAX, -8
;      5E3:       64               BYTE #X64
;      5E4:       800D4800000004   OR BYTE PTR [#x48], 4
;      5EB:       64               BYTE #X64
;      5EC:       030520000000     ADD EAX, [#x20]
;      5F2:       64               BYTE #X64
;      5F3:       3B0524000000     CMP EAX, [#x24]
;      5F9:       7607             JBE L34
;      5FB:       E800000000       CALL L33
;      600: L33:  EB15             JMP L35
;      602: L34:  64               BYTE #X64
;      603:       330520000000     XOR EAX, [#x20]
;      609:       64               BYTE #X64
;      60A:       310520000000     XOR [#x20], EAX
;      610:       64               BYTE #X64
;      611:       330520000000     XOR EAX, [#x20]
;      617: L35:  8D4007           LEA EAX, [EAX+7]
;      61A:       8948F9           MOV [EAX-7], ECX
;      61D:       8950FD           MOV [EAX-3], EDX
;      620:       64               BYTE #X64
;      621:       80354800000004   XOR BYTE PTR [#x48], 4
;      628:       7403             JEQ L36
;      62A:       0F0B09           BREAK 9                    ; pending interrupt trap
;      62D: L36:  D9C9             FXCH FR1
;      62F:       DD5001           FSTD [EAX+1]
;      632:       D9C9             FXCH FR1
;      634:       D9CB             FXCH FR3
;      636:       DD5009           FSTD [EAX+9]
;      639:       D9CB             FXCH FR3
;      63B:       DD5011           FSTD [EAX+17]
;      63E:       DDD8             FSTPD FR0
;      640:       DD4001           FLDD [EAX+1]
;      643:       DDD9             FSTPD FR1
;      645:       DD4701           FLDD [EDI+1]
;      648:       D9C9             FXCH FR1
;      64A:       DCE1             FSUBR-STI FR1
;      64C:       9B               WAIT
;      64D:       DDD8             FSTPD FR0
;      64F:       DD4009           FLDD [EAX+9]
;      652:       DDDB             FSTPD FR3
;      654:       DD4709           FLDD [EDI+9]
;      657:       D9CB             FXCH FR3
;      659:       DCE3             FSUBR-STI FR3
;      65B:       9B               WAIT
;      65C:       DDD8             FSTPD FR0
;      65E:       DD4011           FLDD [EAX+17]
;      661:       DDDC             FSTPD FR4
;      663:       DD4711           FLDD [EDI+17]
;      666:       D9CC             FXCH FR4
;      668:       D8E4             FSUBD FR4
;      66A:       9B               WAIT
;      66B:       B9D6000000       MOV ECX, 214
;      670:       BA0C000000       MOV EDX, 12
;      675:       BB18000000       MOV EBX, 24
;      67A:       8D430F           LEA EAX, [EBX+15]
;      67D:       83E0F8           AND EAX, -8
;      680:       64               BYTE #X64
;      681:       800D4800000004   OR BYTE PTR [#x48], 4
;      688:       64               BYTE #X64
;      689:       030520000000     ADD EAX, [#x20]
;      68F:       64               BYTE #X64
;      690:       3B0524000000     CMP EAX, [#x24]
;      696:       7607             JBE L38
;      698:       E800000000       CALL L37
;      69D: L37:  EB15             JMP L39
;      69F: L38:  64               BYTE #X64
;      6A0:       330520000000     XOR EAX, [#x20]
;      6A6:       64               BYTE #X64
;      6A7:       310520000000     XOR [#x20], EAX
;      6AD:       64               BYTE #X64
;      6AE:       330520000000     XOR EAX, [#x20]
;      6B4: L39:  8D4007           LEA EAX, [EAX+7]
;      6B7:       8948F9           MOV [EAX-7], ECX
;      6BA:       8950FD           MOV [EAX-3], EDX
;      6BD:       64               BYTE #X64
;      6BE:       80354800000004   XOR BYTE PTR [#x48], 4
;      6C5:       7403             JEQ L40
;      6C7:       0F0B09           BREAK 9                    ; pending interrupt trap
;      6CA: L40:  D9C9             FXCH FR1
;      6CC:       DD5001           FSTD [EAX+1]
;      6CF:       D9C9             FXCH FR1
;      6D1:       D9CB             FXCH FR3
;      6D3:       DD5009           FSTD [EAX+9]
;      6D6:       D9CB             FXCH FR3
;      6D8:       DD5011           FSTD [EAX+17]
;      6DB:       DDD8             FSTPD FR0
;      6DD:       DD4001           FLDD [EAX+1]
;      6E0:       DDD9             FSTPD FR1
;      6E2:       DD4001           FLDD [EAX+1]
;      6E5:       D9C9             FXCH FR1
;      6E7:       DCC9             FMUL-STI FR1
;      6E9:       9B               WAIT
;      6EA:       DDD8             FSTPD FR0
;      6EC:       DD4009           FLDD [EAX+9]
;      6EF:       DDDB             FSTPD FR3
;      6F1:       DD4009           FLDD [EAX+9]
;      6F4:       D9CB             FXCH FR3
;      6F6:       D8CB             FMULD FR3
;      6F8:       9B               WAIT
;      6F9:       DCC1             FADD-STI FR1
;      6FB:       9B               WAIT
;      6FC:       DDD8             FSTPD FR0
;      6FE:       DD4011           FLDD [EAX+17]
;      701:       DDDB             FSTPD FR3
;      703:       DD4011           FLDD [EAX+17]
;      706:       D9CB             FXCH FR3
;      708:       D8CB             FMULD FR3
;      70A:       9B               WAIT
;      70B:       D8C1             FADDD FR1
;      70D:       9B               WAIT
;      70E:       D9FA             FSQRT
;      710:       9B               WAIT
;      711:       DDD9             FSTPD FR1
;      713:       D9E8             FLD1
;      715:       D9C9             FXCH FR1
;      717:       DCF9             FDIV-STI FR1
;      719:       9B               WAIT
;      71A:       DDD8             FSTPD FR0
;      71C:       DD4001           FLDD [EAX+1]
;      71F:       D8C9             FMULD FR1
;      721:       DDD3             FSTD FR3
;      723:       DDD8             FSTPD FR0
;      725:       DD4009           FLDD [EAX+9]
;      728:       D8C9             FMULD FR1
;      72A:       DDD4             FSTD FR4
;      72C:       DDD8             FSTPD FR0
;      72E:       DD4011           FLDD [EAX+17]
;      731:       D8C9             FMULD FR1
;      733:       9B               WAIT
;      734:       B9D6000000       MOV ECX, 214
;      739:       BA0C000000       MOV EDX, 12
;      73E:       BB18000000       MOV EBX, 24
;      743:       8D430F           LEA EAX, [EBX+15]
;      746:       83E0F8           AND EAX, -8
;      749:       64               BYTE #X64
;      74A:       800D4800000004   OR BYTE PTR [#x48], 4
;      751:       64               BYTE #X64
;      752:       030520000000     ADD EAX, [#x20]
;      758:       64               BYTE #X64
;      759:       3B0524000000     CMP EAX, [#x24]
;      75F:       7607             JBE L42
;      761:       E800000000       CALL L41
;      766: L41:  EB15             JMP L43
;      768: L42:  64               BYTE #X64
;      769:       330520000000     XOR EAX, [#x20]
;      76F:       64               BYTE #X64
;      770:       310520000000     XOR [#x20], EAX
;      776:       64               BYTE #X64
;      777:       330520000000     XOR EAX, [#x20]
;      77D: L43:  8D4007           LEA EAX, [EAX+7]
;      780:       8948F9           MOV [EAX-7], ECX
;      783:       8950FD           MOV [EAX-3], EDX
;      786:       64               BYTE #X64
;      787:       80354800000004   XOR BYTE PTR [#x48], 4
;      78E:       7403             JEQ L44
;      790:       0F0B09           BREAK 9                    ; pending interrupt trap
;      793: L44:  D9CB             FXCH FR3
;      795:       DD5001           FSTD [EAX+1]
;      798:       D9CB             FXCH FR3
;      79A:       D9CC             FXCH FR4
;      79C:       DD5009           FSTD [EAX+9]
;      79F:       D9CC             FXCH FR4
;      7A1:       DD5011           FSTD [EAX+17]
;      7A4:       D9CA             FXCH FR2
;      7A6:       DDD1             FSTD FR1
;      7A8:       D9CA             FXCH FR2
;      7AA:       8BC8             MOV ECX, EAX
;      7AC: L45:  8D65F8           LEA ESP, [EBP-8]
;      7AF:       8B6DFC           MOV EBP, [EBP-4]
;      7B2:       C20400           RET 4
;      7B5: L46:  8B402F           MOV EAX, [EAX+47]
;      7B8:       8B400D           MOV EAX, [EAX+13]
;      7BB:       3B0521000000     CMP EAX, [#x21]
;      7C1:       0F8547FDFFFF     JNE L28
;      7C7: L47:  8B45D4           MOV EAX, [EBP-44]
;      7CA:       8B780B           MOV EDI, [EAX+11]
;      7CD:       EB40             JMP L49
;      7CF: L48:  8B57FD           MOV EDX, [EDI-3]
;      7D2:       8B7F01           MOV EDI, [EDI+1]
;      7D5:       897DF0           MOV [EBP-16], EDI
;      7D8:       8975E4           MOV [EBP-28], ESI
;      7DB:       8B4DD8           MOV ECX, [EBP-40]
;      7DE:       896DF4           MOV [EBP-12], EBP
;      7E1:       8BC4             MOV EAX, ESP
;      7E3:       83EC40           SUB ESP, 64
;      7E6:       8948D8           MOV [EAX-40], ECX
;      7E9:       8950D4           MOV [EAX-44], EDX
;      7EC:       8B4DE0           MOV ECX, [EBP-32]
;      7EF:       8948E0           MOV [EAX-32], ECX
;      7F2:       8B4DF4           MOV ECX, [EBP-12]
;      7F5:       8948FC           MOV [EAX-4], ECX
;      7F8:       8BE8             MOV EBP, EAX
;      7FA:       C745F82F080000   MOV DWORD PTR [EBP-8], 2095
;      801:       E97DFBFFFF       JMP L22
;      806:       8B75E4           MOV ESI, [EBP-28]
;      809:       8B7DF0           MOV EDI, [EBP-16]
;      80C:       894DD8           MOV [EBP-40], ECX
;      80F: L49:  81FF0B000008     CMP EDI, 134217739
;      815:       75B8             JNE L48
;      817:       8B4DD8           MOV ECX, [EBP-40]
;      81A:       EB90             JMP L45
;      81C: L50:  8B4DD8           MOV ECX, [EBP-40]
;      81F:       EB8B             JMP L45
;      821: L51:  D9FA             FSQRT
;      823:       DDD3             FSTD FR3
;      825:       DDD8             FSTPD FR0
;      827:       D9C1             FLDD FR1
;      829:       D8C3             FADDD FR3
;      82B:       DDD4             FSTD FR4
;      82D:       DDD8             FSTPD FR0
;      82F:       D9C1             FLDD FR1
;      831:       D8E3             FSUBD FR3
;      833:       9B               WAIT
;      834:       D9CC             FXCH FR4
;      836:       D9E4             FTST
;      838:       D9CC             FXCH FR4
;      83A:       DFE0             FNSTSW
;      83C:       80E445           AND AH, 69
;      83F:       80FC01           CMP AH, 1
;      842:       7512             JNE L52
;      844:       8B0515000000     MOV EAX, [#x15]
;      84A:       DDDA             FSTPD FR2
;      84C:       DD4001           FLDD [EAX+1]
;      84F:       D9CA             FXCH FR2
;      851:       E982FCFFFF       JMP L27
;      856: L52:  D9E4             FTST
;      858:       DFE0             FNSTSW
;      85A:       80E445           AND AH, 69
;      85D:       740B             JEQ L53
;      85F:       D9CC             FXCH FR4
;      861:       DDD2             FSTD FR2
;      863:       D9CC             FXCH FR4
;      865:       E96EFCFFFF       JMP L27
;      86A: L53:  DDD2             FSTD FR2
;      86C:       E967FCFFFF       JMP L27
;      871: L54:  8B45DC           MOV EAX, [EBP-36]
;      874:       8B7007           MOV ESI, [EAX+7]
;      877:       8B4DDC           MOV ECX, [EBP-36]
;      87A:       8B41FF           MOV EAX, [ECX-1]
;      87D:       C1E808           SHR EAX, 8
;      880:       DDDA             FSTPD FR2
;      882:       DD4481FB         FLDD [ECX+EAX*4-5]
;      886:       D9CA             FXCH FR2
;      888:       DDD8             FSTPD FR0
;      88A:       DD4601           FLDD [ESI+1]
;      88D:       DDD9             FSTPD FR1
;      88F:       DD4201           FLDD [EDX+1]
;      892:       D9C9             FXCH FR1
;      894:       DCE1             FSUBR-STI FR1
;      896:       9B               WAIT
;      897:       DDD8             FSTPD FR0
;      899:       DD4609           FLDD [ESI+9]
;      89C:       DDDB             FSTPD FR3
;      89E:       DD4209           FLDD [EDX+9]
;      8A1:       D9CB             FXCH FR3
;      8A3:       DCE3             FSUBR-STI FR3
;      8A5:       9B               WAIT
;      8A6:       DDD8             FSTPD FR0
;      8A8:       DD4611           FLDD [ESI+17]
;      8AB:       DDDC             FSTPD FR4
;      8AD:       DD4211           FLDD [EDX+17]
;      8B0:       D9CC             FXCH FR4
;      8B2:       D8E4             FSUBD FR4
;      8B4:       9B               WAIT
;      8B5:       BED6000000       MOV ESI, 214
;      8BA:       BF0C000000       MOV EDI, 12
;      8BF:       B918000000       MOV ECX, 24
;      8C4:       8D410F           LEA EAX, [ECX+15]
;      8C7:       83E0F8           AND EAX, -8
;      8CA:       64               BYTE #X64
;      8CB:       800D4800000004   OR BYTE PTR [#x48], 4
;      8D2:       64               BYTE #X64
;      8D3:       030520000000     ADD EAX, [#x20]
;      8D9:       64               BYTE #X64
;      8DA:       3B0524000000     CMP EAX, [#x24]
;      8E0:       7607             JBE L56
;      8E2:       E800000000       CALL L55
;      8E7: L55:  EB15             JMP L57
;      8E9: L56:  64               BYTE #X64
;      8EA:       330520000000     XOR EAX, [#x20]
;      8F0:       64               BYTE #X64
;      8F1:       310520000000     XOR [#x20], EAX
;      8F7:       64               BYTE #X64
;      8F8:       330520000000     XOR EAX, [#x20]
;      8FE: L57:  8D4007           LEA EAX, [EAX+7]
;      901:       8970F9           MOV [EAX-7], ESI
;      904:       8978FD           MOV [EAX-3], EDI
;      907:       64               BYTE #X64
;      908:       80354800000004   XOR BYTE PTR [#x48], 4
;      90F:       7403             JEQ L58
;      911:       0F0B09           BREAK 9                    ; pending interrupt trap
;      914: L58:  D9C9             FXCH FR1
;      916:       DD5001           FSTD [EAX+1]
;      919:       D9C9             FXCH FR1
;      91B:       D9CB             FXCH FR3
;      91D:       DD5009           FSTD [EAX+9]
;      920:       D9CB             FXCH FR3
;      922:       DD5011           FSTD [EAX+17]
;      925:       DDD8             FSTPD FR0
;      927:       DD4001           FLDD [EAX+1]
;      92A:       DDD9             FSTPD FR1
;      92C:       DD4301           FLDD [EBX+1]
;      92F:       D9C9             FXCH FR1
;      931:       DCC9             FMUL-STI FR1
;      933:       9B               WAIT
;      934:       DDD8             FSTPD FR0
;      936:       DD4009           FLDD [EAX+9]
;      939:       DDDB             FSTPD FR3
;      93B:       DD4309           FLDD [EBX+9]
;      93E:       D9CB             FXCH FR3
;      940:       D8CB             FMULD FR3
;      942:       9B               WAIT
;      943:       DCC1             FADD-STI FR1
;      945:       9B               WAIT
;      946:       DDD8             FSTPD FR0
;      948:       DD4011           FLDD [EAX+17]
;      94B:       DDDB             FSTPD FR3
;      94D:       DD4311           FLDD [EBX+17]
;      950:       D9CB             FXCH FR3
;      952:       D8CB             FMULD FR3
;      954:       9B               WAIT
;      955:       DCC1             FADD-STI FR1
;      957:       9B               WAIT
;      958:       DDD8             FSTPD FR0
;      95A:       D9C0             FLDD FR0
;      95C:       D8C9             FMULD FR1
;      95E:       DDD3             FSTD FR3
;      960:       DDD8             FSTPD FR0
;      962:       DD4001           FLDD [EAX+1]
;      965:       DDDC             FSTPD FR4
;      967:       DD4001           FLDD [EAX+1]
;      96A:       D9CC             FXCH FR4
;      96C:       DCCC             FMUL-STI FR4
;      96E:       9B               WAIT
;      96F:       DDD8             FSTPD FR0
;      971:       DD4009           FLDD [EAX+9]
;      974:       DDDD             FSTPD FR5
;      976:       DD4009           FLDD [EAX+9]
;      979:       D9CD             FXCH FR5
;      97B:       D8CD             FMULD FR5
;      97D:       9B               WAIT
;      97E:       DCC4             FADD-STI FR4
;      980:       9B               WAIT
;      981:       DDD8             FSTPD FR0
;      983:       DD4011           FLDD [EAX+17]
;      986:       DDDD             FSTPD FR5
;      988:       DD4011           FLDD [EAX+17]
;      98B:       D9CD             FXCH FR5
;      98D:       D8CD             FMULD FR5
;      98F:       9B               WAIT
;      990:       D8C4             FADDD FR4
;      992:       9B               WAIT
;      993:       DCEB             FSUB-STI FR3
;      995:       9B               WAIT
;      996:       DDD8             FSTPD FR0
;      998:       D9C1             FLDD FR1
;      99A:       D8CA             FMULD FR2
;      99C:       9B               WAIT
;      99D:       D8C3             FADDD FR3
;      99F:       9B               WAIT
;      9A0:       D9E4             FTST
;      9A2:       DFE0             FNSTSW
;      9A4:       80E445           AND AH, 69
;      9A7:       80FC01           CMP AH, 1
;      9AA:       750E             JNE L61
;      9AC: L59:  B80B000008       MOV EAX, 134217739
;      9B1: L60:  8D65F8           LEA ESP, [EBP-8]
;      9B4:       8B6DFC           MOV EBP, [EBP-4]
;      9B7:       C20400           RET 4
;      9BA: L61:  D9FA             FSQRT
;      9BC:       9B               WAIT
;      9BD:       D8C1             FADDD FR1
;      9BF:       9B               WAIT
;      9C0:       D9E4             FTST
;      9C2:       DFE0             FNSTSW
;      9C4:       80E445           AND AH, 69
;      9C7:       80FC01           CMP AH, 1
;      9CA:       74E0             JEQ L59
;      9CC:       8B45DC           MOV EAX, [EBP-36]
;      9CF:       8B4003           MOV EAX, [EAX+3]
;      9D2:       3B0521000000     CMP EAX, [#x21]
;      9D8:       741D             JEQ L64
;      9DA:       8B7033           MOV ESI, [EAX+51]
;      9DD:       83FE0C           CMP ESI, 12
;      9E0:       7F07             JNLE L63
;      9E2: L62:  B827000008       MOV EAX, 134217767
;      9E7:       EBC8             JMP L60
;      9E9: L63:  8B402F           MOV EAX, [EAX+47]
;      9EC:       8B400D           MOV EAX, [EAX+13]
;      9EF:       3B0521000000     CMP EAX, [#x21]
;      9F5:       75EB             JNE L62
;      9F7: L64:  8B45DC           MOV EAX, [EBP-36]
;      9FA:       8B700B           MOV ESI, [EAX+11]
;      9FD:       EB3A             JMP L66
;      9FF: L65:  8975F4           MOV [EBP-12], ESI
;      A02:       895DF0           MOV [EBP-16], EBX
;      A05:       8955E8           MOV [EBP-24], EDX
;      A08:       8B4EFD           MOV ECX, [ESI-3]
;      A0B:       8BFD             MOV EDI, EBP
;      A0D:       8BC4             MOV EAX, ESP
;      A0F:       83EC40           SUB ESP, 64
;      A12:       8948DC           MOV [EAX-36], ECX
;      A15:       8978FC           MOV [EAX-4], EDI
;      A18:       8BE8             MOV EBP, EAX
;      A1A:       C745F84F0A0000   MOV DWORD PTR [EBP-8], 2639
;      A21:       E94BFEFFFF       JMP L54
;      A26:       8B55E8           MOV EDX, [EBP-24]
;      A29:       8B5DF0           MOV EBX, [EBP-16]
;      A2C:       8B75F4           MOV ESI, [EBP-12]
;      A2F:       3D0B000008       CMP EAX, 134217739
;      A34:       7515             JNE L67
;      A36:       8B7601           MOV ESI, [ESI+1]
;      A39: L66:  81FE0B000008     CMP ESI, 134217739
;      A3F:       75BE             JNE L65
;      A41:       B80B000008       MOV EAX, 134217739
;      A46:       E966FFFFFF       JMP L60
;      A4B: L67:  E961FFFFFF       JMP L60

;;;; component: Z


IR1 block 50 start c1
start stack:
  1>     bind SB-C::CLAMBDA (FLET KID)
end stack:
successors c2

IR1 block 51 start c2
start stack:
  2>     entry NIL
  3>  4: SB-C::CLAMBDA CREATE
  5>  6: - {GLOBAL-FUNCTION}
  7>  8: N
  9> 10: '1
 11> 12: cast v8 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE NUMBER>]
 13> 14: known combination v6 v12 v10
 15> 16: SB-C::CLAMBDA +V
 17> 18: C
 19> 20: X
 21> 22: RT
 23> 24: Z
 25> 26: cast v20 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 27> 28: cast v22 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
 29> 30: cast v24 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
end stack:
successors c31

IR1 block 52 start c31
start stack:
 31>     entry NIL
 32> 33: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
 34> 35: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
 36> 37: '214
 38> 39: '3
 40> 41: '6
 42> 43: known combination v35 v37 v39 v41
 44>     local combination v33 v43
 45>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
 46> 47: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 48> 49: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1898))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129B7599}> {129B7559}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129B7609}> {129B75C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1898
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129B7679}> {129B7639}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129B8241}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1899
                                  #:N-COUNT-1900) {129B8BF1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1898) {129B7969}> {129B7809}>)
 50>     known combination v47 v49
 51> 52: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
 53> 54: #:G1
 55> 56: '0
 57>     known combination v52 v54 v56 v26
 58> 59: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 60> 61: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1901))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129BB239}> {129BB1F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129BB2A9}> {129BB269}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1901 ..>)>)
                                                     IR1 block 53 start c62
                                                     start stack:
                                                      62> 63: cast v18 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                                                                              DOUBLE-FLOAT
                                                                                                                              (3))>]
                                                      64>     local combination v16 v63 <none>
                                                      65>     bind SB-C::CLAMBDA +V :KIND :LET
                                                     end stack:
                                                     successors c66

IR1 block 54 start c66
start stack:
 66>     entry NIL
 67> 68: + {GLOBAL-FUNCTION}
end stack:
successors c69

IR1 block 55 start c69
start stack:
 69>     entry NIL
 70> 71: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 72> 73: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1925))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129E0119}> {129E00D9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129E0189}> {129E0149}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1925
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129E01F9}> {129E01B9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129E0BF1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1926
                                  #:N-COUNT-1927) {129E15A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1925) {129E0431}> {129E02D1}>)
 74>     known combination v71 v73
 75> 76: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 77> 78: A
 79> 80: '0
 81> 82: known combination v76 v78 v80
end stack:
successors c83

IR1 block 56 start c83
start stack:
 83>     entry NIL
 84> 85: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 86> 87: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1907))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129C4CD9}> {129C4C99}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129C4D49}> {129C4D09}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1907
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129C4DB9}> {129C4D79}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129C57C1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1908
                                  #:N-COUNT-1909) {129C6171}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1907) {129C5001}> {129C4E91}>)
 88>     known combination v85 v87
 89> 90: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 91> 92: #:G1
 93> 94: '0
 95> 96: known combination v90 v92 v94
end stack:
successors c97

IR1 block 57 start c97
start stack:
 97> 98: known combination v68 v82 v96
 99>100: + {GLOBAL-FUNCTION}
end stack:
successors c101

IR1 block 58 start c101
start stack:
101>     entry NIL
102>103: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
104>105: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1928))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129E3A39}> {129E39F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129E3AA9}> {129E3A69}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1928
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129E3B19}> {129E3AD9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129E44E1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1929
                                  #:N-COUNT-1930) {129E4E91}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1928) {129E3D51}> {129E3BF1}>)
106>     known combination v103 v105
107>108: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
109>110: A
111>112: '1
113>114: known combination v108 v110 v112
end stack:
successors c115

IR1 block 59 start c115
start stack:
115>     entry NIL
116>117: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
118>119: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1910))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129C97E1}> {129C97A1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129C9851}> {129C9811}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1910
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129C98C1}> {129C9881}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129CA299}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1911
                                  #:N-COUNT-1912) {129CAC49}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1910) {129C9AF9}> {129C9999}>)
120>     known combination v117 v119
121>122: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
123>124: #:G1
125>126: '1
127>128: known combination v122 v124 v126
end stack:
successors c129

IR1 block 60 start c129
start stack:
129>130: known combination v100 v114 v128
131>132: + {GLOBAL-FUNCTION}
end stack:
successors c133

IR1 block 61 start c133
start stack:
133>     entry NIL
134>135: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
136>137: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1931))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129E6FE1}> {129E6FA1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129E7051}> {129E7011}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1931
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129E70C1}> {129E7081}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129E7A89}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1932
                                  #:N-COUNT-1933) {129E8439}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1931) {129E72F9}> {129E7199}>)
138>     known combination v135 v137
139>140: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
141>142: A
143>144: '2
145>146: known combination v140 v142 v144
end stack:
successors c147

IR1 block 62 start c147
start stack:
147>     entry NIL
148>149: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
150>151: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1913))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129CD429}> {129CD3E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129CD499}> {129CD459}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1913
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129CD509}> {129CD4C9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129CDED1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1914
                                  #:N-COUNT-1915) {129CE881}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1913) {129CD741}> {129CD5E1}>)
152>     known combination v149 v151
153>154: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
155>156: #:G1
157>158: '2
159>160: known combination v154 v156 v158
end stack:
successors c161

IR1 block 63 start c161
start stack:
161>162: known combination v132 v146 v160
end stack:
successors c163

IR1 block 64 start c163
start stack:
163>     entry NIL
164>165: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
166>167: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
168>169: '214
170>171: '3
172>173: '6
174>175: known combination v167 v169 v171 v173
176>     local combination v165 v175
177>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
178>179: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
180>181: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1916))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129D19D1}> {129D1991}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129D1A41}> {129D1A01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1916
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129D1AB1}> {129D1A71}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129D27D1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1917
                                  #:N-COUNT-1918) {129D3189}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1916) {129D1DA1}> {129D1C41}>)
182>     known combination v179 v181
183>184: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
185>186: #:G1
187>188: '0
189>     known combination v184 v186 v188 v98
190>191: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
192>193: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1919))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129D5339}> {129D52F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129D53A9}> {129D5369}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1919 ..>)>)
                                                     IR1 block 65 start c194
                                                     start stack:
                                                     194>195: / {GLOBAL-FUNCTION}
                                                     196>197: R
                                                     198>199: '2.0d0
                                                     200>201: cast v197 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE NUMBER>]
                                                     202>203: known combination v195 v201 v199
                                                     204>     tail local combination v4 v14 v205 v203
                                                     end stack:
                                                     successors c206

IR1 block 0 start c207
start stack:
207>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
208>209: SB-C::CLAMBDA CREATE
210>211: #:G1737
212>213: #:G1738
214>215: #:G1739
216>     tail local combination v209 v211 v213 v215
end stack:
successors c206

IR1 block 1 start c206
start stack:
206>     bind SB-C::CLAMBDA CREATE
end stack:
successors c217

IR1 block 2 start c217
start stack:
217>     entry NIL
218>219: SB-C::CLAMBDA (LET ((OBJ (MAKE-SPHERE "#<...>" . "#<...>")))
                         )
220>221: MAKE-SPHERE {GLOBAL-FUNCTION}
222>223: ':CENTER
224>225: C
226>227: ':RADIUS
228>229: R
230>231: full combination v221 v223 v225 v227 v229
232>     local combination v219 v231
233>     bind SB-C::CLAMBDA (LET ((OBJ (MAKE-SPHERE "#<...>" . "#<...>")))
                              ) :KIND :LET
234>235: = {GLOBAL-FUNCTION}
236>237: N
238>239: '1
240>241: cast v237 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE NUMBER>]
242>243: known combination v235 v241 v239
244>     if v243 c245 c246
end stack:
successors c245 c246

IR1 block 5 start c246
start stack:
246>247: SB-C::CLAMBDA (LET ((RT (* "#<...>" . "#<...>")))
                         )
248>249: / {GLOBAL-FUNCTION}
250>251: R
252>253: '3.4641016151377544d0
254>255: cast v251 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE NUMBER>]
256>257: known combination v249 v255 v253
258>259: * {GLOBAL-FUNCTION}
260>261: '3.0d0
262>263: known combination v259 v257 v261
264>     local combination v247 v263
265>     bind SB-C::CLAMBDA (LET ((RT (* "#<...>" . "#<...>")))
                              ) :KIND :LET
266>267: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
268>269: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME KID
             :%DEBUG-NAME (FLET KID)
             :KIND NIL
             :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (NUMBER NUMBER)
                                         (VALUES SPHERE &OPTIONAL))>
             :WHERE-FROM :DEFINED
             :VARS (X Z) {12813E41}>
           #<SB-C::CLAMBDA
             :%SOURCE-NAME BOUND
             :%DEBUG-NAME (FLET BOUND)
             :KIND :ZOMBIE
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS (C SCENES) {12826231}>)
270>     known combination v267 v269
271>272: SB-C::CLAMBDA (LET ((OBJS (LIST "#<...>" . "#<...>"))
                             (CENTER ("#<...>" . "#<...>")))
                         )
273>274: LIST {GLOBAL-FUNCTION}
275>276: OBJ
277>278: SB-C::CLAMBDA (FLET KID)
279>280: SB-KERNEL:%NEGATE {GLOBAL-FUNCTION}
281>282: RT
283>284: known combination v280 v282
285>286: SB-KERNEL:%NEGATE {GLOBAL-FUNCTION}
287>288: RT
289>290: known combination v286 v288
291>292: local combination v278 v284 v290
293>294: SB-C::CLAMBDA (FLET KID)
295>296: SB-KERNEL:%NEGATE {GLOBAL-FUNCTION}
297>298: RT
299>300: known combination v296 v298
301>302: RT
303>304: local combination v294 v300 v302
305>306: SB-C::CLAMBDA (FLET KID)
307>308: RT
309>310: SB-KERNEL:%NEGATE {GLOBAL-FUNCTION}
311>312: RT
313>314: known combination v310 v312
315>316: local combination v306 v308 v314
317>318: SB-C::CLAMBDA (FLET KID)
319>320: RT
321>322: RT
323>324: local combination v318 v320 v322
325>326: known combination v274 v276 v292 v304 v316 v324
327>328: C
329>330: cast v328 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                          DOUBLE-FLOAT
                                                                          (*))>]
end stack:
successors c331

IR1 block 6 start c331
start stack:
331>     entry NIL
332>333: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
334>335: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1880))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1299D4D9}> {1299D499}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1299D549}> {1299D509}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1880
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1299D5B9}> {1299D579}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1299DFC9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1881
                                  #:N-COUNT-1882) {1299E979}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1880) {1299D809}> {1299D6A9}>)
336>     known combination v333 v335
337>338: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
339>340: '0
341>342: known combination v338 v330 v340
end stack:
successors c343

IR1 block 7 start c343
start stack:
343>344: + {GLOBAL-FUNCTION}
345>346: C
end stack:
successors c347

IR1 block 8 start c347
start stack:
347>     entry NIL
348>349: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
350>351: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1883))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129A1931}> {129A18F1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129A19A1}> {129A1961}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1883
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129A1A11}> {129A19D1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129A23D9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1884
                                  #:N-COUNT-1885) {129A2D89}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1883) {129A1C49}> {129A1AE9}>)
352>     known combination v349 v351
353>354: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
355>356: '1
357>358: known combination v354 v346 v356
end stack:
successors c359

IR1 block 9 start c359
start stack:
359>360: R
361>362: known combination v344 v358 v360
363>364: C
end stack:
successors c365

IR1 block 10 start c365
start stack:
365>     entry NIL
366>367: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
368>369: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1886))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129A5411}> {129A53D1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129A5481}> {129A5441}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1886
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129A54F1}> {129A54B1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129A5EB9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1887
                                  #:N-COUNT-1888) {129A6881}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1886) {129A5729}> {129A55C9}>)
370>     known combination v367 v369
371>372: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
373>374: '2
375>376: known combination v372 v364 v374
end stack:
successors c377

IR1 block 11 start c377
start stack:
377>378: cast v362 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>]
end stack:
successors c379

IR1 block 12 start c379
start stack:
379>     entry NIL
380>381: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
382>383: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
384>385: '214
386>387: '3
388>389: '6
390>391: known combination v383 v385 v387 v389
392>     local combination v381 v391
393>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
394>395: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
396>397: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1889))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129A94E9}> {129A94A9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129A9559}> {129A9519}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1889
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {129A95C9}> {129A9589}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129AA171}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1890
                                  #:N-COUNT-1891) {129AAB21}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1889) {129A98B9}> {129A9759}>)
398>     known combination v395 v397
399>400: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
401>402: #:G1
403>404: '0
405>     known combination v400 v402 v404 v342
406>407: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
408>409: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1892))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129ACC71}> {129ACC31}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129ACCE1}> {129ACCA1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1892 ..>)>)
                                                     IR1 block 13 start c410
                                                     start stack:
                                                     410>     local combination v272 v326 <none>
                                                     411>     bind SB-C::CLAMBDA (LET ((OBJS
                                                                                        (LIST
                                                                                         "#<...>"
                                                                                         . "#<...>"))
                                                                                       (CENTER
                                                                                        ("#<...>"
                                                                                         . "#<...>")))
                                                                                   ) :KIND :LET
                                                     412>413: MAKE-GROUP {GLOBAL-FUNCTION}
                                                     414>415: ':CENTER
                                                     416>417: #:G1
                                                     418>419: ':RADIUS
                                                     420>421: SB-C::CLAMBDA (LET ((#:ONCE-ONLY-1733
                                                                                   (BOUND
                                                                                    "#<...>"
                                                                                    . "#<...>")))
                                                                              )
                                                     end stack:
                                                     successors c422

IR1 block 14 start c422
start stack:
422>     entry NIL
end stack:
successors c423

IR1 block 15 start c423
start stack:
423>     entry NIL
424>425: SB-C::CLAMBDA (LET ((S NIL) (#:LOOP-LIST-1728 SCENES))
                         )
426>427: 'NIL
428>429: OBJS
430>     local combination v425 v427 v429
431>     bind SB-C::CLAMBDA (LET ((S NIL) (#:LOOP-LIST-1728 SCENES))
                              ) :KIND :LET
432>433: SB-C::CLAMBDA (LET ((#:LOOP-MAXMIN-1729 0)
                             (#:LOOP-MAXMIN-TEMP-1730 0)
                             (#:LOOP-MAXMIN-FLAG-1731 "#<...>" . "#<...>"))
                         )
434>435: '0
436>437: '0
438>439: 'NIL
440>     local combination v433 v435 v437 v439
441>     bind SB-C::CLAMBDA (LET ((#:LOOP-MAXMIN-1729 0)
                                  (#:LOOP-MAXMIN-TEMP-1730 0)
                                  (#:LOOP-MAXMIN-FLAG-1731 "#<...>" . "#<...>"))
                              ) :KIND :LET
end stack:
successors c442

IR1 block 16 start c442
start stack:
442>     entry NIL
end stack:
successors c443

IR1 block 44 start c443
start stack:
443>444: #:LOOP-LIST-1728
445>     if v444 c446 c447
end stack:
successors c447 c446

IR1 block 17 start c446
start stack:
446>448: CAR {GLOBAL-FUNCTION}
449>450: #:LOOP-LIST-1728
451>452: known combination v448 v450
453>     set S v452
454>455: CDR {GLOBAL-FUNCTION}
456>457: #:LOOP-LIST-1728
458>459: known combination v455 v457
460>461: cast v459 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
462>     set #:LOOP-LIST-1728 v461
463>464: + {GLOBAL-FUNCTION}
465>466: SB-C::CLAMBDA -V
467>468: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
469>470: S
471>472: cast v470 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:STRUCTURE-CLASSOID SPHERE>]
473>474: '1
475>476: known combination v468 v472 v474
477>478: cast v476 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                          DOUBLE-FLOAT
                                                                          (3))>]
479>     local combination v466 <none> v478
480>     bind SB-C::CLAMBDA -V :KIND :LET
end stack:
successors c481

IR1 block 18 start c481
start stack:
481>     entry NIL
482>483: - {GLOBAL-FUNCTION}
end stack:
successors c484

IR1 block 19 start c484
start stack:
484>     entry NIL
485>486: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
487>488: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1853))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12972429}> {129723E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12972499}> {12972459}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1853
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12972509}> {129724C9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12972F99}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1854
                                  #:N-COUNT-1855) {12973949}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1853) {12972741}> {129725E1}>)
489>     known combination v486 v488
490>491: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
492>493: #:G1
494>495: '0
496>497: known combination v491 v493 v495
end stack:
successors c498

IR1 block 20 start c498
start stack:
498>     entry NIL
499>500: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
501>502: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1856))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12975C01}> {12975BC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12975C71}> {12975C31}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1856
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12975CE1}> {12975CA1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {129766A9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1857
                                  #:N-COUNT-1858) {12977059}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1856) {12975F19}> {12975DB9}>)
503>     known combination v500 v502
504>505: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
506>507: B
508>509: '0
510>511: known combination v505 v507 v509
end stack:
successors c512

IR1 block 21 start c512
start stack:
512>513: known combination v483 v497 v511
514>515: - {GLOBAL-FUNCTION}
end stack:
successors c516

IR1 block 22 start c516
start stack:
516>     entry NIL
517>518: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
519>520: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1859))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12979951}> {12979911}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {129799C1}> {12979981}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1859
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12979A31}> {129799F1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1297A401}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1860
                                  #:N-COUNT-1861) {1297AE59}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1859) {12979C69}> {12979B09}>)
521>     known combination v518 v520
522>523: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
524>525: #:G1
526>527: '1
528>529: known combination v523 v525 v527
end stack:
successors c530

IR1 block 23 start c530
start stack:
530>     entry NIL
531>532: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
533>534: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1862))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1297D011}> {1297CFD1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {1297D081}> {1297D041}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1862
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {1297D0F1}> {1297D0B1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {1297DAB9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1863
                                  #:N-COUNT-1864) {1297E469}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1862) {1297D329}> {1297D1C9}>)
535>     known combination v532 v534
536>537: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
538>539: B
540>541: '1
542>543: known combination v537 v539 v541
end stack:
successors c544

IR1 block 24 start c544
start stack:
544>545: known combination v515 v529 v543
546>547: - {GLOBAL-FUNCTION}
end stack:
successors c548

IR1 block 25 start c548
start stack:
548>     entry NIL
549>550: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
551>552: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1865))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12980DA1}> {12980D61}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12980E11}> {12980DD1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1865
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12980E81}> {12980E41}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12981849}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1866
                                  #:N-COUNT-1867) {129821F9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1865) {129810B9}> {12980F59}>)
553>     known combination v550 v552
554>555: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
556>557: #:G1
558>559: '2
560>561: known combination v555 v557 v559
end stack:
successors c562

IR1 block 26 start c562
start stack:
562>     entry NIL
563>564: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
565>566: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1868))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12984429}> {129843E9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12984499}> {12984459}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1868
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {12984509}> {129844C9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12984ED1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1869
                                  #:N-COUNT-1870) {12985881}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1868) {12984741}> {129845E1}>)
567>     known combination v564 v566
568>569: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
570>571: B
572>573: '2
574>575: known combination v569 v571 v573
end stack:
successors c576

IR1 block 27 start c576
start stack:
576>577: known combination v547 v561 v575
end stack:
successors c578

IR1 block 28 start c578
start stack:
578>     entry NIL
579>580: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
581>582: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
583>584: '214
585>586: '3
587>588: '6
589>590: known combination v582 v584 v586 v588
591>     local combination v580 v590
592>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
593>594: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
595>596: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1871))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBB151}> {12F9AC81}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBB171}> {12F9ACC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1871
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {13007C59}> {12FF9359}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12FBB5F9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1872
                                  #:N-COUNT-1873) {12FF9411}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1871) {12FBB0C9}> {12FDF271}>)
597>     known combination v594 v596
598>599: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
600>601: #:G1
602>603: '0
604>     known combination v599 v601 v603 v513
605>606: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
607>608: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1874))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBB2A1}> {12F9AD41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBB2C1}> {12F9AD81}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1874 ..>)>)
                                                     IR1 block 29 start c609
                                                     start stack:
                                                     609>     entry NIL
                                                     end stack:
                                                     successors c610

IR1 block 30 start c610
start stack:
610>     entry NIL
611>612: + {GLOBAL-FUNCTION}
613>614: + {GLOBAL-FUNCTION}
615>616: * {GLOBAL-FUNCTION}
end stack:
successors c617

IR1 block 31 start c617
start stack:
617>     entry NIL
618>619: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
620>621: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1835))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBCA49}> {12F9C241}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBCA69}> {12F9C281}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1835
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {13008A81}> {12FFAB79}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12FBCA89}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1836
                                  #:N-COUNT-1837) {12FFAC49}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1835) {12FBC9C1}> {12FE0BE9}>)
622>     known combination v619 v621
623>624: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
625>626: #:G1
627>628: '0
629>630: known combination v624 v626 v628
end stack:
successors c631

IR1 block 32 start c631
start stack:
631>     entry NIL
632>633: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
634>635: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1838))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC871}> {12F9C0C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC891}> {12F9C101}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1838
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {13008951}> {12FFA991}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12FBC8B1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1839
                                  #:N-COUNT-1840) {12FFAA61}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1838) {12FBC7E9}> {12FE0A01}>)
636>     known combination v633 v635
637>638: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
639>640: #:G1
641>642: '0
643>644: known combination v638 v640 v642
end stack:
successors c645

IR1 block 33 start c645
start stack:
645>646: known combination v616 v630 v644
647>648: * {GLOBAL-FUNCTION}
end stack:
successors c649

IR1 block 34 start c649
start stack:
649>     entry NIL
650>651: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
652>653: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1841))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC699}> {12F9BF41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC6B9}> {12F9BF81}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1841
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {13008821}> {12FFA7A9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12FBC6D9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1842
                                  #:N-COUNT-1843) {12FFA879}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1841) {12FBC611}> {12FE0819}>)
654>     known combination v651 v653
655>656: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
657>658: #:G1
659>660: '1
661>662: known combination v656 v658 v660
end stack:
successors c663

IR1 block 35 start c663
start stack:
663>     entry NIL
664>665: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
666>667: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1844))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC4C1}> {12F9BDC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC4E1}> {12F9BE01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1844
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {130086F1}> {12FFA5C1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12FBC501}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1845
                                  #:N-COUNT-1846) {12FFA691}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1844) {12FBC439}> {12FE0631}>)
668>     known combination v665 v667
669>670: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
671>672: #:G1
673>674: '1
675>676: known combination v670 v672 v674
end stack:
successors c677

IR1 block 36 start c677
start stack:
677>678: known combination v648 v662 v676
679>680: known combination v614 v646 v678
681>682: * {GLOBAL-FUNCTION}
end stack:
successors c683

IR1 block 37 start c683
start stack:
683>     entry NIL
684>685: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
686>687: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1847))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC2E9}> {12F9BC41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC309}> {12F9BC81}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1847
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {130085C1}> {12FFA3D9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12FBC329}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1848
                                  #:N-COUNT-1849) {12FFA4A9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1847) {12FBC261}> {12FE0449}>)
688>     known combination v685 v687
689>690: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
691>692: #:G1
693>694: '2
695>696: known combination v690 v692 v694
end stack:
successors c697

IR1 block 38 start c697
start stack:
697>     entry NIL
698>699: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
700>701: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G1850))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC111}> {12F9BAC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {12FBC131}> {12F9BB01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G1850
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {13008491}> {12FFA1F1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {12FBC151}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-1851
                                  #:N-COUNT-1852) {12FFA2C1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G1850) {12FBC089}> {12FE0261}>)
702>     known combination v699 v701
703>704: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
705>706: #:G1
707>708: '2
709>710: known combination v704 v706 v708
end stack:
successors c711

IR1 block 39 start c711
start stack:
711>712: known combination v682 v696 v710
713>714: known combination v612 v680 v712
end stack:
successors c715

IR1 block 40 start c715
start stack:
715>716: cast v714 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (DOUBLE-FLOAT
                                                                            0.0d0)>]
717>718: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
719>720: known combination v718 v716
end stack:
successors c721

IR1 block 41 start c721
start stack:
721>722: SB-KERNEL:%RAW-INSTANCE-REF/DOUBLE {GLOBAL-FUNCTION}
723>724: S
725>726: '0
727>728: known combination v722 v724 v726
729>730: known combination v464 v720 v728
731>     set #:LOOP-MAXMIN-TEMP-1730 v730
732>733: #:LOOP-MAXMIN-FLAG-1731
734>     if v733 c735 c736
end stack:
successors c736 c735

IR1 block 43 start c735
start stack:
735>737: > {GLOBAL-FUNCTION}
738>739: #:LOOP-MAXMIN-TEMP-1730
740>741: #:LOOP-MAXMIN-1729
742>743: known combination v737 v739 v741
744>     if v743 c736 c443
end stack:
successors c736 c443

IR1 block 42 start c736
start stack:
736>745: 'T
746>     set #:LOOP-MAXMIN-FLAG-1731 v745
747>748: #:LOOP-MAXMIN-TEMP-1730
749>     set #:LOOP-MAXMIN-1729 v748
end stack:
successors c443

IR1 block 45 start c447
start stack:
447>750: #:LOOP-MAXMIN-1729
end stack:
successors c751

IR1 block 46 start c751
start stack:
751>     local combination v421 v750
752>     bind SB-C::CLAMBDA (LET ((#:ONCE-ONLY-1733
                                   (BOUND "#<...>" . "#<...>")))
                              ) :KIND :LET
753>754: SB-C::CLAMBDA (LET ((SB-C::MAXREST (MAX "#<...>" . "#<...>")))
                         )
755>756: R
757>758: cast v756 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE REAL>]
759>     local combination v754 v758
760>     bind SB-C::CLAMBDA (LET ((SB-C::MAXREST (MAX "#<...>" . "#<...>")))
                              ) :KIND :LET
761>762: < {GLOBAL-FUNCTION}
763>764: #:ONCE-ONLY-1733
765>766: SB-C::MAXREST
767>768: known combination v762 v764 v766
769>     if v768 c770 c771
end stack:
successors c770 c771

IR1 block 49 start c771
start stack:
771>772: #:ONCE-ONLY-1733
end stack:
successors c773

IR1 block 47 start c770
start stack:
770>772: SB-C::MAXREST
end stack:
successors c773

IR1 block 48 start c773
start stack:
773>774: ':CHILDREN
775>776: OBJS
777>778: tail full combination v413 v415 v417 v419 v772 v774 v776
end stack:
successors c779

IR1 block 3 start c245
start stack:
245>778: OBJ
end stack:
successors c780

IR1 block 4 start c780
start stack:
780>     return v778 SB-C::CLAMBDA CREATE
end stack:
successors c779


;;;; IR2 component: Z

entries:
    L1: CREATE


TNs: 150 local, 79 temps, 16 constant, 6 env, 0 comp, 70 global.
Wired: 226, Unused: 0. 67 blocks, 642 global conflicts.

IR1 block 68 start c779

    IR2 block NIL start c779

IR1 block 0 start c207

    IR2 block 50 start c207
    0: XEP-ALLOCATE-FRAME {# NIL}
    1: SETUP-ENVIRONMENT {#}
    2: MOVE t1[EDX] => #:G1737!2[EDX]
    3: MOVE t3[EDI] => #:G1738!4[EDI]
    4: MOVE t5[ESI] => #:G1739!6[ESI]
    5: MOVE t7[S0]>t8[EAX] => t9[S0]<t10[EAX]
    6: SAP-MOVE t11[S1]>t12[EAX] => t13[S1]<t14[EAX]
    7: NOTE-ENVIRONMENT-START {#}
    8: MOVE #:G1737!2[EDX] => N!15[S11]<t16[EDX]
    9: MOVE #:G1738!4[EDI] => C!17[S12]<t18[EDI]
    10: MOVE #:G1739!6[ESI] => R!19[S6]<t20[ESI]
    11: MOVE t9[S0]>t21[EAX] => t22[S0]<t23[EAX]
    12: SAP-MOVE t13[S1]>t24[EAX] => t25[S1]<t26[EAX]

IR1 block 1 start c206

    IR2 block 49 start c206
    L2:
    0: SAP-MOVE t25[S1]>t27[EAX] => t28[S1]<t29[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 2 start c217

    IR2 block 48 start c217
    0: ALLOCATE-FULL-CALL-FRAME {4} => t30[EBX]
    1: MOVE-ARG ':CENTER!31[Const6]>t32[EDX] t30[EBX] => t33[EDX]
    2: MOVE-ARG C!17[S12]>t34[EDI] t30[EBX] => t35[EDI]
    3: MOVE-ARG ':RADIUS!36[Const7]>t37[ESI] t30[EBX] => t38[ESI]
    4: MOVE-ARG R!19[S6]>t39[EAX] t30[EBX] => t40[S3]
    5: CALL-NAMED t30[EBX] t41[Const8]>t42[EAX] t33[EDX] t35[EDI] t38[ESI]
                  t40[S3]
                  {# 4 1 NIL}
                  => t43[EDX]
    6: MOVE t43[EDX] => t44[S13]<t45[EDX]
    7: GENERIC-= N!15[S11]>t46[EDX] '1!47>t48[EDI] => t49[EDX]
    8: IF-EQ t49[EDX] 'NIL!50 {# NIL}

IR1 block 3 start c245

    IR2 block 1 start c245

IR1 block 4 start c780

    IR2 block 0 start c780
    0: MOVE t44[S13]>t51[EDX] => t52[EDX]
    1: RETURN-SINGLE t22[S0] t28[S1] t52[EDX]

IR1 block 5 start c246

    IR2 block 47 start c246
    L3:
    0: TWO-ARG-/ R!19[S6]>t53[EDX] '3.4641016151377544d0!54[Const9]>t55[EDI]
                 => t56[EDX]
    1: GENERIC-* t56[EDX] '3.0d0!57[Const10]>t58[EDI] => t59[S7]<t60[EDX]
    2: MOVE t59[S7]>t61[EAX] => RT!62[S9]<t63[EAX]
    3: GENERIC-NEGATE t59[S7]>t64[EDX] => t65[S2]<t66[EDX]
    4: GENERIC-NEGATE t59[S7]>t67[EDX] => t68[EDX]
    5: CURRENT-FP => t69[EBX]
    6: ALLOCATE-FRAME {#} => t70[EAX] t71[IGNORE-ME]
    7: MOVE-ARG t65[S2]>t72[ECX] t70[EAX] => X!73[S2]
    8: MOVE-ARG t68[EDX] t70[EAX] => Z!74[S3]
    9: MOVE-ARG RT!62[S9]>t75[ECX] t70[EAX] => t76[S4]
    10: MOVE-ARG R!19[S6]>t77[ECX] t70[EAX] => t78[S5]
    11: MOVE-ARG C!17[S12]>t79[ESI] t70[EAX] => t80[ESI]
    12: MOVE-ARG N!15[S11]>t81[ECX] t70[EAX] => t82[ECX]
    13: MOVE-ARG t69[EBX] t70[EAX] => t83[S0]
    14: CALL-LOCAL t70[EAX] t71[IGNORE-ME] X!73[S2] Z!74[S3] t76[S4] t78[S5]
                   t80[ESI] t82[ECX] t83[S0]
                   {# # # 1}
                   => t84[EDX]
    <overflow>
    0: MOVE t84[EDX] => t85[S10]<t86[EDX]
    1: GENERIC-NEGATE t59[S7]>t87[EDX] => t88[EDX]
    2: CURRENT-FP => t89[EBX]
    3: ALLOCATE-FRAME {#} => t90[EAX] t91[IGNORE-ME]
    4: MOVE-ARG t88[EDX] t90[EAX] => X!73[S2]
    5: MOVE-ARG RT!62[S9]>t92[ECX] t90[EAX] => Z!74[S3]
    6: MOVE-ARG RT!62[S9]>t93[ECX] t90[EAX] => t76[S4]
    7: MOVE-ARG R!19[S6]>t94[ECX] t90[EAX] => t78[S5]
    8: MOVE-ARG C!17[S12]>t95[ESI] t90[EAX] => t80[ESI]
    9: MOVE-ARG N!15[S11]>t96[ECX] t90[EAX] => t82[ECX]
    10: MOVE-ARG t89[EBX] t90[EAX] => t83[S0]
    11: CALL-LOCAL t90[EAX] t91[IGNORE-ME] X!73[S2] Z!74[S3] t76[S4] t78[S5]
                   t80[ESI] t82[ECX] t83[S0]
                   {# # # 1}
                   => t97[EDX]
    12: MOVE t97[EDX] => t98[S8]<t99[EDX]
    13: GENERIC-NEGATE t59[S7]>t100[EDX] => t101[EDX]
    14: CURRENT-FP => t102[EBX]
    15: ALLOCATE-FRAME {#} => t103[EAX] t104[IGNORE-ME]
    16: MOVE-ARG RT!62[S9]>t105[ECX] t103[EAX] => X!73[S2]
    17: MOVE-ARG t101[EDX] t103[EAX] => Z!74[S3]
    18: MOVE-ARG RT!62[S9]>t106[ECX] t103[EAX] => t76[S4] ..

assembly code for #<SB-C:COMPONENT :NAME Z {12851121}>

in the elsewhere segment:
L4:
in the regular segment:
L5:
in the elsewhere segment:
L6:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L7:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t107[ESP]>, DWORD PTR [EBP-64]
L8:

VOP NOTE-ENVIRONMENT-START {#} 
L9:

VOP MOVE #:G1737!2[EDX] => N!15[S11]<t16[EDX] 
        MOV     #<TN N!15[S11]>, #<TN #:G1737!2[EDX]>

VOP MOVE #:G1738!4[EDI] => C!17[S12]<t18[EDI] 
        MOV     #<TN C!17[S12]>, #<TN #:G1738!4[EDI]>

VOP MOVE #:G1739!6[ESI] => R!19[S6]<t20[ESI] 
        MOV     #<TN R!19[S6]>, #<TN #:G1739!6[ESI]>

L2:
in the elsewhere segment:
L10:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L11:

L12:

VOP ALLOCATE-FULL-CALL-FRAME {4} => t30[EBX] 
        MOV     #<TN t30[EBX]>, #<TN t107[ESP]>
        SUB     #<TN t107[ESP]>, 16

VOP MOVE-ARG ':CENTER!31[Const6]>t32[EDX] t30[EBX] => t33[EDX] 
        MOV     #<TN t32[EDX]>, #<TN ':CENTER!31[Const6]>

VOP MOVE-ARG C!17[S12]>t34[EDI] t30[EBX] => t35[EDI] 
        MOV     #<TN t35[EDI]>, #<TN C!17[S12]>

VOP MOVE-ARG ':RADIUS!36[Const7]>t37[ESI] t30[EBX] => t38[ESI] 
        MOV     #<TN t37[ESI]>, #<TN ':RADIUS!36[Const7]>

VOP MOVE-ARG R!19[S6]>t39[EAX] t30[EBX] => t40[S3] 
        MOV     #<TN t39[EAX]>, #<TN R!19[S6]>
        MOV     DWORD PTR [EBX-16], #<TN t39[EAX]>

VOP CALL-NAMED t30[EBX] t41[Const8]>t42[EAX] t33[EDX] t35[EDI] t38[ESI] t40[S3]
               {# 4 1 NIL}
               => t43[EDX] 
        MOV     #<TN t42[EAX]>, #<TN t41[Const8]>
L13:
        MOV     #<TN t108[ECX]>, 16
        MOV     DWORD PTR [EBX-4], #<TN t109[EBP]>
        MOV     #<TN t109[EBP]>, #<TN t30[EBX]>
L14:
L15:
        CALL    DWORD PTR [EAX+5]
L16:
        JMP     NC, L17
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L17:
L18:

VOP MOVE t43[EDX] => t44[S13]<t45[EDX] 
        MOV     #<TN t44[S13]>, #<TN t43[EDX]>

VOP GENERIC-= N!15[S11]>t46[EDX] '1!47>t48[EDI] => t49[EDX] 
        MOV     #<TN t46[EDX]>, #<TN N!15[S11]>
        MOV     #<TN t48[EDI]>, 4
L19:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC-=
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L20:
        JMP     NC, L21
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L21:

VOP IF-EQ t49[EDX] 'NIL!50 {# NIL} 
        CMP     #<TN t49[EDX]>, 134217739
        JMP     E, L3

L22:
L23:

VOP MOVE t44[S13]>t51[EDX] => t52[EDX] 
        MOV     #<TN t51[EDX]>, #<TN t44[S13]>

VOP RETURN-SINGLE t22[S0] t28[S1] t52[EDX] 
L24:
        LEA     #<TN t107[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t109[EBP]>, #<TN t22[S0]>
        RET     4

L3:

VOP TWO-ARG-/ R!19[S6]>t53[EDX] '3.4641016151377544d0!54[Const9]>t55[EDI]
              => t56[EDX] 
        MOV     #<TN t53[EDX]>, #<TN R!19[S6]>
        MOV     #<TN t55[EDI]>, #<TN '3.4641016151377544d0!54[Const9]>
        MOV     #<TN t111[EBX]>, #<TN t107[ESP]>
        PUSH    #<TN t109[EBP]>
        SUB     #<TN t107[ESP]>, 8
        MOV     #<TN t109[EBP]>, #<TN t111[EBX]>
        MOV     #<TN t112[ECX]>, 8
L25:
        CALL    DWORD PTR [+134219500]
L26:
        JMP     NC, L27
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L27:

VOP GENERIC-* t56[EDX] '3.0d0!57[Const10]>t58[EDI] => t59[S7]<t60[EDX] 
        MOV     #<TN t58[EDI]>, #<TN '3.0d0!57[Const10]>
L28:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC-*
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L29:
        JMP     NC, L30
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L30:
        MOV     #<TN t59[S7]>, #<TN t60[EDX]>

VOP MOVE t59[S7]>t61[EAX] => RT!62[S9]<t63[EAX] 
        MOV     #<TN t61[EAX]>, #<TN t59[S7]>
        MOV     #<TN RT!62[S9]>, #<TN t63[EAX]>

VOP GENERIC-NEGATE t59[S7]>t64[EDX] => t65[S2]<t66[EDX] 
        MOV     #<TN t64[EDX]>, #<TN t59[S7]>
L31:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC-NEGATE
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L32:
        JMP     NC, L33
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L33:
        MOV     #<TN t65[S2]>, #<TN t66[EDX]>

VOP GENERIC-NEGATE t59[S7]>t67[EDX] => t68[EDX] 
        MOV     #<TN t67[EDX]>, #<TN t59[S7]>
L34:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC-NEGATE
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L35:
        JMP     NC, L36
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L36:

VOP CURRENT-FP => t69[EBX] 
        MOV     #<TN t69[EBX]>, #<TN t109[EBP]>

VOP ALLOCATE-FRAME {#} => t70[EAX] t71[IGNORE-ME] 
        MOV     #<TN t70[EAX]>, #<TN t107[ESP]>
        SUB     #<TN t107[ESP]>, 64

VOP MOVE-ARG t65[S2]>t72[ECX] t70[EAX] => X!73[S2] 
        MOV     #<TN t72[ECX]>, #<TN t65[S2]>
        MOV     DWORD PTR [EAX-12], #<TN t72[ECX]>

VOP MOVE-ARG t68[EDX] t70[EAX] => Z!74[S3] 
        MOV     DWORD PTR [EAX-16], #<TN t68[EDX]>

VOP MOVE-ARG RT!62[S9]>t75[ECX] t70[EAX] => t76[S4] 
        MOV     #<TN t75[ECX]>, #<TN RT!62[S9]>
        MOV     DWORD PTR [EAX-20], #<TN t75[ECX]>

VOP MOVE-ARG R!19[S6]>t77[ECX] t70[EAX] => t78[S5] 
        MOV     #<TN t77[ECX]>, #<TN R!19[S6]>
        MOV     DWORD PTR [EAX-24], #<TN t77[ECX]>

VOP MOVE-ARG C!17[S12]>t79[ESI] t70[EAX] => t80[ESI] 
        MOV     #<TN t80[ESI]>, #<TN C!17[S12]>

VOP MOVE-ARG N!15[S11]>t81[ECX] t70[EAX] => t82[ECX] 
        MOV     #<TN t82[ECX]>, #<TN N!15[S11]>

VOP MOVE-ARG t69[EBX] t70[EAX] => t83[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t69[EBX]>

VOP CALL-LOCAL t70[EAX] t71[IGNORE-ME] X!73[S2] Z!74[S3] t76[S4] t78[S5]
               t80[ESI] t82[ECX] t83[S0]
               {# # # 1}
               => t84[EDX] 
L37:
        MOV     #<TN t109[EBP]>, #<TN t70[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L38)
L39:
        JMP     L40
L38:
L41:
        JMP     NC, L42
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L42:
L43:

VOP MOVE t84[EDX] => t85[S10]<t86[EDX] 
        MOV     #<TN t85[S10]>, #<TN t84[EDX]>

VOP GENERIC-NEGATE t59[S7]>t87[EDX] => t88[EDX] 
        MOV     #<TN t87[EDX]>, #<TN t59[S7]>
L44:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC-NEGATE
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L45:
        JMP     NC, L46
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L46:

VOP CURRENT-FP => t89[EBX] 
        MOV     #<TN t89[EBX]>, #<TN t109[EBP]>

VOP ALLOCATE-FRAME {#} => t90[EAX] t91[IGNORE-ME] 
        MOV     #<TN t90[EAX]>, #<TN t107[ESP]>
        SUB     #<TN t107[ESP]>, 64

VOP MOVE-ARG t88[EDX] t90[EAX] => X!73[S2] 
        MOV     DWORD PTR [EAX-12], #<TN t88[EDX]>

VOP MOVE-ARG RT!62[S9]>t92[ECX] t90[EAX] => Z!74[S3] 
        MOV     #<TN t92[ECX]>, #<TN RT!62[S9]>
        MOV     DWORD PTR [EAX-16], #<TN t92[ECX]>

VOP MOVE-ARG RT!62[S9]>t93[ECX] t90[EAX] => t76[S4] 
        MOV     #<TN t93[ECX]>, #<TN RT!62[S9]>
        MOV     DWORD PTR [EAX-20], #<TN t93[ECX]>

VOP MOVE-ARG R!19[S6]>t94[ECX] t90[EAX] => t78[S5] 
        MOV     #<TN t94[ECX]>, #<TN R!19[S6]>
        MOV     DWORD PTR [EAX-24], #<TN t94[ECX]>

VOP MOVE-ARG C!17[S12]>t95[ESI] t90[EAX] => t80[ESI] 
        MOV     #<TN t80[ESI]>, #<TN C!17[S12]>

VOP MOVE-ARG N!15[S11]>t96[ECX] t90[EAX] => t82[ECX] 
        MOV     #<TN t82[ECX]>, #<TN N!15[S11]>

VOP MOVE-ARG t89[EBX] t90[EAX] => t83[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t89[EBX]>

VOP CALL-LOCAL t90[EAX] t91[IGNORE-ME] X!73[S2] Z!74[S3] t76[S4] t78[S5]
               t80[ESI] t82[ECX] t83[S0]
               {# # # 1}
               => t97[EDX] 
L47:
        MOV     #<TN t109[EBP]>, #<TN t90[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L48)
L49:
        JMP     L40
L48:
L50:
        JMP     NC, L51
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L51:
L52:

VOP MOVE t97[EDX] => t98[S8]<t99[EDX] 
        MOV     #<TN t98[S8]>, #<TN t97[EDX]>

VOP GENERIC-NEGATE t59[S7]>t100[EDX] => t101[EDX] 
        MOV     #<TN t100[EDX]>, #<TN t59[S7]>
L53:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC-NEGATE
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L54:
        JMP     NC, L55
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L55:

VOP CURRENT-FP => t102[EBX] 
        MOV     #<TN t102[EBX]>, #<TN t109[EBP]>

VOP ALLOCATE-FRAME {#} => t103[EAX] t104[IGNORE-ME] 
        MOV     #<TN t103[EAX]>, #<TN t107[ESP]>
        SUB     #<TN t107[ESP]>, 64

VOP MOVE-ARG RT!62[S9]>t105[ECX] t103[EAX] => X!73[S2] 
        MOV     #<TN t105[ECX]>, #<TN RT!62[S9]>
        MOV     DWORD PTR [EAX-12], #<TN t105[ECX]>

VOP MOVE-ARG t101[EDX] t103[EAX] => Z!74[S3] 
        MOV     DWORD PTR [EAX-16], #<TN t101[EDX]>

VOP MOVE-ARG RT!62[S9]>t106[ECX] t103[EAX] => t76[S4] 
        MOV     #<TN t106[ECX]>, #<TN RT!62[S9]>
        MOV     DWORD PTR [EAX-20], #<TN t106[ECX]>

VOP MOVE-ARG R!19[S6]>t113[ECX] t103[EAX] => t78[S5] 
        MOV     #<TN t113[ECX]>, #<TN R!19[S6]>
        MOV     DWORD PTR [EAX-24], #<TN t113[ECX]>

VOP MOVE-ARG C!17[S12]>t114[ESI] t103[EAX] => t80[ESI] 
        MOV     #<TN t80[ESI]>, #<TN C!17[S12]>

VOP MOVE-ARG N!15[S11]>t115[ECX] t103[EAX] => t82[ECX] 
        MOV     #<TN t82[ECX]>, #<TN N!15[S11]>

VOP MOVE-ARG t102[EBX] t103[EAX] => t83[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t102[EBX]>

VOP CALL-LOCAL t103[EAX] t104[IGNORE-ME] X!73[S2] Z!74[S3] t76[S4] t78[S5]
               t80[ESI] t82[ECX] t83[S0]
               {# # # 1}
               => t116[EDX] 
L56:
        MOV     #<TN t109[EBP]>, #<TN t103[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L57)
L58:
        JMP     L40
L57:
L59:
        JMP     NC, L60
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L60:
L61:

VOP MOVE t116[EDX] => t117[S7]<t118[EDX] 
        MOV     #<TN t117[S7]>, #<TN t116[EDX]>

VOP CURRENT-FP => t119[EDX] 
        MOV     #<TN t119[EDX]>, #<TN t109[EBP]>

VOP ALLOCATE-FRAME {#} => t120[EAX] t121[IGNORE-ME] 
        MOV     #<TN t120[EAX]>, #<TN t107[ESP]>
        SUB     #<TN t107[ESP]>, 64

VOP MOVE-ARG RT!62[S9]>t122[ECX] t120[EAX] => X!73[S2] 
        MOV     #<TN t122[ECX]>, #<TN RT!62[S9]>
        MOV     DWORD PTR [EAX-12], #<TN t122[ECX]>

VOP MOVE-ARG RT!62[S9]>t123[ECX] t120[EAX] => Z!74[S3] 
        MOV     #<TN t123[ECX]>, #<TN RT!62[S9]>
        MOV     DWORD PTR [EAX-16], #<TN t123[ECX]>

VOP MOVE-ARG RT!62[S9]>t124[ECX] t120[EAX] => t76[S4] 
        MOV     #<TN t124[ECX]>, #<TN RT!62[S9]>
        MOV     DWORD PTR [EAX-20], #<TN t124[ECX]>

VOP MOVE-ARG R!19[S6]>t125[ECX] t120[EAX] => t78[S5] 
        MOV     #<TN t125[ECX]>, #<TN R!19[S6]>
        MOV     DWORD PTR [EAX-24], #<TN t125[ECX]>

VOP MOVE-ARG C!17[S12]>t126[ESI] t120[EAX] => t80[ESI] 
        MOV     #<TN t80[ESI]>, #<TN C!17[S12]>

VOP MOVE-ARG N!15[S11]>t127[ECX] t120[EAX] => t82[ECX] 
        MOV     #<TN t82[ECX]>, #<TN N!15[S11]>

VOP MOVE-ARG t119[EDX] t120[EAX] => t83[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t119[EDX]>

VOP CALL-LOCAL t120[EAX] t121[IGNORE-ME] X!73[S2] Z!74[S3] t76[S4] t78[S5]
               t80[ESI] t82[ECX] t83[S0]
               {# # # 1}
               => t128[EDX] 
L62:
        MOV     #<TN t109[EBP]>, #<TN t120[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L63)
L64:
        JMP     L40
L63:
L65:
        JMP     NC, L66
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L66:
L67:

VOP MOVE t128[EDX] => t129[EAX] 
        MOV     #<TN t129[EAX]>, #<TN t128[EDX]>

VOP MOVE t44[S13]>t130[EDX] => t131[EDX] 
        MOV     #<TN t130[EDX]>, #<TN t44[S13]>

VOP MOVE t85[S10]>t132[EDI] => t133[EDI] 
        MOV     #<TN t132[EDI]>, #<TN t85[S10]>

VOP MOVE t98[S8]>t134[ESI] => t135[ESI] 
        MOV     #<TN t134[ESI]>, #<TN t98[S8]>

VOP MOVE t117[S7]>t136[ECX] => t137[S3]<t138[ECX] 
        MOV     #<TN t136[ECX]>, #<TN t117[S7]>
        MOV     #<TN t137[S3]>, #<TN t138[ECX]>

VOP MOVE t129[EAX] => t139[S4]<t140[EAX] 
        MOV     #<TN t139[S4]>, #<TN t129[EAX]>

VOP LIST t131[EDX] t133[EDI] t135[ESI] t137[S3] t139[S4] {5} => t141[ESI] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t142[EBX]>, 40
        FS-SEGMENT-PREFIX
        ADD     #<TN t142[EBX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t142[EBX]>, DWORD PTR [+36]
        JMP     BE, L68
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_ebx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L69
L68:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t142[EBX]>
        SUB     #<TN t142[EBX]>, 40
L69:
        LEA     #<TN t142[EBX]>, BYTE PTR [EBX+3]
        MOV     #<TN t143[EAX]>, #<TN t142[EBX]>
        MOV     DWORD PTR [EAX-3], #<TN t131[EDX]>
        ADD     #<TN t143[EAX]>, 8
        MOV     DWORD PTR [EAX-7], #<TN t143[EAX]>
        MOV     DWORD PTR [EAX-3], #<TN t133[EDI]>
        ADD     #<TN t143[EAX]>, 8
        MOV     DWORD PTR [EAX-7], #<TN t143[EAX]>
        MOV     DWORD PTR [EAX-3], #<TN t135[ESI]>
        ADD     #<TN t143[EAX]>, 8
        MOV     DWORD PTR [EAX-7], #<TN t143[EAX]>
        MOV     #<TN t144[ECX]>, #<TN t137[S3]>
        MOV     DWORD PTR [EAX-3], #<TN t144[ECX]>
        ADD     #<TN t143[EAX]>, 8
        MOV     DWORD PTR [EAX-7], #<TN t143[EAX]>
        MOV     #<TN t144[ECX]>, #<TN t139[S4]>
        MOV     DWORD PTR [EAX-3], #<TN t144[ECX]>
        MOV     DWORD PTR [EAX+1], 134217739
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L70
        BREAK   9
L70:
        MOV     #<TN t141[ESI]>, #<TN t142[EBX]>

L71:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT C!17[S12]>t145[EAX]
                                                {0}
                                                => t146[S4]<t147[FR0] 
        MOV     #<TN t145[EAX]>, #<TN C!17[S12]>
        FSTP    #<TN t147[FR0]>
        FLDD    DWORD PTR [EAX+1]
        FSTD    DWORD PTR [EBP-24]

L72:
L73:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT C!17[S12]>t148[EAX]
                                                {1}
                                                => t149[FR0] 
        MOV     #<TN t148[EAX]>, #<TN C!17[S12]>
        FSTP    #<TN t149[FR0]>
        FLDD    DWORD PTR [EAX+9]

L74:

VOP MOVE-OPERAND t141[ESI] {SB-VM::STORE-STACK} => t150[S2] 
        MOV     #<TN t150[S2]>, #<TN t141[ESI]>

VOP MOVE-FROM-DOUBLE t149[FR0] => t151[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t151[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t151[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t151[EDX]>, DWORD PTR [+36]
        JMP     BE, L75
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L76
L75:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t151[EDX]>
        SUB     #<TN t151[EDX]>, 16
L76:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t151[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L77
        BREAK   9
L77:

VOP GENERIC-+ t151[EDX] R!19[S6]>t152[EDI] => t153[EDX] 
        MOV     #<TN t152[EDI]>, #<TN R!19[S6]>
L78:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC-+
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L79:
        JMP     NC, L80
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L80:

VOP MOVE-OPERAND t150[S2] {SB-VM::LOAD-STACK} => t141[ESI] 
        MOV     #<TN t141[ESI]>, #<TN t150[S2]>

L81:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT C!17[S12]>t154[EAX]
                                                {2}
                                                => t155[FR0] 
        MOV     #<TN t154[EAX]>, #<TN C!17[S12]>
        FSTP    #<TN t155[FR0]>
        FLDD    DWORD PTR [EAX+17]

L82:

VOP MOVE-TO-DOUBLE t153[EDX] => t156[FR1] 
        FSTP    #<TN t156[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t156[FR1]>

L83:

VOP ALLOCATE-VECTOR-ON-HEAP '214!157>t158[ECX] '3!159>t160[EDX]
                            '6!161>t162[EBX]
                            => t163[EAX] 
        MOV     #<TN t158[ECX]>, 214
        MOV     #<TN t160[EDX]>, 12
        MOV     #<TN t162[EBX]>, 24
        LEA     #<TN t163[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t163[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t163[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t163[EAX]>, DWORD PTR [+36]
        JMP     BE, L84
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L85
L84:
        FS-SEGMENT-PREFIX
        XOR     #<TN t163[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t163[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t163[EAX]>, DWORD PTR [+32]
L85:
        LEA     #<TN t163[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t158[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t160[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L86
        BREAK   9
L86:

VOP MOVE t163[EAX] => #:G1!164[S3]<t165[ECX] 
        MOV     #<TN #:G1!164[S3]>, #<TN t163[EAX]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t163[EAX] t146[S4]>t166[FR2]
                                                {0}
                                                => t167[FR2] 
        FSTP    #<TN t166[FR2]>
        FLDD    DWORD PTR [EBP-24]
        FXCH    #<TN t166[FR2]>
        FXCH    #<TN t166[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t166[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t163[EAX] t156[FR1]
                                                {1}
                                                => t168[FR1] 
        FXCH    #<TN t156[FR1]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t156[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t163[EAX] t155[FR0]
                                                {2}
                                                => t169[FR0] 
        FSTD    DWORD PTR [EAX+17]

L87:

VOP MOVE t141[ESI] => OBJS!170[S5]<t171[EAX] 
        MOV     #<TN OBJS!170[S5]>, #<TN t141[ESI]>

L88:
L89:

VOP MOVE 'NIL!172 => S!173[ECX] 
        MOV     #<TN S!173[ECX]>, 134217739

VOP MOVE t141[ESI] => #:LOOP-LIST-1728!174[EBX] 
        MOV     #<TN #:LOOP-LIST-1728!174[EBX]>, #<TN t141[ESI]>

VOP MOVE '0!175 => #:LOOP-MAXMIN-1729!176[S4]<t177[EAX] 
        MOV     #<TN #:LOOP-MAXMIN-1729!176[S4]>, 0

VOP MOVE '0!175 => #:LOOP-MAXMIN-TEMP-1730!178[ESI] 
        XOR     #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>, #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>

VOP MOVE 'NIL!172 => #:LOOP-MAXMIN-FLAG-1731!179[S2]<t180[EAX] 
        MOV     #<TN #:LOOP-MAXMIN-FLAG-1731!179[S2]>, 134217739

L90:

VOP BRANCH {#} 
        JMP     L91

L92:

VOP SLOT #:LOOP-LIST-1728!174[EBX] {CAR 0 3} => t181[ECX] 
        MOV     #<TN t181[ECX]>, DWORD PTR [EBX-3]

VOP SLOT #:LOOP-LIST-1728!174[EBX] {CDR 1 3} => t182[EBX] 
        MOV     #<TN t182[EBX]>, DWORD PTR [EBX+1]

VOP INSTANCE-INDEX-REF S!173[ECX] '1!47 => t183[EAX] 
        MOV     #<TN t183[EAX]>, DWORD PTR [ECX+7]

L93:
L94:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT #:G1!164[S3]>t184[EDX]
                                                {0}
                                                => t185[FR0] 
        MOV     #<TN t184[EDX]>, #<TN #:G1!164[S3]>
        FSTP    #<TN t185[FR0]>
        FLDD    DWORD PTR [EDX+1]

L95:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t183[EAX] {0} => t186[FR1] 
        FSTP    #<TN t186[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t186[FR1]>

L96:

VOP -/DOUBLE-FLOAT t185[FR0] t186[FR1] => t187[FR1] 
        FSUBR-STI       #<TN t187[FR1]>
        WAIT

L97:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT #:G1!164[S3]>t188[EDX]
                                                {1}
                                                => t189[FR0] 
        MOV     #<TN t188[EDX]>, #<TN #:G1!164[S3]>
        FSTP    #<TN t189[FR0]>
        FLDD    DWORD PTR [EDX+9]

L98:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t183[EAX] {1} => t190[FR2] 
        FSTP    #<TN t190[FR2]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t190[FR2]>

L99:

VOP -/DOUBLE-FLOAT t189[FR0] t190[FR2] => t191[FR2] 
        FSUBR-STI       #<TN t191[FR2]>
        WAIT

L100:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT #:G1!164[S3]>t192[EDX]
                                                {2}
                                                => t193[FR0] 
        MOV     #<TN t192[EDX]>, #<TN #:G1!164[S3]>
        FSTP    #<TN t193[FR0]>
        FLDD    DWORD PTR [EDX+17]

L101:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t183[EAX] {2} => t194[FR3] 
        FSTP    #<TN t194[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t194[FR3]>

L102:

VOP -/DOUBLE-FLOAT t193[FR0] t194[FR3] => t195[FR0] 
        FSUBD   #<TN t194[FR3]>
        WAIT

L103:

VOP ALLOCATE-VECTOR-ON-HEAP '214!157>t196[EDX] '3!159>t197[ESI]
                            '6!161>t198[EDI]
                            => t199[EAX] 
        MOV     #<TN t196[EDX]>, 214
        MOV     #<TN t197[ESI]>, 12
        MOV     #<TN t198[EDI]>, 24
        LEA     #<TN t199[EAX]>, BYTE PTR [EDI+15]
        AND     #<TN t199[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t199[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t199[EAX]>, DWORD PTR [+36]
        JMP     BE, L104
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L105
L104:
        FS-SEGMENT-PREFIX
        XOR     #<TN t199[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t199[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t199[EAX]>, DWORD PTR [+32]
L105:
        LEA     #<TN t199[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t196[EDX]>
        MOV     DWORD PTR [EAX-3], #<TN t197[ESI]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L106
        BREAK   9
L106:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] t187[FR1]
                                                {0}
                                                => t200[FR1] 
        FXCH    #<TN t187[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t187[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] t191[FR2]
                                                {1}
                                                => t201[FR2] 
        FXCH    #<TN t191[FR2]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t191[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] t195[FR0]
                                                {2}
                                                => t202[FR0] 
        FSTD    DWORD PTR [EAX+17]

L107:
L108:
L109:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] {0} => t203[FR0] 
        FSTP    #<TN t203[FR0]>
        FLDD    DWORD PTR [EAX+1]

L110:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] {0} => t204[FR1] 
        FSTP    #<TN t204[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t204[FR1]>

L111:

VOP */DOUBLE-FLOAT t203[FR0] t204[FR1] => t205[FR1] 
        FMUL-STI        #<TN t205[FR1]>
        WAIT

L112:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] {1} => t206[FR0] 
        FSTP    #<TN t206[FR0]>
        FLDD    DWORD PTR [EAX+9]

L113:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] {1} => t207[FR2] 
        FSTP    #<TN t207[FR2]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t207[FR2]>

L114:

VOP */DOUBLE-FLOAT t206[FR0] t207[FR2] => t208[FR0] 
        FMULD   #<TN t207[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t205[FR1] t208[FR0] => t209[FR1] 
        FADD-STI        #<TN t209[FR1]>
        WAIT

L115:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] {2} => t210[FR0] 
        FSTP    #<TN t210[FR0]>
        FLDD    DWORD PTR [EAX+17]

L116:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t199[EAX] {2} => t211[FR2] 
        FSTP    #<TN t211[FR2]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t211[FR2]>

L117:

VOP */DOUBLE-FLOAT t210[FR0] t211[FR2] => t212[FR0] 
        FMULD   #<TN t211[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t209[FR1] t212[FR0] => t213[FR0] 
        FADDD   #<TN t209[FR1]>
        WAIT

L118:

VOP FSQRT t213[FR0] => t214[FR0] 
L119:
        FSQRT
        WAIT

L120:

VOP RAW-INSTANCE-REF/DOUBLE S!173[ECX] '0!175 => t215[FR1] 
        MOV     #<TN t216[EAX]>, DWORD PTR [ECX-1]
        SHR     #<TN t216[EAX]>, 8
        FSTP    #<TN t215[FR1]>
        FLDD    DWORD PTR [ECX+EAX*4-5]
        FXCH    #<TN t215[FR1]>

VOP +/DOUBLE-FLOAT t214[FR0] t215[FR1] => t217[FR0] 
        FADDD   #<TN t215[FR1]>
        WAIT

VOP MOVE-FROM-DOUBLE t217[FR0] => #:LOOP-MAXMIN-TEMP-1730!178[ESI] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>, DWORD PTR [+36]
        JMP     BE, L121
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_esi
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L122
L121:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>
        SUB     #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>, 16
L122:
        MOV     DWORD PTR [ESI+0], 790
        LEA     #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>, BYTE PTR [ESI+7]
        FSTD    DWORD PTR [ESI+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L123
        BREAK   9
L123:

VOP IF-EQ #:LOOP-MAXMIN-FLAG-1731!179[S2] 'NIL!50 {# T} 
        CMP     #<TN #:LOOP-MAXMIN-FLAG-1731!179[S2]>, 134217739
        JMP     NE, L124

L125:

VOP MOVE 'T!218 => #:LOOP-MAXMIN-FLAG-1731!179[S2]<t219[EAX] 
        MOV     #<TN #:LOOP-MAXMIN-FLAG-1731!179[S2]>, 134217767

VOP MOVE #:LOOP-MAXMIN-TEMP-1730!178[ESI] => t220[EAX] 
        MOV     #<TN t220[EAX]>, #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>

VOP MOVE t220[EAX] => #:LOOP-MAXMIN-1729!176[S4]<t221[EAX] 
        MOV     #<TN #:LOOP-MAXMIN-1729!176[S4]>, #<TN t220[EAX]>

VOP BRANCH {#} 
        JMP     L91

L124:

VOP MOVE-OPERAND #:LOOP-LIST-1728!174[EBX] {SB-VM::STORE-STACK} => t222[S7] 
        MOV     #<TN t222[S7]>, #<TN #:LOOP-LIST-1728!174[EBX]>

VOP MOVE-OPERAND #:LOOP-MAXMIN-TEMP-1730!178[ESI]
                 {SB-VM::STORE-STACK}
                 => t223[S8] 
        MOV     #<TN t223[S8]>, #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>

VOP MOVE #:LOOP-MAXMIN-TEMP-1730!178[ESI] => t224[EDX] 
        MOV     #<TN t224[EDX]>, #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>

VOP GENERIC-> t224[EDX] #:LOOP-MAXMIN-1729!176[S4]>t225[EDI] => t226[EDX] 
        MOV     #<TN t225[EDI]>, #<TN #:LOOP-MAXMIN-1729!176[S4]>
L126:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC->
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L127:
        JMP     NC, L128
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L128:

VOP MOVE-OPERAND t223[S8]
                 {SB-VM::LOAD-STACK}
                 => #:LOOP-MAXMIN-TEMP-1730!178[ESI] 
        MOV     #<TN #:LOOP-MAXMIN-TEMP-1730!178[ESI]>, #<TN t223[S8]>

VOP MOVE-OPERAND t222[S7] {SB-VM::LOAD-STACK} => #:LOOP-LIST-1728!174[EBX] 
        MOV     #<TN #:LOOP-LIST-1728!174[EBX]>, #<TN t222[S7]>

VOP IF-EQ t226[EDX] 'NIL!50 {# T} 
        CMP     #<TN t226[EDX]>, 134217739
        JMP     NE, L125

L91:

VOP IF-EQ #:LOOP-LIST-1728!174[EBX] 'NIL!50 {# T} 
        CMP     #<TN #:LOOP-LIST-1728!174[EBX]>, 134217739
        JMP     NE, L92

L129:
L130:

VOP GENERIC-< #:LOOP-MAXMIN-1729!176[S4]>t227[EDX] R!19[S6]>t228[EDI]
              => t229[EDX] 
        MOV     #<TN t227[EDX]>, #<TN #:LOOP-MAXMIN-1729!176[S4]>
        MOV     #<TN t228[EDI]>, #<TN R!19[S6]>
L131:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC-<
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L132:
        JMP     NC, L133
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L133:

VOP IF-EQ t229[EDX] 'NIL!50 {# NIL} 
        CMP     #<TN t229[EDX]>, 134217739
        JMP     E, L134

L135:

VOP MOVE R!19[S6]>t230[EAX] => t231[EAX] 
        MOV     #<TN t230[EAX]>, #<TN R!19[S6]>

L136:

VOP MOVE ':CENTER!31[Const6]>t232[EDX] => t233[EDX] 
        MOV     #<TN t232[EDX]>, #<TN ':CENTER!31[Const6]>

VOP MOVE #:G1!164[S3]>t234[EDI] => t235[EDI] 
        MOV     #<TN t234[EDI]>, #<TN #:G1!164[S3]>

VOP MOVE ':RADIUS!36[Const7]>t236[ESI] => t237[ESI] 
        MOV     #<TN t236[ESI]>, #<TN ':RADIUS!36[Const7]>

VOP MOVE t231[EAX] => t238[S3]<t239[EAX] 
        MOV     #<TN t238[S3]>, #<TN t231[EAX]>

VOP MOVE ':CHILDREN!240[Const11]>t241[EAX] => t242[S4]<t243[EAX] 
        MOV     #<TN t241[EAX]>, #<TN ':CHILDREN!240[Const11]>
        MOV     #<TN t242[S4]>, #<TN t243[EAX]>

VOP TAIL-CALL-NAMED t244[Const12]>t245[EAX] t22[S0] t28[S1] t233[EDX] t235[EDI]
                    t237[ESI] t238[S3] t242[S4] t246[S5]
                    {6 NIL}
                    
        MOV     #<TN t245[EAX]>, #<TN t244[Const12]>
L137:
        MOV     #<TN t247[ECX]>, 24
        PUSH    #<TN t28[S1]>
L138:
L139:
        JMP     DWORD PTR [EAX+5]
L140:

L134:

VOP MOVE #:LOOP-MAXMIN-1729!176[S4]>t248[EAX] => t231[EAX] 
        MOV     #<TN t248[EAX]>, #<TN #:LOOP-MAXMIN-1729!176[S4]>

VOP BRANCH {#} 
        JMP     L136

L40:
in the elsewhere segment:
L141:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L142:

L143:

VOP MOVE-OPERAND t80[ESI] {SB-VM::STORE-STACK} => t249[S14] 
        MOV     #<TN t249[S14]>, #<TN t80[ESI]>

VOP GENERIC-- t82[ECX] '1!47>t250[EDI] => t251[S6]<t252[EDX] 
        MOV     #<TN t250[EDI]>, 4
        MOV     #<TN t253[EDX]>, #<TN t82[ECX]>
L144:
        CALL    #S(SB-C:FIXUP
                   :NAME GENERIC--
                   :FLAVOR ASSEMBLY-ROUTINE
                   :OFFSET NIL)
L145:
        JMP     NC, L146
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L146:
        MOV     #<TN t251[S6]>, #<TN t252[EDX]>

VOP MOVE-OPERAND t249[S14] {SB-VM::LOAD-STACK} => t80[ESI] 
        MOV     #<TN t80[ESI]>, #<TN t249[S14]>

VOP MOVE-TO-DOUBLE X!73[S2]>t254[EAX] => t255[FR0] 
        MOV     #<TN t254[EAX]>, #<TN X!73[S2]>
        FSTP    #<TN t255[FR0]>
        FLDD    DWORD PTR [EAX+1]

VOP MOVE-TO-DOUBLE t76[S4]>t256[EAX] => t257[FR1] 
        MOV     #<TN t256[EAX]>, #<TN t76[S4]>
        FSTP    #<TN t257[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t257[FR1]>

VOP MOVE-TO-DOUBLE Z!74[S3]>t258[EAX] => t259[FR2] 
        MOV     #<TN t258[EAX]>, #<TN Z!74[S3]>
        FSTP    #<TN t259[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t259[FR2]>

L147:

VOP ALLOCATE-VECTOR-ON-HEAP '214!157>t260[ECX] '3!159>t261[EDX]
                            '6!161>t262[EBX]
                            => t263[EAX] 
        MOV     #<TN t260[ECX]>, 214
        MOV     #<TN t261[EDX]>, 12
        MOV     #<TN t262[EBX]>, 24
        LEA     #<TN t263[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t263[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t263[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t263[EAX]>, DWORD PTR [+36]
        JMP     BE, L148
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L149
L148:
        FS-SEGMENT-PREFIX
        XOR     #<TN t263[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t263[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t263[EAX]>, DWORD PTR [+32]
L149:
        LEA     #<TN t263[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t260[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t261[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L150
        BREAK   9
L150:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t263[EAX] t255[FR0]
                                                {0}
                                                => t264[FR0] 
        FSTD    DWORD PTR [EAX+1]

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t263[EAX] t257[FR1]
                                                {1}
                                                => t265[FR1] 
        FXCH    #<TN t257[FR1]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t257[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t263[EAX] t259[FR2]
                                                {2}
                                                => t266[FR2] 
        FXCH    #<TN t259[FR2]>
        FSTD    DWORD PTR [EAX+17]
        FXCH    #<TN t259[FR2]>

L151:
L152:
L153:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t80[ESI] {0} => t267[FR0] 
        FSTP    #<TN t267[FR0]>
        FLDD    DWORD PTR [ESI+1]

L154:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t263[EAX] {0} => t268[FR1] 
        FSTP    #<TN t268[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t268[FR1]>

L155:

VOP +/DOUBLE-FLOAT t267[FR0] t268[FR1] => t269[FR1] 
        FADD-STI        #<TN t269[FR1]>
        WAIT

L156:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t80[ESI] {1} => t270[FR0] 
        FSTP    #<TN t270[FR0]>
        FLDD    DWORD PTR [ESI+9]

L157:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t263[EAX] {1} => t271[FR2] 
        FSTP    #<TN t271[FR2]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t271[FR2]>

L158:

VOP +/DOUBLE-FLOAT t270[FR0] t271[FR2] => t272[FR2] 
        FADD-STI        #<TN t272[FR2]>
        WAIT

L159:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t80[ESI] {2} => t273[FR0] 
        FSTP    #<TN t273[FR0]>
        FLDD    DWORD PTR [ESI+17]

L160:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t263[EAX] {2} => t274[FR3] 
        FSTP    #<TN t274[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t274[FR3]>

L161:

VOP +/DOUBLE-FLOAT t273[FR0] t274[FR3] => t275[FR0] 
        FADDD   #<TN t274[FR3]>
        WAIT

L162:

VOP ALLOCATE-VECTOR-ON-HEAP '214!157>t276[ECX] '3!159>t277[EDX]
                            '6!161>t278[EBX]
                            => t279[EAX] 
        MOV     #<TN t276[ECX]>, 214
        MOV     #<TN t277[EDX]>, 12
        MOV     #<TN t278[EBX]>, 24
        LEA     #<TN t279[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t279[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t279[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t279[EAX]>, DWORD PTR [+36]
        JMP     BE, L163
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L164
L163:
        FS-SEGMENT-PREFIX
        XOR     #<TN t279[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t279[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t279[EAX]>, DWORD PTR [+32]
L164:
        LEA     #<TN t279[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t276[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t277[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L165
        BREAK   9
L165:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t279[EAX] t269[FR1]
                                                {0}
                                                => t280[FR1] 
        FXCH    #<TN t269[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t269[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t279[EAX] t272[FR2]
                                                {1}
                                                => t281[FR2] 
        FXCH    #<TN t272[FR2]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t272[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t279[EAX] t275[FR0]
                                                {2}
                                                => t282[FR0] 
        FSTD    DWORD PTR [EAX+17]

L166:

VOP MOVE-OPERAND t279[EAX] {SB-VM::STORE-STACK} => t283[S2] 
        MOV     #<TN t283[S2]>, #<TN t279[EAX]>

VOP TWO-ARG-/ t78[S5]>t284[EDX] '2.0d0!285[Const13]>t286[EDI] => t287[EDX] 
        MOV     #<TN t284[EDX]>, #<TN t78[S5]>
        MOV     #<TN t286[EDI]>, #<TN '2.0d0!285[Const13]>
        MOV     #<TN t288[EBX]>, #<TN t107[ESP]>
        PUSH    #<TN t109[EBP]>
        SUB     #<TN t107[ESP]>, 8
        MOV     #<TN t109[EBP]>, #<TN t288[EBX]>
        MOV     #<TN t289[ECX]>, 8
L167:
        CALL    DWORD PTR [+134219500]
L168:
        JMP     NC, L169
        MOV     #<TN t107[ESP]>, #<TN t110[EBX]>
L169:

VOP MOVE-OPERAND t283[S2] {SB-VM::LOAD-STACK} => t279[EAX] 
        MOV     #<TN t279[EAX]>, #<TN t283[S2]>

VOP MOVE t251[S6]>t290[ECX] => N!15[S11]<t291[ECX] 
        MOV     #<TN t290[ECX]>, #<TN t251[S6]>
        MOV     #<TN N!15[S11]>, #<TN t291[ECX]>

VOP MOVE t279[EAX] => C!17[S12]<t292[EAX] 
        MOV     #<TN C!17[S12]>, #<TN t279[EAX]>

VOP MOVE t287[EDX] => R!19[S6]<t293[EDX] 
        MOV     #<TN R!19[S6]>, #<TN t287[EDX]>

VOP BRANCH {#} 
        JMP     L2

        .align  3

disassembly of code for #<SB-C:COMPONENT :NAME Z {12851121}>

; 00000000:       2A0E             SUB CL, [ESI]
;      002:       0000             ADD [EAX], AL
;      004:       0000             ADD [EAX], AL
;      006:       0000             ADD [EAX], AL
;      008:       0000             ADD [EAX], AL
;      00A:       0000             ADD [EAX], AL
;      00C:       0000             ADD [EAX], AL
;      00E:       0000             ADD [EAX], AL
;      010:       0000             ADD [EAX], AL
;      012:       0000             ADD [EAX], AL
;      014:       0000             ADD [EAX], AL
;      016:       0000             ADD [EAX], AL
;      018:       0000             ADD [EAX], AL
;      01A:       0000             ADD [EAX], AL
;      01C:       8F45F8           POP DWORD PTR [EBP-8]
;      01F:       8D65C0           LEA ESP, [EBP-64]
;      022:       8955D0           MOV [EBP-48], EDX
;      025:       897DCC           MOV [EBP-52], EDI
;      028:       8975E4           MOV [EBP-28], ESI
;      02B: L0:   8BDC             MOV EBX, ESP
;      02D:       83EC10           SUB ESP, 16
;      030:       8B1511000000     MOV EDX, [#x11]
;      036:       8B7DCC           MOV EDI, [EBP-52]
;      039:       8B3515000000     MOV ESI, [#x15]
;      03F:       8B45E4           MOV EAX, [EBP-28]
;      042:       8943F0           MOV [EBX-16], EAX
;      045:       8B0519000000     MOV EAX, [#x19]
;      04B:       B910000000       MOV ECX, 16
;      050:       896BFC           MOV [EBX-4], EBP
;      053:       8BEB             MOV EBP, EBX
;      055:       FF5005           CALL DWORD PTR [EAX+5]
;      058:       7302             JNB L1
;      05A:       8BE3             MOV ESP, EBX
;      05C: L1:   8955C8           MOV [EBP-56], EDX
;      05F:       8B55D0           MOV EDX, [EBP-48]
;      062:       BF04000000       MOV EDI, 4
;      067:       E800000000       CALL L2
;      06C: L2:   7302             JNB L3
;      06E:       8BE3             MOV ESP, EBX
;      070: L3:   81FA0B000008     CMP EDX, 134217739
;      076:       740D             JEQ L4
;      078:       8B55C8           MOV EDX, [EBP-56]
;      07B:       8D65F8           LEA ESP, [EBP-8]
;      07E:       F8               CLC
;      07F:       8B6DFC           MOV EBP, [EBP-4]
;      082:       C20400           RET 4
;      085: L4:   8B55E4           MOV EDX, [EBP-28]
;      088:       8B3D1D000000     MOV EDI, [#x1D]
;      08E:       8BDC             MOV EBX, ESP
;      090:       55               PUSH EBP
;      091:       83EC08           SUB ESP, 8
;      094:       8BEB             MOV EBP, EBX
;      096:       B908000000       MOV ECX, 8
;      09B:       FF15EC060008     CALL DWORD PTR [#x80006EC]
;      0A1:       7302             JNB L5
;      0A3:       8BE3             MOV ESP, EBX
;      0A5: L5:   8B3D21000000     MOV EDI, [#x21]
;      0AB:       E800000000       CALL L6
;      0B0: L6:   7302             JNB L7
;      0B2:       8BE3             MOV ESP, EBX
;      0B4: L7:   8955E0           MOV [EBP-32], EDX
;      0B7:       8B45E0           MOV EAX, [EBP-32]
;      0BA:       8945D8           MOV [EBP-40], EAX
;      0BD:       8B55E0           MOV EDX, [EBP-32]
;      0C0:       E800000000       CALL L8
;      0C5: L8:   7302             JNB L9
;      0C7:       8BE3             MOV ESP, EBX
;      0C9: L9:   8955F4           MOV [EBP-12], EDX
;      0CC:       8B55E0           MOV EDX, [EBP-32]
;      0CF:       E800000000       CALL L10
;      0D4: L10:  7302             JNB L11
;      0D6:       8BE3             MOV ESP, EBX
;      0D8: L11:  8BDD             MOV EBX, EBP
;      0DA:       8BC4             MOV EAX, ESP
;      0DC:       83EC40           SUB ESP, 64
;      0DF:       8B4DF4           MOV ECX, [EBP-12]
;      0E2:       8948F4           MOV [EAX-12], ECX
;      0E5:       8950F0           MOV [EAX-16], EDX
;      0E8:       8B4DD8           MOV ECX, [EBP-40]
;      0EB:       8948EC           MOV [EAX-20], ECX
;      0EE:       8B4DE4           MOV ECX, [EBP-28]
;      0F1:       8948E8           MOV [EAX-24], ECX
;      0F4:       8B75CC           MOV ESI, [EBP-52]
;      0F7:       8B4DD0           MOV ECX, [EBP-48]
;      0FA:       8958FC           MOV [EAX-4], EBX
;      0FD:       8BE8             MOV EBP, EAX
;      0FF:       C745F83C010000   MOV DWORD PTR [EBP-8], 316
;      106:       E938040000       JMP L52
;      10B:       7302             JNB L12
;      10D:       8BE3             MOV ESP, EBX
;      10F: L12:  8955D4           MOV [EBP-44], EDX
;      112:       8B55E0           MOV EDX, [EBP-32]
;      115:       E800000000       CALL L13
;      11A: L13:  7302             JNB L14
;      11C:       8BE3             MOV ESP, EBX
;      11E: L14:  8BDD             MOV EBX, EBP
;      120:       8BC4             MOV EAX, ESP
;      122:       83EC40           SUB ESP, 64
;      125:       8950F4           MOV [EAX-12], EDX
;      128:       8B4DD8           MOV ECX, [EBP-40]
;      12B:       8948F0           MOV [EAX-16], ECX
;      12E:       8B4DD8           MOV ECX, [EBP-40]
;      131:       8948EC           MOV [EAX-20], ECX
;      134:       8B4DE4           MOV ECX, [EBP-28]
;      137:       8948E8           MOV [EAX-24], ECX
;      13A:       8B75CC           MOV ESI, [EBP-52]
;      13D:       8B4DD0           MOV ECX, [EBP-48]
;      140:       8958FC           MOV [EAX-4], EBX
;      143:       8BE8             MOV EBP, EAX
;      145:       C745F882010000   MOV DWORD PTR [EBP-8], 386
;      14C:       E9F2030000       JMP L52
;      151:       7302             JNB L15
;      153:       8BE3             MOV ESP, EBX
;      155: L15:  8955DC           MOV [EBP-36], EDX
;      158:       8B55E0           MOV EDX, [EBP-32]
;      15B:       E800000000       CALL L16
;      160: L16:  7302             JNB L17
;      162:       8BE3             MOV ESP, EBX
;      164: L17:  8BDD             MOV EBX, EBP
;      166:       8BC4             MOV EAX, ESP
;      168:       83EC40           SUB ESP, 64
;      16B:       8B4DD8           MOV ECX, [EBP-40]
;      16E:       8948F4           MOV [EAX-12], ECX
;      171:       8950F0           MOV [EAX-16], EDX
;      174:       8B4DD8           MOV ECX, [EBP-40]
;      177:       8948EC           MOV [EAX-20], ECX
;      17A:       8B4DE4           MOV ECX, [EBP-28]
;      17D:       8948E8           MOV [EAX-24], ECX
;      180:       8B75CC           MOV ESI, [EBP-52]
;      183:       8B4DD0           MOV ECX, [EBP-48]
;      186:       8958FC           MOV [EAX-4], EBX
;      189:       8BE8             MOV EBP, EAX
;      18B:       C745F8C8010000   MOV DWORD PTR [EBP-8], 456
;      192:       E9AC030000       JMP L52
;      197:       7302             JNB L18
;      199:       8BE3             MOV ESP, EBX
;      19B: L18:  8955E0           MOV [EBP-32], EDX
;      19E:       8BD5             MOV EDX, EBP
;      1A0:       8BC4             MOV EAX, ESP
;      1A2:       83EC40           SUB ESP, 64
;      1A5:       8B4DD8           MOV ECX, [EBP-40]
;      1A8:       8948F4           MOV [EAX-12], ECX
;      1AB:       8B4DD8           MOV ECX, [EBP-40]
;      1AE:       8948F0           MOV [EAX-16], ECX
;      1B1:       8B4DD8           MOV ECX, [EBP-40]
;      1B4:       8948EC           MOV [EAX-20], ECX
;      1B7:       8B4DE4           MOV ECX, [EBP-28]
;      1BA:       8948E8           MOV [EAX-24], ECX
;      1BD:       8B75CC           MOV ESI, [EBP-52]
;      1C0:       8B4DD0           MOV ECX, [EBP-48]
;      1C3:       8950FC           MOV [EAX-4], EDX
;      1C6:       8BE8             MOV EBP, EAX
;      1C8:       C745F805020000   MOV DWORD PTR [EBP-8], 517
;      1CF:       E96F030000       JMP L52
;      1D4:       7302             JNB L19
;      1D6:       8BE3             MOV ESP, EBX
;      1D8: L19:  8BC2             MOV EAX, EDX
;      1DA:       8B55C8           MOV EDX, [EBP-56]
;      1DD:       8B7DD4           MOV EDI, [EBP-44]
;      1E0:       8B75DC           MOV ESI, [EBP-36]
;      1E3:       8B4DE0           MOV ECX, [EBP-32]
;      1E6:       894DF0           MOV [EBP-16], ECX
;      1E9:       8945EC           MOV [EBP-20], EAX
;      1EC:       64               BYTE #X64
;      1ED:       800D4800000004   OR BYTE PTR [#x48], 4
;      1F4:       BB28000000       MOV EBX, 40
;      1F9:       64               BYTE #X64
;      1FA:       031D20000000     ADD EBX, [#x20]
;      200:       64               BYTE #X64
;      201:       3B1D24000000     CMP EBX, [#x24]
;      207:       7607             JBE L21
;      209:       E800000000       CALL L20
;      20E: L20:  EB0A             JMP L22
;      210: L21:  64               BYTE #X64
;      211:       891D20000000     MOV [#x20], EBX
;      217:       83EB28           SUB EBX, 40
;      21A: L22:  8D5B03           LEA EBX, [EBX+3]
;      21D:       8BC3             MOV EAX, EBX
;      21F:       8950FD           MOV [EAX-3], EDX
;      222:       83C008           ADD EAX, 8
;      225:       8940F9           MOV [EAX-7], EAX
;      228:       8978FD           MOV [EAX-3], EDI
;      22B:       83C008           ADD EAX, 8
;      22E:       8940F9           MOV [EAX-7], EAX
;      231:       8970FD           MOV [EAX-3], ESI
;      234:       83C008           ADD EAX, 8
;      237:       8940F9           MOV [EAX-7], EAX
;      23A:       8B4DF0           MOV ECX, [EBP-16]
;      23D:       8948FD           MOV [EAX-3], ECX
;      240:       83C008           ADD EAX, 8
;      243:       8940F9           MOV [EAX-7], EAX
;      246:       8B4DEC           MOV ECX, [EBP-20]
;      249:       8948FD           MOV [EAX-3], ECX
;      24C:       C740010B000008   MOV DWORD PTR [EAX+1], 134217739
;      253:       64               BYTE #X64
;      254:       80354800000004   XOR BYTE PTR [#x48], 4
;      25B:       7403             JEQ L23
;      25D:       0F0B09           BREAK 9                    ; pending interrupt trap
;      260: L23:  8BF3             MOV ESI, EBX
;      262:       8B45CC           MOV EAX, [EBP-52]
;      265:       DDD8             FSTPD FR0
;      267:       DD4001           FLDD [EAX+1]
;      26A:       DD55E8           FSTD [EBP-24]
;      26D:       8B45CC           MOV EAX, [EBP-52]
;      270:       DDD8             FSTPD FR0
;      272:       DD4009           FLDD [EAX+9]
;      275:       8975F4           MOV [EBP-12], ESI
;      278:       64               BYTE #X64
;      279:       800D4800000004   OR BYTE PTR [#x48], 4
;      280:       BA10000000       MOV EDX, 16
;      285:       64               BYTE #X64
;      286:       031520000000     ADD EDX, [#x20]
;      28C:       64               BYTE #X64
;      28D:       3B1524000000     CMP EDX, [#x24]
;      293:       7607             JBE L25
;      295:       E800000000       CALL L24
;      29A: L24:  EB0A             JMP L26
;      29C: L25:  64               BYTE #X64
;      29D:       891520000000     MOV [#x20], EDX
;      2A3:       83EA10           SUB EDX, 16
;      2A6: L26:  C70216030000     MOV DWORD PTR [EDX], 790
;      2AC:       8D5207           LEA EDX, [EDX+7]
;      2AF:       DD5201           FSTD [EDX+1]
;      2B2:       64               BYTE #X64
;      2B3:       80354800000004   XOR BYTE PTR [#x48], 4
;      2BA:       7403             JEQ L27
;      2BC:       0F0B09           BREAK 9                    ; pending interrupt trap
;      2BF: L27:  8B7DE4           MOV EDI, [EBP-28]
;      2C2:       E800000000       CALL L28
;      2C7: L28:  7302             JNB L29
;      2C9:       8BE3             MOV ESP, EBX
;      2CB: L29:  8B75F4           MOV ESI, [EBP-12]
;      2CE:       8B45CC           MOV EAX, [EBP-52]
;      2D1:       DDD8             FSTPD FR0
;      2D3:       DD4011           FLDD [EAX+17]
;      2D6:       DDD9             FSTPD FR1
;      2D8:       DD4201           FLDD [EDX+1]
;      2DB:       D9C9             FXCH FR1
;      2DD:       B9D6000000       MOV ECX, 214
;      2E2:       BA0C000000       MOV EDX, 12
;      2E7:       BB18000000       MOV EBX, 24
;      2EC:       8D430F           LEA EAX, [EBX+15]
;      2EF:       83E0F8           AND EAX, -8
;      2F2:       64               BYTE #X64
;      2F3:       800D4800000004   OR BYTE PTR [#x48], 4
;      2FA:       64               BYTE #X64
;      2FB:       030520000000     ADD EAX, [#x20]
;      301:       64               BYTE #X64
;      302:       3B0524000000     CMP EAX, [#x24]
;      308:       7607             JBE L31
;      30A:       E800000000       CALL L30
;      30F: L30:  EB15             JMP L32
;      311: L31:  64               BYTE #X64
;      312:       330520000000     XOR EAX, [#x20]
;      318:       64               BYTE #X64
;      319:       310520000000     XOR [#x20], EAX
;      31F:       64               BYTE #X64
;      320:       330520000000     XOR EAX, [#x20]
;      326: L32:  8D4007           LEA EAX, [EAX+7]
;      329:       8948F9           MOV [EAX-7], ECX
;      32C:       8950FD           MOV [EAX-3], EDX
;      32F:       64               BYTE #X64
;      330:       80354800000004   XOR BYTE PTR [#x48], 4
;      337:       7403             JEQ L33
;      339:       0F0B09           BREAK 9                    ; pending interrupt trap
;      33C: L33:  8945F0           MOV [EBP-16], EAX
;      33F:       DDDA             FSTPD FR2
;      341:       DD45E8           FLDD [EBP-24]
;      344:       D9CA             FXCH FR2
;      346:       D9CA             FXCH FR2
;      348:       DD5001           FSTD [EAX+1]
;      34B:       D9CA             FXCH FR2
;      34D:       D9C9             FXCH FR1
;      34F:       DD5009           FSTD [EAX+9]
;      352:       D9C9             FXCH FR1
;      354:       DD5011           FSTD [EAX+17]
;      357:       8975E8           MOV [EBP-24], ESI
;      35A:       B90B000008       MOV ECX, 134217739
;      35F:       8BDE             MOV EBX, ESI
;      361:       C745EC00000000   MOV DWORD PTR [EBP-20], 0
;      368:       31F6             XOR ESI, ESI
;      36A:       C745F40B000008   MOV DWORD PTR [EBP-12], 134217739
;      371:       E976010000       JMP L47
;      376: L34:  8B4BFD           MOV ECX, [EBX-3]
;      379:       8B5B01           MOV EBX, [EBX+1]
;      37C:       8B4107           MOV EAX, [ECX+7]
;      37F:       8B55F0           MOV EDX, [EBP-16]
;      382:       DDD8             FSTPD FR0
;      384:       DD4201           FLDD [EDX+1]
;      387:       DDD9             FSTPD FR1
;      389:       DD4001           FLDD [EAX+1]
;      38C:       D9C9             FXCH FR1
;      38E:       DCE1             FSUBR-STI FR1
;      390:       9B               WAIT
;      391:       8B55F0           MOV EDX, [EBP-16]
;      394:       DDD8             FSTPD FR0
;      396:       DD4209           FLDD [EDX+9]
;      399:       DDDA             FSTPD FR2
;      39B:       DD4009           FLDD [EAX+9]
;      39E:       D9CA             FXCH FR2
;      3A0:       DCE2             FSUBR-STI FR2
;      3A2:       9B               WAIT
;      3A3:       8B55F0           MOV EDX, [EBP-16]
;      3A6:       DDD8             FSTPD FR0
;      3A8:       DD4211           FLDD [EDX+17]
;      3AB:       DDDB             FSTPD FR3
;      3AD:       DD4011           FLDD [EAX+17]
;      3B0:       D9CB             FXCH FR3
;      3B2:       D8E3             FSUBD FR3
;      3B4:       9B               WAIT
;      3B5:       BAD6000000       MOV EDX, 214
;      3BA:       BE0C000000       MOV ESI, 12
;      3BF:       BF18000000       MOV EDI, 24
;      3C4:       8D470F           LEA EAX, [EDI+15]
;      3C7:       83E0F8           AND EAX, -8
;      3CA:       64               BYTE #X64
;      3CB:       800D4800000004   OR BYTE PTR [#x48], 4
;      3D2:       64               BYTE #X64
;      3D3:       030520000000     ADD EAX, [#x20]
;      3D9:       64               BYTE #X64
;      3DA:       3B0524000000     CMP EAX, [#x24]
;      3E0:       7607             JBE L36
;      3E2:       E800000000       CALL L35
;      3E7: L35:  EB15             JMP L37
;      3E9: L36:  64               BYTE #X64
;      3EA:       330520000000     XOR EAX, [#x20]
;      3F0:       64               BYTE #X64
;      3F1:       310520000000     XOR [#x20], EAX
;      3F7:       64               BYTE #X64
;      3F8:       330520000000     XOR EAX, [#x20]
;      3FE: L37:  8D4007           LEA EAX, [EAX+7]
;      401:       8950F9           MOV [EAX-7], EDX
;      404:       8970FD           MOV [EAX-3], ESI
;      407:       64               BYTE #X64
;      408:       80354800000004   XOR BYTE PTR [#x48], 4
;      40F:       7403             JEQ L38
;      411:       0F0B09           BREAK 9                    ; pending interrupt trap
;      414: L38:  D9C9             FXCH FR1
;      416:       DD5001           FSTD [EAX+1]
;      419:       D9C9             FXCH FR1
;      41B:       D9CA             FXCH FR2
;      41D:       DD5009           FSTD [EAX+9]
;      420:       D9CA             FXCH FR2
;      422:       DD5011           FSTD [EAX+17]
;      425:       DDD8             FSTPD FR0
;      427:       DD4001           FLDD [EAX+1]
;      42A:       DDD9             FSTPD FR1
;      42C:       DD4001           FLDD [EAX+1]
;      42F:       D9C9             FXCH FR1
;      431:       DCC9             FMUL-STI FR1
;      433:       9B               WAIT
;      434:       DDD8             FSTPD FR0
;      436:       DD4009           FLDD [EAX+9]
;      439:       DDDA             FSTPD FR2
;      43B:       DD4009           FLDD [EAX+9]
;      43E:       D9CA             FXCH FR2
;      440:       D8CA             FMULD FR2
;      442:       9B               WAIT
;      443:       DCC1             FADD-STI FR1
;      445:       9B               WAIT
;      446:       DDD8             FSTPD FR0
;      448:       DD4011           FLDD [EAX+17]
;      44B:       DDDA             FSTPD FR2
;      44D:       DD4011           FLDD [EAX+17]
;      450:       D9CA             FXCH FR2
;      452:       D8CA             FMULD FR2
;      454:       9B               WAIT
;      455:       D8C1             FADDD FR1
;      457:       9B               WAIT
;      458:       D9FA             FSQRT
;      45A:       9B               WAIT
;      45B:       8B41FF           MOV EAX, [ECX-1]
;      45E:       C1E808           SHR EAX, 8
;      461:       DDD9             FSTPD FR1
;      463:       DD4481FB         FLDD [ECX+EAX*4-5]
;      467:       D9C9             FXCH FR1
;      469:       D8C1             FADDD FR1
;      46B:       9B               WAIT
;      46C:       64               BYTE #X64
;      46D:       800D4800000004   OR BYTE PTR [#x48], 4
;      474:       BE10000000       MOV ESI, 16
;      479:       64               BYTE #X64
;      47A:       033520000000     ADD ESI, [#x20]
;      480:       64               BYTE #X64
;      481:       3B3524000000     CMP ESI, [#x24]
;      487:       7607             JBE L40
;      489:       E800000000       CALL L39
;      48E: L39:  EB0A             JMP L41
;      490: L40:  64               BYTE #X64
;      491:       893520000000     MOV [#x20], ESI
;      497:       83EE10           SUB ESI, 16
;      49A: L41:  C70616030000     MOV DWORD PTR [ESI], 790
;      4A0:       8D7607           LEA ESI, [ESI+7]
;      4A3:       DD5601           FSTD [ESI+1]
;      4A6:       64               BYTE #X64
;      4A7:       80354800000004   XOR BYTE PTR [#x48], 4
;      4AE:       7403             JEQ L42
;      4B0:       0F0B09           BREAK 9                    ; pending interrupt trap
;      4B3: L42:  817DF40B000008   CMP DWORD PTR [EBP-12], 134217739
;      4BA:       750E             JNE L44
;      4BC: L43:  C745F427000008   MOV DWORD PTR [EBP-12], 134217767
;      4C3:       8BC6             MOV EAX, ESI
;      4C5:       8945EC           MOV [EBP-20], EAX
;      4C8:       EB22             JMP L47
;      4CA: L44:  895DE0           MOV [EBP-32], EBX
;      4CD:       8975DC           MOV [EBP-36], ESI
;      4D0:       8BD6             MOV EDX, ESI
;      4D2:       8B7DEC           MOV EDI, [EBP-20]
;      4D5:       E800000000       CALL L45
;      4DA: L45:  7302             JNB L46
;      4DC:       8BE3             MOV ESP, EBX
;      4DE: L46:  8B75DC           MOV ESI, [EBP-36]
;      4E1:       8B5DE0           MOV EBX, [EBP-32]
;      4E4:       81FA0B000008     CMP EDX, 134217739
;      4EA:       75D0             JNE L43
;      4EC: L47:  81FB0B000008     CMP EBX, 134217739
;      4F2:       0F857EFEFFFF     JNE L34
;      4F8:       8B55EC           MOV EDX, [EBP-20]
;      4FB:       8B7DE4           MOV EDI, [EBP-28]
;      4FE:       E800000000       CALL L48
;      503: L48:  7302             JNB L49
;      505:       8BE3             MOV ESP, EBX
;      507: L49:  81FA0B000008     CMP EDX, 134217739
;      50D:       742F             JEQ L51
;      50F:       8B45E4           MOV EAX, [EBP-28]
;      512: L50:  8B1511000000     MOV EDX, [#x11]
;      518:       8B7DF0           MOV EDI, [EBP-16]
;      51B:       8B3515000000     MOV ESI, [#x15]
;      521:       8945F0           MOV [EBP-16], EAX
;      524:       8B0525000000     MOV EAX, [#x25]
;      52A:       8945EC           MOV [EBP-20], EAX
;      52D:       8B0529000000     MOV EAX, [#x29]
;      533:       B918000000       MOV ECX, 24
;      538:       FF75F8           PUSH DWORD PTR [EBP-8]
;      53B:       FF6005           JMP DWORD PTR [EAX+5]
;      53E: L51:  8B45EC           MOV EAX, [EBP-20]
;      541:       EBCF             JMP L50
;      543: L52:  8975C4           MOV [EBP-60], ESI
;      546:       BF04000000       MOV EDI, 4
;      54B:       8BD1             MOV EDX, ECX
;      54D:       E800000000       CALL L53
;      552: L53:  7302             JNB L54
;      554:       8BE3             MOV ESP, EBX
;      556: L54:  8955E4           MOV [EBP-28], EDX
;      559:       8B75C4           MOV ESI, [EBP-60]
;      55C:       8B45F4           MOV EAX, [EBP-12]
;      55F:       DDD8             FSTPD FR0
;      561:       DD4001           FLDD [EAX+1]
;      564:       8B45EC           MOV EAX, [EBP-20]
;      567:       DDD9             FSTPD FR1
;      569:       DD4001           FLDD [EAX+1]
;      56C:       D9C9             FXCH FR1
;      56E:       8B45F0           MOV EAX, [EBP-16]
;      571:       DDDA             FSTPD FR2
;      573:       DD4001           FLDD [EAX+1]
;      576:       D9CA             FXCH FR2
;      578:       B9D6000000       MOV ECX, 214
;      57D:       BA0C000000       MOV EDX, 12
;      582:       BB18000000       MOV EBX, 24
;      587:       8D430F           LEA EAX, [EBX+15]
;      58A:       83E0F8           AND EAX, -8
;      58D:       64               BYTE #X64
;      58E:       800D4800000004   OR BYTE PTR [#x48], 4
;      595:       64               BYTE #X64
;      596:       030520000000     ADD EAX, [#x20]
;      59C:       64               BYTE #X64
;      59D:       3B0524000000     CMP EAX, [#x24]
;      5A3:       7607             JBE L56
;      5A5:       E800000000       CALL L55
;      5AA: L55:  EB15             JMP L57
;      5AC: L56:  64               BYTE #X64
;      5AD:       330520000000     XOR EAX, [#x20]
;      5B3:       64               BYTE #X64
;      5B4:       310520000000     XOR [#x20], EAX
;      5BA:       64               BYTE #X64
;      5BB:       330520000000     XOR EAX, [#x20]
;      5C1: L57:  8D4007           LEA EAX, [EAX+7]
;      5C4:       8948F9           MOV [EAX-7], ECX
;      5C7:       8950FD           MOV [EAX-3], EDX
;      5CA:       64               BYTE #X64
;      5CB:       80354800000004   XOR BYTE PTR [#x48], 4
;      5D2:       7403             JEQ L58
;      5D4:       0F0B09           BREAK 9                    ; pending interrupt trap
;      5D7: L58:  DD5001           FSTD [EAX+1]
;      5DA:       D9C9             FXCH FR1
;      5DC:       DD5009           FSTD [EAX+9]
;      5DF:       D9C9             FXCH FR1
;      5E1:       D9CA             FXCH FR2
;      5E3:       DD5011           FSTD [EAX+17]
;      5E6:       D9CA             FXCH FR2
;      5E8:       DDD8             FSTPD FR0
;      5EA:       DD4601           FLDD [ESI+1]
;      5ED:       DDD9             FSTPD FR1
;      5EF:       DD4001           FLDD [EAX+1]
;      5F2:       D9C9             FXCH FR1
;      5F4:       DCC1             FADD-STI FR1
;      5F6:       9B               WAIT
;      5F7:       DDD8             FSTPD FR0
;      5F9:       DD4609           FLDD [ESI+9]
;      5FC:       DDDA             FSTPD FR2
;      5FE:       DD4009           FLDD [EAX+9]
;      601:       D9CA             FXCH FR2
;      603:       DCC2             FADD-STI FR2
;      605:       9B               WAIT
;      606:       DDD8             FSTPD FR0
;      608:       DD4611           FLDD [ESI+17]
;      60B:       DDDB             FSTPD FR3
;      60D:       DD4011           FLDD [EAX+17]
;      610:       D9CB             FXCH FR3
;      612:       D8C3             FADDD FR3
;      614:       9B               WAIT
;      615:       B9D6000000       MOV ECX, 214
;      61A:       BA0C000000       MOV EDX, 12
;      61F:       BB18000000       MOV EBX, 24
;      624:       8D430F           LEA EAX, [EBX+15]
;      627:       83E0F8           AND EAX, -8
;      62A:       64               BYTE #X64
;      62B:       800D4800000004   OR BYTE PTR [#x48], 4
;      632:       64               BYTE #X64
;      633:       030520000000     ADD EAX, [#x20]
;      639:       64               BYTE #X64
;      63A:       3B0524000000     CMP EAX, [#x24]
;      640:       7607             JBE L60
;      642:       E800000000       CALL L59
;      647: L59:  EB15             JMP L61
;      649: L60:  64               BYTE #X64
;      64A:       330520000000     XOR EAX, [#x20]
;      650:       64               BYTE #X64
;      651:       310520000000     XOR [#x20], EAX
;      657:       64               BYTE #X64
;      658:       330520000000     XOR EAX, [#x20]
;      65E: L61:  8D4007           LEA EAX, [EAX+7]
;      661:       8948F9           MOV [EAX-7], ECX
;      664:       8950FD           MOV [EAX-3], EDX
;      667:       64               BYTE #X64
;      668:       80354800000004   XOR BYTE PTR [#x48], 4
;      66F:       7403             JEQ L62
;      671:       0F0B09           BREAK 9                    ; pending interrupt trap
;      674: L62:  D9C9             FXCH FR1
;      676:       DD5001           FSTD [EAX+1]
;      679:       D9C9             FXCH FR1
;      67B:       D9CA             FXCH FR2
;      67D:       DD5009           FSTD [EAX+9]
;      680:       D9CA             FXCH FR2
;      682:       DD5011           FSTD [EAX+17]
;      685:       8945F4           MOV [EBP-12], EAX
;      688:       8B55E8           MOV EDX, [EBP-24]
;      68B:       8B3D2D000000     MOV EDI, [#x2D]
;      691:       8BDC             MOV EBX, ESP
;      693:       55               PUSH EBP
;      694:       83EC08           SUB ESP, 8
;      697:       8BEB             MOV EBP, EBX
;      699:       B908000000       MOV ECX, 8
;      69E:       FF15EC060008     CALL DWORD PTR [#x80006EC]
;      6A4:       7302             JNB L63
;      6A6:       8BE3             MOV ESP, EBX
;      6A8: L63:  8B45F4           MOV EAX, [EBP-12]
;      6AB:       8B4DE4           MOV ECX, [EBP-28]
;      6AE:       894DD0           MOV [EBP-48], ECX
;      6B1:       8945CC           MOV [EBP-52], EAX
;      6B4:       8955E4           MOV [EBP-28], EDX
;      6B7:       E96FF9FFFF       JMP L0
;      6BC:       90               NOP
;      6BD:       90               NOP
;      6BE:       90               NOP
;      6BF:       90               NOP

;;;; component: (FLET #:CLEANUP-FUN-1935)


IR1 block 311 start c1
start stack:
  1>     bind SB-C::CLAMBDA (FLET #:CLEANUP-FUN-1935) :KIND :CLEANUP
end stack:
successors c2

IR1 block 312 start c2
start stack:
  2>     entry NIL
  3>  4: S
  5>     if v4 c6 c7
end stack:
successors c7 c6

IR1 block 315 start c6
start stack:
  6>  8: CLOSE {GLOBAL-FUNCTION}
  9> 10: S
 11> 12: ':ABORT
 13> 14: #:G1934
 15>     known combination v8 v10 v12 v14
end stack:
successors c7

IR1 block 313 start c7
start stack:
  7> 16: 'NIL
end stack:
successors c17

IR1 block 314 start c17
start stack:
 17>     return v16 SB-C::CLAMBDA (FLET #:CLEANUP-FUN-1935)
end stack:
successors c18

IR1 block 259 start c19
start stack:
 19>     bind SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c20

IR1 block 260 start c20
start stack:
 20>     entry NIL
 21> 22: SB-C::CLAMBDA SRAY-SPHERE
 23> 24: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
 25> 26: SCENE
 27> 28: cast v26 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:STRUCTURE-CLASSOID SPHERE>]
 29> 30: '1
 31> 32: known combination v24 v28 v30
 33> 34: SB-KERNEL:%RAW-INSTANCE-REF/DOUBLE {GLOBAL-FUNCTION}
 35> 36: SCENE
 37> 38: '0
 39> 40: known combination v34 v36 v38
 41> 42: cast v32 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                         DOUBLE-FLOAT
                                                                         (3))>]
 43>     local combination v22 <none> <none> v42 v40
 44>     bind SB-C::CLAMBDA SRAY-SPHERE :KIND :LET
end stack:
successors c45

IR1 block 261 start c45
start stack:
 45>     entry NIL
end stack:
successors c46

IR1 block 262 start c46
start stack:
 46>     entry NIL
 47> 48: - {GLOBAL-FUNCTION}
end stack:
successors c49

IR1 block 263 start c49
start stack:
 49>     entry NIL
 50> 51: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 52> 53: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2561))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5D41}> {13005DC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5D61}> {13005E01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2561
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4ED9}> {132ABD79}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B5D81}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2562
                                  #:N-COUNT-2563) {132ABE31}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2561) {131B5CB9}> {13246761}>)
 54>     known combination v51 v53
 55> 56: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 57> 58: CENTER
 59> 60: '0
 61> 62: known combination v56 v58 v60
end stack:
successors c63

IR1 block 264 start c63
start stack:
 63>     entry NIL
 64> 65: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 66> 67: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2564))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5B69}> {13005C41}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5B89}> {13005C81}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2564
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4DD9}> {132ABBA9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B5BA9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2565
                                  #:N-COUNT-2566) {132ABC61}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2564) {131B5AE1}> {13246579}>)
 68>     known combination v65 v67
 69> 70: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 71> 72: ORIG
 73> 74: '0
 75> 76: known combination v70 v72 v74
end stack:
successors c77

IR1 block 265 start c77
start stack:
 77> 78: known combination v48 v62 v76
 79> 80: - {GLOBAL-FUNCTION}
end stack:
successors c81

IR1 block 266 start c81
start stack:
 81>     entry NIL
 82> 83: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 84> 85: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2567))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5991}> {13005AC1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B59B1}> {13005B01}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2567
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4CD9}> {132AB9D9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B59D1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2568
                                  #:N-COUNT-2569) {132ABA91}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2567) {131B5909}> {13246391}>)
 86>     known combination v83 v85
 87> 88: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
 89> 90: CENTER
 91> 92: '1
 93> 94: known combination v88 v90 v92
end stack:
successors c95

IR1 block 267 start c95
start stack:
 95>     entry NIL
 96> 97: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
 98> 99: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2570))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B57B9}> {13005941}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B57D9}> {13005981}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2570
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4BD9}> {132AB809}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B57F9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2571
                                  #:N-COUNT-2572) {132AB8C1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2570) {131B5731}> {132461A9}>)
100>     known combination v97 v99
101>102: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
103>104: ORIG
105>106: '1
107>108: known combination v102 v104 v106
end stack:
successors c109

IR1 block 268 start c109
start stack:
109>110: known combination v80 v94 v108
111>112: - {GLOBAL-FUNCTION}
end stack:
successors c113

IR1 block 269 start c113
start stack:
113>     entry NIL
114>115: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
116>117: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2573))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B55E1}> {130057C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5601}> {13005801}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2573
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4AD9}> {132AB639}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B5621}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2574
                                  #:N-COUNT-2575) {132AB6F1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2573) {131B5559}> {13245FC1}>)
118>     known combination v115 v117
119>120: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
121>122: CENTER
123>124: '2
125>126: known combination v120 v122 v124
end stack:
successors c127

IR1 block 270 start c127
start stack:
127>     entry NIL
128>129: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
130>131: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2576))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5409}> {13005641}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5429}> {13005681}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2576
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E49D9}> {132AB469}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B5449}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2577
                                  #:N-COUNT-2578) {132AB521}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2576) {131B5381}> {13245DD9}>)
132>     known combination v129 v131
133>134: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
135>136: ORIG
137>138: '2
139>140: known combination v134 v136 v138
end stack:
successors c141

IR1 block 271 start c141
start stack:
141>142: known combination v112 v126 v140
end stack:
successors c143

IR1 block 272 start c143
start stack:
143>     entry NIL
144>145: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
146>147: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
148>149: '214
150>151: '3
152>153: '6
154>155: known combination v147 v149 v151 v153
156>     local combination v145 v155
157>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
158>159: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
160>161: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2579))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4F09}> {13005101}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4F29}> {13005141}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2579
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4791}> {132AB029}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B52F9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2580
                                  #:N-COUNT-2581) {132AB0E1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2579) {131B4E81}> {13245881}>)
162>     known combination v159 v161
163>164: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
165>166: #:G1
167>168: '0
169>     known combination v164 v166 v168 v78
170>171: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
172>173: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2582))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5059}> {130051C1}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B5079}> {13005201}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2582 ..>)>)
                                                     IR1 block 273 start c174
                                                     start stack:
                                                     174>175: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                             ((SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)
                                                                              (SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)))
                                                     end stack:
                                                     successors c176

IR1 block 274 start c176
start stack:
176>     entry NIL
177>178: + {GLOBAL-FUNCTION}
179>180: + {GLOBAL-FUNCTION}
181>182: * {GLOBAL-FUNCTION}
end stack:
successors c183

IR1 block 275 start c183
start stack:
183>     entry NIL
184>185: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
186>187: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2588))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4C21}> {13004E79}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4C41}> {13004EB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2588
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4689}> {132AADE1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B4C61}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2589
                                  #:N-COUNT-2590) {132AAE99}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2588) {131B4B99}> {132454F9}>)
188>     known combination v185 v187
189>190: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
191>192: #:G1
193>194: '0
195>196: known combination v190 v192 v194
end stack:
successors c197

IR1 block 276 start c197
start stack:
197>     entry NIL
198>199: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
200>201: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2591))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4A49}> {13004CF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4A69}> {13004D39}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2591
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4591}> {132AAC19}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B4A89}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2592
                                  #:N-COUNT-2593) {132AACD1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2591) {131B49C1}> {13245311}>)
202>     known combination v199 v201
203>204: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
205>206: #:G1
207>208: '0
209>210: known combination v204 v206 v208
end stack:
successors c211

IR1 block 277 start c211
start stack:
211>212: known combination v182 v196 v210
213>214: * {GLOBAL-FUNCTION}
end stack:
successors c215

IR1 block 278 start c215
start stack:
215>     entry NIL
216>217: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
218>219: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2594))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4871}> {13004B79}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4891}> {13004BB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2594
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E4499}> {132AAA51}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B48B1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2595
                                  #:N-COUNT-2596) {132AAB09}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2594) {131B47E9}> {13245129}>)
220>     known combination v217 v219
221>222: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
223>224: #:G1
225>226: '1
227>228: known combination v222 v224 v226
end stack:
successors c229

IR1 block 279 start c229
start stack:
229>     entry NIL
230>231: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
232>233: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2597))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4699}> {130049F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B46B9}> {13004A39}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2597
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E43A1}> {132AA889}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B46D9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2598
                                  #:N-COUNT-2599) {132AA941}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2597) {131B4611}> {13244F41}>)
234>     known combination v231 v233
235>236: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
237>238: #:G1
239>240: '1
241>242: known combination v236 v238 v240
end stack:
successors c243

IR1 block 280 start c243
start stack:
243>244: known combination v214 v228 v242
245>246: known combination v180 v212 v244
247>248: * {GLOBAL-FUNCTION}
end stack:
successors c249

IR1 block 281 start c249
start stack:
249>     entry NIL
250>251: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
252>253: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2600))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B44C1}> {13004879}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B44E1}> {130048B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2600
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E42A9}> {132AA6C1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B4501}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2601
                                  #:N-COUNT-2602) {132AA779}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2600) {131B4439}> {13244D59}>)
254>     known combination v251 v253
255>256: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
257>258: #:G1
259>260: '2
261>262: known combination v256 v258 v260
end stack:
successors c263

IR1 block 282 start c263
start stack:
263>     entry NIL
264>265: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
266>267: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2603))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B42E9}> {130046F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4309}> {13004739}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2603
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E41B1}> {132AA4F9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B4329}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2604
                                  #:N-COUNT-2605) {132AA5B1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2603) {131B4261}> {13244B71}>)
268>     known combination v265 v267
269>270: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
271>272: #:G1
273>274: '2
275>276: known combination v270 v272 v274
end stack:
successors c277

IR1 block 283 start c277
start stack:
277>278: known combination v248 v262 v276
279>280: known combination v178 v246 v278
end stack:
successors c281

IR1 block 284 start c281
start stack:
281>     local combination v175 v280
282>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
283>284: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
285>286: + {GLOBAL-FUNCTION}
287>288: - {GLOBAL-FUNCTION}
289>290: * {GLOBAL-FUNCTION}
291>292: B
293>294: B
295>296: known combination v290 v292 v294
end stack:
successors c297

IR1 block 285 start c297
start stack:
297>     entry NIL
298>299: + {GLOBAL-FUNCTION}
300>301: + {GLOBAL-FUNCTION}
302>303: * {GLOBAL-FUNCTION}
end stack:
successors c304

IR1 block 286 start c304
start stack:
304>     entry NIL
305>306: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
307>308: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2606))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4111}> {13004579}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B4131}> {130045B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2606
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E40B9}> {132AA331}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B4151}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2607
                                  #:N-COUNT-2608) {132AA3E9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2606) {131B4089}> {13244989}>)
309>     known combination v306 v308
310>311: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
312>313: #:G1
314>315: '0
316>317: known combination v311 v313 v315
end stack:
successors c318

IR1 block 287 start c318
start stack:
318>     entry NIL
319>320: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
321>322: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2609))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B3F21}> {130043F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B3F41}> {13004439}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2609
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E3FC1}> {132AA169}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B3F61}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2610
                                  #:N-COUNT-2611) {132AA221}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2609) {131B3E99}> {132447A1}>)
323>     known combination v320 v322
324>325: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
326>327: #:G1
328>329: '0
330>331: known combination v325 v327 v329
end stack:
successors c332

IR1 block 288 start c332
start stack:
332>333: known combination v303 v317 v331
334>335: * {GLOBAL-FUNCTION}
end stack:
successors c336

IR1 block 289 start c336
start stack:
336>     entry NIL
337>338: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
339>340: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2612))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B3D49}> {13004279}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B3D69}> {130042B9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2612
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E3EC9}> {132A9FA1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B3D89}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2613
                                  #:N-COUNT-2614) {132AA059}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2612) {131B3CC1}> {132445B9}>)
341>     known combination v338 v340
342>343: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
344>345: #:G1
346>347: '1
348>349: known combination v343 v345 v347
end stack:
successors c350

IR1 block 290 start c350
start stack:
350>     entry NIL
351>352: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
353>354: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2615))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B3B71}> {130040F9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B3B91}> {13004139}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2615
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E3DD1}> {132A9DD9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B3BB1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2616
                                  #:N-COUNT-2617) {132A9E91}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2615) {131B3AE9}> {132443D1}>)
355>     known combination v352 v354
356>357: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
358>359: #:G1
360>361: '1
362>363: known combination v357 v359 v361
end stack:
successors c364

IR1 block 291 start c364
start stack:
364>365: known combination v335 v349 v363
366>367: known combination v301 v333 v365
368>369: * {GLOBAL-FUNCTION}
end stack:
successors c370

IR1 block 292 start c370
start stack:
370>     entry NIL
371>372: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
373>374: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2618))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B3999}> {13003F79}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B39B9}> {13003FB9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2618
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E3CD9}> {132A9C11}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B39D9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2619
                                  #:N-COUNT-2620) {132A9CC9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2618) {131B3911}> {132441E9}>)
375>     known combination v372 v374
376>377: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
378>379: #:G1
380>381: '2
382>383: known combination v377 v379 v381
end stack:
successors c384

IR1 block 293 start c384
start stack:
384>     entry NIL
385>386: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
387>388: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2621))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B37C1}> {13003DF9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131B37E1}> {13003E39}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2621
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132E3BE1}> {132A9A49}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131B3801}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2622
                                  #:N-COUNT-2623) {132A9B01}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2621) {131B3739}> {13244001}>)
389>     known combination v386 v388
390>391: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
392>393: #:G1
394>395: '2
396>397: known combination v391 v393 v395
end stack:
successors c398

IR1 block 294 start c398
start stack:
398>399: known combination v369 v383 v397
400>401: known combination v299 v367 v399
end stack:
successors c402

IR1 block 295 start c402
start stack:
402>403: known combination v288 v296 v401
404>405: * {GLOBAL-FUNCTION}
406>407: RADIUS
408>409: RADIUS
410>411: known combination v405 v407 v409
412>413: known combination v286 v403 v411
414>     local combination v284 v413
415>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
416>417: < {GLOBAL-FUNCTION}
418>419: DISC
420>421: '0.0d0
422>423: known combination v417 v419 v421
424>     if v423 c425 c426
end stack:
successors c425 c426

IR1 block 298 start c426
start stack:
426>427: < {GLOBAL-FUNCTION}
428>429: + {GLOBAL-FUNCTION}
430>431: B
432>433: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
434>435: DISC
436>437: known combination v433 v435
438>439: known combination v429 v431 v437
440>441: '0.0d0
442>443: known combination v427 v439 v441
444>     if v443 c425 c445
end stack:
successors c445 c425

IR1 block 299 start c445
start stack:
445>446: SB-C::CLAMBDA (LET ((#:G2783
                              (SB-KERNEL:%INSTANCE-LAYOUT "#<...>" . "#<...>")))
                         )
447>448: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
449>450: SCENE
451>452: '0
453>454: known combination v448 v450 v452
455>     local combination v446 v454
456>     bind SB-C::CLAMBDA (LET ((#:G2783
                                   (SB-KERNEL:%INSTANCE-LAYOUT "#<...>"
                                                               . "#<...>")))
                              ) :KIND :LET
457>458: EQ {GLOBAL-FUNCTION}
459>460: #:G2783
461>462: '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>
463>464: known combination v458 v460 v462
465>     if v464 c466 c467
end stack:
successors c467 c466

IR1 block 300 start c467
start stack:
467>468: > {GLOBAL-FUNCTION}
469>470: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
471>472: #:G2783
473>474: '12
475>476: known combination v470 v472 v474
477>478: '3
479>480: known combination v468 v476 v478
481>     if v480 c482 c483
end stack:
successors c483 c482

IR1 block 302 start c482
start stack:
482>484: EQ {GLOBAL-FUNCTION}
485>486: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
487>488: #:G2783
489>490: '11
491>492: known combination v486 v488 v490
493>494: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
495>496: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2785))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE SIMPLE-VECTOR>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131965D9}> {12FE9CA9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131965F9}> {12FE9CE9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2785
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132DDE41}> {1329A5C1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13196619}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2786
                                  #:N-COUNT-2787) {1329A679}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2785) {13196551}> {1322AC41}>)
497>     known combination v494 v496
498>499: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
500>501: '3
502>503: known combination v499 v492 v501
504>505: '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>
506>507: known combination v484 v503 v505
508>     if v507 c466 c483
end stack:
successors c466 c483

IR1 block 303 start c466
start stack:
466>     entry NIL
509>510: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
511>512: '(#<SB-C::CLAMBDA
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA (#:G1966))
             :KIND :ZOMBIE
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :VARS (#:G1966) {1307A459}>)
513>     known combination v510 v512
514>515: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
516>517: SCENE
518>519: '2
520>521: known combination v515 v517 v519
end stack:
successors c522

IR1 block 304 start c522
start stack:
522>     entry NIL
523>524: SB-C::CLAMBDA (LET ((#:INDEX2625 #:G2624))
                         )
525>     local combination v524 v521
526>     bind SB-C::CLAMBDA (LET ((#:INDEX2625 #:G2624))
                              ) :KIND :LET
end stack:
successors c527

IR1 block 305 start c527
start stack:
527>     entry NIL
end stack:
successors c528

IR1 block 309 start c528
start stack:
528>529: #:INDEX2625
530>     if v529 c531 c532
end stack:
successors c532 c531

IR1 block 306 start c531
start stack:
531>     entry NIL
533>534: CAR {GLOBAL-FUNCTION}
535>536: #:INDEX2625
537>538: known combination v534 v536
539>540: SB-C::CLAMBDA (LET ((SB-IMPL::PRED-VALUE
                              (FUNCALL "#<...>" . "#<...>")))
                         )
541>542: SB-C::CLAMBDA (LABELS AUX)
543>544: local combination v542 v538
545>     local combination v540 v544
546>     bind SB-C::CLAMBDA (LET ((SB-IMPL::PRED-VALUE
                                   (FUNCALL "#<...>" . "#<...>")))
                              ) :KIND :LET
547>548: SB-IMPL::PRED-VALUE
549>     if v548 c550 c551
end stack:
successors c550 c551

IR1 block 308 start c551
start stack:
551>552: CDR {GLOBAL-FUNCTION}
553>554: #:INDEX2625
555>556: known combination v552 v554
557>558: cast v556 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
559>     set #:INDEX2625 v558
end stack:
successors c528

IR1 block 307 start c550
start stack:
550>560: SB-IMPL::PRED-VALUE
end stack:
successors c561

IR1 block 310 start c532
start stack:
532>560: 'NIL
end stack:
successors c561

IR1 block 301 start c483
start stack:
483>560: 'T
end stack:
successors c561

IR1 block 296 start c425
start stack:
425>560: 'NIL
end stack:
successors c561

IR1 block 297 start c561
start stack:
561>     return v560 SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c18

IR1 block 147 start c562
start stack:
562>     bind SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c563

IR1 block 148 start c563
start stack:
563>     entry NIL
564>565: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
566>567: SCENE
568>569: cast v567 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:STRUCTURE-CLASSOID SPHERE>]
570>571: '1
572>573: known combination v565 v569 v571
574>575: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
576>577: SB-C::CLAMBDA RAY-SPHERE
578>579: ORIG
580>581: SB-KERNEL:%RAW-INSTANCE-REF/DOUBLE {GLOBAL-FUNCTION}
582>583: SCENE
584>585: '0
586>587: known combination v581 v583 v585
588>589: cast v579 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                          DOUBLE-FLOAT
                                                                          (3))>]
590>591: cast v573 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                          DOUBLE-FLOAT
                                                                          (3))>]
592>     local combination v577 v589 <none> v591 v587
593>     bind SB-C::CLAMBDA RAY-SPHERE :KIND :LET
end stack:
successors c594

IR1 block 149 start c594
start stack:
594>     entry NIL
end stack:
successors c595

IR1 block 150 start c595
start stack:
595>     entry NIL
596>597: - {GLOBAL-FUNCTION}
end stack:
successors c598

IR1 block 151 start c598
start stack:
598>     entry NIL
599>600: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
601>602: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2363))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131726F1}> {12FCDB89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13172711}> {12FCDBC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2363
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D7189}> {1328A849}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13172731}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2364
                                  #:N-COUNT-2365) {1328A919}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2363) {13172669}> {13211889}>)
603>     known combination v600 v602
604>605: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
606>607: CENTER
608>609: '0
610>611: known combination v605 v607 v609
end stack:
successors c612

IR1 block 152 start c612
start stack:
612>     entry NIL
613>614: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
615>616: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2366))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13172519}> {12FCDA09}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13172539}> {12FCDA49}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2366
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D7059}> {1328A661}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13172559}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2367
                                  #:N-COUNT-2368) {1328A731}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2366) {13172491}> {132116A1}>)
617>     known combination v614 v616
618>619: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
620>621: ORIG
622>623: '0
624>625: known combination v619 v621 v623
end stack:
successors c626

IR1 block 153 start c626
start stack:
626>627: known combination v597 v611 v625
628>629: - {GLOBAL-FUNCTION}
end stack:
successors c630

IR1 block 154 start c630
start stack:
630>     entry NIL
631>632: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
633>634: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2369))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13172341}> {12FCD889}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13172361}> {12FCD8C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2369
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6F29}> {1328A479}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13172381}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2370
                                  #:N-COUNT-2371) {1328A549}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2369) {131722B9}> {132114B9}>)
635>     known combination v632 v634
636>637: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
638>639: CENTER
640>641: '1
642>643: known combination v637 v639 v641
end stack:
successors c644

IR1 block 155 start c644
start stack:
644>     entry NIL
645>646: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
647>648: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2372))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13172169}> {12FCD709}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13172189}> {12FCD749}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2372
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6DF9}> {1328A291}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131721A9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2373
                                  #:N-COUNT-2374) {1328A361}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2372) {131720E1}> {132112D1}>)
649>     known combination v646 v648
650>651: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
652>653: ORIG
654>655: '1
656>657: known combination v651 v653 v655
end stack:
successors c658

IR1 block 156 start c658
start stack:
658>659: known combination v629 v643 v657
660>661: - {GLOBAL-FUNCTION}
end stack:
successors c662

IR1 block 157 start c662
start stack:
662>     entry NIL
663>664: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
665>666: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2375))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171F91}> {12FCD589}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171FB1}> {12FCD5C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2375
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6CC9}> {1328A0A9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13171FD1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2376
                                  #:N-COUNT-2377) {1328A179}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2375) {13171F09}> {132110E9}>)
667>     known combination v664 v666
668>669: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
670>671: CENTER
672>673: '2
674>675: known combination v669 v671 v673
end stack:
successors c676

IR1 block 158 start c676
start stack:
676>     entry NIL
677>678: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
679>680: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2378))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171DB9}> {12FCD409}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171DD9}> {12FCD449}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2378
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6B99}> {13289EC1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13171DF9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2379
                                  #:N-COUNT-2380) {13289F91}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2378) {13171D31}> {13210F01}>)
681>     known combination v678 v680
682>683: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
684>685: ORIG
686>687: '2
688>689: known combination v683 v685 v687
end stack:
successors c690

IR1 block 159 start c690
start stack:
690>691: known combination v661 v675 v689
end stack:
successors c692

IR1 block 160 start c692
start stack:
692>     entry NIL
693>694: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                         )
695>696: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
697>698: '214
699>700: '3
701>702: '6
703>704: known combination v696 v698 v700 v702
705>     local combination v694 v704
706>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                              ) :KIND :LET
707>708: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
709>710: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2381))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171831}> {12FCCEC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171851}> {12FCCF09}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2381
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6809}> {13289909}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13171CA9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2382
                                  #:N-COUNT-2383) {132899D9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2381) {131717A9}> {132108D1}>)
711>     known combination v708 v710
712>713: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
714>715: #:G1
716>717: '0
718>     known combination v713 v715 v717 v627
719>720: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
721>722: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2384))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171981}> {12FCCF89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131719A1}> {12FCCFC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2384 ..>)>)
                                                     IR1 block 161 start c723
                                                     start stack:
                                                     723>724: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                             ((SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)
                                                                              (SB-C::OF-TYPE
                                                                               SB-C::LAMBDA-VAR)))
                                                     end stack:
                                                     successors c725

IR1 block 162 start c725
start stack:
725>     entry NIL
726>727: + {GLOBAL-FUNCTION}
728>729: + {GLOBAL-FUNCTION}
730>731: * {GLOBAL-FUNCTION}
end stack:
successors c732

IR1 block 163 start c732
start stack:
732>     entry NIL
733>734: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
735>736: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2390))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171549}> {12FCCC49}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171569}> {12FCCC89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2390
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D66C9}> {132896A1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13171589}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2391
                                  #:N-COUNT-2392) {13289771}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2390) {131714C1}> {13210549}>)
737>     known combination v734 v736
738>739: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
740>741: #:G1
742>743: '0
744>745: known combination v739 v741 v743
end stack:
successors c746

IR1 block 164 start c746
start stack:
746>     entry NIL
747>748: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
749>750: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2393))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171371}> {12FCCAC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171391}> {12FCCB09}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2393
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6599}> {132894B9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131713B1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2394
                                  #:N-COUNT-2395) {13289589}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2393) {131712E9}> {13210361}>)
751>     known combination v748 v750
752>753: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
754>755: #:G1
756>757: '0
758>759: known combination v753 v755 v757
end stack:
successors c760

IR1 block 165 start c760
start stack:
760>761: known combination v731 v745 v759
762>763: * {GLOBAL-FUNCTION}
end stack:
successors c764

IR1 block 166 start c764
start stack:
764>     entry NIL
765>766: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
767>768: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2396))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13171199}> {12FCC949}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131711B9}> {12FCC989}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2396
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6469}> {132892D1}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131711D9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2397
                                  #:N-COUNT-2398) {132893A1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2396) {13171111}> {13210179}>)
769>     known combination v766 v768
770>771: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
772>773: #:G1
774>775: '1
776>777: known combination v771 v773 v775
end stack:
successors c778

IR1 block 167 start c778
start stack:
778>     entry NIL
779>780: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
781>782: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2399))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170FA1}> {12FCC7C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170FC1}> {12FCC809}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2399
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6339}> {132890E9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13171001}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2400
                                  #:N-COUNT-2401) {132891B9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2399) {13170F19}> {1320FF81}>)
783>     known combination v780 v782
784>785: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
786>787: #:G1
788>789: '1
790>791: known combination v785 v787 v789
end stack:
successors c792

IR1 block 168 start c792
start stack:
792>793: known combination v763 v777 v791
794>795: known combination v729 v761 v793
796>797: * {GLOBAL-FUNCTION}
end stack:
successors c798

IR1 block 169 start c798
start stack:
798>     entry NIL
799>800: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
801>802: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2402))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170DC9}> {12FCC649}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170DE9}> {12FCC689}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2402
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D6209}> {13288F01}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13170E09}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2403
                                  #:N-COUNT-2404) {13288FD1}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2402) {13170D41}> {1320FD99}>)
803>     known combination v800 v802
804>805: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
806>807: #:G1
808>809: '2
810>811: known combination v805 v807 v809
end stack:
successors c812

IR1 block 170 start c812
start stack:
812>     entry NIL
813>814: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
815>816: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2405))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170BF1}> {12FCC4C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170C11}> {12FCC509}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2405
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D60D9}> {13288D19}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13170C31}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2406
                                  #:N-COUNT-2407) {13288DE9}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2405) {13170B69}> {1320FBB1}>)
817>     known combination v814 v816
818>819: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
820>821: #:G1
822>823: '2
824>825: known combination v819 v821 v823
end stack:
successors c826

IR1 block 171 start c826
start stack:
826>827: known combination v797 v811 v825
828>829: known combination v727 v795 v827
end stack:
successors c830

IR1 block 172 start c830
start stack:
830>     local combination v724 v829
831>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
832>833: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
834>835: + {GLOBAL-FUNCTION}
836>837: - {GLOBAL-FUNCTION}
838>839: * {GLOBAL-FUNCTION}
840>841: B
842>843: B
844>845: known combination v839 v841 v843
end stack:
successors c846

IR1 block 173 start c846
start stack:
846>     entry NIL
847>848: + {GLOBAL-FUNCTION}
849>850: + {GLOBAL-FUNCTION}
851>852: * {GLOBAL-FUNCTION}
end stack:
successors c853

IR1 block 174 start c853
start stack:
853>     entry NIL
854>855: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
856>857: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2408))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170A19}> {12FCC349}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170A39}> {12FCC389}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2408
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D5FA9}> {13288B31}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13170A59}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2409
                                  #:N-COUNT-2410) {13288C01}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2408) {13170991}> {1320F9C9}>)
858>     known combination v855 v857
859>860: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
861>862: #:G1
863>864: '0
865>866: known combination v860 v862 v864
end stack:
successors c867

IR1 block 175 start c867
start stack:
867>     entry NIL
868>869: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
870>871: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2411))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170841}> {12FCC1C9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170861}> {12FCC209}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2411
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D5E79}> {13288949}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13170881}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2412
                                  #:N-COUNT-2413) {13288A19}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2411) {131707B9}> {1320F7E1}>)
872>     known combination v869 v871
873>874: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
875>876: #:G1
877>878: '0
879>880: known combination v874 v876 v878
end stack:
successors c881

IR1 block 176 start c881
start stack:
881>882: known combination v852 v866 v880
883>884: * {GLOBAL-FUNCTION}
end stack:
successors c885

IR1 block 177 start c885
start stack:
885>     entry NIL
886>887: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
888>889: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2414))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170669}> {12FCC049}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170689}> {12FCC089}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2414
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D5D49}> {13288761}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131706A9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2415
                                  #:N-COUNT-2416) {13288831}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2414) {131705E1}> {1320F5F9}>)
890>     known combination v887 v889
891>892: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
893>894: #:G1
895>896: '1
897>898: known combination v892 v894 v896
end stack:
successors c899

IR1 block 178 start c899
start stack:
899>     entry NIL
900>901: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
902>903: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2417))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170491}> {12FCBEC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131704B1}> {12FCBF09}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2417
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D5C19}> {13288579}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131704D1}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2418
                                  #:N-COUNT-2419) {13288649}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2417) {13170409}> {1320F411}>)
904>     known combination v901 v903
905>906: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
907>908: #:G1
909>910: '1
911>912: known combination v906 v908 v910
end stack:
successors c913

IR1 block 179 start c913
start stack:
913>914: known combination v884 v898 v912
915>916: known combination v850 v882 v914
917>918: * {GLOBAL-FUNCTION}
end stack:
successors c919

IR1 block 180 start c919
start stack:
919>     entry NIL
920>921: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
922>923: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2420))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131702B9}> {12FCBD49}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131702D9}> {12FCBD89}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2420
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D5AE9}> {13288391}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {131702F9}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2421
                                  #:N-COUNT-2422) {13288461}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2420) {13170231}> {1320F229}>)
924>     known combination v921 v923
925>926: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
927>928: #:G1
929>930: '2
931>932: known combination v926 v928 v930
end stack:
successors c933

IR1 block 181 start c933
start stack:
933>     entry NIL
934>935: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
936>937: '(#<SB-C::OPTIONAL-DISPATCH
             :%SOURCE-NAME SB-C::.ANONYMOUS.
             :%DEBUG-NAME (LAMBDA
                              (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G2423))
             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
             :WHERE-FROM :DEFINED
             :ARGLIST (#<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME ARRAY
                         :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                       DOUBLE-FLOAT (*))>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {131700E1}> {12FCBBC9}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME SB-INT:INDEX
                         :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :OPTIONAL {13170101}> {12FCBC09}>
                       #<SB-C::LAMBDA-VAR
                         :%SOURCE-NAME #:G2423
                         :FLAGS (IGNORE)
                         :ARG-INFO #<SB-C::ARG-INFO
                                     :KIND :REST {132D59B9}> {132881A9}>)
             :ALLOWP NIL
             :KEYP NIL
             :MIN-ARGS 0
             :MAX-ARGS 2
             :ENTRY-POINTS ((NIL . #) (NIL . #)
                            #<SB-C::CLAMBDA
                              :%SOURCE-NAME SB-C::.ANONYMOUS.
                              :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                            (LAMBDA
                                                (&OPTIONAL
                                                 ("#<...>" . "#<...>")
                                                 "#<...>" . "#<...>")))
                              :KIND :ZOMBIE
                              :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                              :WHERE-FROM :DEFINED
                              :VARS (ARRAY SB-INT:INDEX) {13170121}>)
             :MORE-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :DELETED
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2424
                                  #:N-COUNT-2425) {13288279}>
             :MAIN-ENTRY #<SB-C::CLAMBDA
                           :%SOURCE-NAME SB-C::.ANONYMOUS.
                           :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                         (LAMBDA
                                             (&OPTIONAL ("#<...>" . "#<...>")
                                              "#<...>" . "#<...>")))
                           :KIND :ZOMBIE
                           :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                           :WHERE-FROM :DEFINED
                           :VARS (ARRAY SB-INT:INDEX
                                  #:G2423) {13170059}> {1320F041}>)
938>     known combination v935 v937
939>940: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
941>942: #:G1
943>944: '2
945>946: known combination v940 v942 v944
end stack:
successors c947

IR1 block 182 start c947
start stack:
947>948: known combination v918 v932 v946
949>950: known combination v848 v916 v948
end stack:
successors c951

IR1 block 183 start c951
start stack:
951>952: known combination v837 v845 v950
953>954: * {GLOBAL-FUNCTION}
955>956: RADIUS
957>958: RADIUS
959>960: known combination v954 v956 v958
961>962: known combination v835 v952 v960
963>     local combination v833 v962
964>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
965>966: < {GLOBAL-FUNCTION}
967>968: DISC
969>970: '0.0d0
971>972: known combination v966 v968 v970
973>     if v972 c974 c975
end stack:
successors c974 c975

IR1 block 254 start c975
start stack:
975>976: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                        ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
977>978: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
979>980: DISC
981>982: known combination v978 v980
983>     local combination v976 v982
984>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
985>986: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                        ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                         (SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
987>988: + {GLOBAL-FUNCTION}
989>990: B
991>992: DISC
993>994: known combination v988 v990 v992
995>     local combination v986 v994
996>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                             ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)
                              (SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
997>998: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS ((SB-C::OF-TYPE SB-C::LAMBDA-VAR)))
999>1000: - {GLOBAL-FUNCTION}
1001>1002: B
1003>1004: DISC
1005>1006: known combination v1000 v1002 v1004
1007>     local combination v998 v1006
1008>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                              ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
1009>1010: < {GLOBAL-FUNCTION}
1011>1012: T2
1013>1014: '0.0d0
1015>1016: known combination v1010 v1012 v1014
1017>     if v1016 c1018 c1019
end stack:
successors c1018 c1019

IR1 block 256 start c1019
start stack:
1019>1020: > {GLOBAL-FUNCTION}
1021>1022: T1
1023>1024: '0.0d0
1025>1026: known combination v1020 v1022 v1024
1027>     if v1026 c1028 c1029
end stack:
successors c1029 c1028

IR1 block 258 start c1028
start stack:
1028>1030: T1
end stack:
successors c1031

IR1 block 257 start c1029
start stack:
1029>1030: T2
end stack:
successors c1031

IR1 block 255 start c1018
start stack:
1018>1030: '1.7976931348623157d308
end stack:
successors c1031

IR1 block 184 start c974
start stack:
974>1030: '1.7976931348623157d308
end stack:
successors c1031

IR1 block 185 start c1031
start stack:
1031>     local combination v575 v1030
1032>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                              ((SB-C::OF-TYPE SB-C::LAMBDA-VAR))) :KIND :LET
1033>1034: < {GLOBAL-FUNCTION}
1035>1036: LAMT
1037>1038: LAM
1039>1040: known combination v1034 v1036 v1038
1041>     if v1040 c1042 c1043
end stack:
successors c1042 c1043

IR1 block 253 start c1043
start stack:
1043>1044: VALUES {GLOBAL-FUNCTION}
1045>1046: LAM
1047>1048: NORMAL
1049>1050: known combination v1044 v1046 v1048
end stack:
successors c1051

IR1 block 186 start c1042
start stack:
1042>1052: SB-C::CLAMBDA (LET ((#:G2784
                                (SB-KERNEL:%INSTANCE-LAYOUT "#<...>"
                                                            . "#<...>")))
                           )
1053>1054: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
1055>1056: SCENE
1057>1058: '0
1059>1060: known combination v1054 v1056 v1058
1061>     local combination v1052 v1060
1062>     bind SB-C::CLAMBDA (LET ((#:G2784
                                    (SB-KERNEL:%INSTANCE-LAYOUT "#<...>"
                                                                . "#<...>")))
                               ) :KIND :LET
1063>1064: EQ {GLOBAL-FUNCTION}
1065>1066: #:G2784
1067>1068: '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>
1069>1070: known combination v1064 v1066 v1068
1071>     if v1070 c1072 c1073
end stack:
successors c1073 c1072

IR1 block 187 start c1073
start stack:
1073>1074: > {GLOBAL-FUNCTION}
1075>1076: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
1077>1078: #:G2784
1079>1080: '12
1081>1082: known combination v1076 v1078 v1080
1083>1084: '3
1085>1086: known combination v1074 v1082 v1084
1087>     if v1086 c1088 c1089
end stack:
successors c1089 c1088

IR1 block 246 start c1088
start stack:
1088>1090: EQ {GLOBAL-FUNCTION}
1091>1092: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
1093>1094: #:G2784
1095>1096: '11
1097>1098: known combination v1092 v1094 v1096
1099>1100: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1101>1102: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2788))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE SIMPLE-VECTOR>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13169BE1}> {12FC6409}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13169C01}> {12FC6449}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2788
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132AFC19}> {1324F871}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13169C21}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2789
                                    #:N-COUNT-2790) {131C1649}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2788) {13169B59}> {130147F1}>)
1103>     known combination v1100 v1102
1104>1105: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1106>1107: '3
1108>1109: known combination v1105 v1098 v1107
1110>1111: '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>
1112>1113: known combination v1090 v1109 v1111
1114>     if v1113 c1072 c1089
end stack:
successors c1072 c1089

IR1 block 247 start c1072
start stack:
1072>     entry NIL
1115>1116: SB-C::CLAMBDA (LET ((#:N-LIST1972
                                (GROUP-CHILDREN "#<...>" . "#<...>")))
                           )
1117>1118: SB-KERNEL:%INSTANCE-REF {GLOBAL-FUNCTION}
1119>1120: SCENE
1121>1122: '2
1123>1124: known combination v1118 v1120 v1122
1125>     local combination v1116 v1124
1126>     bind SB-C::CLAMBDA (LET ((#:N-LIST1972
                                    (GROUP-CHILDREN "#<...>" . "#<...>")))
                               ) :KIND :LET
end stack:
successors c1127

IR1 block 248 start c1127
start stack:
1127>     entry NIL
end stack:
successors c1128

IR1 block 251 start c1128
start stack:
1128>1129: #:N-LIST1972
1130>1131: cast v1129 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE LIST>]
1132>     if v1131 c1133 c1134
end stack:
successors c1134 c1133

IR1 block 249 start c1133
start stack:
1133>1135: CAR {GLOBAL-FUNCTION}
1136>1137: #:N-LIST1972
1138>1139: known combination v1135 v1137
1140>1141: CDR {GLOBAL-FUNCTION}
1142>1143: #:N-LIST1972
1144>1145: known combination v1141 v1143
1146>     set #:N-LIST1972 v1145
end stack:
successors c1147

IR1 block 250 start c1147
start stack:
1147>     entry NIL
1148>1149: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1150>1151: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (#:G1974) (#:G1975) &REST #:G1976))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1974
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {130B8CC9}> {1309C6C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1975
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {130B8CF1}> {1309C701}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1976
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {130B8D11}> {1309C741}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :MV-LET
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (#:G1974 #:G1975) {1307C301}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (#:G1974 #:G1975 #:N-CONTEXT-1977
                                    #:N-COUNT-1978) {1307C279}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (#:G1974 #:G1975
                                    #:G1976) {1307C389}> {13076D79}>)
1152>     known combination v1149 v1151
1153>1154: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                          (LAMBDA
                              (&OPTIONAL ("#<...>" . "#<...>")
                               "#<...>" . "#<...>")))
1155>1156: SB-C::CLAMBDA (LABELS AUX)
1157>1158: LAM
1159>1160: NORMAL
1161>1162: local combination v1156 v1158 v1160 v1139
1163>     local mv-combination v1154 v1162
1164>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                              (LAMBDA
                                  (&OPTIONAL ("#<...>" . "#<...>")
                                   "#<...>" . "#<...>"))) :KIND :MV-LET
1165>1166: #:G1974
1167>     set LAM v1166
1168>1169: #:G1975
1170>     set NORMAL v1169
end stack:
successors c1128

IR1 block 252 start c1134
start stack:
1134>1171: VALUES {GLOBAL-FUNCTION}
1172>1173: LAM
1174>1175: NORMAL
1176>1050: known combination v1171 v1173 v1175
end stack:
successors c1051

IR1 block 188 start c1089
start stack:
1089>1177: VALUES {GLOBAL-FUNCTION}
1178>1179: LAMT
end stack:
successors c1180

IR1 block 189 start c1180
start stack:
1180>     entry NIL
1181>1182: * {GLOBAL-FUNCTION}
1183>1184: LAMT
1185>1186: #:G1
end stack:
successors c1187

IR1 block 190 start c1187
start stack:
1187>     entry NIL
1188>1189: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1190>1191: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2426))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316FF09}> {12FCBA49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316FF29}> {12FCBA89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2426
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D5889}> {13287FC1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316FF49}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2427
                                    #:N-COUNT-2428) {13288091}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2426) {1316FE81}> {1320EE59}>)
1192>     known combination v1189 v1191
1193>1194: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1195>1196: '0
1197>1198: known combination v1194 v1186 v1196
end stack:
successors c1199

IR1 block 191 start c1199
start stack:
1199>1200: known combination v1182 v1184 v1198
1201>1202: * {GLOBAL-FUNCTION}
1203>1204: LAMT
1205>1206: #:G1
end stack:
successors c1207

IR1 block 192 start c1207
start stack:
1207>     entry NIL
1208>1209: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1210>1211: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2429))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316FD31}> {12FCB8C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316FD51}> {12FCB909}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2429
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D5759}> {13287DD9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316FD71}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2430
                                    #:N-COUNT-2431) {13287EA9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2429) {1316FCA9}> {1320EC71}>)
1212>     known combination v1209 v1211
1213>1214: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1215>1216: '1
1217>1218: known combination v1214 v1206 v1216
end stack:
successors c1219

IR1 block 193 start c1219
start stack:
1219>1220: known combination v1202 v1204 v1218
1221>1222: * {GLOBAL-FUNCTION}
1223>1224: LAMT
1225>1226: #:G1
end stack:
successors c1227

IR1 block 194 start c1227
start stack:
1227>     entry NIL
1228>1229: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1230>1231: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2432))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316FB59}> {12FCB749}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316FB79}> {12FCB789}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2432
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D5629}> {13287BF1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316FB99}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2433
                                    #:N-COUNT-2434) {13287CC1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2432) {1316FAD1}> {1320EA89}>)
1232>     known combination v1229 v1231
1233>1234: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1235>1236: '2
1237>1238: known combination v1234 v1226 v1236
end stack:
successors c1239

IR1 block 195 start c1239
start stack:
1239>1240: known combination v1222 v1224 v1238
end stack:
successors c1241

IR1 block 196 start c1241
start stack:
1241>     entry NIL
1242>1243: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1244>1245: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1246>1247: '214
1248>1249: '3
1250>1251: '6
1252>1253: known combination v1245 v1247 v1249 v1251
1254>     local combination v1243 v1253
1255>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1256>1257: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1258>1259: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2435))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316F571}> {12FCB209}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316F591}> {12FCB249}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2435
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D5299}> {13287639}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316FA19}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2436
                                    #:N-COUNT-2437) {13287709}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2435) {1316F4E9}> {1320E459}>)
1260>     known combination v1257 v1259
1261>1262: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1263>1264: #:G1
1265>1266: '0
1267>     known combination v1262 v1264 v1266 v1200
1268>1269: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1270>1271: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2438))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316F6C1}> {12FCB2C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316F6E1}> {12FCB309}> ..)>)
                                                                                    IR1 block 197 start c1272
                                                                                    start stack:
                                                                                    1272>     entry NIL
                                                                                    1273>1274: + {GLOBAL-FUNCTION}
                                                                                    1275>1276: ORIG
                                                                                    end stack:
                                                                                    successors c1277

IR1 block 198 start c1277
start stack:
1277>     entry NIL
1278>1279: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1280>1281: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2444))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316F289}> {12FCAF89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316F2A9}> {12FCAFC9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2444
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D5159}> {132873D1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316F2C9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2445
                                    #:N-COUNT-2446) {132874A1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2444) {1316F201}> {1320E0D1}>)
1282>     known combination v1279 v1281
1283>1284: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1285>1286: '0
1287>1288: known combination v1284 v1276 v1286
end stack:
successors c1289

IR1 block 199 start c1289
start stack:
1289>     entry NIL
1290>1291: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1292>1293: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2447))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316F0B1}> {12FCAE09}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316F0D1}> {12FCAE49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2447
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D5029}> {132871E9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316F0F1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2448
                                    #:N-COUNT-2449) {132872B9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2447) {1316F029}> {1320DEE9}>)
1294>     known combination v1291 v1293
1295>1296: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1297>1298: #:G1
1299>1300: '0
1301>1302: known combination v1296 v1298 v1300
end stack:
successors c1303

IR1 block 200 start c1303
start stack:
1303>1304: known combination v1274 v1288 v1302
1305>1306: + {GLOBAL-FUNCTION}
1307>1308: ORIG
end stack:
successors c1309

IR1 block 201 start c1309
start stack:
1309>     entry NIL
1310>1311: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1312>1313: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2450))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316EED9}> {12FCAC89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316EEF9}> {12FCACC9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2450
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D4EF9}> {13287001}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316EF19}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2451
                                    #:N-COUNT-2452) {132870D1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2450) {1316EE51}> {1320DD01}>)
1314>     known combination v1311 v1313
1315>1316: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1317>1318: '1
1319>1320: known combination v1316 v1308 v1318
end stack:
successors c1321

IR1 block 202 start c1321
start stack:
1321>     entry NIL
1322>1323: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1324>1325: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2453))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316ED01}> {12FCAB09}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316ED21}> {12FCAB49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2453
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D4DC9}> {13286E11}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316ED41}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2454
                                    #:N-COUNT-2455) {13286EE1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2453) {1316EC79}> {1320DB19}>)
1326>     known combination v1323 v1325
1327>1328: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1329>1330: #:G1
1331>1332: '1
1333>1334: known combination v1328 v1330 v1332
end stack:
successors c1335

IR1 block 203 start c1335
start stack:
1335>1336: known combination v1306 v1320 v1334
1337>1338: + {GLOBAL-FUNCTION}
1339>1340: ORIG
end stack:
successors c1341

IR1 block 204 start c1341
start stack:
1341>     entry NIL
1342>1343: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1344>1345: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2456))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316EB29}> {12FCA989}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316EB49}> {12FCA9C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2456
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D4C99}> {13286C29}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316EB69}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2457
                                    #:N-COUNT-2458) {13286CF9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2456) {1316EAA1}> {1320D931}>)
1346>     known combination v1343 v1345
1347>1348: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1349>1350: '2
1351>1352: known combination v1348 v1340 v1350
end stack:
successors c1353

IR1 block 205 start c1353
start stack:
1353>     entry NIL
1354>1355: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1356>1357: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2459))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316E951}> {12FCA809}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316E971}> {12FCA849}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2459
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D4B69}> {13286A41}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316E991}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2460
                                    #:N-COUNT-2461) {13286B11}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2459) {1316E8C9}> {1320D749}>)
1358>     known combination v1355 v1357
1359>1360: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1361>1362: #:G1
1363>1364: '2
1365>1366: known combination v1360 v1362 v1364
end stack:
successors c1367

IR1 block 206 start c1367
start stack:
1367>1368: known combination v1338 v1352 v1366
end stack:
successors c1369

IR1 block 207 start c1369
start stack:
1369>     entry NIL
1370>1371: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1372>1373: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1374>1375: '214
1376>1377: '3
1378>1379: '6
1380>1381: known combination v1373 v1375 v1377 v1379
1382>     local combination v1371 v1381
1383>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1384>1385: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1386>1387: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2462))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316E3C9}> {12FCA2C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316E3E9}> {12FCA309}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2462
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D47D9}> {13286489}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316E841}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2463
                                    #:N-COUNT-2464) {13286559}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2462) {1316E341}> {1320D119}>)
1388>     known combination v1385 v1387
1389>1390: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1391>1392: #:G1
1393>1394: '0
1395>     known combination v1390 v1392 v1394 v1304
1396>1397: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1398>1399: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2465))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316E519}> {12FCA389}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316E539}> {12FCA3C9}> ..)>)
                                                                                    IR1 block 208 start c1400
                                                                                    start stack:
                                                                                    1400>     entry NIL
                                                                                    1401>1402: - {GLOBAL-FUNCTION}
                                                                                    end stack:
                                                                                    successors c1403

IR1 block 209 start c1403
start stack:
1403>     entry NIL
1404>1405: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1406>1407: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2471))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316E0E1}> {12FCA049}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316E101}> {12FCA089}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2471
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D4699}> {13286221}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316E121}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2472
                                    #:N-COUNT-2473) {132862F1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2471) {1316E059}> {1320CD91}>)
1408>     known combination v1405 v1407
1409>1410: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1411>1412: #:G1
1413>1414: '0
1415>1416: known combination v1410 v1412 v1414
end stack:
successors c1417

IR1 block 210 start c1417
start stack:
1417>1418: CENTER
end stack:
successors c1419

IR1 block 211 start c1419
start stack:
1419>     entry NIL
1420>1421: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1422>1423: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2474))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316DF09}> {12FC9EC9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316DF29}> {12FC9F09}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2474
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D4569}> {13286039}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316DF49}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2475
                                    #:N-COUNT-2476) {13286109}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2474) {1316DE81}> {1320CBA9}>)
1424>     known combination v1421 v1423
1425>1426: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1427>1428: '0
1429>1430: known combination v1426 v1418 v1428
end stack:
successors c1431

IR1 block 212 start c1431
start stack:
1431>1432: known combination v1402 v1416 v1430
1433>1434: - {GLOBAL-FUNCTION}
end stack:
successors c1435

IR1 block 213 start c1435
start stack:
1435>     entry NIL
1436>1437: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1438>1439: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2477))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316DD31}> {12FC9D49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316DD51}> {12FC9D89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2477
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D4439}> {13285E51}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316DD71}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2478
                                    #:N-COUNT-2479) {13285F21}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2477) {1316DCA9}> {1320C9C1}>)
1440>     known combination v1437 v1439
1441>1442: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1443>1444: #:G1
1445>1446: '1
1447>1448: known combination v1442 v1444 v1446
end stack:
successors c1449

IR1 block 214 start c1449
start stack:
1449>1450: CENTER
end stack:
successors c1451

IR1 block 215 start c1451
start stack:
1451>     entry NIL
1452>1453: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1454>1455: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2480))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316DB59}> {12FC9BC9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316DB79}> {12FC9C09}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2480
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D4309}> {13285C69}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316DB99}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2481
                                    #:N-COUNT-2482) {13285D39}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2480) {1316DAD1}> {1320C7D9}>)
1456>     known combination v1453 v1455
1457>1458: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1459>1460: '1
1461>1462: known combination v1458 v1450 v1460
end stack:
successors c1463

IR1 block 216 start c1463
start stack:
1463>1464: known combination v1434 v1448 v1462
1465>1466: - {GLOBAL-FUNCTION}
end stack:
successors c1467

IR1 block 217 start c1467
start stack:
1467>     entry NIL
1468>1469: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1470>1471: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2483))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316D981}> {12FC9A49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316D9A1}> {12FC9A89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2483
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D41D9}> {13285A81}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316D9C1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2484
                                    #:N-COUNT-2485) {13285B51}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2483) {1316D8F9}> {1320C5F1}>)
1472>     known combination v1469 v1471
1473>1474: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1475>1476: #:G1
1477>1478: '2
1479>1480: known combination v1474 v1476 v1478
end stack:
successors c1481

IR1 block 218 start c1481
start stack:
1481>1482: CENTER
end stack:
successors c1483

IR1 block 219 start c1483
start stack:
1483>     entry NIL
1484>1485: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1486>1487: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2486))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316D7A9}> {12FC98C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316D7C9}> {12FC9909}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2486
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D40A9}> {13285899}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316D7E9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2487
                                    #:N-COUNT-2488) {13285969}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2486) {1316D721}> {1320C409}>)
1488>     known combination v1485 v1487
1489>1490: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1491>1492: '2
1493>1494: known combination v1490 v1482 v1492
end stack:
successors c1495

IR1 block 220 start c1495
start stack:
1495>1496: known combination v1466 v1480 v1494
end stack:
successors c1497

IR1 block 221 start c1497
start stack:
1497>     entry NIL
1498>1499: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1500>1501: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1502>1503: '214
1504>1505: '3
1506>1507: '6
1508>1509: known combination v1501 v1503 v1505 v1507
1510>     local combination v1499 v1509
1511>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1512>1513: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1514>1515: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2489))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316D221}> {12FC9389}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316D241}> {12FC93C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2489
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D3D19}> {132852E1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316D699}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2490
                                    #:N-COUNT-2491) {132853B1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2489) {1316D199}> {1320BDD9}>)
1516>     known combination v1513 v1515
1517>1518: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1519>1520: #:G1
1521>1522: '0
1523>     known combination v1518 v1520 v1522 v1432
1524>1525: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1526>1527: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2492))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316D371}> {12FC9449}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316D391}> {12FC9489}> ..)>)
                                                                                    IR1 block 222 start c1528
                                                                                    start stack:
                                                                                    1528>     entry NIL
                                                                                    1529>1530: SB-C::CLAMBDA (SB-C::LOCAL-INLINE
                                                                                                              *V)
                                                                                    1531>1532: / {GLOBAL-FUNCTION}
                                                                                    1533>1534: '1.0d0
                                                                                    end stack:
                                                                                    successors c1535

IR1 block 223 start c1535
start stack:
1535>     entry NIL
end stack:
successors c1536

IR1 block 224 start c1536
start stack:
1536>     entry NIL
1537>1538: + {GLOBAL-FUNCTION}
1539>1540: + {GLOBAL-FUNCTION}
1541>1542: * {GLOBAL-FUNCTION}
end stack:
successors c1543

IR1 block 225 start c1543
start stack:
1543>     entry NIL
1544>1545: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1546>1547: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2498))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316CF19}> {12FC9109}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316CF39}> {12FC9149}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2498
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D3BD9}> {13285079}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316CF59}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2499
                                    #:N-COUNT-2500) {13285149}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2498) {1316CE91}> {1320BA51}>)
1548>     known combination v1545 v1547
1549>1550: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1551>1552: #:G1
1553>1554: '0
1555>1556: known combination v1550 v1552 v1554
end stack:
successors c1557

IR1 block 226 start c1557
start stack:
1557>     entry NIL
1558>1559: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1560>1561: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2501))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316CD41}> {12FC8F89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316CD61}> {12FC8FC9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2501
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D3AA9}> {13284E91}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316CD81}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2502
                                    #:N-COUNT-2503) {13284F61}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2501) {1316CCB9}> {1320B869}>)
1562>     known combination v1559 v1561
1563>1564: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1565>1566: #:G1
1567>1568: '0
1569>1570: known combination v1564 v1566 v1568
end stack:
successors c1571

IR1 block 227 start c1571
start stack:
1571>1572: known combination v1542 v1556 v1570
1573>1574: * {GLOBAL-FUNCTION}
end stack:
successors c1575

IR1 block 228 start c1575
start stack:
1575>     entry NIL
1576>1577: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1578>1579: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2504))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316CB69}> {12FC8E09}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316CB89}> {12FC8E49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2504
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D3979}> {13284CA9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316CBA9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2505
                                    #:N-COUNT-2506) {13284D79}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2504) {1316CAE1}> {1320B681}>)
1580>     known combination v1577 v1579
1581>1582: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1583>1584: #:G1
1585>1586: '1
1587>1588: known combination v1582 v1584 v1586
end stack:
successors c1589

IR1 block 229 start c1589
start stack:
1589>     entry NIL
1590>1591: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1592>1593: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2507))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C991}> {12FC8C89}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C9B1}> {12FC8CC9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2507
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D3849}> {13284AC1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316C9D1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2508
                                    #:N-COUNT-2509) {13284B91}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2507) {1316C909}> {1320B499}>)
1594>     known combination v1591 v1593
1595>1596: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1597>1598: #:G1
1599>1600: '1
1601>1602: known combination v1596 v1598 v1600
end stack:
successors c1603

IR1 block 230 start c1603
start stack:
1603>1604: known combination v1574 v1588 v1602
1605>1606: known combination v1540 v1572 v1604
1607>1608: * {GLOBAL-FUNCTION}
end stack:
successors c1609

IR1 block 231 start c1609
start stack:
1609>     entry NIL
1610>1611: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1612>1613: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2510))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C7B9}> {12FC8B09}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C7D9}> {12FC8B49}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2510
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D3719}> {132848D9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316C7F9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2511
                                    #:N-COUNT-2512) {132849A9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2510) {1316C731}> {1320B2B1}>)
1614>     known combination v1611 v1613
1615>1616: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1617>1618: #:G1
1619>1620: '2
1621>1622: known combination v1616 v1618 v1620
end stack:
successors c1623

IR1 block 232 start c1623
start stack:
1623>     entry NIL
1624>1625: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1626>1627: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2513))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C5E1}> {12FC8989}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C601}> {12FC89C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2513
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D35E9}> {132846F1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316C621}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2514
                                    #:N-COUNT-2515) {132847C1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2513) {1316C559}> {1320B0C9}>)
1628>     known combination v1625 v1627
1629>1630: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1631>1632: #:G1
1633>1634: '2
1635>1636: known combination v1630 v1632 v1634
end stack:
successors c1637

IR1 block 233 start c1637
start stack:
1637>1638: known combination v1608 v1622 v1636
1639>1640: known combination v1538 v1606 v1638
end stack:
successors c1641

IR1 block 234 start c1641
start stack:
1641>1642: cast v1640 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (DOUBLE-FLOAT
                                                                               0.0d0)>]
1643>1644: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
1645>1646: known combination v1644 v1642
end stack:
successors c1647

IR1 block 235 start c1647
start stack:
1647>1648: known combination v1532 v1534 v1646
1649>     local combination v1530 v1648 <none>
1650>     bind SB-C::CLAMBDA (SB-C::LOCAL-INLINE *V) :KIND :LET
end stack:
successors c1651

IR1 block 236 start c1651
start stack:
1651>     entry NIL
1652>1653: * {GLOBAL-FUNCTION}
1654>1655: S
end stack:
successors c1656

IR1 block 237 start c1656
start stack:
1656>     entry NIL
1657>1658: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1659>1660: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2516))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C409}> {12FC8809}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C429}> {12FC8849}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2516
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D34B9}> {13284509}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316C449}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2517
                                    #:N-COUNT-2518) {132845D9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2516) {1316C381}> {1320AEC1}>)
1661>     known combination v1658 v1660
1662>1663: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1664>1665: #:G1
1666>1667: '0
1668>1669: known combination v1663 v1665 v1667
end stack:
successors c1670

IR1 block 238 start c1670
start stack:
1670>1671: known combination v1653 v1655 v1669
1672>1673: * {GLOBAL-FUNCTION}
1674>1675: S
end stack:
successors c1676

IR1 block 239 start c1676
start stack:
1676>     entry NIL
1677>1678: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1679>1680: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2519))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C231}> {12FC8689}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C251}> {12FC86C9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2519
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D3389}> {13284321}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316C271}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2520
                                    #:N-COUNT-2521) {132843F1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2519) {1316C1A9}> {1320ACD9}>)
1681>     known combination v1678 v1680
1682>1683: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1684>1685: #:G1
1686>1687: '1
1688>1689: known combination v1683 v1685 v1687
end stack:
successors c1690

IR1 block 240 start c1690
start stack:
1690>1691: known combination v1673 v1675 v1689
1692>1693: * {GLOBAL-FUNCTION}
1694>1695: S
end stack:
successors c1696

IR1 block 241 start c1696
start stack:
1696>     entry NIL
1697>1698: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1699>1700: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2522))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C059}> {12FC8509}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316C079}> {12FC8549}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2522
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D3259}> {13284139}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316C099}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2523
                                    #:N-COUNT-2524) {13284209}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2522) {1316BFD1}> {1320AAF1}>)
1701>     known combination v1698 v1700
1702>1703: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1704>1705: #:G1
1706>1707: '2
1708>1709: known combination v1703 v1705 v1707
end stack:
successors c1710

IR1 block 242 start c1710
start stack:
1710>1711: known combination v1693 v1695 v1709
end stack:
successors c1712

IR1 block 243 start c1712
start stack:
1712>     entry NIL
1713>1714: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1715>1716: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1717>1718: '214
1719>1720: '3
1721>1722: '6
1723>1724: known combination v1716 v1718 v1720 v1722
1725>     local combination v1714 v1724
1726>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1727>1728: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1729>1730: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2525))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316BAA1}> {12FC7FC9}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316BAC1}> {12FC8009}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2525
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D2EC9}> {13283B81}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1316BF49}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2526
                                    #:N-COUNT-2527) {13283C51}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2525) {1316BA19}> {1320A4C1}>)
1731>     known combination v1728 v1730
1732>1733: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1734>1735: #:G1
1736>1737: '0
1738>     known combination v1733 v1735 v1737 v1671
1739>1740: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1741>1742: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2528))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316BBF1}> {12FC8089}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1316BC11}> {12FC80C9}> ..)>)
                                                                                    IR1 block 244 start c1743
                                                                                    start stack:
                                                                                    1743>1050: known combination v1177 v1179 v1744
                                                                                    end stack:
                                                                                    successors c1051

IR1 block 245 start c1051
start stack:
1051>     return v1050 SB-C::CLAMBDA (LABELS AUX)
end stack:
successors c18

IR1 block 11 start c1745
start stack:
1745>     bind SB-C::CLAMBDA (SB-C::TL-XEP NIL) :KIND :EXTERNAL
1746>1747: SB-C::CLAMBDA MAIN
1748>1749: #:G1980
1750>1751: #:G1981
1752>1753: #:G1982
1754>1755: cast v1753 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE FIXNUM>]
1756>     tail local combination v1747 v1749 v1751 v1755
end stack:
successors c1757

IR1 block 12 start c1757
start stack:
1757>     bind SB-C::CLAMBDA MAIN
end stack:
successors c1758

IR1 block 13 start c1758
start stack:
1758>     entry NIL
1759>1760: CREATE {GLOBAL-FUNCTION}
1761>1762: LEVEL
end stack:
successors c1763

IR1 block 14 start c1763
start stack:
1763>     entry NIL
1764>1765: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1766>1767: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1768>1769: '214
1770>1771: '3
1772>1773: '6
1774>1775: known combination v1767 v1769 v1771 v1773
1776>     local combination v1765 v1775
1777>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1778>1779: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1780>1781: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2729))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131606F9}> {12FBFD41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13160719}> {12FBFD81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2729
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CFBA1}> {1327C469}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13160B71}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2730
                                    #:N-COUNT-2731) {1327C539}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2729) {13160671}> {13200739}>)
1782>     known combination v1779 v1781
1783>1784: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1785>1786: #:G1
1787>1788: '0
1789>1790: '0.0d0
1791>     known combination v1784 v1786 v1788 v1790
1792>1793: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1794>1795: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2732))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13160849}> {12FBFE01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO ..>>)>)
                                                             IR1 block 15 start c1796
                                                             start stack:
                                                             1796>1797: '1.0d0
                                                             1798>1799: full combination v1760 v1762 v1800 v1797
                                                             end stack:
                                                             successors c1801

IR1 block 16 start c1801
start stack:
1801>     entry NIL
1802>1803: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
1804>1805: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
1806>1807: '214
1808>1809: '3
1810>1811: '6
1812>1813: known combination v1805 v1807 v1809 v1811
1814>     local combination v1803 v1813
1815>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
1816>1817: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1818>1819: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2738))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13160061}> {12FBF701}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13160081}> {12FBF741}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2738
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CF801}> {1327BE29}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131604D9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2739
                                    #:N-COUNT-2740) {1327BEF9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2738) {1315FFD9}> {131FFF69}>)
1820>     known combination v1817 v1819
1821>1822: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
1823>1824: #:G1
1825>1826: '0
1827>1828: '1.0d0
1829>     known combination v1822 v1824 v1826 v1828
1830>1831: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1832>1833: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2741))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131601B1}> {12FBF7C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO ..>>)>)
                                                             IR1 block 17 start c1834
                                                             start stack:
                                                             1834>     entry NIL
                                                             1835>1836: SB-C::CLAMBDA (SB-C::LOCAL-INLINE
                                                                                       *V)
                                                             1837>1838: / {GLOBAL-FUNCTION}
                                                             1839>1840: '1.0d0
                                                             end stack:
                                                             successors c1841

IR1 block 18 start c1841
start stack:
1841>     entry NIL
end stack:
successors c1842

IR1 block 19 start c1842
start stack:
1842>     entry NIL
1843>1844: + {GLOBAL-FUNCTION}
1845>1846: + {GLOBAL-FUNCTION}
1847>1848: * {GLOBAL-FUNCTION}
end stack:
successors c1849

IR1 block 20 start c1849
start stack:
1849>     entry NIL
1850>1851: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1852>1853: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2747))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315FD79}> {12FBF481}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315FD99}> {12FBF4C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2747
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CF6C1}> {1327BBC1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315FDB9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2748
                                    #:N-COUNT-2749) {1327BC91}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2747) {1315FCF1}> {131FFBE1}>)
1854>     known combination v1851 v1853
1855>1856: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1857>1858: #:G1
1859>1860: '0
1861>1862: known combination v1856 v1858 v1860
end stack:
successors c1863

IR1 block 21 start c1863
start stack:
1863>     entry NIL
1864>1865: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1866>1867: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2750))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315FBA1}> {12FBF301}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315FBC1}> {12FBF341}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2750
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CF591}> {1327B9D9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315FBE1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2751
                                    #:N-COUNT-2752) {1327BAA9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2750) {1315FB19}> {131FF9F9}>)
1868>     known combination v1865 v1867
1869>1870: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1871>1872: #:G1
1873>1874: '0
1875>1876: known combination v1870 v1872 v1874
end stack:
successors c1877

IR1 block 22 start c1877
start stack:
1877>1878: known combination v1848 v1862 v1876
1879>1880: * {GLOBAL-FUNCTION}
end stack:
successors c1881

IR1 block 23 start c1881
start stack:
1881>     entry NIL
1882>1883: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1884>1885: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2753))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F9C9}> {12FBF181}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F9E9}> {12FBF1C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2753
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CF461}> {1327B7F1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315FA09}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2754
                                    #:N-COUNT-2755) {1327B8C1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2753) {1315F941}> {131FF811}>)
1886>     known combination v1883 v1885
1887>1888: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1889>1890: #:G1
1891>1892: '1
1893>1894: known combination v1888 v1890 v1892
end stack:
successors c1895

IR1 block 24 start c1895
start stack:
1895>     entry NIL
1896>1897: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1898>1899: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2756))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F7F1}> {12FBF001}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F811}> {12FBF041}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2756
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CF331}> {1327B609}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315F831}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2757
                                    #:N-COUNT-2758) {1327B6D9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2756) {1315F769}> {131FF629}>)
1900>     known combination v1897 v1899
1901>1902: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1903>1904: #:G1
1905>1906: '1
1907>1908: known combination v1902 v1904 v1906
end stack:
successors c1909

IR1 block 25 start c1909
start stack:
1909>1910: known combination v1880 v1894 v1908
1911>1912: known combination v1846 v1878 v1910
1913>1914: * {GLOBAL-FUNCTION}
end stack:
successors c1915

IR1 block 26 start c1915
start stack:
1915>     entry NIL
1916>1917: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1918>1919: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2759))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F619}> {12FBEE81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F639}> {12FBEEC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2759
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CF201}> {1327B421}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315F659}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2760
                                    #:N-COUNT-2761) {1327B4F1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2759) {1315F591}> {131FF441}>)
1920>     known combination v1917 v1919
1921>1922: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1923>1924: #:G1
1925>1926: '2
1927>1928: known combination v1922 v1924 v1926
end stack:
successors c1929

IR1 block 27 start c1929
start stack:
1929>     entry NIL
1930>1931: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1932>1933: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2762))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F441}> {12FBED01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F461}> {12FBED41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2762
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CF0D1}> {1327B239}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315F481}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2763
                                    #:N-COUNT-2764) {1327B309}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2762) {1315F3B9}> {131FF259}>)
1934>     known combination v1931 v1933
1935>1936: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1937>1938: #:G1
1939>1940: '2
1941>1942: known combination v1936 v1938 v1940
end stack:
successors c1943

IR1 block 28 start c1943
start stack:
1943>1944: known combination v1914 v1928 v1942
1945>1946: known combination v1844 v1912 v1944
end stack:
successors c1947

IR1 block 29 start c1947
start stack:
1947>1948: cast v1946 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (DOUBLE-FLOAT
                                                                               0.0d0)>]
1949>1950: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
1951>1952: known combination v1950 v1948
end stack:
successors c1953

IR1 block 30 start c1953
start stack:
1953>1954: known combination v1838 v1840 v1952
1955>     local combination v1836 v1954 <none>
1956>     bind SB-C::CLAMBDA (SB-C::LOCAL-INLINE *V) :KIND :LET
end stack:
successors c1957

IR1 block 31 start c1957
start stack:
1957>     entry NIL
1958>1959: * {GLOBAL-FUNCTION}
1960>1961: S
end stack:
successors c1962

IR1 block 32 start c1962
start stack:
1962>     entry NIL
1963>1964: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1965>1966: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2765))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F269}> {12FBEB81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F289}> {12FBEBC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2765
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CEFA1}> {1327B051}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315F2A9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2766
                                    #:N-COUNT-2767) {1327B121}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2765) {1315F1E1}> {131FF071}>)
1967>     known combination v1964 v1966
1968>1969: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1970>1971: #:G1
1972>1973: '0
1974>1975: known combination v1969 v1971 v1973
end stack:
successors c1976

IR1 block 33 start c1976
start stack:
1976>1977: known combination v1959 v1961 v1975
1978>1979: * {GLOBAL-FUNCTION}
1980>1981: S
end stack:
successors c1982

IR1 block 34 start c1982
start stack:
1982>     entry NIL
1983>1984: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
1985>1986: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2768))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F061}> {12FBEA01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315F081}> {12FBEA41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2768
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CEE71}> {1327AE69}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315F0A1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2769
                                    #:N-COUNT-2770) {1327AF39}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2768) {1315EFD9}> {131FEE89}>)
1987>     known combination v1984 v1986
1988>1989: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
1990>1991: #:G1
1992>1993: '1
1994>1995: known combination v1989 v1991 v1993
end stack:
successors c1996

IR1 block 35 start c1996
start stack:
1996>1997: known combination v1979 v1981 v1995
1998>1999: * {GLOBAL-FUNCTION}
2000>2001: S
end stack:
successors c2002

IR1 block 36 start c2002
start stack:
2002>     entry NIL
2003>2004: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2005>2006: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2771))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315EE59}> {12FBE881}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315EE79}> {12FBE8C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2771
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CED41}> {1327AC81}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315EE99}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2772
                                    #:N-COUNT-2773) {1327AD51}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2771) {1315EDD1}> {131FECA1}>)
2007>     known combination v2004 v2006
2008>2009: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2010>2011: #:G1
2012>2013: '2
2014>2015: known combination v2009 v2011 v2013
end stack:
successors c2016

IR1 block 37 start c2016
start stack:
2016>2017: known combination v1999 v2001 v2015
end stack:
successors c2018

IR1 block 38 start c2018
start stack:
2018>     entry NIL
2019>2020: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
2021>2022: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
2023>2024: '214
2025>2026: '3
2027>2028: '6
2029>2030: known combination v2022 v2024 v2026 v2028
2031>     local combination v2020 v2030
2032>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
2033>2034: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2035>2036: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2774))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315E8D1}> {12FBE341}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315E8F1}> {12FBE381}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2774
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CE9B1}> {1327A6C9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1315ED49}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2775
                                    #:N-COUNT-2776) {1327A799}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2774) {1315E849}> {131FE671}>)
2037>     known combination v2034 v2036
2038>2039: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
2040>2041: #:G1
2042>2043: '0
2044>     known combination v2039 v2041 v2043 v1977
2045>2046: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2047>2048: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2777))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315EA21}> {12FBE401}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1315EA41}> {12FBE441}> ..)>)
                                                                                    IR1 block 39 start c2049
                                                                                    start stack:
                                                                                    2049>2050: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                                                              ((SB-C::OF-TYPE
                                                                                                                SB-C::LAMBDA-VAR)
                                                                                                               (SB-C::OF-TYPE
                                                                                                                SB-C::LAMBDA-VAR)))
                                                                                    2051>2052: / {GLOBAL-FUNCTION}
                                                                                    2053>2054: SB-KERNEL:%DOUBLE-FLOAT {GLOBAL-FUNCTION}
                                                                                    2055>2056: N
                                                                                    2057>2058: known combination v2054 v2056
                                                                                    2059>2060: '-2.0d0
                                                                                    2061>2062: known combination v2052 v2058 v2060
                                                                                    2063>     local combination v2050 v2062
                                                                                    2064>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                                                                  ((SB-C::OF-TYPE
                                                                                                                    SB-C::LAMBDA-VAR)
                                                                                                                   (SB-C::OF-TYPE
                                                                                                                    SB-C::LAMBDA-VAR))) :KIND :LET
                                                                                    2065>2066: SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                                                              ((SB-C::OF-TYPE
                                                                                                                SB-C::LAMBDA-VAR)))
                                                                                    2067>2068: / {GLOBAL-FUNCTION}
                                                                                    2069>2070: SB-KERNEL:%DOUBLE-FLOAT {GLOBAL-FUNCTION}
                                                                                    2071>2072: N
                                                                                    2073>2074: known combination v2070 v2072
                                                                                    2075>2076: '2.0d0
                                                                                    2077>2078: known combination v2068 v2074 v2076
                                                                                    2079>2080: - {GLOBAL-FUNCTION}
                                                                                    2081>2082: '1.0d0
                                                                                    2083>2084: known combination v2080 v2078 v2082
                                                                                    2085>     local combination v2066 v2084
                                                                                    2086>     bind SB-C::CLAMBDA (SB-C::&AUX-BINDINGS
                                                                                                                  ((SB-C::OF-TYPE
                                                                                                                    SB-C::LAMBDA-VAR))) :KIND :LET
                                                                                    2087>2088: SB-C::CLAMBDA (LET ((S
                                                                                                                    (OPEN
                                                                                                                     "#<...>"
                                                                                                                     . "#<...>"))
                                                                                                                   (#:G1934
                                                                                                                    T))
                                                                                                               )
                                                                                    2089>2090: OPEN {GLOBAL-FUNCTION}
                                                                                    2091>2092: FILE-NAME
                                                                                    2093>2094: ':ELEMENT-TYPE
                                                                                    2095>2096: '(UNSIGNED-BYTE
                                                                                                 8)
                                                                                    2097>2098: ':IF-EXISTS
                                                                                    2099>2100: ':SUPERSEDE
                                                                                    2101>2102: ':IF-DOES-NOT-EXIST
                                                                                    2103>2104: ':CREATE
                                                                                    2105>2106: ':DIRECTION
                                                                                    2107>2108: ':OUTPUT
                                                                                    2109>2110: cast v2092 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE (OR
                                                                                                                                                                 (VECTOR
                                                                                                                                                                  CHARACTER)
                                                                                                                                                                 (VECTOR
                                                                                                                                                                  NIL)
                                                                                                                                                                 BASE-STRING
                                                                                                                                                                 PATHNAME
                                                                                                                                                                 FILE-STREAM)>]
                                                                                    2111>2112: known combination v2090 v2110 v2094 v2096 v2098 v2100 v2102 v2104 v2106 v2108
                                                                                    2113>2114: 'T
                                                                                    2115>     local combination v2088 v2112 v2114
                                                                                    2116>     bind SB-C::CLAMBDA (LET ((S
                                                                                                                        (OPEN
                                                                                                                         "#<...>"
                                                                                                                         . "#<...>"))
                                                                                                                       (#:G1934
                                                                                                                        T))
                                                                                                                   ) :KIND :LET
                                                                                    2117>2118: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
                                                                                    2119>2120: '(#<SB-C::CLAMBDA
                                                                                                   :%SOURCE-NAME #:CLEANUP-FUN-1935
                                                                                                   :%DEBUG-NAME (FLET #:CLEANUP-FUN-1935)
                                                                                                   :KIND :CLEANUP
                                                                                                   :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                                                                                   :WHERE-FROM :DEFINED
                                                                                                   :VARS NIL {13075B99}>)
                                                                                    2121>     known combination v2118 v2120
                                                                                    end stack:
                                                                                    successors c2122

IR1 block 40 start c2122
start stack:
2122>     entry NIL
2123>2124: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2125>2126: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (#:NEXT1938) (#:START1939)
                                 (#:COUNT1940)
                                 &REST #:G1941))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:NEXT1938
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {130B2711}> {130977B1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:START1939
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {130B2739}> {130977F1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:COUNT1940
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {130B2761}> {13097831}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1941
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {130B2781}> {13097871}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 3
               :ENTRY-POINTS ((NIL . #) (NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :MV-LET
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (#:NEXT1938 #:START1939
                                       #:COUNT1940) {13075A19}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (#:NEXT1938 #:START1939 #:COUNT1940
                                    #:N-CONTEXT-1942
                                    #:N-COUNT-1943) {13075991}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (#:NEXT1938 #:START1939 #:COUNT1940
                                    #:G1941) {13075AA1}> {13075B29}>)
2127>     known combination v2124 v2126
2128>2129: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                          (LAMBDA
                              (&OPTIONAL ("#<...>" . "#<...>")
                               "#<...>" . "#<...>")))
end stack:
successors c2130

IR1 block 41 start c2130
start stack:
2130>     entry NIL
2131>2132: SB-C::%UNWIND-PROTECT {GLOBAL-FUNCTION}
2133>2134: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2135>2136: '(#<SB-C::CLAMBDA
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (SB-C::ESCAPE-FUN #:EXIT-TAG-1937)
               :KIND :DELETED
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :VARS NIL {13075909}>)
2137>     known combination v2134 v2136
2138>2139: '#<SB-C::NLX-INFO
              :BLOCK #<SB-C::CBLOCK 144 :START c2140 {1306D871}>
              :TARGET #<SB-C::CBLOCK 143 :START c2141 {12F7CCB1}>
              :INFO #<SB-C::IR2-NLX-INFO
                      :HOME NIL
                      :SAVE-SP #<SB-C:TN t1[S39]>
                      :DYNAMIC-STATE (#<SB-C:TN t2[S38]> #<SB-C:TN t3[S37]>
                                      #<SB-C:TN t4[S36]>)> {12F81F41}>
2142>2143: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-1935)
2144>     known combination v2132 v2139 v2143
2145>2146: SB-C::%CLEANUP-POINT {GLOBAL-FUNCTION}
2147>     known combination v2146
end stack:
successors c2148

IR1 block 42 start c2148
start stack:
2148>     entry NIL
2149>2150: SB-C::CLAMBDA (LET ((C NIL)
                               (#:LOOP-ACROSS-VECTOR-1944
                                ("#<...>" . "#<...>"))
                               (#:LOOP-ACROSS-INDEX-1945 "#<...>" . "#<...>")
                               ("#<...>" . "#<...>"))
                           )
2151>2152: 'NIL
2153>2154: FORMAT {GLOBAL-FUNCTION}
2155>2156: 'NIL
2157>2158: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2159>2160: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (STREAM
                                 &OPTIONAL
                                 (#:FORMAT-ARG-2347
                                  (ERROR 'SB-FORMAT:FORMAT-ERROR :COMPLAINT
                                         "required argument missing"
                                         :CONTROL-STRING "P5~%~A ~A~%255~%"
                                         :OFFSET 5))
                                 (#:FORMAT-ARG-2348
                                  (ERROR 'SB-FORMAT:FORMAT-ERROR :COMPLAINT
                                         "required argument missing"
                                         :CONTROL-STRING "P5~%~A ~A~%255~%"
                                         :OFFSET 8))
                                 &REST SB-FORMAT::ARGS))
               :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (T &OPTIONAL T T &REST T)
                                           (VALUES T &OPTIONAL))>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR :%SOURCE-NAME STREAM {12F97E71}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:FORMAT-ARG-2347
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL
                                       :DEFAULT (ERROR 'SB-FORMAT:FORMAT-ERROR
                                                       :COMPLAINT
                                                       "required argument missing"
                                                       :CONTROL-STRING
                                                       "P5~%~A ~A~%255~%"
                                                       :OFFSET
                                                       5) {13026199}> {12F97F51}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:FORMAT-ARG-2348
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL
                                       :DEFAULT (ERROR 'SB-FORMAT:FORMAT-ERROR
                                                       :COMPLAINT
                                                       "required argument missing"
                                                       :CONTROL-STRING
                                                       "P5~%~A ~A~%255~%"
                                                       :OFFSET
                                                       8) {13026389}> {12F98051}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-FORMAT::ARGS
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {13026581}> {12F98131}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 1
               :MAX-ARGS 3
               :ENTRY-POINTS (#<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (STREAM
                                                   &OPTIONAL
                                                   "#<...>" . "#<...>")))
                                :KIND :OPTIONAL
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (STREAM) {13018A91}>
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (STREAM
                                                   &OPTIONAL
                                                   "#<...>" . "#<...>")))
                                :KIND :OPTIONAL
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (STREAM #:FORMAT-ARG-2347) {13018A09}>
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (STREAM
                                                   &OPTIONAL
                                                   "#<...>" . "#<...>")))
                                :KIND :DELETED
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (STREAM #:FORMAT-ARG-2347
                                       #:FORMAT-ARG-2348) {131A0EA9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS. ..>>)
                                                                  IR1 block 43 start c2161
                                                                  start stack:
                                                                  2161>     entry NIL
                                                                  2162>2163: LENGTH {GLOBAL-FUNCTION}
                                                                  2164>2165: #:LOOP-ACROSS-VECTOR-1944
                                                                  2166>2167: known combination v2163 v2165
                                                                  2168>     set #:LOOP-ACROSS-LIMIT-1946 v2167
                                                                  end stack:
                                                                  successors c2169

IR1 block 44 start c2169
start stack:
2169>2170: < {GLOBAL-FUNCTION}
2171>2172: #:LOOP-ACROSS-INDEX-1945
2173>2174: #:LOOP-ACROSS-LIMIT-1946
2175>2176: known combination v2170 v2172 v2174
2177>     if v2176 c2178 c2179
end stack:
successors c2179 c2178

IR1 block 142 start c2178
start stack:
2178>2180: #:LOOP-ACROSS-VECTOR-1944
2181>2182: #:LOOP-ACROSS-INDEX-1945
2183>2184: cast v2180 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE ARRAY>]
2185>2186: SB-KERNEL:HAIRY-DATA-VECTOR-REF {GLOBAL-FUNCTION}
2187>2188: known combination v2186 v2184 v2182
2189>     set C v2188
2190>2191: + {GLOBAL-FUNCTION}
2192>2193: #:LOOP-ACROSS-INDEX-1945
2194>2195: '1
2196>2197: known combination v2191 v2193 v2195
2198>     set #:LOOP-ACROSS-INDEX-1945 v2197
2199>2200: WRITE-BYTE {GLOBAL-FUNCTION}
2201>2202: CHAR-CODE {GLOBAL-FUNCTION}
2203>2204: C
2205>2206: cast v2204 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:CHARACTER-SET-TYPE CHARACTER>]
2207>2208: known combination v2202 v2206
2209>2210: S
2211>2212: cast v2210 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:BUILT-IN-CLASSOID STREAM (read-only)>]
2213>     known combination v2200 v2208 v2212
end stack:
successors c2169

IR1 block 45 start c2179
start stack:
2179>     entry NIL
2214>2215: SB-C::CLAMBDA (LET ((Y |1-N/2|) (#:LOOP-LIMIT-1947 |-N/2|))
                           )
2216>2217: |1-N/2|
2218>     local combination v2215 v2217 <none>
2219>     bind SB-C::CLAMBDA (LET ((Y |1-N/2|) (#:LOOP-LIMIT-1947 |-N/2|))
                               ) :KIND :LET
end stack:
successors c2220

IR1 block 46 start c2220
start stack:
2220>     entry NIL
end stack:
successors c2221

IR1 block 47 start c2221
start stack:
2221>2222: < {GLOBAL-FUNCTION}
2223>2224: Y
2225>2226: |-N/2|
2227>2228: known combination v2222 v2224 v2226
2229>     if v2228 c2230 c2231
end stack:
successors c2231 c2230

IR1 block 138 start c2230
start stack:
2230>2232: 'NIL
end stack:
successors c2233

IR1 block 139 start c2233
start stack:
2233>2234: 'NIL
2235>     set #:G1934 v2234
end stack:
successors c2236

IR1 block 140 start c2236
start stack:
2236>2237: SB-C:%UNWIND-PROTECT-BREAKUP {GLOBAL-FUNCTION}
2238>     known combination v2237
2239>2240: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-1935)
2241>     local combination v2240
end stack:
successors c2242

IR1 block 141 start c2242
start stack:
2242>     return v2232 SB-C::CLAMBDA MAIN
end stack:
successors c18

IR1 block 48 start c2231
start stack:
2231>     entry NIL
2243>2244: SB-C::CLAMBDA (LET ((X |-N/2|) (#:LOOP-LIMIT-1948 |1-N/2|))
                           )
2245>2246: |-N/2|
2247>     local combination v2244 v2246 <none>
2248>     bind SB-C::CLAMBDA (LET ((X |-N/2|) (#:LOOP-LIMIT-1948 |1-N/2|))
                               ) :KIND :LET
2249>2250: SB-C::CLAMBDA (LET ((G 0.0d0))
                           )
2251>2252: '0.0d0
2253>     local combination v2250 v2252
2254>     bind SB-C::CLAMBDA (LET ((G 0.0d0))
                               ) :KIND :LET
end stack:
successors c2255

IR1 block 49 start c2255
start stack:
2255>     entry NIL
end stack:
successors c2256

IR1 block 50 start c2256
start stack:
2256>2257: > {GLOBAL-FUNCTION}
2258>2259: X
2260>2261: |1-N/2|
2262>2263: known combination v2257 v2259 v2261
2264>     if v2263 c2265 c2266
end stack:
successors c2265 c2266

IR1 block 52 start c2266
start stack:
2266>2267: '0.0d0
2268>     set G v2267
end stack:
successors c2269

IR1 block 53 start c2269
start stack:
2269>     entry NIL
2270>2271: SB-C::CLAMBDA (LET ((DX X)
                               (#:LOOP-LIMIT-1949 ("#<...>" . "#<...>"))
                               (#:LOOP-STEP-BY-1950 "#<...>" . "#<...>"))
                           )
2272>2273: X
2274>2275: X
2276>2277: + {GLOBAL-FUNCTION}
2278>2279: '1.0d0
2280>2281: known combination v2277 v2275 v2279
2282>     local combination v2271 v2273 <none> <none>
2283>     bind SB-C::CLAMBDA (LET ((DX X)
                                   (#:LOOP-LIMIT-1949 ("#<...>" . "#<...>"))
                                   (#:LOOP-STEP-BY-1950 "#<...>" . "#<...>"))
                               ) :KIND :LET
end stack:
successors c2284

IR1 block 54 start c2284
start stack:
2284>     entry NIL
end stack:
successors c2285

IR1 block 55 start c2285
start stack:
2285>2286: < {GLOBAL-FUNCTION}
2287>2288: DX
2289>2290: known combination v2286 v2288 v2281
2291>     if v2290 c2292 c2293
end stack:
successors c2293 c2292

IR1 block 57 start c2292
start stack:
2292>     entry NIL
2294>2295: SB-C::CLAMBDA (LET ((DY Y)
                               (#:LOOP-LIMIT-1951 ("#<...>" . "#<...>"))
                               (#:LOOP-STEP-BY-1952 "#<...>" . "#<...>"))
                           )
2296>2297: Y
2298>2299: Y
2300>2301: + {GLOBAL-FUNCTION}
2302>2303: '1.0d0
2304>2305: known combination v2301 v2299 v2303
2306>     local combination v2295 v2297 <none> <none>
2307>     bind SB-C::CLAMBDA (LET ((DY Y)
                                   (#:LOOP-LIMIT-1951 ("#<...>" . "#<...>"))
                                   (#:LOOP-STEP-BY-1952 "#<...>" . "#<...>"))
                               ) :KIND :LET
end stack:
successors c2308

IR1 block 58 start c2308
start stack:
2308>     entry NIL
end stack:
successors c2309

IR1 block 59 start c2309
start stack:
2309>2310: < {GLOBAL-FUNCTION}
2311>2312: DY
2313>2314: known combination v2310 v2312 v2305
2315>     if v2314 c2316 c2317
end stack:
successors c2317 c2316

IR1 block 61 start c2316
start stack:
2316>2318: DX
2319>2320: DY
2321>2322: SB-KERNEL:%DOUBLE-FLOAT {GLOBAL-FUNCTION}
2323>2324: N
2325>2326: known combination v2322 v2324
end stack:
successors c2327

IR1 block 62 start c2327
start stack:
2327>     entry NIL
2328>2329: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
2330>2331: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
2332>2333: '214
2334>2335: '3
2336>2337: '6
2338>2339: known combination v2331 v2333 v2335 v2337
2340>     local combination v2329 v2339
2341>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
2342>2343: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2344>2345: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2720))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13160DC1}> {12FC0381}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13160DE1}> {12FC03C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2720
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132CFF21}> {1327CAA1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131610A1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2721
                                    #:N-COUNT-2722) {13249361}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2720) {13160D39}> {13200F09}>)
2346>     known combination v2343 v2345
2347>2348: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
2349>2350: #:G1
2351>2352: '0
2353>     known combination v2348 v2350 v2352 v2318
2354>2355: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2356>2357: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2723))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13160E89}> {12FC0441}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13160EA9}> {12FC0481}> ..)>)
                                                                                    IR1 block 63 start c2358
                                                                                    start stack:
                                                                                    2358>     entry NIL
                                                                                    2359>2360: SB-C::CLAMBDA *V
                                                                                    2361>2362: / {GLOBAL-FUNCTION}
                                                                                    2363>2364: '1.0d0
                                                                                    end stack:
                                                                                    successors c2365

IR1 block 64 start c2365
start stack:
2365>     entry NIL
end stack:
successors c2366

IR1 block 65 start c2366
start stack:
2366>     entry NIL
2367>2368: + {GLOBAL-FUNCTION}
2369>2370: + {GLOBAL-FUNCTION}
2371>2372: * {GLOBAL-FUNCTION}
end stack:
successors c2373

IR1 block 66 start c2373
start stack:
2373>     entry NIL
2374>2375: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2376>2377: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2708))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161739}> {12FC0D41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161759}> {12FC0D81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2708
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D03B1}> {1327D2C9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13161779}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2709
                                    #:N-COUNT-2710) {13249271}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2708) {131616B1}> {132017F1}>)
2378>     known combination v2375 v2377
2379>2380: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2381>2382: #:G1
2383>2384: '0
2385>2386: known combination v2380 v2382 v2384
end stack:
successors c2387

IR1 block 67 start c2387
start stack:
2387>     entry NIL
2388>2389: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2390>2391: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2711))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161561}> {12FC0BC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161581}> {12FC0C01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2711
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D02B1}> {1327D0F9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131615A1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2712
                                    #:N-COUNT-2713) {1327D1B1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2711) {131614D9}> {13201609}>)
2392>     known combination v2389 v2391
2393>2394: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2395>2396: #:G1
2397>2398: '0
2399>2400: known combination v2394 v2396 v2398
end stack:
successors c2401

IR1 block 68 start c2401
start stack:
2401>2402: known combination v2372 v2386 v2400
2403>2404: * {GLOBAL-FUNCTION}
end stack:
successors c2405

IR1 block 69 start c2405
start stack:
2405>     entry NIL
2406>2407: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2408>2409: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2705))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131618B9}> {12FC0EC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131618D9}> {12FC0F01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2705
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D0431}> {1327D3B1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131618F9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2706
                                    #:N-COUNT-2707) {132496B1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2705) {13161831}> {132018D9}>)
2410>     known combination v2407 v2409
2411>2412: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2413>2414: #:G1
2415>2416: '1
2417>2418: known combination v2412 v2414 v2416
end stack:
successors c2419

IR1 block 70 start c2419
start stack:
2419>     entry NIL
2420>2421: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2422>2423: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2714))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161389}> {12FC0A41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131613A9}> {12FC0A81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2714
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D01B1}> {1327CF29}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131613C9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2715
                                    #:N-COUNT-2716) {1327CFE1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2714) {13161301}> {13201421}>)
2424>     known combination v2421 v2423
2425>2426: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2427>2428: #:G1
2429>2430: '1
2431>2432: known combination v2426 v2428 v2430
end stack:
successors c2433

IR1 block 71 start c2433
start stack:
2433>2434: known combination v2404 v2418 v2432
2435>2436: known combination v2370 v2402 v2434
2437>2438: * {GLOBAL-FUNCTION}
end stack:
successors c2439

IR1 block 72 start c2439
start stack:
2439>     entry NIL
2440>2441: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2442>2443: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2702))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161A09}> {12FC1041}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161A29}> {12FC1081}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2702
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D04B1}> {1327D499}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13161A49}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2703
                                    #:N-COUNT-2704) {1324B2E9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2702) {13161981}> {132019C1}>)
2444>     known combination v2441 v2443
2445>2446: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2447>2448: #:G1
2449>2450: '2
2451>2452: known combination v2446 v2448 v2450
end stack:
successors c2453

IR1 block 73 start c2453
start stack:
2453>     entry NIL
2454>2455: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2456>2457: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2717))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131611B1}> {12FC08C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131611D1}> {12FC0901}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2717
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D00B1}> {1327CD59}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131611F1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2718
                                    #:N-COUNT-2719) {1327CE11}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2717) {13161129}> {13201239}>)
2458>     known combination v2455 v2457
2459>2460: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2461>2462: #:G1
2463>2464: '2
2465>2466: known combination v2460 v2462 v2464
end stack:
successors c2467

IR1 block 74 start c2467
start stack:
2467>2468: known combination v2438 v2452 v2466
2469>2470: known combination v2368 v2436 v2468
end stack:
successors c2471

IR1 block 75 start c2471
start stack:
2471>2472: cast v2470 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:NUMERIC-TYPE (DOUBLE-FLOAT
                                                                               0.0d0)>]
2473>2474: SB-KERNEL:%SQRT {GLOBAL-FUNCTION}
2475>2476: known combination v2474 v2472
end stack:
successors c2477

IR1 block 76 start c2477
start stack:
2477>2478: known combination v2362 v2364 v2476
2479>     local combination v2360 v2478 <none>
2480>     bind SB-C::CLAMBDA *V :KIND :LET
end stack:
successors c2481

IR1 block 77 start c2481
start stack:
2481>     entry NIL
2482>2483: * {GLOBAL-FUNCTION}
2484>2485: S
end stack:
successors c2486

IR1 block 78 start c2486
start stack:
2486>     entry NIL
2487>2488: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2489>2490: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2684))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131625A1}> {12FC1B01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131625C1}> {12FC1B41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2684
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D0AD1}> {1327DF59}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131625E1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2685
                                    #:N-COUNT-2686) {1327E011}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2684) {13162519}> {13202649}>)
2491>     known combination v2488 v2490
2492>2493: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2494>2495: #:G1
2496>2497: '0
2498>2499: known combination v2493 v2495 v2497
end stack:
successors c2500

IR1 block 79 start c2500
start stack:
2500>2501: known combination v2483 v2485 v2499
2502>2503: * {GLOBAL-FUNCTION}
2504>2505: S
end stack:
successors c2506

IR1 block 80 start c2506
start stack:
2506>     entry NIL
2507>2508: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2509>2510: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2687))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131623C9}> {12FC1981}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131623E9}> {12FC19C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2687
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D09D1}> {1327DD89}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13162409}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2688
                                    #:N-COUNT-2689) {1327DE41}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2687) {13162341}> {13202461}>)
2511>     known combination v2508 v2510
2512>2513: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2514>2515: #:G1
2516>2517: '1
2518>2519: known combination v2513 v2515 v2517
end stack:
successors c2520

IR1 block 81 start c2520
start stack:
2520>2521: known combination v2503 v2505 v2519
2522>2523: * {GLOBAL-FUNCTION}
2524>2525: S
end stack:
successors c2526

IR1 block 82 start c2526
start stack:
2526>     entry NIL
2527>2528: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2529>2530: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2690))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131621F1}> {12FC1801}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13162211}> {12FC1841}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2690
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D08D1}> {1327DBB9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13162231}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2691
                                    #:N-COUNT-2692) {1327DC71}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2690) {13162169}> {13202279}>)
2531>     known combination v2528 v2530
2532>2533: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2534>2535: #:G1
2536>2537: '2
2538>2539: known combination v2533 v2535 v2537
end stack:
successors c2540

IR1 block 83 start c2540
start stack:
2540>2541: known combination v2523 v2525 v2539
end stack:
successors c2542

IR1 block 84 start c2542
start stack:
2542>     entry NIL
2543>2544: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
2545>2546: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
2547>2548: '214
2549>2550: '3
2551>2552: '6
2553>2554: known combination v2546 v2548 v2550 v2552
2555>     local combination v2544 v2554
2556>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
2557>2558: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2559>2560: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2693))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161C69}> {12FC12C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161C89}> {12FC1301}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2693
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D0561}> {1327D601}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131620E1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2694
                                    #:N-COUNT-2695) {1327D6D1}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2693) {13161BE1}> {13201C49}>)
2561>     known combination v2558 v2560
2562>2563: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
2564>2565: #:G1
2566>2567: '0
2568>     known combination v2563 v2565 v2567 v2501
2569>2570: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2571>2572: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2696))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161DB9}> {12FC1381}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13161DD9}> {12FC13C1}> ..)>)
                                                                                    IR1 block 85 start c2573
                                                                                    start stack:
                                                                                    2573>2574: SB-C::CLAMBDA RAY-TRACE
                                                                                    2575>2576: ZERO {SPECIAL}
                                                                                    2577>     local combination v2574 <none> v2576 <none> v1799
                                                                                    2578>     bind SB-C::CLAMBDA RAY-TRACE :KIND :LET
                                                                                    end stack:
                                                                                    successors c2579

IR1 block 86 start c2579
start stack:
2579>     entry NIL
2580>2581: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2582>2583: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA (&OPTIONAL (LAM) (NORMAL) &REST #:G1964))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME LAM
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE DOUBLE-FLOAT>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1307A741}> {1306BE71}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME NORMAL
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1307A711}> {1306BE31}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G1964
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1309E2B1}> {13087839}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :MV-LET
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (LAM NORMAL) {1306BD29}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (LAM NORMAL #:N-CONTEXT-1969
                                    #:N-COUNT-1970) {130324A9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (LAM NORMAL #:G1964) {1306BEB1}> {1306BF69}>)
2584>     known combination v2581 v2583
2585>2586: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                          (LAMBDA
                              (&OPTIONAL ("#<...>" . "#<...>")
                               "#<...>" . "#<...>")))
end stack:
successors c2587

IR1 block 87 start c2587
start stack:
2587>     entry NIL
2588>2589: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2590>2591: '(#<SB-C::CLAMBDA
               :%SOURCE-NAME AUX
               :%DEBUG-NAME (LABELS AUX)
               :KIND NIL
               :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (DOUBLE-FLOAT T T)
                                           (VALUES DOUBLE-FLOAT T &OPTIONAL))>
               :WHERE-FROM :DEFINED
               :VARS (LAM NORMAL SCENE) {13034481}>)
2592>     known combination v2589 v2591
2593>2594: SB-C::CLAMBDA (LABELS AUX)
2595>2596: '1.7976931348623157d308
2597>2598: ZERO {SPECIAL}
2599>2600: SCENE
2601>2602: local combination v2594 v2596 v2598 v2600
end stack:
successors c2603

IR1 block 88 start c2603
start stack:
2603>     local mv-combination v2586 v2602
2604>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                              (LAMBDA
                                  (&OPTIONAL ("#<...>" . "#<...>")
                                   "#<...>" . "#<...>"))) :KIND :MV-LET
2605>2606: = {GLOBAL-FUNCTION}
2607>2608: LAM
2609>2610: '1.7976931348623157d308
2611>2612: known combination v2606 v2608 v2610
2613>     if v2612 c2614 c2615
end stack:
successors c2614 c2615

IR1 block 91 start c2615
start stack:
2615>2616: SB-C::CLAMBDA (LET ((G (DOT "#<...>" . "#<...>")))
                           )
end stack:
successors c2617

IR1 block 92 start c2617
start stack:
2617>     entry NIL
2618>2619: + {GLOBAL-FUNCTION}
2620>2621: + {GLOBAL-FUNCTION}
2622>2623: * {GLOBAL-FUNCTION}
2624>2625: NORMAL
2626>2627: cast v2625 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                             DOUBLE-FLOAT
                                                                             (*))>]
end stack:
successors c2628

IR1 block 93 start c2628
start stack:
2628>     entry NIL
2629>2630: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2631>2632: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2630))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13164981}> {12FC3981}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131649A1}> {12FC39C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2630
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D2041}> {13280291}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131649C1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2631
                                    #:N-COUNT-2632) {13280361}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2630) {131648F9}> {13204CC9}>)
2633>     known combination v2630 v2632
2634>2635: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2636>2637: '0
2638>2639: known combination v2635 v2627 v2637
end stack:
successors c2640

IR1 block 94 start c2640
start stack:
2640>     entry NIL
2641>2642: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2643>2644: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2633))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131647A9}> {12FC3801}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {131647C9}> {12FC3841}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2633
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {132D1F11}> {132800A9}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {131647E9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2634
                                    #:N-COUNT-2635) {13280179}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2633) {13164721}> {13204AE1}>)
2645>     known combination v2642 v2644
2646>2647: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2648>2649: #:G1
2650>2651: '0
2652>2653: known combination v2647 v2649 v2651
end stack:
successors c2654

IR1 block 95 start c2654
start stack:
2654>2655: known combination v2623 v2639 v2653
2656>2657: * {GLOBAL-FUNCTION}
2658>2659: NORMAL
end stack:
successors c2660

IR1 block 96 start c2660
start stack:
2660>     entry NIL
2661>2662: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2663>2664: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2636))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351ACF9}> {1347F481}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351AD19}> {1347F4C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2636
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360FD01}> {135D2199}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351AD39}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2637
                                    #:N-COUNT-2638) {135D2261}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2636) {134C5139}> {1355DC79}>)
2665>     known combination v2662 v2664
2666>2667: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2668>2669: '1
2670>2671: known combination v2667 v2659 v2669
end stack:
successors c2672

IR1 block 97 start c2672
start stack:
2672>     entry NIL
2673>2674: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2675>2676: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2639))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351ABA9}> {1347F301}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351ABC9}> {1347F341}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2639
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360FC31}> {135D2011}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351ABE9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2640
                                    #:N-COUNT-2641) {135D20D9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2639) {134C5089}> {1355DB71}>)
2677>     known combination v2674 v2676
2678>2679: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2680>2681: #:G1
2682>2683: '1
2684>2685: known combination v2679 v2681 v2683
end stack:
successors c2686

IR1 block 98 start c2686
start stack:
2686>2687: known combination v2657 v2671 v2685
2688>2689: known combination v2621 v2655 v2687
2690>2691: * {GLOBAL-FUNCTION}
2692>2693: NORMAL
end stack:
successors c2694

IR1 block 99 start c2694
start stack:
2694>     entry NIL
2695>2696: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2697>2698: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2642))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351AA59}> {1347F181}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351AA79}> {1347F1C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2642
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360FB61}> {135D1E89}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351AA99}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2643
                                    #:N-COUNT-2644) {135D1F51}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2642) {134C4FD9}> {1355DA69}>)
2699>     known combination v2696 v2698
2700>2701: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2702>2703: '2
2704>2705: known combination v2701 v2693 v2703
end stack:
successors c2706

IR1 block 100 start c2706
start stack:
2706>     entry NIL
2707>2708: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2709>2710: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2645))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A909}> {1347F001}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A929}> {1347F041}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2645
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360FA91}> {135D1D01}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351A949}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2646
                                    #:N-COUNT-2647) {135D1DC9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2645) {134C4F29}> {1355D961}>)
2711>     known combination v2708 v2710
2712>2713: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2714>2715: #:G1
2716>2717: '2
2718>2719: known combination v2713 v2715 v2717
end stack:
successors c2720

IR1 block 101 start c2720
start stack:
2720>2721: known combination v2691 v2705 v2719
2722>2723: known combination v2619 v2689 v2721
end stack:
successors c2724

IR1 block 102 start c2724
start stack:
2724>     local combination v2616 v2723
2725>     bind SB-C::CLAMBDA (LET ((G (DOT "#<...>" . "#<...>")))
                               ) :KIND :LET
2726>2727: < {GLOBAL-FUNCTION}
2728>2729: G
2730>2731: '0.0d0
2732>2733: known combination v2727 v2729 v2731
2734>     if v2733 c2735 c2736
end stack:
successors c2735 c2736

IR1 block 104 start c2736
start stack:
2736>2737: +V {GLOBAL-FUNCTION}
2738>2739: SB-C::CLAMBDA +V
2740>2741: ORIG
end stack:
successors c2742

IR1 block 105 start c2742
start stack:
2742>     entry NIL
2743>2744: * {GLOBAL-FUNCTION}
2745>2746: LAM
2747>2748: #:G1
end stack:
successors c2749

IR1 block 106 start c2749
start stack:
2749>     entry NIL
2750>2751: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2752>2753: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2648))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A7B9}> {1347EE81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A7D9}> {1347EEC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2648
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360F9C1}> {135D1B79}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351A7F9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2649
                                    #:N-COUNT-2650) {135D1C41}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2648) {134C4E79}> {1355D859}>)
2754>     known combination v2751 v2753
2755>2756: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2757>2758: '0
2759>2760: known combination v2756 v2748 v2758
end stack:
successors c2761

IR1 block 107 start c2761
start stack:
2761>2762: known combination v2744 v2746 v2760
2763>2764: * {GLOBAL-FUNCTION}
2765>2766: LAM
2767>2768: #:G1
end stack:
successors c2769

IR1 block 108 start c2769
start stack:
2769>     entry NIL
2770>2771: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2772>2773: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2651))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A669}> {1347ED01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A689}> {1347ED41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2651
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360F8F1}> {135D19F1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351A6A9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2652
                                    #:N-COUNT-2653) {135D1AB9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2651) {134C4DC9}> {1355D751}>)
2774>     known combination v2771 v2773
2775>2776: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2777>2778: '1
2779>2780: known combination v2776 v2768 v2778
end stack:
successors c2781

IR1 block 109 start c2781
start stack:
2781>2782: known combination v2764 v2766 v2780
2783>2784: * {GLOBAL-FUNCTION}
2785>2786: LAM
2787>2788: #:G1
end stack:
successors c2789

IR1 block 110 start c2789
start stack:
2789>     entry NIL
2790>2791: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2792>2793: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2654))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A519}> {1347EB81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A539}> {1347EBC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2654
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360F821}> {135D1869}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351A559}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2655
                                    #:N-COUNT-2656) {135D1931}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2654) {134C4D19}> {1355D649}>)
2794>     known combination v2791 v2793
2795>2796: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2797>2798: '2
2799>2800: known combination v2796 v2788 v2798
end stack:
successors c2801

IR1 block 111 start c2801
start stack:
2801>2802: known combination v2784 v2786 v2800
end stack:
successors c2803

IR1 block 112 start c2803
start stack:
2803>     entry NIL
2804>2805: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
2806>2807: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
2808>2809: '214
2810>2811: '3
2812>2813: '6
2814>2815: known combination v2807 v2809 v2811 v2813
2816>     local combination v2805 v2815
2817>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
2818>2819: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2820>2821: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2657))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A0C9}> {1347E641}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A0E9}> {1347E681}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2657
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362B7E1}> {135F6C49}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351A491}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2658
                                    #:N-COUNT-2659) {135F6D01}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2657) {1351A041}> {135A10F1}>)
2822>     known combination v2819 v2821
2823>2824: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
2825>2826: #:G1
2827>2828: '0
2829>     known combination v2824 v2826 v2828 v2762
2830>2831: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2832>2833: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2660))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A219}> {1347E701}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351A239}> {1347E741}> ..)>)
                                                                                    IR1 block 113 start c2834
                                                                                    start stack:
                                                                                    2834>2835: cast v2741 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                                                                                                                                 DOUBLE-FLOAT
                                                                                                                                                                 (3))>]
                                                                                    2836>     local combination v2739 v2835 <none>
                                                                                    2837>     bind SB-C::CLAMBDA +V :KIND :LET
                                                                                    end stack:
                                                                                    successors c2838

IR1 block 114 start c2838
start stack:
2838>     entry NIL
2839>2840: + {GLOBAL-FUNCTION}
end stack:
successors c2841

IR1 block 115 start c2841
start stack:
2841>     entry NIL
2842>2843: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2844>2845: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2534))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351C061}> {134806C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351C081}> {13480701}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2534
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362C1E1}> {135F7FC1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351C0A1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2535
                                    #:N-COUNT-2536) {135F8079}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2534) {1351BFD9}> {135A2E61}>)
2846>     known combination v2843 v2845
2847>2848: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2849>2850: A
2851>2852: '0
2853>2854: known combination v2848 v2850 v2852
end stack:
successors c2855

IR1 block 116 start c2855
start stack:
2855>     entry NIL
2856>2857: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2858>2859: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2537))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351BE89}> {13480541}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351BEA9}> {13480581}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2537
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362C0E1}> {135F7DF1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351BEC9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2538
                                    #:N-COUNT-2539) {135F7EA9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2537) {1351BE01}> {135A2C79}>)
2860>     known combination v2857 v2859
2861>2862: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2863>2864: #:G1
2865>2866: '0
2867>2868: known combination v2862 v2864 v2866
end stack:
successors c2869

IR1 block 117 start c2869
start stack:
2869>2870: known combination v2840 v2854 v2868
2871>2872: + {GLOBAL-FUNCTION}
end stack:
successors c2873

IR1 block 118 start c2873
start stack:
2873>     entry NIL
2874>2875: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2876>2877: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2540))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351BCB1}> {134803C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351BCD1}> {13480401}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2540
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362BFE1}> {135F7C21}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351BCF1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2541
                                    #:N-COUNT-2542) {135F7CD9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2540) {1351BC29}> {135A2A91}>)
2878>     known combination v2875 v2877
2879>2880: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2881>2882: A
2883>2884: '1
2885>2886: known combination v2880 v2882 v2884
end stack:
successors c2887

IR1 block 119 start c2887
start stack:
2887>     entry NIL
2888>2889: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2890>2891: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2543))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351BAD9}> {13480241}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351BAF9}> {13480281}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2543
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362BEE1}> {135F7A51}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351BB19}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2544
                                    #:N-COUNT-2545) {135F7B09}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2543) {1351BA51}> {135A28A9}>)
2892>     known combination v2889 v2891
2893>2894: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2895>2896: #:G1
2897>2898: '1
2899>2900: known combination v2894 v2896 v2898
end stack:
successors c2901

IR1 block 120 start c2901
start stack:
2901>2902: known combination v2872 v2886 v2900
2903>2904: + {GLOBAL-FUNCTION}
end stack:
successors c2905

IR1 block 121 start c2905
start stack:
2905>     entry NIL
2906>2907: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2908>2909: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2546))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351B901}> {134800C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351B921}> {13480101}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2546
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362BDE1}> {135F7881}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351B941}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2547
                                    #:N-COUNT-2548) {135F7939}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2546) {1351B879}> {135A26C1}>)
2910>     known combination v2907 v2909
2911>2912: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2913>2914: A
2915>2916: '2
2917>2918: known combination v2912 v2914 v2916
end stack:
successors c2919

IR1 block 122 start c2919
start stack:
2919>     entry NIL
2920>2921: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2922>2923: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2549))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351B6F9}> {1347FF41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351B719}> {1347FF81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2549
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362BCE1}> {135F76B1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351B739}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2550
                                    #:N-COUNT-2551) {135F7769}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2549) {1351B671}> {135A24D9}>)
2924>     known combination v2921 v2923
2925>2926: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2927>2928: #:G1
2929>2930: '2
2931>2932: known combination v2926 v2928 v2930
end stack:
successors c2933

IR1 block 123 start c2933
start stack:
2933>2934: known combination v2904 v2918 v2932
end stack:
successors c2935

IR1 block 124 start c2935
start stack:
2935>     entry NIL
2936>2937: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
2938>2939: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
2940>2941: '214
2942>2943: '3
2944>2945: '6
2946>2947: known combination v2939 v2941 v2943 v2945
2948>     local combination v2937 v2947
2949>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
2950>2951: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2952>2953: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2552))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351B281}> {1347FA01}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351B2A1}> {1347FA41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2552
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362BB41}> {135F7391}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {1351B5E9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2553
                                    #:N-COUNT-2554) {135F7449}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2552) {1351B1F9}> {135A2059}>)
2954>     known combination v2951 v2953
2955>2956: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
2957>2958: #:G1
2959>2960: '0
2961>     known combination v2956 v2958 v2960 v2870
2962>2963: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2964>2965: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2555))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351B3D1}> {1347FAC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {1351B3F1}> {1347FB01}> ..)>)
                                                                                    IR1 block 125 start c2966
                                                                                    start stack:
                                                                                    2966>     entry NIL
                                                                                    2967>2968: NORMAL
                                                                                    end stack:
                                                                                    successors c2969

IR1 block 126 start c2969
start stack:
2969>     entry NIL
2970>2971: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2972>2973: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2666))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13519DE1}> {1347E3C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13519E01}> {1347E401}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2666
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360F751}> {135D16E1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13519E21}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2667
                                    #:N-COUNT-2668) {135D17A9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2666) {134C4C69}> {1355D541}>)
2974>     known combination v2971 v2973
2975>2976: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2977>2978: '0
2979>2980: known combination v2976 v2968 v2978
end stack:
successors c2981

IR1 block 127 start c2981
start stack:
2981>2982: * {GLOBAL-FUNCTION}
2983>2984: '1.0536712127723509d-8
2985>2986: known combination v2982 v2980 v2984
2987>2988: NORMAL
end stack:
successors c2989

IR1 block 128 start c2989
start stack:
2989>     entry NIL
2990>2991: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
2992>2993: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2669))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13519C91}> {1347E241}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13519CB1}> {1347E281}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2669
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360F681}> {135D1559}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13519CD1}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2670
                                    #:N-COUNT-2671) {135D1621}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2669) {134C4BB9}> {1355D439}>)
2994>     known combination v2991 v2993
2995>2996: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
2997>2998: '1
2999>3000: known combination v2996 v2988 v2998
end stack:
successors c3001

IR1 block 129 start c3001
start stack:
3001>3002: * {GLOBAL-FUNCTION}
3003>3004: '1.0536712127723509d-8
3005>3006: known combination v3002 v3000 v3004
3007>3008: NORMAL
end stack:
successors c3009

IR1 block 130 start c3009
start stack:
3009>     entry NIL
3010>3011: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
3012>3013: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2672))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13519B41}> {1347E0C1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13519B61}> {1347E101}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2672
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1360F5B1}> {135D13D1}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13519B81}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2673
                                    #:N-COUNT-2674) {135D1499}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2672) {134C4B09}> {1355D331}>)
3014>     known combination v3011 v3013
3015>3016: SB-KERNEL:DATA-VECTOR-REF {GLOBAL-FUNCTION}
3017>3018: '2
3019>3020: known combination v3016 v3008 v3018
end stack:
successors c3021

IR1 block 131 start c3021
start stack:
3021>3022: * {GLOBAL-FUNCTION}
3023>3024: '1.0536712127723509d-8
3025>3026: known combination v3022 v3020 v3024
end stack:
successors c3027

IR1 block 132 start c3027
start stack:
3027>     entry NIL
3028>3029: SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                           )
3030>3031: SB-KERNEL:ALLOCATE-VECTOR {GLOBAL-FUNCTION}
3032>3033: '214
3034>3035: '3
3036>3037: '6
3038>3039: known combination v3031 v3033 v3035 v3037
3040>     local combination v3029 v3039
3041>     bind SB-C::CLAMBDA (LET ((#:G1 (MAKE-ARRAY "#<...>" . "#<...>")))
                               ) :KIND :LET
3042>3043: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
3044>3045: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2675))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13519751}> {1347DB81}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {13519771}> {1347DBC1}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2675
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {1362B5A1}> {135F6771}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :ZOMBIE
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (ARRAY SB-INT:INDEX) {13519AB9}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX #:N-CONTEXT-2676
                                    #:N-COUNT-2677) {135F6829}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (ARRAY SB-INT:INDEX
                                    #:G2675) {135196C9}> {135A07B9}>)
3046>     known combination v3043 v3045
3047>3048: SB-KERNEL:DATA-VECTOR-SET {GLOBAL-FUNCTION}
3049>3050: #:G1
3051>3052: '0
3053>     known combination v3048 v3050 v3052 v2986
3054>3055: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
3056>3057: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (ARRAY) (SB-INT:INDEX)
                                 &REST #:G2678))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME ARRAY
                           :TYPE #<SB-KERNEL:ARRAY-TYPE (SIMPLE-ARRAY
                                                         DOUBLE-FLOAT (*))>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {135198A1}> {1347DC41}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME SB-INT:INDEX
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {135198C1}> {1347DC81}> ..)>)
                                                                                    IR1 block 133 start c3058
                                                                                    start stack:
                                                                                    3058>3059: full combination v2737 v3060 v3061
                                                                                    3062>3063: SB-C::CLAMBDA SINTERSECT
                                                                                    3064>     local combination v3063 v3059 <none> <none>
                                                                                    3065>     bind SB-C::CLAMBDA SINTERSECT :KIND :LET
                                                                                    end stack:
                                                                                    successors c3066

IR1 block 134 start c3066
start stack:
3066>     entry NIL
3067>3068: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
3069>3070: '(#<SB-C::CLAMBDA
               :%SOURCE-NAME AUX
               :%DEBUG-NAME (LABELS AUX)
               :KIND NIL
               :TYPE #<SB-KERNEL:FUN-TYPE (FUNCTION (T) (VALUES T &OPTIONAL))>
               :WHERE-FROM :DEFINED
               :VARS (SCENE) {1307A2C1}>)
3071>     known combination v3068 v3070
3072>3073: SB-C::CLAMBDA (LABELS AUX)
3074>3075: SCENE
3076>3077: local combination v3073 v3075
end stack:
successors c3078

IR1 block 135 start c3078
start stack:
3078>     if v3077 c3079 c3080
end stack:
successors c3079 c3080

IR1 block 137 start c3080
start stack:
3080>3081: G
end stack:
successors c3082

IR1 block 136 start c3079
start stack:
3079>3081: '0.0d0
end stack:
successors c3082

IR1 block 103 start c2735
start stack:
2735>3081: '0.0d0
end stack:
successors c3082

IR1 block 89 start c2614
start stack:
2614>3081: '0.0d0
end stack:
successors c3082

IR1 block 90 start c3082
start stack:
3082>3083: + {GLOBAL-FUNCTION}
3084>3085: G
3086>3087: known combination v3083 v3085 v3081
3088>     set G v3087
3089>3090: + {GLOBAL-FUNCTION}
3091>3092: DY
3093>3094: '0.25d0
3095>3096: known combination v3090 v3092 v3094
3097>     set DY v3096
end stack:
successors c2309

IR1 block 60 start c2317
start stack:
2317>3098: + {GLOBAL-FUNCTION}
3099>3100: DX
3101>3102: '0.25d0
3103>3104: known combination v3098 v3100 v3102
3105>     set DX v3104
end stack:
successors c2285

IR1 block 56 start c2293
start stack:
2293>3106: WRITE-BYTE {GLOBAL-FUNCTION}
3107>3108: / {GLOBAL-FUNCTION}
3109>3110: G
3111>3112: '16.0d0
3113>3114: known combination v3108 v3110 v3112
3115>3116: * {GLOBAL-FUNCTION}
3117>3118: '255.0d0
3119>3120: known combination v3116 v3114 v3118
3121>3122: SB-KERNEL:%UNARY-ROUND {GLOBAL-FUNCTION}
3123>3124: known combination v3122 v3120
3125>3126: S
3127>3128: cast v3126 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:BUILT-IN-CLASSOID STREAM (read-only)>]
3129>     known combination v3106 v3124 v3128
3130>3131: X
3132>3133: + {GLOBAL-FUNCTION}
3134>3135: '1.0d0
3136>3137: known combination v3133 v3131 v3135
3138>     set X v3137
end stack:
successors c2256

IR1 block 51 start c2265
start stack:
2265>3139: Y
3140>3141: - {GLOBAL-FUNCTION}
3142>3143: '1.0d0
3144>3145: known combination v3141 v3139 v3143
3146>     set Y v3145
end stack:
successors c2221

IR1 block 0 start c3147
start stack:
3147>     bind SB-C::CLAMBDA (SB-C::XEP
                              (LAMBDA
                                  (STREAM
                                   &OPTIONAL
                                   "#<...>" . "#<...>"))) :KIND :EXTERNAL
3148>3149: EQL {GLOBAL-FUNCTION}
3150>3151: #:G2353
3152>3153: '1
3154>3155: known combination v3149 v3151 v3153
3156>     if v3155 c3157 c3158
end stack:
successors c3157 c3158

IR1 block 2 start c3158
start stack:
3158>3159: EQL {GLOBAL-FUNCTION}
3160>3161: #:G2353
3162>3163: '2
3164>3165: known combination v3159 v3161 v3163
3166>     if v3165 c3167 c3168
end stack:
successors c3167 c3168

IR1 block 4 start c3168
start stack:
3168>3169: < {GLOBAL-FUNCTION}
3170>3171: #:G2353
3172>3173: '3
3174>3175: known combination v3169 v3171 v3173
3176>     if v3175 c3177 c3178
end stack:
successors c3177 c3178

IR1 block 5 start c3178
start stack:
3178>3179: SB-C::%ALLOCATE-CLOSURES {GLOBAL-FUNCTION}
3180>3181: '(#<SB-C::OPTIONAL-DISPATCH
               :%SOURCE-NAME SB-C::.ANONYMOUS.
               :%DEBUG-NAME (LAMBDA
                                (&OPTIONAL (#:G2357) (#:G2358) &REST #:G2359))
               :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
               :WHERE-FROM :DEFINED
               :ARGLIST (#<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2357
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {135DE979}> {13570D31}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2358
                           :TYPE #<SB-KERNEL:NUMERIC-TYPE (MOD 536870911)>
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :OPTIONAL {135DE999}> {13570D71}>
                         #<SB-C::LAMBDA-VAR
                           :%SOURCE-NAME #:G2359
                           :FLAGS (IGNORE)
                           :ARG-INFO #<SB-C::ARG-INFO
                                       :KIND :REST {13627DA9}> {135EE929}>)
               :ALLOWP NIL
               :KEYP NIL
               :MIN-ARGS 0
               :MAX-ARGS 2
               :ENTRY-POINTS ((NIL . #) (NIL . #)
                              #<SB-C::CLAMBDA
                                :%SOURCE-NAME SB-C::.ANONYMOUS.
                                :%DEBUG-NAME (SB-C::&OPTIONAL-PROCESSOR
                                              (LAMBDA
                                                  (&OPTIONAL
                                                   ("#<...>" . "#<...>")
                                                   "#<...>" . "#<...>")))
                                :KIND :MV-LET
                                :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                                :WHERE-FROM :DEFINED
                                :VARS (#:G2357 #:G2358) {13441801}>)
               :MORE-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::&MORE-PROCESSOR
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :DELETED
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (#:G2357 #:G2358 #:N-CONTEXT-2360
                                    #:N-COUNT-2361) {13570DD9}>
               :MAIN-ENTRY #<SB-C::CLAMBDA
                             :%SOURCE-NAME SB-C::.ANONYMOUS.
                             :%DEBUG-NAME (SB-C::VARARGS-ENTRY
                                           (LAMBDA
                                               (&OPTIONAL ("#<...>" . "#<...>")
                                                "#<...>" . "#<...>")))
                             :KIND :ZOMBIE
                             :TYPE #<SB-KERNEL:BUILT-IN-CLASSOID FUNCTION (read-only)>
                             :WHERE-FROM :DEFINED
                             :VARS (#:G2357 #:G2358
                                    #:G2359) {13570E61}> {134FB239}>)
3182>     known combination v3179 v3181
3183>3184: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                          (LAMBDA
                              (&OPTIONAL ("#<...>" . "#<...>")
                               "#<...>" . "#<...>")))
3185>3186: SB-C::%MORE-ARG-CONTEXT {GLOBAL-FUNCTION}
3187>3188: #:G2353
3189>3190: '3
3191>3192: known combination v3186 v3188 v3190
3193>     local mv-combination v3184 v3192
3194>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                              (LAMBDA
                                  (&OPTIONAL ("#<...>" . "#<...>")
                                   "#<...>" . "#<...>"))) :KIND :MV-LET
3195>3196: SB-C::CLAMBDA (SB-C::&MORE-PROCESSOR
                          (LAMBDA (STREAM &OPTIONAL "#<...>" . "#<...>")))
3197>3198: #:G2354
3199>3200: #:G2355
3201>3202: #:G2356
3203>3204: #:G2357
3205>3206: #:G2358
3207>     tail local combination v3196 v3198 v3200 v3202 v3204 v3206
end stack:
successors c3208

IR1 block 7 start c3208
start stack:
3208>     bind SB-C::CLAMBDA (SB-C::&MORE-PROCESSOR
                              (LAMBDA
                                  (STREAM
                                   &OPTIONAL
                                   "#<...>" . "#<...>"))) :KIND :OPTIONAL
3209>3210: SB-C::CLAMBDA (SB-C::VARARGS-ENTRY
                          (LAMBDA (STREAM &OPTIONAL "#<...>" . "#<...>")))
3211>3212: STREAM
3213>3214: #:FORMAT-ARG-2347
3215>3216: #:FORMAT-ARG-2348
3217>3218: SB-C:%LISTIFY-REST-ARGS {GLOBAL-FUNCTION}
3219>3220: #:N-CONTEXT-2349
3221>3222: #:N-COUNT-2350
3223>3224: known combination v3218 v3220 v3222
3225>     tail local combination v3210 v3212 v3214 v3216 v3224
end stack:
successors c3226

IR1 block 8 start c3226
start stack:
3226>     bind SB-C::CLAMBDA (SB-C::VARARGS-ENTRY
                              (LAMBDA
                                  (STREAM
                                   &OPTIONAL
                                   "#<...>" . "#<...>"))) :KIND :OPTIONAL
end stack:
successors c3227

IR1 block 9 start c3227
start stack:
3227>     entry NIL
3228>3229: WRITE-STRING {GLOBAL-FUNCTION}
3230>3231: '"P5"
3232>3233: STREAM
3234>3235: cast v3233 -[#<SB-KERNEL:NAMED-TYPE *> -> #<SB-KERNEL:UNION-TYPE (OR
                                                                             STREAM
                                                                             (MEMBER
                                                                              T
                                                                              NIL))>]
3236>     known combination v3229 v3231 v3235
3237>3238: TERPRI {GLOBAL-FUNCTION}
3239>3240: STREAM
3241>     known combination v3238 v3240
3242>3243: PRINC {GLOBAL-FUNCTION}
3244>3245: #:FORMAT-ARG-2347
3246>3247: STREAM
3248>     known combination v3243 v3245 v3247
3249>3250: WRITE-STRING {GLOBAL-FUNCTION}
3251>3252: '" "
3253>3254: STREAM
3255>     known combination v3250 v3252 v3254
3256>3257: PRINC {GLOBAL-FUNCTION}
3258>3259: #:FORMAT-ARG-2348
3260>3261: STREAM
3262>     known combination v3257 v3259 v3261
3263>3264: TERPRI {GLOBAL-FUNCTION}
3265>3266: STREAM
3267>     known combination v3264 v3266
3268>3269: WRITE-STRING {GLOBAL-FUNCTION}
3270>3271: '"255"
3272>3273: STREAM
3274>     known combination v3269 v3271 v3273
3275>3276: TERPRI {GLOBAL-FUNCTION}
3277>3278: STREAM
3279>     known combination v3276 v3278
end stack:
successors c3280

IR1 block 10 start c3280
start stack:
3280>3281: SB-FORMAT::ARGS
3282>     return v3281 SB-C::CLAMBDA (SB-C::VARARGS-ENTRY
                                      (LAMBDA
                                          (STREAM
                                           &OPTIONAL "#<...>" . "#<...>")))
end stack:
successors c18

IR1 block 6 start c3177
start stack:
3177>3283: SB-C::%ARG-COUNT-ERROR {GLOBAL-FUNCTION}
3284>3285: #:G2353
3286>     known combination v3283 v3285
end stack:
successors c18

IR1 block 3 start c3167
start stack:
3167>3287: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                          (LAMBDA (STREAM &OPTIONAL "#<...>" . "#<...>")))
3288>     tail local combination v3287 <none> <none>
end stack:
successors c3289

IR1 block 145 start c3289
start stack:
3289>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                              (LAMBDA
                                  (STREAM
                                   &OPTIONAL
                                   "#<...>" . "#<...>"))) :KIND :OPTIONAL
3290>3291: ERROR {GLOBAL-FUNCTION}
3292>3293: 'SB-FORMAT:FORMAT-ERROR
3294>3295: ':COMPLAINT
3296>3297: '"required argument missing"
3298>3299: ':CONTROL-STRING
3300>3301: '"P5~%~A ~A~%255~%"
3302>3303: ':OFFSET
3304>3305: '8
3306>     known combination v3291 v3293 v3295 v3297 v3299 v3301 v3303 v3305
end stack:
successors c18

IR1 block 1 start c3157
start stack:
3157>3307: SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                          (LAMBDA (STREAM &OPTIONAL "#<...>" . "#<...>")))
3308>     tail local combination v3307 <none>
end stack:
successors c3309

IR1 block 146 start c3309
start stack:
3309>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                              (LAMBDA
                                  (STREAM
                                   &OPTIONAL
                                   "#<...>" . "#<...>"))) :KIND :OPTIONAL
3310>3311: ERROR {GLOBAL-FUNCTION}
3312>3313: 'SB-FORMAT:FORMAT-ERROR
3314>3315: ':COMPLAINT
3316>3317: '"required argument missing"
3318>3319: ':CONTROL-STRING
3320>3321: '"P5~%~A ~A~%255~%"
3322>3323: ':OFFSET
3324>3325: '5
3326>     known combination v3311 v3313 v3315 v3317 v3319 v3321 v3323 v3325
end stack:
successors c18

IR1 block 143 start c2141
start stack:
2141>3327: SB-C::%NLX-ENTRY {GLOBAL-FUNCTION}
3328>3329: '#<SB-C::NLX-INFO
              :BLOCK #<SB-C::CBLOCK 144 :START c2140 {1306D871}>
              :TARGET #<SB-C::CBLOCK 143 :START c2141 {133F1DE9}>
              :INFO #<SB-C::IR2-NLX-INFO
                      :HOME NIL
                      :SAVE-SP #<SB-C:TN t1[S39]>
                      :DYNAMIC-STATE (#<SB-C:TN t2[S38]> #<SB-C:TN t3[S37]>
                                      #<SB-C:TN t4[S36]>)> {133F6389}>
3330>3331: known combination v3327 v3329
end stack:
successors c2140

IR1 block 144 start c2140
start stack:
2140>     local mv-combination v2129 v3331
3332>     bind SB-C::CLAMBDA (SB-C::&OPTIONAL-PROCESSOR
                              (LAMBDA
                                  (&OPTIONAL ("#<...>" . "#<...>")
                                   "#<...>" . "#<...>"))) :KIND :MV-LET
3333>3334: SB-C::CLAMBDA (FLET #:CLEANUP-FUN-1935)
3335>     local combination v3334
3336>3337: SB-C:%CONTINUE-UNWIND {GLOBAL-FUNCTION}
3338>3339: #:NEXT1938
3340>3341: #:START1939
3342>3343: #:COUNT1940
3344>     known combination v3337 v3339 v3341 v3343
end stack:
successors c18


;;;; IR2 component: (FLET #:CLEANUP-FUN-1935)

entries:
    L1: MAIN
    L2: (LAMBDA
            (STREAM
             &OPTIONAL
             (#:FORMAT-ARG-2347
              (ERROR 'SB-FORMAT:FORMAT-ERROR :COMPLAINT
                     "required argument missing" :CONTROL-STRING
                     "P5~%~A ~A~%255~%" :OFFSET 5))
             (#:FORMAT-ARG-2348
              (ERROR 'SB-FORMAT:FORMAT-ERROR :COMPLAINT
                     "required argument missing" :CONTROL-STRING
                     "P5~%~A ~A~%255~%" :OFFSET 8))
             &REST SB-FORMAT::ARGS))


TNs: 418 local, 185 temps, 67 constant, 27 env, 0 comp, 267 global.
Wired: 712, Unused: 0. 316 blocks, 4478 global conflicts.

IR1 block 318 start c18

    IR2 block NIL start c18

IR1 block 0 start c3147

    IR2 block 14 start c3147
    0: XEP-ALLOCATE-FRAME {# T}
    1: COPY-MORE-ARG {3}
    2: SETUP-ENVIRONMENT {#}
    3: MOVE t5[ECX] => #:G2353!6[ECX]
    4: MOVE t7[EDX] => #:G2354!8[EDX]
    5: MOVE t9[EDI] => #:G2355!10[EDI]
    6: MOVE t11[ESI] => #:G2356!12[ESI]
    7: MOVE t13[S0]>t14[EAX] => t15[S0]<t16[EAX]
    8: SAP-MOVE t17[S1]>t18[EAX] => t19[S1]<t20[EAX]
    9: NOTE-ENVIRONMENT-START {#}
    10: FAST-EQL-C/FIXNUM #:G2353!6[ECX] {# T 1}

IR1 block 1 start c3157

    IR2 block 3 start c3157
    0: MOVE t15[S0]>t21[EAX] => t22[S0]<t23[EAX]
    1: SAP-MOVE t19[S1]>t24[EAX] => t25[S1]<t26[EAX]
    2: BRANCH {#}

IR1 block 2 start c3158

    IR2 block 13 start c3158
    L3:
    0: FAST-EQL-C/FIXNUM #:G2353!6[ECX] {# T 2}

IR1 block 3 start c3167

    IR2 block 5 start c3167
    0: MOVE t15[S0]>t27[EAX] => t28[S0]<t29[EAX]
    1: SAP-MOVE t19[S1]>t30[EAX] => t31[S1]<t32[EAX]
    2: BRANCH {#}

IR1 block 4 start c3168

    IR2 block 12 start c3168
    L4:
    0: FAST-IF-<-C/FIXNUM #:G2353!6[ECX] {# NIL 3}

IR1 block 5 start c3178

    IR2 block 11 start c3178
    0: MORE-ARG-CONTEXT #:G2353!6[ECX] {3} => t33[EAX] t34[ECX]
    1: MOVE #:G2354!8[EDX] => STREAM!35[S5]<t36[EDX]
    2: MOVE #:G2355!10[EDI] => #:FORMAT-ARG-2347!37[EDI]
    3: MOVE #:G2356!12[ESI] => #:FORMAT-ARG-2348!38[S2]<t39[ESI]
    4: MOVE t33[EAX] => #:N-CONTEXT-2349!40[ESI]
    5: MOVE t34[ECX] => #:N-COUNT-2350!41[ECX]
    6: MOVE t15[S0]>t42[EAX] => t43[S0]<t44[EAX]
    7: SAP-MOVE t19[S1]>t45[EAX] => t46[S1]<t47[EAX]
    8: BRANCH {#}

IR1 block 6 start c3177

    IR2 block 6 start c3177
    L5:
    0: ARG-COUNT-ERROR #:G2353!6[ECX]

IR1 block 7 start c3208

    IR2 block 10 start c3208
    L6:
    0: SAP-MOVE t46[S1]>t48[EAX] => t49[S1]<t50[EAX]
    1: NOTE-ENVIRONMENT-START {#}
    2: LISTIFY-REST-ARGS #:N-CONTEXT-2349!40[ESI] #:N-COUNT-2350!41[ECX]
                         => t51[S3]<t52[EBX]
    3: MOVE STREAM!35[S5]>t53[EAX] => STREAM!54[S5]<t55[EBX]
    4: MOVE #:FORMAT-ARG-2347!37[EDI] => #:FORMAT-ARG-2347!56[S4]<t57[EDI]
    5: MOVE #:FORMAT-ARG-2348!38[S2]>t58[EAX]
            => #:FORMAT-ARG-2348!59[S2]<t60[EAX]
    6: MOVE t51[S3]>t61[EAX] => SB-FORMAT::ARGS!62[S3]<t63[EAX]
    7: MOVE t43[S0]>t64[EAX] => t65[S0]<t66[EAX]
    8: SAP-MOVE t49[S1]>t67[EAX] => t68[S1]<t69[EAX]

IR1 block 8 start c3226

    IR2 block 9 start c3226
    0: SAP-MOVE t68[S1]>t70[EAX] => t71[S1]<t72[EAX]
    1: NOTE-ENVIRONMENT-START {#}

IR1 block 9 start c3227

    IR2 block 8 start c3227
    0: ALLOCATE-FULL-CALL-FRAME {2} => t73[EBX]
    1: MOVE-ARG '"P5"!74[Const6]>t75[EDX] t73[EBX] => t76[EDX]
    2: MOVE-ARG STREAM!54[S5]>t77[EDI] t73[EBX] => t78[EDI]
    3: CALL-NAMED t73[EBX] t79[Const7]>t80[EAX] t76[EDX] t78[EDI] {# 2 0 NIL}
    4: ALLOCATE-FULL-CALL-FRAME {1} => t81[EBX]
    5: MOVE-ARG STREAM!54[S5]>t82[EDX] t81[EBX] => t83[EDX]
    6: CALL-NAMED t81[EBX] t84[Const8]>t85[EAX] t83[EDX] {# 1 0 NIL}
    7: ALLOCATE-FULL-CALL-FRAME {2} => t86[EBX]
    8: MOVE-ARG #:FORMAT-ARG-2347!56[S4]>t87[EDX] t86[EBX] => t88[EDX]
    9: MOVE-ARG STREAM!54[S5]>t89[EDI] t86[EBX] => t90[EDI]
    10: CALL-NAMED t86[EBX] t91[Const9]>t92[EAX] t88[EDX] t90[EDI] {# 2 0 NIL} ..

assembly code for #<SB-C:COMPONENT :NAME (FLET #:CLEANUP-FUN-1935) {117FCCF9}>

in the elsewhere segment:
L7:
in the regular segment:
L8:
in the elsewhere segment:
L9:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# T} 
        .align  3
L10:
L2:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
L11:

VOP COPY-MORE-ARG {3} 
        CMP     #<TN t93[ECX]>, 12
        JMP     BE, L12
        LEA     #<TN t94[EBX]>, DWORD PTR [EBP-180]
        SUB     #<TN t94[EBX]>, #<TN t93[ECX]>
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
        MOV     #<TN t94[EBX]>, #<TN t93[ECX]>
        SUB     #<TN t93[ECX]>, 12
        PUSH    #<TN t96[EDI]>
        PUSH    #<TN t97[ESI]>
        PUSH    #<TN t94[EBX]>
        MOV     #<TN t97[ESI]>, #<TN t98[EBP]>
        SUB     #<TN t97[ESI]>, #<TN t94[EBX]>
        XOR     #<TN t94[EBX]>, #<TN t94[EBX]>
L13:
        MOV     #<TN t96[EDI]>, DWORD PTR [ESI+EBX+0]
        MOV     DWORD PTR [ESP+EBX+12], #<TN t96[EDI]>
        ADD     #<TN t94[EBX]>, 4
        SUB     #<TN t93[ECX]>, 4
        JMP     NZ, L13
        POP     #<TN t94[EBX]>
        POP     #<TN t97[ESI]>
        POP     #<TN t96[EDI]>
L14:
        MOV     #<TN t93[ECX]>, #<TN t94[EBX]>
        JMP     L15
L12:
        LEA     #<TN t95[ESP]>, DWORD PTR [EBP-192]
L15:

VOP NOTE-ENVIRONMENT-START {#} 
L16:

VOP FAST-EQL-C/FIXNUM #:G2353!6[ECX] {# T 1} 
        CMP     #<TN #:G2353!6[ECX]>, 4
        JMP     NE, L3

L17:

VOP BRANCH {#} 
        JMP     L18

L3:

VOP FAST-EQL-C/FIXNUM #:G2353!6[ECX] {# T 2} 
        CMP     #<TN #:G2353!6[ECX]>, 8
        JMP     NE, L4

L19:

VOP BRANCH {#} 
        JMP     L20

L4:

VOP FAST-IF-<-C/FIXNUM #:G2353!6[ECX] {# NIL 3} 
        CMP     #<TN #:G2353!6[ECX]>, 12
        JMP     L, L5

L21:

VOP MORE-ARG-CONTEXT #:G2353!6[ECX] {3} => t33[EAX] t34[ECX] 
        LEA     #<TN t33[EAX]>, DWORD PTR [ESP+ECX-16]
        SUB     #<TN t34[ECX]>, 12

VOP MOVE #:G2354!8[EDX] => STREAM!35[S5]<t36[EDX] 
        MOV     #<TN STREAM!35[S5]>, #<TN #:G2354!8[EDX]>

VOP MOVE #:G2356!12[ESI] => #:FORMAT-ARG-2348!38[S2]<t39[ESI] 
        MOV     #<TN #:FORMAT-ARG-2348!38[S2]>, #<TN #:G2356!12[ESI]>

VOP MOVE t33[EAX] => #:N-CONTEXT-2349!40[ESI] 
        MOV     #<TN #:N-CONTEXT-2349!40[ESI]>, #<TN t33[EAX]>

VOP BRANCH {#} 
        JMP     L6

L5:

VOP ARG-COUNT-ERROR #:G2353!6[ECX] 
        WORD    2831
L22:
        BYTE    10
        BYTE    2
        BYTE    24
        BYTE    77

L6:
in the elsewhere segment:
L23:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L24:

VOP LISTIFY-REST-ARGS #:N-CONTEXT-2349!40[ESI] #:N-COUNT-2350!41[ECX]
                      => t51[S3]<t52[EBX] 
        MOV     #<TN t52[EBX]>, 134217739
        JECXZ   L25
        LEA     #<TN t99[EDX]>, DWORD PTR [ECX+ECX+0]
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t99[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t99[EDX]>, DWORD PTR [+36]
        JMP     BE, L26
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L27
L26:
        FS-SEGMENT-PREFIX
        XOR     #<TN t99[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t99[EDX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t99[EDX]>, DWORD PTR [+32]
L27:
        LEA     #<TN t99[EDX]>, BYTE PTR [EDX+3]
        SHR     #<TN t100[ECX]>, 2
        STD
        MOV     #<TN t52[EBX]>, #<TN t99[EDX]>
        JMP     L28
L29:
        ADD     #<TN t99[EDX]>, 8
        MOV     DWORD PTR [EDX-7], #<TN t99[EDX]>
L28:
        LODS    #<TN t101[EAX]>
        MOV     DWORD PTR [EDX-3], #<TN t101[EAX]>
        SUB     #<TN t100[ECX]>, 1
        JMP     NZ, L29
        MOV     DWORD PTR [EDX+1], 134217739
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L30
        BREAK   9
L30:
L25:
        MOV     #<TN t51[S3]>, #<TN t52[EBX]>

VOP MOVE #:FORMAT-ARG-2347!37[EDI] => #:FORMAT-ARG-2347!56[S4]<t57[EDI] 
        MOV     #<TN #:FORMAT-ARG-2347!56[S4]>, #<TN #:FORMAT-ARG-2347!37[EDI]>

L31:
in the elsewhere segment:
L32:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L33:

L34:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t73[EBX] 
        MOV     #<TN t73[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG '"P5"!74[Const6]>t75[EDX] t73[EBX] => t76[EDX] 
        MOV     #<TN t75[EDX]>, #<TN '"P5"!74[Const6]>

VOP MOVE-ARG STREAM!54[S5]>t77[EDI] t73[EBX] => t78[EDI] 
        MOV     #<TN t78[EDI]>, #<TN STREAM!54[S5]>

VOP CALL-NAMED t73[EBX] t79[Const7]>t80[EAX] t76[EDX] t78[EDI] {# 2 0 NIL} 
        MOV     #<TN t80[EAX]>, #<TN t79[Const7]>
L35:
        MOV     #<TN t102[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t73[EBX]>
L36:
L37:
        CALL    DWORD PTR [EAX+5]
L38:
        JMP     NC, L39
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L39:
L40:

VOP ALLOCATE-FULL-CALL-FRAME {1} => t81[EBX] 
        MOV     #<TN t81[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG STREAM!54[S5]>t82[EDX] t81[EBX] => t83[EDX] 
        MOV     #<TN t83[EDX]>, #<TN STREAM!54[S5]>

VOP CALL-NAMED t81[EBX] t84[Const8]>t85[EAX] t83[EDX] {# 1 0 NIL} 
        MOV     #<TN t85[EAX]>, #<TN t84[Const8]>
L41:
        MOV     #<TN t103[ECX]>, 4
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t81[EBX]>
L42:
L43:
        CALL    DWORD PTR [EAX+5]
L44:
        JMP     NC, L45
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L45:
L46:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t86[EBX] 
        MOV     #<TN t86[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG #:FORMAT-ARG-2347!56[S4]>t87[EDX] t86[EBX] => t88[EDX] 
        MOV     #<TN t88[EDX]>, #<TN #:FORMAT-ARG-2347!56[S4]>

VOP MOVE-ARG STREAM!54[S5]>t89[EDI] t86[EBX] => t90[EDI] 
        MOV     #<TN t90[EDI]>, #<TN STREAM!54[S5]>

VOP CALL-NAMED t86[EBX] t91[Const9]>t92[EAX] t88[EDX] t90[EDI] {# 2 0 NIL} 
        MOV     #<TN t92[EAX]>, #<TN t91[Const9]>
L47:
        MOV     #<TN t104[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t86[EBX]>
L48:
L49:
        CALL    DWORD PTR [EAX+5]
L50:
        JMP     NC, L51
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L51:
L52:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t105[EBX] 
        MOV     #<TN t105[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG '" "!106[Const10]>t107[EDX] t105[EBX] => t108[EDX] 
        MOV     #<TN t107[EDX]>, #<TN '" "!106[Const10]>

VOP MOVE-ARG STREAM!54[S5]>t109[EDI] t105[EBX] => t110[EDI] 
        MOV     #<TN t110[EDI]>, #<TN STREAM!54[S5]>

VOP CALL-NAMED t105[EBX] t111[Const7]>t112[EAX] t108[EDX] t110[EDI] {# 2 0 NIL} 
        MOV     #<TN t112[EAX]>, #<TN t111[Const7]>
L53:
        MOV     #<TN t113[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t105[EBX]>
L54:
L55:
        CALL    DWORD PTR [EAX+5]
L56:
        JMP     NC, L57
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L57:
L58:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t114[EBX] 
        MOV     #<TN t114[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG #:FORMAT-ARG-2348!59[S2]>t115[EDX] t114[EBX] => t116[EDX] 
        MOV     #<TN t116[EDX]>, #<TN #:FORMAT-ARG-2348!59[S2]>

VOP MOVE-ARG STREAM!54[S5]>t117[EDI] t114[EBX] => t118[EDI] 
        MOV     #<TN t118[EDI]>, #<TN STREAM!54[S5]>

VOP CALL-NAMED t114[EBX] t119[Const9]>t120[EAX] t116[EDX] t118[EDI] {# 2 0 NIL} 
        MOV     #<TN t120[EAX]>, #<TN t119[Const9]>
L59:
        MOV     #<TN t121[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t114[EBX]>
L60:
L61:
        CALL    DWORD PTR [EAX+5]
L62:
        JMP     NC, L63
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L63:
L64:

VOP ALLOCATE-FULL-CALL-FRAME {1} => t122[EBX] 
        MOV     #<TN t122[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG STREAM!54[S5]>t123[EDX] t122[EBX] => t124[EDX] 
        MOV     #<TN t124[EDX]>, #<TN STREAM!54[S5]>

VOP CALL-NAMED t122[EBX] t125[Const8]>t126[EAX] t124[EDX] {# 1 0 NIL} 
        MOV     #<TN t126[EAX]>, #<TN t125[Const8]>
L65:
        MOV     #<TN t127[ECX]>, 4
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t122[EBX]>
L66:
L67:
        CALL    DWORD PTR [EAX+5]
L68:
        JMP     NC, L69
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L69:
L70:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t128[EBX] 
        MOV     #<TN t128[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG '"255"!129[Const11]>t130[EDX] t128[EBX] => t131[EDX] 
        MOV     #<TN t130[EDX]>, #<TN '"255"!129[Const11]>

VOP MOVE-ARG STREAM!54[S5]>t132[EDI] t128[EBX] => t133[EDI] 
        MOV     #<TN t133[EDI]>, #<TN STREAM!54[S5]>

VOP CALL-NAMED t128[EBX] t134[Const7]>t135[EAX] t131[EDX] t133[EDI] {# 2 0 NIL} 
        MOV     #<TN t135[EAX]>, #<TN t134[Const7]>
L71:
        MOV     #<TN t136[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t128[EBX]>
L72:
L73:
        CALL    DWORD PTR [EAX+5]
L74:
        JMP     NC, L75
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L75:
L76:

VOP ALLOCATE-FULL-CALL-FRAME {1} => t137[EBX] 
        MOV     #<TN t137[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG STREAM!54[S5]>t138[EDX] t137[EBX] => t139[EDX] 
        MOV     #<TN t139[EDX]>, #<TN STREAM!54[S5]>

VOP CALL-NAMED t137[EBX] t140[Const8]>t141[EAX] t139[EDX] {# 1 0 NIL} 
        MOV     #<TN t141[EAX]>, #<TN t140[Const8]>
L77:
        MOV     #<TN t142[ECX]>, 4
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t137[EBX]>
L78:
L79:
        CALL    DWORD PTR [EAX+5]
L80:
        JMP     NC, L81
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L81:
L82:

L83:

VOP MOVE SB-FORMAT::ARGS!62[S3]>t143[EDX] => t144[EDX] 
        MOV     #<TN t143[EDX]>, #<TN SB-FORMAT::ARGS!62[S3]>

VOP RETURN-SINGLE t65[S0] t71[S1] t144[EDX] 
L84:
        LEA     #<TN t95[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t98[EBP]>, #<TN t65[S0]>
        RET     4

L85:
in the elsewhere segment:
L86:
in the regular segment:

VOP XEP-ALLOCATE-FRAME {# NIL} 
        .align  3
L87:
L1:
        SIMPLE-FUN-HEADER-WORD
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        DWORD   0
        POP     DWORD PTR [EBP-8]
        LEA     #<TN t95[ESP]>, DWORD PTR [EBP-192]
L88:

VOP NOTE-ENVIRONMENT-START {#} 
L89:

VOP MOVE #:G1981!145[EDI] => FILE-NAME!146[S3]<t147[EDI] 
        MOV     #<TN FILE-NAME!146[S3]>, #<TN #:G1981!145[EDI]>

VOP MOVE t148[ESI] => N!149[S16]<t150[ESI] 
        MOV     #<TN N!149[S16]>, #<TN t148[ESI]>

L90:
in the elsewhere segment:
L91:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L92:

L93:
L94:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t152[ECX] '3!153>t154[EBX]
                            '6!155>t156[ESI]
                            => t157[EAX] 
        MOV     #<TN t152[ECX]>, 214
        MOV     #<TN t154[EBX]>, 12
        MOV     #<TN t156[ESI]>, 24
        LEA     #<TN t157[EAX]>, BYTE PTR [ESI+15]
        AND     #<TN t157[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t157[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t157[EAX]>, DWORD PTR [+36]
        JMP     BE, L95
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L96
L95:
        FS-SEGMENT-PREFIX
        XOR     #<TN t157[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t157[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t157[EAX]>, DWORD PTR [+32]
L96:
        LEA     #<TN t157[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t152[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t154[EBX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L97
        BREAK   9
L97:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t157[EAX] '0.0d0!158>t159[FR0]
                                                {0}
                                                => t160[FR0] 
        FSTP    #<TN t159[FR0]>
        FLDZ
        FSTD    DWORD PTR [EAX+1]

VOP MOVE-TO-DOUBLE '-1.0d0!161[Const12]>t162[ECX] => t163[FR0] 
        MOV     #<TN t162[ECX]>, #<TN '-1.0d0!161[Const12]>
        FSTP    #<TN t163[FR0]>
        FLDD    DWORD PTR [ECX+1]

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t157[EAX] t163[FR0]
                                                {1}
                                                => t164[FR0] 
        FSTD    DWORD PTR [EAX+9]

VOP MOVE-TO-DOUBLE '4.0d0!165[Const13]>t166[ECX] => t167[FR0] 
        MOV     #<TN t166[ECX]>, #<TN '4.0d0!165[Const13]>
        FSTP    #<TN t167[FR0]>
        FLDD    DWORD PTR [ECX+1]

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t157[EAX] t167[FR0]
                                                {2}
                                                => t168[FR0] 
        FSTD    DWORD PTR [EAX+17]

L98:

VOP ALLOCATE-FULL-CALL-FRAME {3} => t169[EBX] 
        MOV     #<TN t169[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-FROM-FP-CONSTANT '1.0d0!170 => t171[ESI] 
        MOV     #<TN t171[ESI]>, DWORD PTR [+134219012]

VOP MOVE-ARG t157[EAX] t169[EBX] => t172[EDI] 
        MOV     #<TN t172[EDI]>, #<TN t157[EAX]>

VOP CALL-NAMED t169[EBX] t173[Const14]>t174[EAX] t175[EDX] t172[EDI] t176[ESI]
               {# 3 1 NIL}
               => t177[EDX] 
        MOV     #<TN t174[EAX]>, #<TN t173[Const14]>
L99:
        MOV     #<TN t178[ECX]>, 12
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t169[EBX]>
L100:
L101:
        CALL    DWORD PTR [EAX+5]
L102:
        JMP     NC, L103
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L103:
L104:

VOP MOVE t177[EDX] => t179[S17]<t180[EDX] 
        MOV     #<TN t179[S17]>, #<TN t177[EDX]>

L105:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t181[ECX] '3!153>t182[EDX]
                            '6!155>t183[EBX]
                            => t184[EAX] 
        MOV     #<TN t181[ECX]>, 214
        MOV     #<TN t182[EDX]>, 12
        MOV     #<TN t183[EBX]>, 24
        LEA     #<TN t184[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t184[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t184[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t184[EAX]>, DWORD PTR [+36]
        JMP     BE, L106
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L107
L106:
        FS-SEGMENT-PREFIX
        XOR     #<TN t184[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t184[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t184[EAX]>, DWORD PTR [+32]
L107:
        LEA     #<TN t184[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t181[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t182[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L108
        BREAK   9
L108:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] '1.0d0!170>t185[FR0]
                                                {0}
                                                => t186[FR0] 
        FSTP    #<TN t185[FR0]>
        FLD1
        FSTD    DWORD PTR [EAX+1]

VOP MOVE-TO-DOUBLE '3.0d0!187[Const15]>t188[ECX] => t189[FR0] 
        MOV     #<TN t188[ECX]>, #<TN '3.0d0!187[Const15]>
        FSTP    #<TN t189[FR0]>
        FLDD    DWORD PTR [ECX+1]

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] t189[FR0]
                                                {1}
                                                => t190[FR0] 
        FSTD    DWORD PTR [EAX+9]

VOP MOVE-TO-DOUBLE '-2.0d0!191[Const16]>t192[ECX] => t193[FR0] 
        MOV     #<TN t192[ECX]>, #<TN '-2.0d0!191[Const16]>
        FSTP    #<TN t193[FR0]>
        FLDD    DWORD PTR [ECX+1]

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] t193[FR0]
                                                {2}
                                                => t194[FR0] 
        FSTD    DWORD PTR [EAX+17]

L109:
L110:
L111:
L112:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {0} => t195[FR0] 
        FSTP    #<TN t195[FR0]>
        FLDD    DWORD PTR [EAX+1]

L113:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {0} => t196[FR1] 
        FSTP    #<TN t196[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t196[FR1]>

L114:

VOP */DOUBLE-FLOAT t195[FR0] t196[FR1] => t197[FR1] 
        FMUL-STI        #<TN t197[FR1]>
        WAIT

L115:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {1} => t198[FR0] 
        FSTP    #<TN t198[FR0]>
        FLDD    DWORD PTR [EAX+9]

L116:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {1} => t199[FR2] 
        FSTP    #<TN t199[FR2]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t199[FR2]>

L117:

VOP */DOUBLE-FLOAT t198[FR0] t199[FR2] => t200[FR0] 
        FMULD   #<TN t199[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t197[FR1] t200[FR0] => t201[FR1] 
        FADD-STI        #<TN t201[FR1]>
        WAIT

L118:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {2} => t202[FR0] 
        FSTP    #<TN t202[FR0]>
        FLDD    DWORD PTR [EAX+17]

L119:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {2} => t203[FR2] 
        FSTP    #<TN t203[FR2]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t203[FR2]>

L120:

VOP */DOUBLE-FLOAT t202[FR0] t203[FR2] => t204[FR0] 
        FMULD   #<TN t203[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t201[FR1] t204[FR0] => t205[FR0] 
        FADDD   #<TN t201[FR1]>
        WAIT

L121:

VOP FSQRT t205[FR0] => t206[FR0] 
L122:
        FSQRT
        WAIT

L123:

VOP //DOUBLE-FLOAT '1.0d0!170>t207[FR1] t206[FR0] => t208[FR1] 
        FSTP    #<TN t207[FR1]>
        FLD1
        FXCH    #<TN t207[FR1]>
        FDIV-STI        #<TN t208[FR1]>
        WAIT

L124:
L125:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {0} => t209[FR0] 
        FSTP    #<TN t209[FR0]>
        FLDD    DWORD PTR [EAX+1]

L126:

VOP */DOUBLE-FLOAT t208[FR1] t209[FR0] => t210[FR2] 
        FMULD   #<TN t208[FR1]>
        FST     #<TN t210[FR2]>

L127:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {1} => t211[FR0] 
        FSTP    #<TN t211[FR0]>
        FLDD    DWORD PTR [EAX+9]

L128:

VOP */DOUBLE-FLOAT t208[FR1] t211[FR0] => t212[FR3] 
        FMULD   #<TN t208[FR1]>
        FST     #<TN t212[FR3]>

L129:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t184[EAX] {2} => t213[FR0] 
        FSTP    #<TN t213[FR0]>
        FLDD    DWORD PTR [EAX+17]

L130:

VOP */DOUBLE-FLOAT t208[FR1] t213[FR0] => t214[FR0] 
        FMULD   #<TN t208[FR1]>
        WAIT

L131:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t215[ECX] '3!153>t216[EDX]
                            '6!155>t217[EBX]
                            => t218[EAX] 
        MOV     #<TN t215[ECX]>, 214
        MOV     #<TN t216[EDX]>, 12
        MOV     #<TN t217[EBX]>, 24
        LEA     #<TN t218[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t218[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t218[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t218[EAX]>, DWORD PTR [+36]
        JMP     BE, L132
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L133
L132:
        FS-SEGMENT-PREFIX
        XOR     #<TN t218[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t218[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t218[EAX]>, DWORD PTR [+32]
L133:
        LEA     #<TN t218[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t215[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t216[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L134
        BREAK   9
L134:

VOP MOVE t218[EAX] => #:G1!219[S15]<t220[ECX] 
        MOV     #<TN #:G1!219[S15]>, #<TN t218[EAX]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t218[EAX] t210[FR2]
                                                {0}
                                                => t221[FR2] 
        FXCH    #<TN t210[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t210[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t218[EAX] t212[FR3]
                                                {1}
                                                => t222[FR3] 
        FXCH    #<TN t212[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t212[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t218[EAX] t214[FR0]
                                                {2}
                                                => t223[FR0] 
        FSTD    DWORD PTR [EAX+17]

L135:

VOP MOVE-TO-WORD/FIXNUM N!149[S16]>t224[EAX] => t225[EAX] 
        MOV     #<TN t224[EAX]>, #<TN N!149[S16]>
        SAR     #<TN t225[EAX]>, 2

VOP %DOUBLE-FLOAT/SIGNED t225[EAX] => t226[FR0] 
        MOV     #<TN t227[S2]>, #<TN t225[EAX]>
        FSTP    #<TN t226[FR0]>
L136:
        FILD    #<TN t227[S2]>

VOP MOVE-TO-DOUBLE '-2.0d0!191[Const16]>t228[EAX] => t229[FR1] 
        MOV     #<TN t228[EAX]>, #<TN '-2.0d0!191[Const16]>
        FSTP    #<TN t229[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t229[FR1]>

VOP //DOUBLE-FLOAT t226[FR0] t229[FR1] => t230[FR0] 
        FDIVD   #<TN t229[FR1]>
        WAIT

VOP DOUBLE-MOVE t230[FR0] => |-N/2|!231[S26]<t232[FR0] 
        FSTD    DWORD PTR [EBP-112]

VOP MOVE-TO-WORD/FIXNUM N!149[S16]>t233[EAX] => t234[EAX] 
        MOV     #<TN t233[EAX]>, #<TN N!149[S16]>
        SAR     #<TN t234[EAX]>, 2

VOP %DOUBLE-FLOAT/SIGNED t234[EAX] => t235[FR0] 
        MOV     #<TN t236[S2]>, #<TN t234[EAX]>
        FSTP    #<TN t235[FR0]>
L137:
        FILD    #<TN t236[S2]>

VOP MOVE-TO-DOUBLE '2.0d0!237[Const17]>t238[EAX] => t239[FR1] 
        MOV     #<TN t238[EAX]>, #<TN '2.0d0!237[Const17]>
        FSTP    #<TN t239[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t239[FR1]>

VOP //DOUBLE-FLOAT t235[FR0] t239[FR1] => t240[FR0] 
        FDIVD   #<TN t239[FR1]>
        WAIT

VOP -/DOUBLE-FLOAT t240[FR0] '1.0d0!170>t241[FR1] => t242[FR0] 
        FSTP    #<TN t241[FR1]>
        FLD1
        FXCH    #<TN t241[FR1]>
        FSUBD   #<TN t241[FR1]>
        WAIT

VOP DOUBLE-MOVE t242[FR0] => |1-N/2|!243[S24]<t244[FR0] 
        FSTD    DWORD PTR [EBP-104]

VOP ALLOCATE-FULL-CALL-FRAME {9} => t245[EBX] 
        MOV     #<TN t245[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 36

VOP MOVE-ARG FILE-NAME!146[S3]>t246[EDX] t245[EBX] => t247[EDX] 
        MOV     #<TN t247[EDX]>, #<TN FILE-NAME!146[S3]>

VOP MOVE-ARG ':ELEMENT-TYPE!248[Const18]>t249[EDI] t245[EBX] => t250[EDI] 
        MOV     #<TN t249[EDI]>, #<TN ':ELEMENT-TYPE!248[Const18]>

VOP MOVE-ARG '(UNSIGNED-BYTE 8)!251[Const19]>t252[ESI] t245[EBX] => t253[ESI] 
        MOV     #<TN t252[ESI]>, #<TN '(UNSIGNED-BYTE 8)!251[Const19]>

VOP MOVE-ARG ':IF-EXISTS!254[Const20]>t255[EAX] t245[EBX] => t256[S3] 
        MOV     #<TN t255[EAX]>, #<TN ':IF-EXISTS!254[Const20]>
        MOV     DWORD PTR [EBX-16], #<TN t255[EAX]>

VOP MOVE-ARG ':SUPERSEDE!257[Const21]>t258[EAX] t245[EBX] => t259[S4] 
        MOV     #<TN t258[EAX]>, #<TN ':SUPERSEDE!257[Const21]>
        MOV     DWORD PTR [EBX-20], #<TN t258[EAX]>

VOP MOVE-ARG ':IF-DOES-NOT-EXIST!260[Const22]>t261[EAX] t245[EBX] => t262[S5] 
        MOV     #<TN t261[EAX]>, #<TN ':IF-DOES-NOT-EXIST!260[Const22]>
        MOV     DWORD PTR [EBX-24], #<TN t261[EAX]>

VOP MOVE-ARG ':CREATE!263[Const23]>t264[EAX] t245[EBX] => t265[S6] 
        MOV     #<TN t264[EAX]>, #<TN ':CREATE!263[Const23]>
        MOV     DWORD PTR [EBX-28], #<TN t264[EAX]>

VOP MOVE-ARG ':DIRECTION!266[Const24]>t267[EAX] t245[EBX] => t268[S7] 
        MOV     #<TN t267[EAX]>, #<TN ':DIRECTION!266[Const24]>
        MOV     DWORD PTR [EBX-32], #<TN t267[EAX]>

VOP MOVE-ARG ':OUTPUT!269[Const25]>t270[EAX] t245[EBX] => t271[S8] 
        MOV     #<TN t270[EAX]>, #<TN ':OUTPUT!269[Const25]>
        MOV     DWORD PTR [EBX-36], #<TN t270[EAX]>

VOP CALL-NAMED t245[EBX] t272[Const26]>t273[EAX] t247[EDX] t250[EDI] t253[ESI]
               t256[S3] t259[S4] t262[S5] t265[S6] t268[S7] t271[S8]
               {# 9 1 NIL}
               => t274[EDX] 
        MOV     #<TN t273[EAX]>, #<TN t272[Const26]>
L138:
        MOV     #<TN t275[ECX]>, 36
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t245[EBX]>
L139:
L140:
        CALL    DWORD PTR [EAX+5]
L141:
        JMP     NC, L142
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L142:
L143:

VOP MOVE t276[EDX] => S!277[S35]<t278[EDX] 
        MOV     #<TN S!277[S35]>, #<TN t276[EDX]>

VOP MAKE-VALUE-CELL 'T!279>t280[ECX] => #:G1934!281[S34]<t282[EAX] 
        MOV     #<TN t280[ECX]>, 134217767
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t282[EAX]>, 8
        FS-SEGMENT-PREFIX
        ADD     #<TN t282[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t282[EAX]>, DWORD PTR [+36]
        JMP     BE, L144
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L145
L144:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t282[EAX]>
        SUB     #<TN t282[EAX]>, 8
L145:
        MOV     DWORD PTR [EAX+0], 314
        LEA     #<TN t282[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-3], #<TN t280[ECX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L146
        BREAK   9
L146:
        MOV     #<TN #:G1934!281[S34]>, #<TN t282[EAX]>

L147:
L148:

VOP CURRENT-BINDING-POINTER => t2[S38]<t283[EAX] 
        FS-SEGMENT-PREFIX
        MOV     #<TN t283[EAX]>, DWORD PTR [+12]
        MOV     #<TN t2[S38]>, #<TN t283[EAX]>

VOP SAVE-DYNAMIC-STATE => t3[S37]<t284[EAX] t4[S36]<t285[ECX] 
        MOV     #<TN t284[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     #<TN t284[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t285[ECX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     #<TN t285[ECX]>, DWORD PTR [ECX+0]
        MOV     #<TN t3[S37]>, #<TN t284[EAX]>
        MOV     #<TN t4[S36]>, #<TN t285[ECX]>

VOP CURRENT-STACK-POINTER => t1[S39] 
        MOV     #<TN t1[S39]>, #<TN t95[ESP]>

VOP MAKE-UNWIND-BLOCK t286[S28] {#} => t287[ECX] 
        LEA     #<TN t287[ECX]>, DWORD PTR [EBP-136]
        MOV     #<TN t288[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t288[EAX]>, DWORD PTR [EAX+0]
        MOV     DWORD PTR [ECX+0], #<TN t288[EAX]>
        MOV     DWORD PTR [ECX+4], #<TN t98[EBP]>
        MOV     DWORD PTR [ECX+8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L149)

VOP SET-UNWIND-PROTECT t286[S28] 
        LEA     #<TN t289[EAX]>, DWORD PTR [EBP-136]
        MOV     #<TN t290[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t289[EAX]>

L150:

VOP ALLOCATE-FULL-CALL-FRAME {4} => t291[EBX] 
        MOV     #<TN t291[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 16

VOP MOVE-ARG 'NIL!292 t291[EBX] => t293[EDX] 
        MOV     #<TN t293[EDX]>, 134217739

VOP MOVE-ARG t294[Const27]>t295[EDI] t291[EBX] => t296[EDI] 
        MOV     #<TN t295[EDI]>, #<TN t294[Const27]>

VOP MOVE-ARG N!149[S16]>t297[ESI] t291[EBX] => t298[ESI] 
        MOV     #<TN t298[ESI]>, #<TN N!149[S16]>

VOP MOVE-ARG N!149[S16]>t299[EAX] t291[EBX] => t300[S3] 
        MOV     #<TN t299[EAX]>, #<TN N!149[S16]>
        MOV     DWORD PTR [EBX-16], #<TN t299[EAX]>

VOP CALL-NAMED t291[EBX] t301[Const28]>t302[EAX] t293[EDX] t296[EDI] t298[ESI]
               t300[S3]
               {# 4 1 NIL}
               => t303[EDX] 
        MOV     #<TN t302[EAX]>, #<TN t301[Const28]>
L151:
        MOV     #<TN t304[ECX]>, 16
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t291[EBX]>
L152:
L153:
        CALL    DWORD PTR [EAX+5]
L154:
        JMP     NC, L155
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L155:
L156:

VOP MOVE 'NIL!305 => C!306[EAX] 
        MOV     #<TN C!306[EAX]>, 134217739

VOP MOVE t307[EDX] => #:LOOP-ACROSS-VECTOR-1944!308[S4]<t309[EAX] 
        MOV     #<TN #:LOOP-ACROSS-VECTOR-1944!308[S4]>, #<TN t307[EDX]>

VOP MOVE '0!310 => #:LOOP-ACROSS-INDEX-1945!311[S3]<t312[EAX] 
        MOV     #<TN #:LOOP-ACROSS-INDEX-1945!311[S3]>, 0

VOP MOVE '0!310 => #:LOOP-ACROSS-LIMIT-1946!313[S2]<t314[EAX] 
        MOV     #<TN #:LOOP-ACROSS-LIMIT-1946!313[S2]>, 0

L157:

VOP LENGTH t307[EDX] => t315[EDX] 
        MOV     #<TN t316[EBX]>, #<TN t95[ESP]>
        PUSH    #<TN t98[EBP]>
        SUB     #<TN t95[ESP]>, 8
        MOV     #<TN t98[EBP]>, #<TN t316[EBX]>
        MOV     #<TN t317[ECX]>, 4
L158:
        CALL    DWORD PTR [+134219436]
L159:
        JMP     NC, L160
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L160:

VOP MOVE t315[EDX] => #:LOOP-ACROSS-LIMIT-1946!313[S2]<t318[EDX] 
        MOV     #<TN #:LOOP-ACROSS-LIMIT-1946!313[S2]>, #<TN t315[EDX]>

L161:

VOP FAST-IF-</FIXNUM #:LOOP-ACROSS-INDEX-1945!311[S3]>t319[EAX]
                     #:LOOP-ACROSS-LIMIT-1946!313[S2]
                     {# NIL}
                     
        MOV     #<TN t319[EAX]>, #<TN #:LOOP-ACROSS-INDEX-1945!311[S3]>
        CMP     #<TN t319[EAX]>, #<TN #:LOOP-ACROSS-LIMIT-1946!313[S2]>
        JMP     L, L162

L163:

VOP DOUBLE-MOVE |1-N/2|!243[S24]>t320[FR0] => Y!321[S20]<t322[FR0] 
        FSTP    #<TN t320[FR0]>
        FLDD    DWORD PTR [EBP-104]
        FSTD    DWORD PTR [EBP-88]

L164:
L165:

VOP <DOUBLE-FLOAT Y!321[S20] |-N/2|!231[S26] {# NIL} 
        FSTP    #<TN t323[FR0]>
        FLDD    DWORD PTR [EBP-88]
        FCOMD   DWORD PTR [EBP-112]
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     E, L166

L167:

VOP DOUBLE-MOVE |-N/2|!231[S26]>t325[FR0] => X!326[S22]<t327[FR0] 
        FSTP    #<TN t325[FR0]>
        FLDD    DWORD PTR [EBP-112]
        FSTD    DWORD PTR [EBP-96]

VOP DOUBLE-MOVE '0.0d0!158>t328[FR0] => G!329[S7]<t330[FR0] 
        FSTP    #<TN t328[FR0]>
        FLDZ
        FSTD    DWORD PTR [EBP-36]

L168:
L169:

VOP >DOUBLE-FLOAT X!326[S22] |1-N/2|!243[S24] {# T} 
        FSTP    #<TN t331[FR0]>
        FLDD    DWORD PTR [EBP-96]
        FCOMD   DWORD PTR [EBP-104]
        FNSTSW
        AND     #<TN t324[AH]>, 69
        JMP     NE, L170

L171:

VOP -/DOUBLE-FLOAT Y!321[S20] '1.0d0!170>t332[FR0] => t333[FR0] 
        FSTP    #<TN t332[FR0]>
        FLD1
        FSUBRD  DWORD PTR [EBP-88]
        WAIT

VOP DOUBLE-MOVE t333[FR0] => Y!321[S20]<t334[FR0] 
        FSTD    DWORD PTR [EBP-88]

VOP BRANCH {#} 
        JMP     L165

L170:

VOP DOUBLE-MOVE '0.0d0!158>t335[FR0] => G!329[S7]<t336[FR0] 
        FSTP    #<TN t335[FR0]>
        FLDZ
        FSTD    DWORD PTR [EBP-36]

L172:

VOP +/DOUBLE-FLOAT X!326[S22] '1.0d0!170>t337[FR0] => t338[S18] 
        FSTP    #<TN t337[FR0]>
        FLD1
        FADDD   DWORD PTR [EBP-96]
        FSTD    DWORD PTR [EBP-80]

VOP DOUBLE-MOVE X!326[S22]>t339[FR0] => DX!340[S9]<t341[FR0] 
        FSTP    #<TN t339[FR0]>
        FLDD    DWORD PTR [EBP-96]
        FSTD    DWORD PTR [EBP-44]

L173:
L174:

VOP <DOUBLE-FLOAT DX!340[S9] t338[S18] {# NIL} 
        FSTP    #<TN t342[FR0]>
        FLDD    DWORD PTR [EBP-44]
        FCOMD   DWORD PTR [EBP-80]
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     E, L175

L176:

VOP MOVE-TO-DOUBLE '16.0d0!343[Const29]>t344[EAX] => t345[FR0] 
        MOV     #<TN t344[EAX]>, #<TN '16.0d0!343[Const29]>
        FSTP    #<TN t345[FR0]>
        FLDD    DWORD PTR [EAX+1]

VOP //DOUBLE-FLOAT G!329[S7] t345[FR0] => t346[FR0] 
        FDIVRD  DWORD PTR [EBP-36]
        WAIT

VOP MOVE-TO-DOUBLE '255.0d0!347[Const30]>t348[EAX] => t349[FR1] 
        MOV     #<TN t348[EAX]>, #<TN '255.0d0!347[Const30]>
        FSTP    #<TN t349[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t349[FR1]>

VOP */DOUBLE-FLOAT t346[FR0] t349[FR1] => t350[FR0] 
        FMULD   #<TN t349[FR1]>
        WAIT

VOP ALLOCATE-FULL-CALL-FRAME {1} => t351[EBX] 
        MOV     #<TN t351[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-FROM-DOUBLE t350[FR0] => t352[EDX] 
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        MOV     #<TN t352[EDX]>, 16
        FS-SEGMENT-PREFIX
        ADD     #<TN t352[EDX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t352[EDX]>, DWORD PTR [+36]
        JMP     BE, L177
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L178
L177:
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+32], #<TN t352[EDX]>
        SUB     #<TN t352[EDX]>, 16
L178:
        MOV     DWORD PTR [EDX+0], 790
        LEA     #<TN t352[EDX]>, BYTE PTR [EDX+7]
        FSTD    DWORD PTR [EDX+1]
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L179
        BREAK   9
L179:

VOP CALL-NAMED t351[EBX] t353[Const31]>t354[EAX] t355[EDX]
               {# 1 1 NIL}
               => t356[EDX] 
        MOV     #<TN t354[EAX]>, #<TN t353[Const31]>
L180:
        MOV     #<TN t357[ECX]>, 4
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t351[EBX]>
L181:
L182:
        CALL    DWORD PTR [EAX+5]
L183:
        JMP     NC, L184
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L184:
L185:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t358[EBX] 
        MOV     #<TN t358[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG S!277[S35]>t359[EDI] t358[EBX] => t360[EDI] 
        MOV     #<TN t360[EDI]>, #<TN S!277[S35]>

VOP CALL-NAMED t358[EBX] t361[Const32]>t362[EAX] t363[EDX] t360[EDI]
               {# 2 0 NIL}
               
        MOV     #<TN t362[EAX]>, #<TN t361[Const32]>
L186:
        MOV     #<TN t364[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t358[EBX]>
L187:
L188:
        CALL    DWORD PTR [EAX+5]
L189:
        JMP     NC, L190
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L190:
L191:

VOP +/DOUBLE-FLOAT X!326[S22] '1.0d0!170>t365[FR0] => t366[FR0] 
        FSTP    #<TN t365[FR0]>
        FLD1
        FADDD   DWORD PTR [EBP-96]
        WAIT

VOP DOUBLE-MOVE t366[FR0] => X!326[S22]<t367[FR0] 
        FSTD    DWORD PTR [EBP-96]

VOP BRANCH {#} 
        JMP     L169

L175:

VOP +/DOUBLE-FLOAT Y!321[S20] '1.0d0!170>t368[FR0] => t369[S13] 
        FSTP    #<TN t368[FR0]>
        FLD1
        FADDD   DWORD PTR [EBP-88]
        FSTD    DWORD PTR [EBP-60]

VOP DOUBLE-MOVE Y!321[S20]>t370[FR0] => DY!371[S11]<t372[FR0] 
        FSTP    #<TN t370[FR0]>
        FLDD    DWORD PTR [EBP-88]
        FSTD    DWORD PTR [EBP-52]

L192:
L193:

VOP <DOUBLE-FLOAT DY!371[S11] t369[S13] {# NIL} 
        FSTP    #<TN t373[FR0]>
        FLDD    DWORD PTR [EBP-52]
        FCOMD   DWORD PTR [EBP-60]
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     E, L194

L195:

VOP MOVE-TO-DOUBLE '0.25d0!374[Const33]>t375[EAX] => t376[FR0] 
        MOV     #<TN t375[EAX]>, #<TN '0.25d0!374[Const33]>
        FSTP    #<TN t376[FR0]>
        FLDD    DWORD PTR [EAX+1]

VOP +/DOUBLE-FLOAT DX!340[S9] t376[FR0] => t377[FR0] 
        FADDD   DWORD PTR [EBP-44]
        WAIT

VOP DOUBLE-MOVE t377[FR0] => DX!340[S9]<t378[FR0] 
        FSTD    DWORD PTR [EBP-44]

VOP BRANCH {#} 
        JMP     L174

L194:

VOP MOVE-TO-WORD/FIXNUM N!149[S16]>t379[ESI] => t380[ESI] 
        MOV     #<TN t379[ESI]>, #<TN N!149[S16]>
        SAR     #<TN t380[ESI]>, 2

VOP %DOUBLE-FLOAT/SIGNED t380[ESI] => t381[FR0] 
        MOV     #<TN t382[S2]>, #<TN t380[ESI]>
        FSTP    #<TN t381[FR0]>
L196:
        FILD    #<TN t382[S2]>

L197:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t383[ECX] '3!153>t384[EDX]
                            '6!155>t385[EBX]
                            => t386[EAX] 
        MOV     #<TN t383[ECX]>, 214
        MOV     #<TN t384[EDX]>, 12
        MOV     #<TN t385[EBX]>, 24
        LEA     #<TN t386[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t386[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t386[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t386[EAX]>, DWORD PTR [+36]
        JMP     BE, L198
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L199
L198:
        FS-SEGMENT-PREFIX
        XOR     #<TN t386[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t386[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t386[EAX]>, DWORD PTR [+32]
L199:
        LEA     #<TN t386[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t383[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t384[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L200
        BREAK   9
L200:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] DX!340[S9]>t387[FR1]
                                                {0}
                                                => t388[FR1] 
        FSTP    #<TN t387[FR1]>
        FLDD    DWORD PTR [EBP-44]
        FXCH    #<TN t387[FR1]>
        FXCH    #<TN t387[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t387[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] DY!371[S11]>t389[FR1]
                                                {1}
                                                => t390[FR1] 
        FSTP    #<TN t389[FR1]>
        FLDD    DWORD PTR [EBP-52]
        FXCH    #<TN t389[FR1]>
        FXCH    #<TN t389[FR1]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t389[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] t381[FR0]
                                                {2}
                                                => t391[FR0] 
        FSTD    DWORD PTR [EAX+17]

L201:
L202:
L203:
L204:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {0} => t392[FR0] 
        FSTP    #<TN t392[FR0]>
        FLDD    DWORD PTR [EAX+1]

L205:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {0} => t393[FR1] 
        FSTP    #<TN t393[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t393[FR1]>

L206:

VOP */DOUBLE-FLOAT t392[FR0] t393[FR1] => t394[FR1] 
        FMUL-STI        #<TN t394[FR1]>
        WAIT

L207:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {1} => t395[FR0] 
        FSTP    #<TN t395[FR0]>
        FLDD    DWORD PTR [EAX+9]

L208:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {1} => t396[FR2] 
        FSTP    #<TN t396[FR2]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t396[FR2]>

L209:

VOP */DOUBLE-FLOAT t395[FR0] t396[FR2] => t397[FR0] 
        FMULD   #<TN t396[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t394[FR1] t397[FR0] => t398[FR1] 
        FADD-STI        #<TN t398[FR1]>
        WAIT

L210:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {2} => t399[FR0] 
        FSTP    #<TN t399[FR0]>
        FLDD    DWORD PTR [EAX+17]

L211:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {2} => t400[FR2] 
        FSTP    #<TN t400[FR2]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t400[FR2]>

L212:

VOP */DOUBLE-FLOAT t399[FR0] t400[FR2] => t401[FR0] 
        FMULD   #<TN t400[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t398[FR1] t401[FR0] => t402[FR0] 
        FADDD   #<TN t398[FR1]>
        WAIT

L213:

VOP FSQRT t402[FR0] => t403[FR0] 
L214:
        FSQRT
        WAIT

L215:

VOP //DOUBLE-FLOAT '1.0d0!170>t404[FR1] t403[FR0] => t405[FR1] 
        FSTP    #<TN t404[FR1]>
        FLD1
        FXCH    #<TN t404[FR1]>
        FDIV-STI        #<TN t405[FR1]>
        WAIT

L216:
L217:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {0} => t406[FR0] 
        FSTP    #<TN t406[FR0]>
        FLDD    DWORD PTR [EAX+1]

L218:

VOP */DOUBLE-FLOAT t405[FR1] t406[FR0] => t407[FR2] 
        FMULD   #<TN t405[FR1]>
        FST     #<TN t407[FR2]>

L219:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {1} => t408[FR0] 
        FSTP    #<TN t408[FR0]>
        FLDD    DWORD PTR [EAX+9]

L220:

VOP */DOUBLE-FLOAT t405[FR1] t408[FR0] => t409[FR3] 
        FMULD   #<TN t405[FR1]>
        FST     #<TN t409[FR3]>

L221:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t386[EAX] {2} => t410[FR0] 
        FSTP    #<TN t410[FR0]>
        FLDD    DWORD PTR [EAX+17]

L222:

VOP */DOUBLE-FLOAT t405[FR1] t410[FR0] => t411[FR0] 
        FMULD   #<TN t405[FR1]>
        WAIT

L223:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t412[EAX] '3!153>t413[ECX]
                            '6!155>t414[EDX]
                            => t415[EDI] 
        MOV     #<TN t412[EAX]>, 214
        MOV     #<TN t413[ECX]>, 12
        MOV     #<TN t414[EDX]>, 24
        LEA     #<TN t415[EDI]>, BYTE PTR [EDX+15]
        AND     #<TN t415[EDI]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t415[EDI]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t415[EDI]>, DWORD PTR [+36]
        JMP     BE, L224
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_edi
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L225
L224:
        FS-SEGMENT-PREFIX
        XOR     #<TN t415[EDI]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t415[EDI]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t415[EDI]>, DWORD PTR [+32]
L225:
        LEA     #<TN t415[EDI]>, BYTE PTR [EDI+7]
        MOV     DWORD PTR [EDI-7], #<TN t412[EAX]>
        MOV     DWORD PTR [EDI-3], #<TN t413[ECX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L226
        BREAK   9
L226:

VOP MOVE t415[EDI] => #:G1!416[EBX] 
        MOV     #<TN #:G1!416[EBX]>, #<TN t415[EDI]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t415[EDI] t407[FR2]
                                                {0}
                                                => t417[FR2] 
        FXCH    #<TN t407[FR2]>
        FSTD    DWORD PTR [EDI+1]
        FXCH    #<TN t407[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t415[EDI] t409[FR3]
                                                {1}
                                                => t418[FR3] 
        FXCH    #<TN t409[FR3]>
        FSTD    DWORD PTR [EDI+9]
        FXCH    #<TN t409[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t415[EDI] t411[FR0]
                                                {2}
                                                => t419[FR0] 
        FSTD    DWORD PTR [EDI+17]

L227:

VOP FAST-SYMBOL-VALUE 'ZERO!420[Const34]>t421[ECX] => t422[S2]<t423[EAX] 
        MOV     #<TN t421[ECX]>, #<TN 'ZERO!420[Const34]>
        MOV     #<TN t423[EAX]>, DWORD PTR [ECX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t423[EAX]>, DWORD PTR [EAX+0]
        CMP     #<TN t423[EAX]>, 90
        JMP     NE, L228
        MOV     #<TN t423[EAX]>, DWORD PTR [ECX-3]
L228:
        MOV     #<TN t422[S2]>, #<TN t423[EAX]>

VOP MOVE t422[S2]>t424[ESI] => ORIG!425[ESI] 
        MOV     #<TN t424[ESI]>, #<TN t422[S2]>

VOP MOVE t179[S17]>t426[EAX] => SCENE!427[S4]<t428[EAX] 
        MOV     #<TN t426[EAX]>, #<TN t179[S17]>
        MOV     #<TN SCENE!427[S4]>, #<TN t428[EAX]>

L229:
L230:

VOP MOVE-OPERAND t415[EDI] {SB-VM::STORE-STACK} => t429[S40] 
        MOV     #<TN t429[S40]>, #<TN t415[EDI]>

VOP FAST-SYMBOL-VALUE 'ZERO!420[Const34]>t430[EAX] => t431[ECX] 
        MOV     #<TN t430[EAX]>, #<TN 'ZERO!420[Const34]>
        MOV     #<TN t431[ECX]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     #<TN t431[ECX]>, DWORD PTR [ECX+0]
        CMP     #<TN t431[ECX]>, 90
        JMP     NE, L231
        MOV     #<TN t431[ECX]>, DWORD PTR [EAX-3]
L231:

VOP CURRENT-FP => t432[S3] 
        MOV     #<TN t432[S3]>, #<TN t98[EBP]>

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!433[Const35]>t434[EAX] => t435[FR1] 
        MOV     #<TN t434[EAX]>, #<TN '1.7976931348623157d308!433[Const35]>
        FSTP    #<TN t435[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t435[FR1]>

VOP ALLOCATE-FRAME {#} => t436[EAX] t437[IGNORE-ME] 
        MOV     #<TN t436[EAX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 192

VOP MOVE-ARG t431[ECX] t436[EAX] => NORMAL!438[S41] 
        MOV     DWORD PTR [EAX-168], #<TN t431[ECX]>

VOP MOVE-ARG SCENE!427[S4]>t439[EDX] t436[EAX] => SCENE!440[S42] 
        MOV     #<TN t439[EDX]>, #<TN SCENE!427[S4]>
        MOV     DWORD PTR [EAX-172], #<TN t439[EDX]>

VOP MOVE-ARG #:G1!416[EBX] t436[EAX] => t441[S6] 
        MOV     DWORD PTR [EAX-28], #<TN #:G1!416[EBX]>

VOP MOVE-ARG t432[S3]>t442[EDI] t436[EAX] => t443[S0] 
        MOV     #<TN t442[EDI]>, #<TN t432[S3]>
        MOV     DWORD PTR [EAX-4], #<TN t442[EDI]>

VOP KNOWN-CALL-LOCAL t436[EAX] t437[IGNORE-ME] LAM!444[FR1] NORMAL!438[S41]
                     SCENE!440[S42] t441[S6] t445[ESI] t443[S0]
                     {# # #}
                     => t446[FR1] t447[ECX] 
L232:
        MOV     #<TN t98[EBP]>, #<TN t436[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L233)
L234:
        JMP     L235
L233:
L236:
L237:

VOP MOVE-OPERAND t429[S40] {SB-VM::LOAD-STACK} => t415[EDI] 
        MOV     #<TN t415[EDI]>, #<TN t429[S40]>

L238:

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!433[Const35]>t448[EAX] => t449[FR0] 
        MOV     #<TN t448[EAX]>, #<TN '1.7976931348623157d308!433[Const35]>
        FSTP    #<TN t449[FR0]>
        FLDD    DWORD PTR [EAX+1]

VOP =/DOUBLE-FLOAT t446[FR1] t449[FR0] {# T} 
L239:
        FUCOM   #<TN t446[FR1]>
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 64
        JMP     NE, L240

L241:

VOP DOUBLE-MOVE '0.0d0!158>t450[FR0] => t451[FR0] 
        FSTP    #<TN t450[FR0]>
        FLDZ

L242:

VOP +/DOUBLE-FLOAT G!329[S7] t451[FR0] => t452[FR0] 
        FADDD   DWORD PTR [EBP-36]
        WAIT

VOP DOUBLE-MOVE t452[FR0] => G!329[S7]<t453[FR0] 
        FSTD    DWORD PTR [EBP-36]

VOP MOVE-TO-DOUBLE '0.25d0!374[Const33]>t454[EAX] => t455[FR0] 
        MOV     #<TN t454[EAX]>, #<TN '0.25d0!374[Const33]>
        FSTP    #<TN t455[FR0]>
        FLDD    DWORD PTR [EAX+1]

VOP +/DOUBLE-FLOAT DY!371[S11] t455[FR0] => t456[FR0] 
        FADDD   DWORD PTR [EBP-52]
        WAIT

VOP DOUBLE-MOVE t456[FR0] => DY!371[S11]<t457[FR0] 
        FSTD    DWORD PTR [EBP-52]

VOP BRANCH {#} 
        JMP     L193

L240:
L243:
L244:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t447[ECX] {0} => t458[FR0] 
        FSTP    #<TN t458[FR0]>
        FLDD    DWORD PTR [ECX+1]

L245:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT #:G1!219[S15]>t459[EAX]
                                                {0}
                                                => t460[FR2] 
        MOV     #<TN t459[EAX]>, #<TN #:G1!219[S15]>
        FSTP    #<TN t460[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t460[FR2]>

L246:

VOP */DOUBLE-FLOAT t458[FR0] t460[FR2] => t461[FR2] 
        FMUL-STI        #<TN t461[FR2]>
        WAIT

L247:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t447[ECX] {1} => t462[FR0] 
        FSTP    #<TN t462[FR0]>
        FLDD    DWORD PTR [ECX+9]

L248:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT #:G1!219[S15]>t463[EAX]
                                                {1}
                                                => t464[FR3] 
        MOV     #<TN t463[EAX]>, #<TN #:G1!219[S15]>
        FSTP    #<TN t464[FR3]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t464[FR3]>

L249:

VOP */DOUBLE-FLOAT t462[FR0] t464[FR3] => t465[FR0] 
        FMULD   #<TN t464[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t461[FR2] t465[FR0] => t466[FR2] 
        FADD-STI        #<TN t466[FR2]>
        WAIT

L250:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t447[ECX] {2} => t467[FR0] 
        FSTP    #<TN t467[FR0]>
        FLDD    DWORD PTR [ECX+17]

L251:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT #:G1!219[S15]>t468[EAX]
                                                {2}
                                                => t469[FR3] 
        MOV     #<TN t468[EAX]>, #<TN #:G1!219[S15]>
        FSTP    #<TN t469[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t469[FR3]>

L252:

VOP */DOUBLE-FLOAT t467[FR0] t469[FR3] => t470[FR0] 
        FMULD   #<TN t469[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t466[FR2] t470[FR0] => t471[S5] 
        FADDD   #<TN t466[FR2]>
        FSTD    DWORD PTR [EBP-28]

L253:

VOP <0/DOUBLE-FLOAT t471[S5]>t472[FR0] {# T 0.0d0} 
        FSTP    #<TN t472[FR0]>
        FLDD    DWORD PTR [EBP-28]
L254:
        FTST
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     NE, L255

L256:

VOP DOUBLE-MOVE '0.0d0!158>t473[FR0] => t451[FR0] 
        FSTP    #<TN t473[FR0]>
        FLDZ

VOP BRANCH {#} 
        JMP     L242

L255:
L257:
L258:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t415[EDI] {0} => t474[FR0] 
        FSTP    #<TN t474[FR0]>
        FLDD    DWORD PTR [EDI+1]

L259:

VOP */DOUBLE-FLOAT t446[FR1] t474[FR0] => t475[FR2] 
        FMULD   #<TN t446[FR1]>
        FST     #<TN t475[FR2]>

L260:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t415[EDI] {1} => t476[FR0] 
        FSTP    #<TN t476[FR0]>
        FLDD    DWORD PTR [EDI+9]

L261:

VOP */DOUBLE-FLOAT t446[FR1] t476[FR0] => t477[FR3] 
        FMULD   #<TN t446[FR1]>
        FST     #<TN t477[FR3]>

L262:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t415[EDI] {2} => t478[FR0] 
        FSTP    #<TN t478[FR0]>
        FLDD    DWORD PTR [EDI+17]

L263:

VOP */DOUBLE-FLOAT t446[FR1] t478[FR0] => t479[FR0] 
        FMULD   #<TN t446[FR1]>
        WAIT

L264:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t480[EDX] '3!153>t481[EBX]
                            '6!155>t482[ESI]
                            => t483[EAX] 
        MOV     #<TN t480[EDX]>, 214
        MOV     #<TN t481[EBX]>, 12
        MOV     #<TN t482[ESI]>, 24
        LEA     #<TN t483[EAX]>, BYTE PTR [ESI+15]
        AND     #<TN t483[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t483[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t483[EAX]>, DWORD PTR [+36]
        JMP     BE, L265
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L266
L265:
        FS-SEGMENT-PREFIX
        XOR     #<TN t483[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t483[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t483[EAX]>, DWORD PTR [+32]
L266:
        LEA     #<TN t483[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t480[EDX]>
        MOV     DWORD PTR [EAX-3], #<TN t481[EBX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L267
        BREAK   9
L267:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t483[EAX] t475[FR2]
                                                {0}
                                                => t484[FR2] 
        FXCH    #<TN t475[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t475[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t483[EAX] t477[FR3]
                                                {1}
                                                => t485[FR3] 
        FXCH    #<TN t477[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t477[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t483[EAX] t479[FR0]
                                                {2}
                                                => t486[FR0] 
        FSTD    DWORD PTR [EAX+17]

L268:
L269:
L270:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t422[S2]>t487[EDX]
                                                {0}
                                                => t488[FR0] 
        MOV     #<TN t487[EDX]>, #<TN t422[S2]>
        FSTP    #<TN t488[FR0]>
        FLDD    DWORD PTR [EDX+1]

L271:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t483[EAX] {0} => t489[FR1] 
        FSTP    #<TN t489[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t489[FR1]>

L272:

VOP +/DOUBLE-FLOAT t488[FR0] t489[FR1] => t490[FR1] 
        FADD-STI        #<TN t490[FR1]>
        WAIT

L273:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t422[S2]>t491[EDX]
                                                {1}
                                                => t492[FR0] 
        MOV     #<TN t491[EDX]>, #<TN t422[S2]>
        FSTP    #<TN t492[FR0]>
        FLDD    DWORD PTR [EDX+9]

L274:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t483[EAX] {1} => t493[FR2] 
        FSTP    #<TN t493[FR2]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t493[FR2]>

L275:

VOP +/DOUBLE-FLOAT t492[FR0] t493[FR2] => t494[FR2] 
        FADD-STI        #<TN t494[FR2]>
        WAIT

L276:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t422[S2]>t495[EDX]
                                                {2}
                                                => t496[FR0] 
        MOV     #<TN t495[EDX]>, #<TN t422[S2]>
        FSTP    #<TN t496[FR0]>
        FLDD    DWORD PTR [EDX+17]

L277:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t483[EAX] {2} => t497[FR3] 
        FSTP    #<TN t497[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t497[FR3]>

L278:

VOP +/DOUBLE-FLOAT t496[FR0] t497[FR3] => t498[FR0] 
        FADDD   #<TN t497[FR3]>
        WAIT

L279:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t499[EDX] '3!153>t500[EBX]
                            '6!155>t501[ESI]
                            => t502[EAX] 
        MOV     #<TN t499[EDX]>, 214
        MOV     #<TN t500[EBX]>, 12
        MOV     #<TN t501[ESI]>, 24
        LEA     #<TN t502[EAX]>, BYTE PTR [ESI+15]
        AND     #<TN t502[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t502[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t502[EAX]>, DWORD PTR [+36]
        JMP     BE, L280
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L281
L280:
        FS-SEGMENT-PREFIX
        XOR     #<TN t502[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t502[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t502[EAX]>, DWORD PTR [+32]
L281:
        LEA     #<TN t502[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t499[EDX]>
        MOV     DWORD PTR [EAX-3], #<TN t500[EBX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L282
        BREAK   9
L282:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t502[EAX] t490[FR1]
                                                {0}
                                                => t503[FR1] 
        FXCH    #<TN t490[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t490[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t502[EAX] t494[FR2]
                                                {1}
                                                => t504[FR2] 
        FXCH    #<TN t494[FR2]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t494[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t502[EAX] t498[FR0]
                                                {2}
                                                => t505[FR0] 
        FSTD    DWORD PTR [EAX+17]

L283:
L284:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t447[ECX] {0} => t506[FR0] 
        FSTP    #<TN t506[FR0]>
        FLDD    DWORD PTR [ECX+1]

L285:

VOP MOVE-TO-DOUBLE '1.0536712127723509d-8!507[Const36]>t508[EDX] => t509[FR1] 
        MOV     #<TN t508[EDX]>, #<TN '1.0536712127723509d-8!507[Const36]>
        FSTP    #<TN t509[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t509[FR1]>

VOP */DOUBLE-FLOAT t506[FR0] t509[FR1] => t510[FR1] 
        FMUL-STI        #<TN t510[FR1]>
        WAIT

L286:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t447[ECX] {1} => t511[FR0] 
        FSTP    #<TN t511[FR0]>
        FLDD    DWORD PTR [ECX+9]

L287:

VOP MOVE-TO-DOUBLE '1.0536712127723509d-8!507[Const36]>t512[EDX] => t513[FR2] 
        MOV     #<TN t512[EDX]>, #<TN '1.0536712127723509d-8!507[Const36]>
        FSTP    #<TN t513[FR2]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t513[FR2]>

VOP */DOUBLE-FLOAT t511[FR0] t513[FR2] => t514[FR2] 
        FMUL-STI        #<TN t514[FR2]>
        WAIT

L288:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t447[ECX] {2} => t515[FR0] 
        FSTP    #<TN t515[FR0]>
        FLDD    DWORD PTR [ECX+17]

L289:

VOP MOVE-TO-DOUBLE '1.0536712127723509d-8!507[Const36]>t516[ECX] => t517[FR3] 
        MOV     #<TN t516[ECX]>, #<TN '1.0536712127723509d-8!507[Const36]>
        FSTP    #<TN t517[FR3]>
        FLDD    DWORD PTR [ECX+1]
        FXCH    #<TN t517[FR3]>

VOP */DOUBLE-FLOAT t515[FR0] t517[FR3] => t518[FR0] 
        FMULD   #<TN t517[FR3]>
        WAIT

L290:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t519[EDX] '3!153>t520[EBX]
                            '6!155>t521[ESI]
                            => t522[ECX] 
        MOV     #<TN t519[EDX]>, 214
        MOV     #<TN t520[EBX]>, 12
        MOV     #<TN t521[ESI]>, 24
        LEA     #<TN t522[ECX]>, BYTE PTR [ESI+15]
        AND     #<TN t522[ECX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t522[ECX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t522[ECX]>, DWORD PTR [+36]
        JMP     BE, L291
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_ecx
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L292
L291:
        FS-SEGMENT-PREFIX
        XOR     #<TN t522[ECX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t522[ECX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t522[ECX]>, DWORD PTR [+32]
L292:
        LEA     #<TN t522[ECX]>, BYTE PTR [ECX+7]
        MOV     DWORD PTR [ECX-7], #<TN t519[EDX]>
        MOV     DWORD PTR [ECX-3], #<TN t520[EBX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L293
        BREAK   9
L293:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t522[ECX] t510[FR1]
                                                {0}
                                                => t523[FR1] 
        FXCH    #<TN t510[FR1]>
        FSTD    DWORD PTR [ECX+1]
        FXCH    #<TN t510[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t522[ECX] t514[FR2]
                                                {1}
                                                => t524[FR2] 
        FXCH    #<TN t514[FR2]>
        FSTD    DWORD PTR [ECX+9]
        FXCH    #<TN t514[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t522[ECX] t518[FR0]
                                                {2}
                                                => t525[FR0] 
        FSTD    DWORD PTR [ECX+17]

L294:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t526[EBX] 
        MOV     #<TN t526[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG t502[EAX] t526[EBX] => t527[EDX] 
        MOV     #<TN t527[EDX]>, #<TN t502[EAX]>

VOP MOVE-ARG t522[ECX] t526[EBX] => t528[EDI] 
        MOV     #<TN t528[EDI]>, #<TN t522[ECX]>

VOP CALL-NAMED t526[EBX] t529[Const37]>t530[EAX] t527[EDX] t528[EDI]
               {# 2 1 NIL}
               => t531[EDX] 
        MOV     #<TN t530[EAX]>, #<TN t529[Const37]>
L295:
        MOV     #<TN t532[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t526[EBX]>
L296:
L297:
        CALL    DWORD PTR [EAX+5]
L298:
        JMP     NC, L299
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L299:
L300:

VOP MOVE t531[EDX] => t533[EBX] 
        MOV     #<TN t533[EBX]>, #<TN t531[EDX]>

L301:

VOP CURRENT-FP => t534[ESI] 
        MOV     #<TN t534[ESI]>, #<TN t98[EBP]>

VOP ALLOCATE-FRAME {#} => t535[EAX] t536[IGNORE-ME] 
        MOV     #<TN t535[EAX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 192

VOP MOVE-ARG SCENE!427[S4]>t537[ECX] t535[EAX] => SCENE!538[S40] 
        MOV     #<TN t537[ECX]>, #<TN SCENE!427[S4]>
        MOV     DWORD PTR [EAX-164], #<TN t537[ECX]>

VOP MOVE-ARG #:G1!219[S15]>t539[EDX] t535[EAX] => t540[EDX] 
        MOV     #<TN t540[EDX]>, #<TN #:G1!219[S15]>

VOP MOVE-ARG t534[ESI] t535[EAX] => t541[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t534[ESI]>

VOP KNOWN-CALL-LOCAL t535[EAX] t536[IGNORE-ME] SCENE!538[S40] t540[EDX]
                     t542[EBX] t541[S0]
                     {# # #}
                     => t543[EAX] 
L302:
        MOV     #<TN t98[EBP]>, #<TN t535[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L303)
L304:
        JMP     L305
L303:
L306:
L307:

L308:

VOP IF-EQ t543[EAX] 'NIL!292 {# NIL} 
        CMP     #<TN t543[EAX]>, 134217739
        JMP     E, L309

L310:

VOP DOUBLE-MOVE '0.0d0!158>t544[FR0] => t451[FR0] 
        FSTP    #<TN t544[FR0]>
        FLDZ

VOP BRANCH {#} 
        JMP     L242

L309:

VOP DOUBLE-MOVE t471[S5]>t545[FR0] => t451[FR0] 
        FSTP    #<TN t545[FR0]>
        FLDD    DWORD PTR [EBP-28]

VOP BRANCH {#} 
        JMP     L242

L166:
L311:

VOP VALUE-CELL-SET #:G1934!281[S34]>t546[EAX] 'NIL!305>t547[ECX] 
        MOV     #<TN t546[EAX]>, #<TN #:G1934!281[S34]>
        MOV     #<TN t547[ECX]>, 134217739
        MOV     DWORD PTR [EAX-3], #<TN t547[ECX]>

L312:

VOP UNLINK-UNWIND-PROTECT 
        MOV     #<TN t548[EAX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     #<TN t548[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t548[EAX]>, DWORD PTR [EAX+0]
        MOV     #<TN t549[ECX]>, DWORD PTR [+134217976]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [ECX+0], #<TN t548[EAX]>

VOP CURRENT-FP => t550[EBX] 
        MOV     #<TN t550[EBX]>, #<TN t98[EBP]>

VOP ALLOCATE-FRAME {#} => t551[ECX] t552[IGNORE-ME] 
        MOV     #<TN t551[ECX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 192

VOP MOVE-ARG #:G1934!281[S34]>t553[EDX] t551[ECX] => t554[EDX] 
        MOV     #<TN t554[EDX]>, #<TN #:G1934!281[S34]>

VOP MOVE-ARG S!277[S35]>t555[EAX] t551[ECX] => t556[EAX] 
        MOV     #<TN t556[EAX]>, #<TN S!277[S35]>

VOP MOVE-ARG t550[EBX] t551[ECX] => t557[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t550[EBX]>

VOP KNOWN-CALL-LOCAL t551[ECX] t552[IGNORE-ME] t554[EDX] t556[EAX] t557[S0]
                     {# # #}
                     => t558[EAX] 
L313:
        MOV     #<TN t98[EBP]>, #<TN t551[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L314)
L315:
        JMP     L316
L314:
L317:
L318:

L319:

VOP MOVE 'NIL!305 => t559[EDX] 
        MOV     #<TN t559[EDX]>, 134217739

VOP RETURN-SINGLE t560[S0] t561[S1] t559[EDX] 
L320:
        LEA     #<TN t95[ESP]>, DWORD PTR [EBP-8]
        CLC
        MOV     #<TN t98[EBP]>, #<TN t560[S0]>
        RET     4

L162:

VOP ALLOCATE-FULL-CALL-FRAME {2} => t562[EBX] 
        MOV     #<TN t562[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG #:LOOP-ACROSS-VECTOR-1944!308[S4]>t563[EDX] t562[EBX] => t564[EDX] 
        MOV     #<TN t564[EDX]>, #<TN #:LOOP-ACROSS-VECTOR-1944!308[S4]>

VOP MOVE-ARG #:LOOP-ACROSS-INDEX-1945!311[S3]>t565[EDI] t562[EBX] => t566[EDI] 
        MOV     #<TN t566[EDI]>, #<TN #:LOOP-ACROSS-INDEX-1945!311[S3]>

VOP CALL-NAMED t562[EBX] t567[Const38]>t568[EAX] t564[EDX] t566[EDI]
               {# 2 1 NIL}
               => t569[EDX] 
        MOV     #<TN t568[EAX]>, #<TN t567[Const38]>
L321:
        MOV     #<TN t570[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t562[EBX]>
L322:
L323:
        CALL    DWORD PTR [EAX+5]
L324:
        JMP     NC, L325
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L325:
L326:

VOP MOVE t569[EDX] => t571[EAX] 
        MOV     #<TN t571[EAX]>, #<TN t569[EDX]>

VOP FAST-+-C/FIXNUM=>FIXNUM #:LOOP-ACROSS-INDEX-1945!311[S3] {1} => t572[ECX] 
        MOV     #<TN t572[ECX]>, #<TN #:LOOP-ACROSS-INDEX-1945!311[S3]>
        ADD     #<TN t572[ECX]>, 4

VOP MOVE t572[ECX] => #:LOOP-ACROSS-INDEX-1945!311[S3]<t573[ECX] 
        MOV     #<TN #:LOOP-ACROSS-INDEX-1945!311[S3]>, #<TN t572[ECX]>

VOP MOVE-TO-CHARACTER t574[EAX] => t575[EAX] 
        SHR     #<TN t575[EAX]>, 8

VOP CHAR-CODE t575[EAX] => t576[EDX] 
        MOV     #<TN t576[EDX]>, #<TN t575[EAX]>

VOP MOVE-FROM-WORD/FIXNUM t576[EDX] => t577[EDX] 
        SHL     #<TN t577[EDX]>, 2

VOP ALLOCATE-FULL-CALL-FRAME {2} => t578[EBX] 
        MOV     #<TN t578[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG S!277[S35]>t579[EDI] t578[EBX] => t580[EDI] 
        MOV     #<TN t580[EDI]>, #<TN S!277[S35]>

VOP CALL-NAMED t578[EBX] t581[Const32]>t582[EAX] t583[EDX] t580[EDI]
               {# 2 0 NIL}
               
        MOV     #<TN t582[EAX]>, #<TN t581[Const32]>
L327:
        MOV     #<TN t584[ECX]>, 8
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t578[EBX]>
L328:
L329:
        CALL    DWORD PTR [EAX+5]
L330:
        JMP     NC, L331
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L331:
L332:

VOP BRANCH {#} 
        JMP     L161

L333:

VOP UWP-ENTRY {#} => t585[EDX] t586[EBX] t587[ECX] 
L149:
L334:

VOP MOVE t585[EDX] => t588[S2]<t589[EDX] 
        MOV     #<TN t588[S2]>, #<TN t585[EDX]>

VOP MOVE t586[EBX] => t590[S3]<t591[EBX] 
        MOV     #<TN t590[S3]>, #<TN t586[EBX]>

VOP MOVE t587[ECX] => t592[S4]<t593[ECX] 
        MOV     #<TN t592[S4]>, #<TN t587[ECX]>

VOP RESTORE-DYNAMIC-STATE t3[S37]>t594[ECX] t4[S36]>t595[EDX] 
        MOV     #<TN t594[ECX]>, #<TN t3[S37]>
        MOV     #<TN t595[EDX]>, #<TN t4[S36]>
        MOV     #<TN t596[EAX]>, DWORD PTR [+134217944]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t594[ECX]>
        MOV     #<TN t596[EAX]>, DWORD PTR [+134218776]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EAX+0], #<TN t595[EDX]>

VOP UNBIND-TO-HERE t2[S38]>t597[ESI] 
        MOV     #<TN t597[ESI]>, #<TN t2[S38]>
        FS-SEGMENT-PREFIX
        MOV     #<TN t598[EDX]>, DWORD PTR [+12]
        CMP     #<TN t597[ESI]>, #<TN t598[EDX]>
        JMP     E, L335
L336:
        MOV     #<TN t599[EAX]>, DWORD PTR [EDX-4]
        OR      #<TN t599[EAX]>, #<TN t599[EAX]>
        JMP     Z, L337
        MOV     #<TN t600[ECX]>, DWORD PTR [EDX-8]
        MOV     #<TN t601[EBX]>, DWORD PTR [EAX+17]
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [EBX+0], #<TN t600[ECX]>
        MOV     DWORD PTR [EDX-4], 0
L337:
        MOV     DWORD PTR [EDX-8], 0
        SUB     #<TN t598[EDX]>, 8
        CMP     #<TN t597[ESI]>, #<TN t598[EDX]>
        JMP     NE, L336
        FS-SEGMENT-PREFIX
        MOV     DWORD PTR [+12], #<TN t598[EDX]>
L335:

L338:

VOP CURRENT-FP => t602[EBX] 
        MOV     #<TN t602[EBX]>, #<TN t98[EBP]>

VOP ALLOCATE-FRAME {#} => t603[ECX] t604[IGNORE-ME] 
        MOV     #<TN t603[ECX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 192

VOP MOVE-ARG #:G1934!281[S34]>t605[EDX] t603[ECX] => t554[EDX] 
        MOV     #<TN t554[EDX]>, #<TN #:G1934!281[S34]>

VOP MOVE-ARG S!277[S35]>t606[EAX] t603[ECX] => t556[EAX] 
        MOV     #<TN t556[EAX]>, #<TN S!277[S35]>

VOP MOVE-ARG t602[EBX] t603[ECX] => t557[S0] 
        MOV     DWORD PTR [ECX-4], #<TN t602[EBX]>

VOP KNOWN-CALL-LOCAL t603[ECX] t604[IGNORE-ME] t554[EDX] t556[EAX] t557[S0]
                     {# # #}
                     => t558[EAX] 
L339:
        MOV     #<TN t98[EBP]>, #<TN t603[ECX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L340)
L341:
        JMP     L316
L340:
L342:
L343:

VOP UNWIND t588[S2]>t607[EAX] t590[S3]>t608[EBX] t592[S4]>t609[ECX] 
        MOV     #<TN t607[EAX]>, #<TN t588[S2]>
        MOV     #<TN t608[EBX]>, #<TN t590[S3]>
        MOV     #<TN t609[ECX]>, #<TN t592[S4]>
        CALL    #S(SB-C:FIXUP :NAME UNWIND :FLAVOR ASSEMBLY-ROUTINE :OFFSET NIL)

L20:
in the elsewhere segment:
L344:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L345:

VOP ALLOCATE-FULL-CALL-FRAME {7} => t610[EBX] 
        MOV     #<TN t610[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 28

VOP MOVE-ARG 'SB-FORMAT:FORMAT-ERROR!611[Const39]>t612[EDX] t610[EBX]
             => t613[EDX] 
        MOV     #<TN t612[EDX]>, #<TN 'SB-FORMAT:FORMAT-ERROR!611[Const39]>

VOP MOVE-ARG ':COMPLAINT!614[Const40]>t615[EDI] t610[EBX] => t616[EDI] 
        MOV     #<TN t615[EDI]>, #<TN ':COMPLAINT!614[Const40]>

VOP MOVE-ARG '"required argument missing"!617[Const41]>t618[ESI] t610[EBX]
             => t619[ESI] 
        MOV     #<TN t618[ESI]>, #<TN '"required argument missing"!617[Const41]>

VOP MOVE-ARG ':CONTROL-STRING!620[Const42]>t621[EAX] t610[EBX] => t622[S3] 
        MOV     #<TN t621[EAX]>, #<TN ':CONTROL-STRING!620[Const42]>
        MOV     DWORD PTR [EBX-16], #<TN t621[EAX]>

VOP MOVE-ARG '"P5~%~A ~A~%255~%"!623[Const43]>t624[EAX] t610[EBX] => t625[S4] 
        MOV     #<TN t624[EAX]>, #<TN '"P5~%~A ~A~%255~%"!623[Const43]>
        MOV     DWORD PTR [EBX-20], #<TN t624[EAX]>

VOP MOVE-ARG ':OFFSET!626[Const44]>t627[EAX] t610[EBX] => t628[S5] 
        MOV     #<TN t627[EAX]>, #<TN ':OFFSET!626[Const44]>
        MOV     DWORD PTR [EBX-24], #<TN t627[EAX]>

VOP MOVE-ARG '8!629 t610[EBX] => t630[S6] 
        MOV     DWORD PTR [EBX-28], 32

VOP CALL-NAMED t610[EBX] t631[Const45]>t632[EAX] t613[EDX] t616[EDI] t619[ESI]
               t622[S3] t625[S4] t628[S5] t630[S6]
               {# 7 0 NIL}
               
        MOV     #<TN t632[EAX]>, #<TN t631[Const45]>
L346:
        MOV     #<TN t633[ECX]>, 28
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t610[EBX]>
L347:
L348:
        CALL    DWORD PTR [EAX+5]
L349:
        JMP     NC, L350
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L350:
L351:

L18:
in the elsewhere segment:
L352:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L353:

VOP ALLOCATE-FULL-CALL-FRAME {7} => t634[EBX] 
        MOV     #<TN t634[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 28

VOP MOVE-ARG 'SB-FORMAT:FORMAT-ERROR!611[Const39]>t635[EDX] t634[EBX]
             => t636[EDX] 
        MOV     #<TN t635[EDX]>, #<TN 'SB-FORMAT:FORMAT-ERROR!611[Const39]>

VOP MOVE-ARG ':COMPLAINT!614[Const40]>t637[EDI] t634[EBX] => t638[EDI] 
        MOV     #<TN t637[EDI]>, #<TN ':COMPLAINT!614[Const40]>

VOP MOVE-ARG '"required argument missing"!639[Const46]>t640[ESI] t634[EBX]
             => t641[ESI] 
        MOV     #<TN t640[ESI]>, #<TN '"required argument missing"!639[Const46]>

VOP MOVE-ARG ':CONTROL-STRING!620[Const42]>t642[EAX] t634[EBX] => t643[S3] 
        MOV     #<TN t642[EAX]>, #<TN ':CONTROL-STRING!620[Const42]>
        MOV     DWORD PTR [EBX-16], #<TN t642[EAX]>

VOP MOVE-ARG '"P5~%~A ~A~%255~%"!644[Const47]>t645[EAX] t634[EBX] => t646[S4] 
        MOV     #<TN t645[EAX]>, #<TN '"P5~%~A ~A~%255~%"!644[Const47]>
        MOV     DWORD PTR [EBX-20], #<TN t645[EAX]>

VOP MOVE-ARG ':OFFSET!626[Const44]>t647[EAX] t634[EBX] => t648[S5] 
        MOV     #<TN t647[EAX]>, #<TN ':OFFSET!626[Const44]>
        MOV     DWORD PTR [EBX-24], #<TN t647[EAX]>

VOP MOVE-ARG '5!649 t634[EBX] => t650[S6] 
        MOV     DWORD PTR [EBX-28], 20

VOP CALL-NAMED t634[EBX] t651[Const45]>t652[EAX] t636[EDX] t638[EDI] t641[ESI]
               t643[S3] t646[S4] t648[S5] t650[S6]
               {# 7 0 NIL}
               
        MOV     #<TN t652[EAX]>, #<TN t651[Const45]>
L354:
        MOV     #<TN t653[ECX]>, 28
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t634[EBX]>
L355:
L356:
        CALL    DWORD PTR [EAX+5]
L357:
        JMP     NC, L358
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L358:
L359:

L235:
in the elsewhere segment:
L360:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L361:

L362:

VOP INSTANCE-INDEX-REF SCENE!440[S42]>t654[EAX] '1!655 => t656[EDI] 
        MOV     #<TN t654[EAX]>, #<TN SCENE!440[S42]>
        MOV     #<TN t656[EDI]>, DWORD PTR [EAX+7]

VOP RAW-INSTANCE-REF/DOUBLE SCENE!440[S42]>t657[ECX] '0!310 => t658[FR3] 
        MOV     #<TN t657[ECX]>, #<TN SCENE!440[S42]>
        MOV     #<TN t659[EAX]>, DWORD PTR [ECX-1]
        SHR     #<TN t659[EAX]>, 8
        FSTP    #<TN t658[FR3]>
        FLDD    DWORD PTR [ECX+EAX*4-5]
        FXCH    #<TN t658[FR3]>

L363:
L364:
L365:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t656[EDI] {0} => t660[FR0] 
        FSTP    #<TN t660[FR0]>
        FLDD    DWORD PTR [EDI+1]

L366:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t445[ESI] {0} => t661[FR2] 
        FSTP    #<TN t661[FR2]>
        FLDD    DWORD PTR [ESI+1]
        FXCH    #<TN t661[FR2]>

L367:

VOP -/DOUBLE-FLOAT t660[FR0] t661[FR2] => t662[FR2] 
        FSUBR-STI       #<TN t662[FR2]>
        WAIT

L368:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t656[EDI] {1} => t663[FR0] 
        FSTP    #<TN t663[FR0]>
        FLDD    DWORD PTR [EDI+9]

L369:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t445[ESI] {1} => t664[FR4] 
        FSTP    #<TN t664[FR4]>
        FLDD    DWORD PTR [ESI+9]
        FXCH    #<TN t664[FR4]>

L370:

VOP -/DOUBLE-FLOAT t663[FR0] t664[FR4] => t665[FR4] 
        FSUBR-STI       #<TN t665[FR4]>
        WAIT

L371:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t656[EDI] {2} => t666[FR0] 
        FSTP    #<TN t666[FR0]>
        FLDD    DWORD PTR [EDI+17]

L372:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t445[ESI] {2} => t667[FR5] 
        FSTP    #<TN t667[FR5]>
        FLDD    DWORD PTR [ESI+17]
        FXCH    #<TN t667[FR5]>

L373:

VOP -/DOUBLE-FLOAT t666[FR0] t667[FR5] => t668[FR0] 
        FSUBD   #<TN t667[FR5]>
        WAIT

L374:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t669[ECX] '3!153>t670[EDX]
                            '6!155>t671[EBX]
                            => t672[EAX] 
        MOV     #<TN t669[ECX]>, 214
        MOV     #<TN t670[EDX]>, 12
        MOV     #<TN t671[EBX]>, 24
        LEA     #<TN t672[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t672[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t672[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t672[EAX]>, DWORD PTR [+36]
        JMP     BE, L375
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L376
L375:
        FS-SEGMENT-PREFIX
        XOR     #<TN t672[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t672[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t672[EAX]>, DWORD PTR [+32]
L376:
        LEA     #<TN t672[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t669[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t670[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L377
        BREAK   9
L377:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] t662[FR2]
                                                {0}
                                                => t673[FR2] 
        FXCH    #<TN t662[FR2]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t662[FR2]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] t665[FR4]
                                                {1}
                                                => t674[FR4] 
        FXCH    #<TN t665[FR4]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t665[FR4]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] t668[FR0]
                                                {2}
                                                => t675[FR0] 
        FSTD    DWORD PTR [EAX+17]

L378:
L379:
L380:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {0} => t676[FR0] 
        FSTP    #<TN t676[FR0]>
        FLDD    DWORD PTR [EAX+1]

L381:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t441[S6]>t677[ECX]
                                                {0}
                                                => t678[FR2] 
        MOV     #<TN t677[ECX]>, #<TN t441[S6]>
        FSTP    #<TN t678[FR2]>
        FLDD    DWORD PTR [ECX+1]
        FXCH    #<TN t678[FR2]>

L382:

VOP */DOUBLE-FLOAT t676[FR0] t678[FR2] => t679[FR2] 
        FMUL-STI        #<TN t679[FR2]>
        WAIT

L383:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {1} => t680[FR0] 
        FSTP    #<TN t680[FR0]>
        FLDD    DWORD PTR [EAX+9]

L384:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t441[S6]>t681[ECX]
                                                {1}
                                                => t682[FR4] 
        MOV     #<TN t681[ECX]>, #<TN t441[S6]>
        FSTP    #<TN t682[FR4]>
        FLDD    DWORD PTR [ECX+9]
        FXCH    #<TN t682[FR4]>

L385:

VOP */DOUBLE-FLOAT t680[FR0] t682[FR4] => t683[FR0] 
        FMULD   #<TN t682[FR4]>
        WAIT

VOP +/DOUBLE-FLOAT t679[FR2] t683[FR0] => t684[FR2] 
        FADD-STI        #<TN t684[FR2]>
        WAIT

L386:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {2} => t685[FR0] 
        FSTP    #<TN t685[FR0]>
        FLDD    DWORD PTR [EAX+17]

L387:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t441[S6]>t686[ECX]
                                                {2}
                                                => t687[FR4] 
        MOV     #<TN t686[ECX]>, #<TN t441[S6]>
        FSTP    #<TN t687[FR4]>
        FLDD    DWORD PTR [ECX+17]
        FXCH    #<TN t687[FR4]>

L388:

VOP */DOUBLE-FLOAT t685[FR0] t687[FR4] => t688[FR0] 
        FMULD   #<TN t687[FR4]>
        WAIT

VOP +/DOUBLE-FLOAT t684[FR2] t688[FR0] => t689[FR2] 
        FADD-STI        #<TN t689[FR2]>
        WAIT

L389:

VOP */DOUBLE-FLOAT t689[FR2] t689[FR2] => t690[FR4] 
        FSTP    #<TN t691[FR0]>
        FLD     #<TN t692[FR1]>
        FMULD   #<TN t689[FR2]>
        FST     #<TN t690[FR4]>

L390:
L391:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {0} => t693[FR0] 
        FSTP    #<TN t693[FR0]>
        FLDD    DWORD PTR [EAX+1]

L392:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {0} => t694[FR5] 
        FSTP    #<TN t694[FR5]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t694[FR5]>

L393:

VOP */DOUBLE-FLOAT t693[FR0] t694[FR5] => t695[FR5] 
        FMUL-STI        #<TN t695[FR5]>
        WAIT

L394:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {1} => t696[FR0] 
        FSTP    #<TN t696[FR0]>
        FLDD    DWORD PTR [EAX+9]

L395:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {1} => t697[FR6] 
        FSTP    #<TN t697[FR6]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t697[FR6]>

L396:

VOP */DOUBLE-FLOAT t696[FR0] t697[FR6] => t698[FR0] 
        FMULD   #<TN t697[FR6]>
        WAIT

VOP +/DOUBLE-FLOAT t695[FR5] t698[FR0] => t699[FR5] 
        FADD-STI        #<TN t699[FR5]>
        WAIT

L397:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {2} => t700[FR0] 
        FSTP    #<TN t700[FR0]>
        FLDD    DWORD PTR [EAX+17]

L398:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t672[EAX] {2} => t701[FR6] 
        FSTP    #<TN t701[FR6]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t701[FR6]>

L399:

VOP */DOUBLE-FLOAT t700[FR0] t701[FR6] => t702[FR0] 
        FMULD   #<TN t701[FR6]>
        WAIT

VOP +/DOUBLE-FLOAT t699[FR5] t702[FR0] => t703[FR0] 
        FADDD   #<TN t699[FR5]>
        WAIT

L400:

VOP -/DOUBLE-FLOAT t690[FR4] t703[FR0] => t704[FR4] 
        FSUB-STI        #<TN t704[FR4]>
        WAIT

VOP */DOUBLE-FLOAT t658[FR3] t658[FR3] => t705[FR0] 
        FSTP    #<TN t691[FR0]>
        FLD     #<TN t706[FR2]>
        FMULD   #<TN t658[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t704[FR4] t705[FR0] => t707[FR0] 
        FADDD   #<TN t704[FR4]>
        WAIT

VOP <0/DOUBLE-FLOAT t707[FR0] {# T 0.0d0} 
L401:
        FTST
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     NE, L402

L403:

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!433[Const35]>t708[EAX] => t709[FR2] 
        MOV     #<TN t708[EAX]>, #<TN '1.7976931348623157d308!433[Const35]>
        FSTP    #<TN t709[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t709[FR2]>

L404:

VOP <DOUBLE-FLOAT t709[FR2] LAM!444[FR1] {# T} 
        FSTP    #<TN t691[FR0]>
        FLD     #<TN t710[FR1]>
        FCOMD   #<TN LAM!444[FR1]>
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     NE, L405

L406:

VOP INSTANCE-INDEX-REF SCENE!440[S42]>t711[EAX] '0!310 => t712[EAX] 
        MOV     #<TN t711[EAX]>, #<TN SCENE!440[S42]>
        MOV     #<TN t712[EAX]>, DWORD PTR [EAX+3]

VOP IF-EQ t712[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!713[Const48]>t714[ECX]
          {# NIL}
          
        CMP     #<TN t712[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!713[Const48]>
        JMP     E, L407

L408:

VOP INSTANCE-INDEX-REF t712[EAX] '12!715 => t716[S2]<t717[ECX] 
        MOV     #<TN t717[ECX]>, DWORD PTR [EAX+51]
        MOV     #<TN t716[S2]>, #<TN t717[ECX]>

VOP FAST-IF->-C/FIXNUM t716[S2] {# NIL 3} 
        CMP     #<TN t716[S2]>, 12
        JMP     G, L409

L410:
L411:
L412:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t441[S6]>t718[EAX]
                                                {0}
                                                => t719[FR0] 
        MOV     #<TN t718[EAX]>, #<TN t441[S6]>
        FSTP    #<TN t719[FR0]>
        FLDD    DWORD PTR [EAX+1]

L413:

VOP */DOUBLE-FLOAT t709[FR2] t719[FR0] => t720[FR1] 
        FMULD   #<TN t709[FR2]>
        FST     #<TN t720[FR1]>

L414:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t441[S6]>t721[EAX]
                                                {1}
                                                => t722[FR0] 
        MOV     #<TN t721[EAX]>, #<TN t441[S6]>
        FSTP    #<TN t722[FR0]>
        FLDD    DWORD PTR [EAX+9]

L415:

VOP */DOUBLE-FLOAT t709[FR2] t722[FR0] => t723[FR3] 
        FMULD   #<TN t709[FR2]>
        FST     #<TN t723[FR3]>

L416:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t441[S6]>t724[EAX]
                                                {2}
                                                => t725[FR0] 
        MOV     #<TN t724[EAX]>, #<TN t441[S6]>
        FSTP    #<TN t725[FR0]>
        FLDD    DWORD PTR [EAX+17]

L417:

VOP */DOUBLE-FLOAT t709[FR2] t725[FR0] => t726[FR0] 
        FMULD   #<TN t709[FR2]>
        WAIT

L418:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t727[ECX] '3!153>t728[EDX]
                            '6!155>t729[EBX]
                            => t730[EAX] 
        MOV     #<TN t727[ECX]>, 214
        MOV     #<TN t728[EDX]>, 12
        MOV     #<TN t729[EBX]>, 24
        LEA     #<TN t730[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t730[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t730[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t730[EAX]>, DWORD PTR [+36]
        JMP     BE, L419
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L420
L419:
        FS-SEGMENT-PREFIX
        XOR     #<TN t730[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t730[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t730[EAX]>, DWORD PTR [+32]
L420:
        LEA     #<TN t730[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t727[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t728[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L421
        BREAK   9
L421:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t730[EAX] t720[FR1]
                                                {0}
                                                => t731[FR1] 
        FXCH    #<TN t720[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t720[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t730[EAX] t723[FR3]
                                                {1}
                                                => t732[FR3] 
        FXCH    #<TN t723[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t723[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t730[EAX] t726[FR0]
                                                {2}
                                                => t733[FR0] 
        FSTD    DWORD PTR [EAX+17]

L422:
L423:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t445[ESI] {0} => t734[FR0] 
        FSTP    #<TN t734[FR0]>
        FLDD    DWORD PTR [ESI+1]

L424:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t730[EAX] {0} => t735[FR1] 
        FSTP    #<TN t735[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t735[FR1]>

L425:

VOP +/DOUBLE-FLOAT t734[FR0] t735[FR1] => t736[FR1] 
        FADD-STI        #<TN t736[FR1]>
        WAIT

L426:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t445[ESI] {1} => t737[FR0] 
        FSTP    #<TN t737[FR0]>
        FLDD    DWORD PTR [ESI+9]

L427:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t730[EAX] {1} => t738[FR3] 
        FSTP    #<TN t738[FR3]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t738[FR3]>

L428:

VOP +/DOUBLE-FLOAT t737[FR0] t738[FR3] => t739[FR3] 
        FADD-STI        #<TN t739[FR3]>
        WAIT

L429:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t445[ESI] {2} => t740[FR0] 
        FSTP    #<TN t740[FR0]>
        FLDD    DWORD PTR [ESI+17]

L430:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t730[EAX] {2} => t741[FR4] 
        FSTP    #<TN t741[FR4]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t741[FR4]>

L431:

VOP +/DOUBLE-FLOAT t740[FR0] t741[FR4] => t742[FR0] 
        FADDD   #<TN t741[FR4]>
        WAIT

L432:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t743[ECX] '3!153>t744[EDX]
                            '6!155>t745[EBX]
                            => t746[EAX] 
        MOV     #<TN t743[ECX]>, 214
        MOV     #<TN t744[EDX]>, 12
        MOV     #<TN t745[EBX]>, 24
        LEA     #<TN t746[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t746[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t746[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t746[EAX]>, DWORD PTR [+36]
        JMP     BE, L433
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L434
L433:
        FS-SEGMENT-PREFIX
        XOR     #<TN t746[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t746[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t746[EAX]>, DWORD PTR [+32]
L434:
        LEA     #<TN t746[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t743[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t744[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L435
        BREAK   9
L435:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t746[EAX] t736[FR1]
                                                {0}
                                                => t747[FR1] 
        FXCH    #<TN t736[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t736[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t746[EAX] t739[FR3]
                                                {1}
                                                => t748[FR3] 
        FXCH    #<TN t739[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t739[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t746[EAX] t742[FR0]
                                                {2}
                                                => t749[FR0] 
        FSTD    DWORD PTR [EAX+17]

L436:
L437:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t746[EAX] {0} => t750[FR0] 
        FSTP    #<TN t750[FR0]>
        FLDD    DWORD PTR [EAX+1]

L438:
L439:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t656[EDI] {0} => t751[FR1] 
        FSTP    #<TN t751[FR1]>
        FLDD    DWORD PTR [EDI+1]
        FXCH    #<TN t751[FR1]>

L440:

VOP -/DOUBLE-FLOAT t750[FR0] t751[FR1] => t752[FR1] 
        FSUBR-STI       #<TN t752[FR1]>
        WAIT

L441:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t746[EAX] {1} => t753[FR0] 
        FSTP    #<TN t753[FR0]>
        FLDD    DWORD PTR [EAX+9]

L442:
L443:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t656[EDI] {1} => t754[FR3] 
        FSTP    #<TN t754[FR3]>
        FLDD    DWORD PTR [EDI+9]
        FXCH    #<TN t754[FR3]>

L444:

VOP -/DOUBLE-FLOAT t753[FR0] t754[FR3] => t755[FR3] 
        FSUBR-STI       #<TN t755[FR3]>
        WAIT

L445:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t746[EAX] {2} => t756[FR0] 
        FSTP    #<TN t756[FR0]>
        FLDD    DWORD PTR [EAX+17]

L446:
L447:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t656[EDI] {2} => t757[FR4] 
        FSTP    #<TN t757[FR4]>
        FLDD    DWORD PTR [EDI+17]
        FXCH    #<TN t757[FR4]>

L448:

VOP -/DOUBLE-FLOAT t756[FR0] t757[FR4] => t758[FR0] 
        FSUBD   #<TN t757[FR4]>
        WAIT

L449:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t759[ECX] '3!153>t760[EDX]
                            '6!155>t761[EBX]
                            => t762[EAX] 
        MOV     #<TN t759[ECX]>, 214
        MOV     #<TN t760[EDX]>, 12
        MOV     #<TN t761[EBX]>, 24
        LEA     #<TN t762[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t762[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t762[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t762[EAX]>, DWORD PTR [+36]
        JMP     BE, L450
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L451
L450:
        FS-SEGMENT-PREFIX
        XOR     #<TN t762[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t762[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t762[EAX]>, DWORD PTR [+32]
L451:
        LEA     #<TN t762[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t759[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t760[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L452
        BREAK   9
L452:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] t752[FR1]
                                                {0}
                                                => t763[FR1] 
        FXCH    #<TN t752[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t752[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] t755[FR3]
                                                {1}
                                                => t764[FR3] 
        FXCH    #<TN t755[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t755[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] t758[FR0]
                                                {2}
                                                => t765[FR0] 
        FSTD    DWORD PTR [EAX+17]

L453:
L454:
L455:
L456:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {0} => t766[FR0] 
        FSTP    #<TN t766[FR0]>
        FLDD    DWORD PTR [EAX+1]

L457:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {0} => t767[FR1] 
        FSTP    #<TN t767[FR1]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t767[FR1]>

L458:

VOP */DOUBLE-FLOAT t766[FR0] t767[FR1] => t768[FR1] 
        FMUL-STI        #<TN t768[FR1]>
        WAIT

L459:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {1} => t769[FR0] 
        FSTP    #<TN t769[FR0]>
        FLDD    DWORD PTR [EAX+9]

L460:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {1} => t770[FR3] 
        FSTP    #<TN t770[FR3]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t770[FR3]>

L461:

VOP */DOUBLE-FLOAT t769[FR0] t770[FR3] => t771[FR0] 
        FMULD   #<TN t770[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t768[FR1] t771[FR0] => t772[FR1] 
        FADD-STI        #<TN t772[FR1]>
        WAIT

L462:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {2} => t773[FR0] 
        FSTP    #<TN t773[FR0]>
        FLDD    DWORD PTR [EAX+17]

L463:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {2} => t774[FR3] 
        FSTP    #<TN t774[FR3]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t774[FR3]>

L464:

VOP */DOUBLE-FLOAT t773[FR0] t774[FR3] => t775[FR0] 
        FMULD   #<TN t774[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t772[FR1] t775[FR0] => t776[FR0] 
        FADDD   #<TN t772[FR1]>
        WAIT

L465:

VOP FSQRT t776[FR0] => t777[FR0] 
L466:
        FSQRT
        WAIT

L467:

VOP //DOUBLE-FLOAT '1.0d0!170>t778[FR1] t777[FR0] => t779[FR1] 
        FSTP    #<TN t778[FR1]>
        FLD1
        FXCH    #<TN t778[FR1]>
        FDIV-STI        #<TN t779[FR1]>
        WAIT

L468:
L469:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {0} => t780[FR0] 
        FSTP    #<TN t780[FR0]>
        FLDD    DWORD PTR [EAX+1]

L470:

VOP */DOUBLE-FLOAT t779[FR1] t780[FR0] => t781[FR3] 
        FMULD   #<TN t779[FR1]>
        FST     #<TN t781[FR3]>

L471:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {1} => t782[FR0] 
        FSTP    #<TN t782[FR0]>
        FLDD    DWORD PTR [EAX+9]

L472:

VOP */DOUBLE-FLOAT t779[FR1] t782[FR0] => t783[FR4] 
        FMULD   #<TN t779[FR1]>
        FST     #<TN t783[FR4]>

L473:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t762[EAX] {2} => t784[FR0] 
        FSTP    #<TN t784[FR0]>
        FLDD    DWORD PTR [EAX+17]

L474:

VOP */DOUBLE-FLOAT t779[FR1] t784[FR0] => t785[FR0] 
        FMULD   #<TN t779[FR1]>
        WAIT

L475:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t786[ECX] '3!153>t787[EDX]
                            '6!155>t788[EBX]
                            => t789[EAX] 
        MOV     #<TN t786[ECX]>, 214
        MOV     #<TN t787[EDX]>, 12
        MOV     #<TN t788[EBX]>, 24
        LEA     #<TN t789[EAX]>, BYTE PTR [EBX+15]
        AND     #<TN t789[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t789[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t789[EAX]>, DWORD PTR [+36]
        JMP     BE, L476
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L477
L476:
        FS-SEGMENT-PREFIX
        XOR     #<TN t789[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t789[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t789[EAX]>, DWORD PTR [+32]
L477:
        LEA     #<TN t789[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t786[ECX]>
        MOV     DWORD PTR [EAX-3], #<TN t787[EDX]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L478
        BREAK   9
L478:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t789[EAX] t781[FR3]
                                                {0}
                                                => t790[FR3] 
        FXCH    #<TN t781[FR3]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t781[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t789[EAX] t783[FR4]
                                                {1}
                                                => t791[FR4] 
        FXCH    #<TN t783[FR4]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t783[FR4]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t789[EAX] t785[FR0]
                                                {2}
                                                => t792[FR0] 
        FSTD    DWORD PTR [EAX+17]

L479:

VOP DOUBLE-MOVE t709[FR2] => t793[FR1] 
        FXCH    #<TN t709[FR2]>
        FSTD    #<TN t793[FR1]>
        FXCH    #<TN t709[FR2]>

VOP MOVE t789[EAX] => t794[ECX] 
        MOV     #<TN t794[ECX]>, #<TN t789[EAX]>

L480:

VOP KNOWN-RETURN t443[S0] t795[S1] t446[FR1] t447[ECX] {#} 
L481:
        LEA     #<TN t95[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t98[EBP]>, #<TN t443[S0]>
        RET     4
L482:

L409:

VOP INSTANCE-INDEX-REF t712[EAX] '11!796 => t797[EAX] 
        MOV     #<TN t797[EAX]>, DWORD PTR [EAX+47]

VOP DATA-VECTOR-REF/SIMPLE-VECTOR t797[EAX] '3!153 => t798[EAX] 
        MOV     #<TN t798[EAX]>, DWORD PTR [EAX+13]

VOP IF-EQ t798[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!713[Const48]>t799[ECX]
          {# T}
          
        CMP     #<TN t798[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!713[Const48]>
        JMP     NE, L410

L407:

VOP INSTANCE-INDEX-REF SCENE!440[S42]>t800[EAX] '2!801 => t802[EDI] 
        MOV     #<TN t800[EAX]>, #<TN SCENE!440[S42]>
        MOV     #<TN t802[EDI]>, DWORD PTR [EAX+11]

L483:

VOP BRANCH {#} 
        JMP     L484

L485:

VOP SLOT #:N-LIST1972!803[EDI] {CAR 0 3} => t804[EDX] 
        MOV     #<TN t804[EDX]>, DWORD PTR [EDI-3]

VOP SLOT #:N-LIST1972!803[EDI] {CDR 1 3} => t805[EDI] 
        MOV     #<TN t805[EDI]>, DWORD PTR [EDI+1]

L486:

VOP MOVE-OPERAND #:N-LIST1972!803[EDI] {SB-VM::STORE-STACK} => t806[S3] 
        MOV     #<TN t806[S3]>, #<TN #:N-LIST1972!803[EDI]>

VOP MOVE-OPERAND t445[ESI] {SB-VM::STORE-STACK} => t807[S5] 
        MOV     #<TN t807[S5]>, #<TN t445[ESI]>

VOP MOVE NORMAL!438[S41]>t808[ECX] => t809[ECX] 
        MOV     #<TN t808[ECX]>, #<TN NORMAL!438[S41]>

VOP CURRENT-FP => t810[S2] 
        MOV     #<TN t810[S2]>, #<TN t98[EBP]>

VOP ALLOCATE-FRAME {#} => t811[EAX] t812[IGNORE-ME] 
        MOV     #<TN t811[EAX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 192

VOP MOVE-ARG t809[ECX] t811[EAX] => NORMAL!438[S41] 
        MOV     DWORD PTR [EAX-168], #<TN t809[ECX]>

VOP MOVE-ARG t804[EDX] t811[EAX] => SCENE!440[S42] 
        MOV     DWORD PTR [EAX-172], #<TN t804[EDX]>

VOP MOVE-ARG t441[S6]>t813[ECX] t811[EAX] => t441[S6] 
        MOV     #<TN t813[ECX]>, #<TN t441[S6]>
        MOV     DWORD PTR [EAX-28], #<TN t813[ECX]>

VOP MOVE-ARG t810[S2]>t814[ECX] t811[EAX] => t443[S0] 
        MOV     #<TN t814[ECX]>, #<TN t810[S2]>
        MOV     DWORD PTR [EAX-4], #<TN t814[ECX]>

VOP KNOWN-CALL-LOCAL t811[EAX] t812[IGNORE-ME] LAM!444[FR1] NORMAL!438[S41]
                     SCENE!440[S42] t441[S6] t445[ESI] t443[S0]
                     {# # #}
                     => t446[FR1] t447[ECX] 
L487:
        MOV     #<TN t98[EBP]>, #<TN t811[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L488)
L489:
        JMP     L235
L488:
L490:
L491:

VOP MOVE-OPERAND t807[S5] {SB-VM::LOAD-STACK} => t445[ESI] 
        MOV     #<TN t445[ESI]>, #<TN t807[S5]>

VOP MOVE-OPERAND t806[S3] {SB-VM::LOAD-STACK} => #:N-LIST1972!803[EDI] 
        MOV     #<TN #:N-LIST1972!803[EDI]>, #<TN t806[S3]>

VOP MOVE t447[ECX] => NORMAL!438[S41]<t815[ECX] 
        MOV     #<TN NORMAL!438[S41]>, #<TN t447[ECX]>

L484:

VOP IF-EQ #:N-LIST1972!803[EDI] 'NIL!292 {# T} 
        CMP     #<TN #:N-LIST1972!803[EDI]>, 134217739
        JMP     NE, L485

L492:

VOP MOVE NORMAL!438[S41]>t816[ECX] => t794[ECX] 
        MOV     #<TN t816[ECX]>, #<TN NORMAL!438[S41]>

VOP BRANCH {#} 
        JMP     L480

L405:

VOP MOVE NORMAL!438[S41]>t817[ECX] => t794[ECX] 
        MOV     #<TN t817[ECX]>, #<TN NORMAL!438[S41]>

VOP BRANCH {#} 
        JMP     L480

L402:

VOP FSQRT t707[FR0] => t818[FR3] 
L493:
        FSQRT
        FST     #<TN t818[FR3]>

VOP +/DOUBLE-FLOAT t689[FR2] t818[FR3] => t819[FR4] 
        FSTP    #<TN t691[FR0]>
        FLD     #<TN t820[FR1]>
        FADDD   #<TN t818[FR3]>
        FST     #<TN t819[FR4]>

VOP -/DOUBLE-FLOAT t689[FR2] t818[FR3] => t821[FR0] 
        FSTP    #<TN t691[FR0]>
        FLD     #<TN t822[FR1]>
        FSUBD   #<TN t818[FR3]>
        WAIT

VOP <0/DOUBLE-FLOAT t819[FR4] {# T 0.0d0} 
L494:
        FXCH    #<TN t819[FR4]>
        FTST
        FXCH    #<TN t819[FR4]>
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     NE, L495

L496:

VOP MOVE-TO-DOUBLE '1.7976931348623157d308!433[Const35]>t823[EAX] => t709[FR2] 
        MOV     #<TN t823[EAX]>, #<TN '1.7976931348623157d308!433[Const35]>
        FSTP    #<TN t709[FR2]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t709[FR2]>

VOP BRANCH {#} 
        JMP     L404

L495:

VOP >0/DOUBLE-FLOAT t821[FR0] {# NIL 0.0d0} 
L497:
        FTST
        FNSTSW
        AND     #<TN t324[AH]>, 69
        JMP     E, L498

L499:

VOP DOUBLE-MOVE t819[FR4] => t709[FR2] 
        FXCH    #<TN t819[FR4]>
        FSTD    #<TN t709[FR2]>
        FXCH    #<TN t819[FR4]>

VOP BRANCH {#} 
        JMP     L404

L498:

VOP DOUBLE-MOVE t821[FR0] => t709[FR2] 
        FSTD    #<TN t709[FR2]>

VOP BRANCH {#} 
        JMP     L404

L305:
in the elsewhere segment:
L500:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L501:

L502:

VOP INSTANCE-INDEX-REF SCENE!538[S40]>t824[EAX] '1!655 => t825[ESI] 
        MOV     #<TN t824[EAX]>, #<TN SCENE!538[S40]>
        MOV     #<TN t825[ESI]>, DWORD PTR [EAX+7]

VOP RAW-INSTANCE-REF/DOUBLE SCENE!538[S40]>t826[ECX] '0!310 => t827[FR2] 
        MOV     #<TN t826[ECX]>, #<TN SCENE!538[S40]>
        MOV     #<TN t828[EAX]>, DWORD PTR [ECX-1]
        SHR     #<TN t828[EAX]>, 8
        FSTP    #<TN t827[FR2]>
        FLDD    DWORD PTR [ECX+EAX*4-5]
        FXCH    #<TN t827[FR2]>

L503:
L504:
L505:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t825[ESI] {0} => t829[FR0] 
        FSTP    #<TN t829[FR0]>
        FLDD    DWORD PTR [ESI+1]

L506:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t542[EBX] {0} => t830[FR1] 
        FSTP    #<TN t830[FR1]>
        FLDD    DWORD PTR [EBX+1]
        FXCH    #<TN t830[FR1]>

L507:

VOP -/DOUBLE-FLOAT t829[FR0] t830[FR1] => t831[FR1] 
        FSUBR-STI       #<TN t831[FR1]>
        WAIT

L508:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t825[ESI] {1} => t832[FR0] 
        FSTP    #<TN t832[FR0]>
        FLDD    DWORD PTR [ESI+9]

L509:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t542[EBX] {1} => t833[FR3] 
        FSTP    #<TN t833[FR3]>
        FLDD    DWORD PTR [EBX+9]
        FXCH    #<TN t833[FR3]>

L510:

VOP -/DOUBLE-FLOAT t832[FR0] t833[FR3] => t834[FR3] 
        FSUBR-STI       #<TN t834[FR3]>
        WAIT

L511:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t825[ESI] {2} => t835[FR0] 
        FSTP    #<TN t835[FR0]>
        FLDD    DWORD PTR [ESI+17]

L512:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t542[EBX] {2} => t836[FR4] 
        FSTP    #<TN t836[FR4]>
        FLDD    DWORD PTR [EBX+17]
        FXCH    #<TN t836[FR4]>

L513:

VOP -/DOUBLE-FLOAT t835[FR0] t836[FR4] => t837[FR0] 
        FSUBD   #<TN t836[FR4]>
        WAIT

L514:

VOP ALLOCATE-VECTOR-ON-HEAP '214!151>t838[ESI] '3!153>t839[EDI]
                            '6!155>t840[ECX]
                            => t841[EAX] 
        MOV     #<TN t838[ESI]>, 214
        MOV     #<TN t839[EDI]>, 12
        MOV     #<TN t840[ECX]>, 24
        LEA     #<TN t841[EAX]>, BYTE PTR [ECX+15]
        AND     #<TN t841[EAX]>, -8
        FS-SEGMENT-PREFIX
        OR      BYTE PTR [+72], 4
        FS-SEGMENT-PREFIX
        ADD     #<TN t841[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        CMP     #<TN t841[EAX]>, DWORD PTR [+36]
        JMP     BE, L515
        CALL    #S(SB-C:FIXUP
                   :NAME alloc_overflow_eax
                   :FLAVOR FOREIGN
                   :OFFSET NIL)
        JMP-SHORT       L516
L515:
        FS-SEGMENT-PREFIX
        XOR     #<TN t841[EAX]>, DWORD PTR [+32]
        FS-SEGMENT-PREFIX
        XOR     DWORD PTR [+32], #<TN t841[EAX]>
        FS-SEGMENT-PREFIX
        XOR     #<TN t841[EAX]>, DWORD PTR [+32]
L516:
        LEA     #<TN t841[EAX]>, BYTE PTR [EAX+7]
        MOV     DWORD PTR [EAX-7], #<TN t838[ESI]>
        MOV     DWORD PTR [EAX-3], #<TN t839[EDI]>
        FS-SEGMENT-PREFIX
        XOR     BYTE PTR [+72], 4
        JMP     Z, L517
        BREAK   9
L517:

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] t831[FR1]
                                                {0}
                                                => t842[FR1] 
        FXCH    #<TN t831[FR1]>
        FSTD    DWORD PTR [EAX+1]
        FXCH    #<TN t831[FR1]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] t834[FR3]
                                                {1}
                                                => t843[FR3] 
        FXCH    #<TN t834[FR3]>
        FSTD    DWORD PTR [EAX+9]
        FXCH    #<TN t834[FR3]>

VOP DATA-VECTOR-SET-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] t837[FR0]
                                                {2}
                                                => t844[FR0] 
        FSTD    DWORD PTR [EAX+17]

L518:
L519:
L520:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {0} => t845[FR0] 
        FSTP    #<TN t845[FR0]>
        FLDD    DWORD PTR [EAX+1]

L521:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t540[EDX] {0} => t846[FR1] 
        FSTP    #<TN t846[FR1]>
        FLDD    DWORD PTR [EDX+1]
        FXCH    #<TN t846[FR1]>

L522:

VOP */DOUBLE-FLOAT t845[FR0] t846[FR1] => t847[FR1] 
        FMUL-STI        #<TN t847[FR1]>
        WAIT

L523:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {1} => t848[FR0] 
        FSTP    #<TN t848[FR0]>
        FLDD    DWORD PTR [EAX+9]

L524:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t540[EDX] {1} => t849[FR3] 
        FSTP    #<TN t849[FR3]>
        FLDD    DWORD PTR [EDX+9]
        FXCH    #<TN t849[FR3]>

L525:

VOP */DOUBLE-FLOAT t848[FR0] t849[FR3] => t850[FR0] 
        FMULD   #<TN t849[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t847[FR1] t850[FR0] => t851[FR1] 
        FADD-STI        #<TN t851[FR1]>
        WAIT

L526:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {2} => t852[FR0] 
        FSTP    #<TN t852[FR0]>
        FLDD    DWORD PTR [EAX+17]

L527:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t540[EDX] {2} => t853[FR3] 
        FSTP    #<TN t853[FR3]>
        FLDD    DWORD PTR [EDX+17]
        FXCH    #<TN t853[FR3]>

L528:

VOP */DOUBLE-FLOAT t852[FR0] t853[FR3] => t854[FR0] 
        FMULD   #<TN t853[FR3]>
        WAIT

VOP +/DOUBLE-FLOAT t851[FR1] t854[FR0] => t855[FR1] 
        FADD-STI        #<TN t855[FR1]>
        WAIT

L529:

VOP */DOUBLE-FLOAT t855[FR1] t855[FR1] => t856[FR3] 
        FSTP    #<TN t691[FR0]>
        FLD     #<TN t857[FR0]>
        FMULD   #<TN t855[FR1]>
        FST     #<TN t856[FR3]>

L530:
L531:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {0} => t858[FR0] 
        FSTP    #<TN t858[FR0]>
        FLDD    DWORD PTR [EAX+1]

L532:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {0} => t859[FR4] 
        FSTP    #<TN t859[FR4]>
        FLDD    DWORD PTR [EAX+1]
        FXCH    #<TN t859[FR4]>

L533:

VOP */DOUBLE-FLOAT t858[FR0] t859[FR4] => t860[FR4] 
        FMUL-STI        #<TN t860[FR4]>
        WAIT

L534:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {1} => t861[FR0] 
        FSTP    #<TN t861[FR0]>
        FLDD    DWORD PTR [EAX+9]

L535:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {1} => t862[FR5] 
        FSTP    #<TN t862[FR5]>
        FLDD    DWORD PTR [EAX+9]
        FXCH    #<TN t862[FR5]>

L536:

VOP */DOUBLE-FLOAT t861[FR0] t862[FR5] => t863[FR0] 
        FMULD   #<TN t862[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t860[FR4] t863[FR0] => t864[FR4] 
        FADD-STI        #<TN t864[FR4]>
        WAIT

L537:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {2} => t865[FR0] 
        FSTP    #<TN t865[FR0]>
        FLDD    DWORD PTR [EAX+17]

L538:

VOP DATA-VECTOR-REF-C/SIMPLE-ARRAY-DOUBLE-FLOAT t841[EAX] {2} => t866[FR5] 
        FSTP    #<TN t866[FR5]>
        FLDD    DWORD PTR [EAX+17]
        FXCH    #<TN t866[FR5]>

L539:

VOP */DOUBLE-FLOAT t865[FR0] t866[FR5] => t867[FR0] 
        FMULD   #<TN t866[FR5]>
        WAIT

VOP +/DOUBLE-FLOAT t864[FR4] t867[FR0] => t868[FR0] 
        FADDD   #<TN t864[FR4]>
        WAIT

L540:

VOP -/DOUBLE-FLOAT t856[FR3] t868[FR0] => t869[FR3] 
        FSUB-STI        #<TN t869[FR3]>
        WAIT

VOP */DOUBLE-FLOAT t827[FR2] t827[FR2] => t870[FR0] 
        FSTP    #<TN t691[FR0]>
        FLD     #<TN t871[FR1]>
        FMULD   #<TN t827[FR2]>
        WAIT

VOP +/DOUBLE-FLOAT t869[FR3] t870[FR0] => t872[FR0] 
        FADDD   #<TN t869[FR3]>
        WAIT

VOP <0/DOUBLE-FLOAT t872[FR0] {# T 0.0d0} 
L541:
        FTST
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     NE, L542

L543:

VOP MOVE 'NIL!305 => t873[EAX] 
        MOV     #<TN t873[EAX]>, 134217739

L544:

VOP KNOWN-RETURN t541[S0] t874[S1] t543[EAX] {#} 
L545:
        LEA     #<TN t95[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t98[EBP]>, #<TN t541[S0]>
        RET     4
L546:

L542:

VOP FSQRT t872[FR0] => t875[FR0] 
L547:
        FSQRT
        WAIT

VOP +/DOUBLE-FLOAT t855[FR1] t875[FR0] => t876[FR0] 
        FADDD   #<TN t855[FR1]>
        WAIT

VOP <0/DOUBLE-FLOAT t876[FR0] {# NIL 0.0d0} 
L548:
        FTST
        FNSTSW
        AND     #<TN t324[AH]>, 69
        CMP     #<TN t324[AH]>, 1
        JMP     E, L543

L549:

VOP INSTANCE-INDEX-REF SCENE!538[S40]>t877[EAX] '0!310 => t878[EAX] 
        MOV     #<TN t877[EAX]>, #<TN SCENE!538[S40]>
        MOV     #<TN t878[EAX]>, DWORD PTR [EAX+3]

VOP IF-EQ t878[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!713[Const48]>t879[ECX]
          {# NIL}
          
        CMP     #<TN t878[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!713[Const48]>
        JMP     E, L550

L551:

VOP INSTANCE-INDEX-REF t878[EAX] '12!715 => t880[ESI] 
        MOV     #<TN t880[ESI]>, DWORD PTR [EAX+51]

VOP FAST-IF->-C/FIXNUM t880[ESI] {# NIL 3} 
        CMP     #<TN t880[ESI]>, 12
        JMP     G, L552

L553:

VOP MOVE 'T!279 => t873[EAX] 
        MOV     #<TN t873[EAX]>, 134217767

VOP BRANCH {#} 
        JMP     L544

L552:

VOP INSTANCE-INDEX-REF t878[EAX] '11!796 => t881[EAX] 
        MOV     #<TN t881[EAX]>, DWORD PTR [EAX+47]

VOP DATA-VECTOR-REF/SIMPLE-VECTOR t881[EAX] '3!153 => t882[EAX] 
        MOV     #<TN t882[EAX]>, DWORD PTR [EAX+13]

VOP IF-EQ t882[EAX]
          '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!713[Const48]>t883[ECX]
          {# T}
          
        CMP     #<TN t882[EAX]>, #<TN '#<SB-KERNEL:LAYOUT for GROUP {118C6559}>!713[Const48]>
        JMP     NE, L553

L550:

VOP INSTANCE-INDEX-REF SCENE!538[S40]>t884[EAX] '2!801 => t885[ESI] 
        MOV     #<TN t884[EAX]>, #<TN SCENE!538[S40]>
        MOV     #<TN t885[ESI]>, DWORD PTR [EAX+11]

L554:
L555:

VOP BRANCH {#} 
        JMP     L556

L557:

VOP MOVE-OPERAND #:INDEX2625!886[ESI] {SB-VM::STORE-STACK} => t887[S2] 
        MOV     #<TN t887[S2]>, #<TN #:INDEX2625!886[ESI]>

VOP MOVE-OPERAND t542[EBX] {SB-VM::STORE-STACK} => t888[S3] 
        MOV     #<TN t888[S3]>, #<TN t542[EBX]>

VOP MOVE-OPERAND t540[EDX] {SB-VM::STORE-STACK} => t889[S4] 
        MOV     #<TN t889[S4]>, #<TN t540[EDX]>

VOP SLOT #:INDEX2625!886[ESI] {CAR 0 3} => t890[ECX] 
        MOV     #<TN t890[ECX]>, DWORD PTR [ESI-3]

VOP CURRENT-FP => t891[EDI] 
        MOV     #<TN t891[EDI]>, #<TN t98[EBP]>

VOP ALLOCATE-FRAME {#} => t892[EAX] t893[IGNORE-ME] 
        MOV     #<TN t892[EAX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 192

VOP MOVE-ARG t890[ECX] t892[EAX] => SCENE!538[S40] 
        MOV     DWORD PTR [EAX-164], #<TN t890[ECX]>

VOP MOVE-ARG t891[EDI] t892[EAX] => t541[S0] 
        MOV     DWORD PTR [EAX-4], #<TN t891[EDI]>

VOP KNOWN-CALL-LOCAL t892[EAX] t893[IGNORE-ME] SCENE!538[S40] t540[EDX]
                     t542[EBX] t541[S0]
                     {# # #}
                     => t543[EAX] 
L558:
        MOV     #<TN t98[EBP]>, #<TN t892[EAX]>
        MOV     DWORD PTR [EBP-8], #S(SB-C:FIXUP
                                      :NAME NIL
                                      :FLAVOR CODE-OBJECT
                                      :OFFSET L559)
L560:
        JMP     L305
L559:
L561:
L562:

VOP MOVE-OPERAND t889[S4] {SB-VM::LOAD-STACK} => t540[EDX] 
        MOV     #<TN t540[EDX]>, #<TN t889[S4]>

VOP MOVE-OPERAND t888[S3] {SB-VM::LOAD-STACK} => t542[EBX] 
        MOV     #<TN t542[EBX]>, #<TN t888[S3]>

VOP MOVE-OPERAND t887[S2] {SB-VM::LOAD-STACK} => #:INDEX2625!886[ESI] 
        MOV     #<TN #:INDEX2625!886[ESI]>, #<TN t887[S2]>

VOP IF-EQ t543[EAX] 'NIL!292 {# NIL} 
        CMP     #<TN t543[EAX]>, 134217739
        JMP     E, L563

L564:

VOP BRANCH {#} 
        JMP     L544

L563:

VOP SLOT #:INDEX2625!886[ESI] {CDR 1 3} => t894[ESI] 
        MOV     #<TN t894[ESI]>, DWORD PTR [ESI+1]

L556:

VOP IF-EQ #:INDEX2625!886[ESI] 'NIL!292 {# T} 
        CMP     #<TN #:INDEX2625!886[ESI]>, 134217739
        JMP     NE, L557

L565:

VOP MOVE 'NIL!305 => t873[EAX] 
        MOV     #<TN t873[EAX]>, 134217739

VOP BRANCH {#} 
        JMP     L544

L316:
in the elsewhere segment:
L566:
in the regular segment:

VOP NOTE-ENVIRONMENT-START {#} 
L567:

L568:

VOP IF-EQ t556[EAX] 'NIL!292 {# T} 
        CMP     #<TN t556[EAX]>, 134217739
        JMP     NE, L569

L570:
L571:

VOP MOVE-ARG 'NIL!305 t557[S0]>t895[EAX] => t558[EAX] 
        MOV     #<TN t558[EAX]>, 134217739

VOP KNOWN-RETURN t557[S0] t896[S1] t558[EAX] {#} 
L572:
        LEA     #<TN t95[ESP]>, DWORD PTR [EBP-8]
        MOV     #<TN t98[EBP]>, #<TN t557[S0]>
        RET     4
L573:

L569:

VOP VALUE-CELL-REF t554[EDX] => t897[ESI] 
        MOV     #<TN t897[ESI]>, DWORD PTR [EDX-3]

VOP ALLOCATE-FULL-CALL-FRAME {3} => t898[EBX] 
        MOV     #<TN t898[EBX]>, #<TN t95[ESP]>
        SUB     #<TN t95[ESP]>, 12

VOP MOVE-ARG t556[EAX] t898[EBX] => t899[EDX] 
        MOV     #<TN t899[EDX]>, #<TN t556[EAX]>

VOP MOVE-ARG ':ABORT!900[Const49]>t901[EDI] t898[EBX] => t902[EDI] 
        MOV     #<TN t901[EDI]>, #<TN ':ABORT!900[Const49]>

VOP CALL-NAMED t898[EBX] t903[Const50]>t904[EAX] t899[EDX] t902[EDI] t905[ESI]
               {# 3 0 NIL}
               
        MOV     #<TN t904[EAX]>, #<TN t903[Const50]>
L574:
        MOV     #<TN t906[ECX]>, 12
        MOV     DWORD PTR [EBX-4], #<TN t98[EBP]>
        MOV     #<TN t98[EBP]>, #<TN t898[EBX]>
L575:
L576:
        CALL    DWORD PTR [EAX+5]
L577:
        JMP     NC, L578
        MOV     #<TN t95[ESP]>, #<TN t94[EBX]>
L578:
L579:

VOP BRANCH {#} 
        JMP     L570

        .align  3

disassembly of code for #<SB-C:COMPONENT
                          :NAME (FLET #:CLEANUP-FUN-1935) {117FCCF9}>

; 00000000:       2A3400           SUB DH, [EAX+EAX]
;     0003:       0000             ADD [EAX], AL
;     0005:       0000             ADD [EAX], AL
;     0007:       0000             ADD [EAX], AL
;     0009:       0000             ADD [EAX], AL
;     000B:       0000             ADD [EAX], AL
;     000D:       0000             ADD [EAX], AL
;     000F:       0000             ADD [EAX], AL
;     0011:       0000             ADD [EAX], AL
;     0013:       0000             ADD [EAX], AL
;     0015:       0000             ADD [EAX], AL
;     0017:       0000             ADD [EAX], AL
;     0019:       0000             ADD [EAX], AL
;     001B:       008F45F883F9     ADD [EDI-108791739], CL
;     0021:       0C76             OR AL, 118
;     0023:       2E               BYTE #X2E
;     0024:       8D9D4CFFFFFF     LEA EBX, [EBP-180]
;     002A:       29CB             SUB EBX, ECX
;     002C:       8BE3             MOV ESP, EBX
;     002E:       8BD9             MOV EBX, ECX
;     0030:       83E90C           SUB ECX, 12
;     0033:       57               PUSH EDI
;     0034:       56               PUSH ESI
;     0035:       53               PUSH EBX
;     0036:       8BF5             MOV ESI, EBP
;     0038:       29DE             SUB ESI, EBX
;     003A:       31DB             XOR EBX, EBX
;     003C: L0:   8B3C1E           MOV EDI, [ESI+EBX]
;     003F:       897C1C0C         MOV [ESP+EBX+12], EDI
;     0043:       83C304           ADD EBX, 4
;     0046:       83E904           SUB ECX, 4
;     0049:       75F1             JNE L0
;     004B:       5B               POP EBX
;     004C:       5E               POP ESI
;     004D:       5F               POP EDI
;     004E:       8BCB             MOV ECX, EBX
;     0050:       EB06             JMP L1
;     0052:       8DA540FFFFFF     LEA ESP, [EBP-192]
;     0058: L1:   83F904           CMP ECX, 4
;     005B:       7505             JNE L2
;     005D:       E94C0D0000       JMP L89
;     0062: L2:   83F908           CMP ECX, 8
;     0065:       7505             JNE L3
;     0067:       E9F20C0000       JMP L88
;     006C: L3:   83F90C           CMP ECX, 12
;     006F:       7C11             JL L4
;     0071:       8D440CF0         LEA EAX, [ESP+ECX-16]
;     0075:       83E90C           SUB ECX, 12
;     0078:       8955E8           MOV [EBP-24], EDX
;     007B:       8975F4           MOV [EBP-12], ESI
;     007E:       8BF0             MOV ESI, EAX
;     0080:       EB06             JMP L5
;     0082: L4:   0F0B0A           BREAK 10                   ; error trap
;     0085:       02               BYTE #X02
;     0086:       18               BYTE #X18                  ; INVALID-ARG-COUNT-ERROR
;     0087:       4D               BYTE #X4D                  ; ECX
;     0088: L5:   BB0B000008       MOV EBX, 134217739
;     008D:       E365             JECXZ L11
;     008F:       8D1409           LEA EDX, [ECX+ECX]
;     0092:       64               BYTE #X64
;     0093:       800D4800000004   OR BYTE PTR [#x48], 4
;     009A:       64               BYTE #X64
;     009B:       031520000000     ADD EDX, [#x20]
;     00A1:       64               BYTE #X64
;     00A2:       3B1524000000     CMP EDX, [#x24]
;     00A8:       7607             JBE L7
;     00AA:       E800000000       CALL L6
;     00AF: L6:   EB15             JMP L8
;     00B1: L7:   64               BYTE #X64
;     00B2:       331520000000     XOR EDX, [#x20]
;     00B8:       64               BYTE #X64
;     00B9:       311520000000     XOR [#x20], EDX
;     00BF:       64               BYTE #X64
;     00C0:       331520000000     XOR EDX, [#x20]
;     00C6: L8:   8D5203           LEA EDX, [EDX+3]
;     00C9:       C1E902           SHR ECX, 2
;     00CC:       FD               STD
;     00CD:       8BDA             MOV EBX, EDX
;     00CF:       EB06             JMP L10
;     00D1: L9:   83C208           ADD EDX, 8
;     00D4:       8952F9           MOV [EDX-7], EDX
;     00D7: L10:  AD               LODSD
;     00D8:       8942FD           MOV [EDX-3], EAX
;     00DB:       83E901           SUB ECX, 1
;     00DE:       75F1             JNE L9
;     00E0:       C742010B000008   MOV DWORD PTR [EDX+1], 134217739
;     00E7:       64               BYTE #X64
;     00E8:       80354800000004   XOR BYTE PTR [#x48], 4
;     00EF:       7403             JEQ L11
;     00F1:       0F0B09           BREAK 9                    ; pending interrupt trap
;     00F4: L11:  895DF0           MOV [EBP-16], EBX
;     00F7:       897DEC           MOV [EBP-20], EDI
;     00FA:       8BDC             MOV EBX, ESP
;     00FC:       83EC0C           SUB ESP, 12
;     00FF:       8B1511000000     MOV EDX, [#x11]
;     0105:       8B7DE8           MOV EDI, [EBP-24]
;     0108:       8B0515000000     MOV EAX, [#x15]
;     010E:       B908000000       MOV ECX, 8
;     0113:       896BFC           MOV [EBX-4], EBP
;     0116:       8BEB             MOV EBP, EBX
;     0118:       FF5005           CALL DWORD PTR [EAX+5]
;     011B:       7302             JNB L12
;     011D:       8BE3             MOV ESP, EBX
;     011F: L12:  8BDC             MOV EBX, ESP
;     0121:       83EC0C           SUB ESP, 12
;     0124:       8B55E8           MOV EDX, [EBP-24]
;     0127:       8B0519000000     MOV EAX, [#x19]
;     012D:       B904000000       MOV ECX, 4
;     0132:       896BFC           MOV [EBX-4], EBP
;     0135:       8BEB             MOV EBP, EBX
;     0137:       FF5005           CALL DWORD PTR [EAX+5]
;     013A:       7302             JNB L13
;     013C:       8BE3             MOV ESP, EBX
;     013E: L13:  8BDC             MOV EBX, ESP
;     0140:       83EC0C           SUB ESP, 12
;     0143:       8B55EC           MOV EDX, [EBP-20]
;     0146:       8B7DE8           MOV EDI, [EBP-24]
;     0149:       8B051D000000     MOV EAX, [#x1D]
;     014F:       B908000000       MOV ECX, 8
;     0154:       896BFC           MOV [EBX-4], EBP
;     0157:       8BEB             MOV EBP, EBX
;     0159:       FF5005           CALL DWORD PTR [EAX+5]
;     015C:       7302             JNB L14
;     015E:       8BE3             MOV ESP, EBX
;     0160: L14:  8BDC             MOV EBX, ESP
;     0162:       83EC0C           SUB ESP, 12
;     0165:       8B1521000000     MOV EDX, [#x21]
;     016B:       8B7DE8           MOV EDI, [EBP-24]
;     016E:       8B0515000000     MOV EAX, [#x15]
;     0174:       B908000000       MOV ECX, 8
;     0179:       896BFC           MOV [EBX-4], EBP
;     017C:       8BEB             MOV EBP, EBX
;     017E:       FF5005           CALL DWORD PTR [EAX+5]
;     0181:       7302             JNB L15
;     0183:       8BE3             MOV ESP, EBX
;     0185: L15:  8BDC             MOV EBX, ESP
;     0187:       83EC0C           SUB ESP, 12
;     018A:       8B55F4           MOV EDX, [EBP-12]
;     018D:       8B7DE8           MOV EDI, [EBP-24]
;     0190:       8B051D000000     MOV EAX, [#x1D]
;     0196:       B908000000       MOV ECX, 8
;     019B:       896BFC           MOV [EBX-4], EBP
;     019E:       8BEB             MOV EBP, EBX
;     01A0:       FF5005           CALL DWORD PTR [EAX+5]
;     01A3:       7302             JNB L16
;     01A5:       8BE3             MOV ESP, EBX
;     01A7: L16:  8BDC             MOV EBX, ESP
;     01A9:       83EC0C           SUB ESP, 12
;     01AC:       8B55E8           MOV EDX, [EBP-24]
;     01AF:       8B0519000000     MOV EAX, [#x19]
;     01B5:       B904000000       MOV ECX, 4
;     01BA:       896BFC           MOV [EBX-4], EBP
;     01BD:       8BEB             MOV EBP, EBX
;     01BF:       FF5005           CALL DWORD PTR [EAX+5]
;     01C2:       7302             JNB L17
;     01C4:       8BE3             MOV ESP, EBX
;     01C6: L17:  8BDC             MOV EBX, ESP
;     01C8:       83EC0C           SUB ESP, 12
;     01CB:       8B1525000000     MOV EDX, [#x25]
;     01D1:       8B7DE8           MOV EDI, [EBP-24]
;     01D4:       8B0515000000     MOV EAX, [#x15]
;     01DA:       B908000000       MOV ECX, 8
;     01DF:       896BFC           MOV [EBX-4], EBP
;     01E2:       8BEB             MOV EBP, EBX
;     01E4:       FF5005           CALL DWORD PTR [EAX+5]
;     01E7:       7302             JNB L18
;     01E9:       8BE3             MOV ESP, EBX
;     01EB: L18:  8BDC             MOV EBX, ESP
;     01ED:       83EC0C           SUB ESP, 12
;     01F0:       8B55E8           MOV EDX, [EBP-24]
;     01F3:       8B0519000000     MOV EAX, [#x19]
;     01F9:       B904000000       MOV ECX, 4
;     01FE:       896BFC           MOV [EBX-4], EBP
;     0201:       8BEB             MOV EBP, EBX
;     0203:       FF5005           CALL DWORD PTR [EAX+5]
;     0206:       7302             JNB L19
;     0208:       8BE3             MOV ESP, EBX
;     020A: L19:  8B55F0           MOV EDX, [EBP-16]
;     020D:       8D65F8           LEA ESP, [EBP-8]
;     0210:       F8               CLC
;     0211:       8B6DFC           MOV EBP, [EBP-4]
;     0214:       C20400           RET 4
;     0217:       002A             ADD [EDX], CH
;     0219:       BA00000000       MOV EDX, 0
;     021E:       0000             ADD [EAX], AL
;     0220:       0000             ADD [EAX], AL
;     0222:       0000             ADD [EAX], AL
;     0224:       0000             ADD [EAX], AL
;     0226:       0000             ADD [EAX], AL
;     0228:       0000             ADD [EAX], AL
;     022A:       0000             ADD [EAX], AL
;     022C:       0000             ADD [EAX], AL
;     022E:       0000             ADD [EAX], AL
;     0230:       0000             ADD [EAX], AL
;     0232:       0000             ADD [EAX], AL
;     0234:       8F45F8           POP DWORD PTR [EBP-8]
;     0237:       8DA540FFFFFF     LEA ESP, [EBP-192]
;     023D:       897DF0           MOV [EBP-16], EDI
;     0240:       8975BC           MOV [EBP-68], ESI
;     0243:       B9D6000000       MOV ECX, 214
;     0248:       BB0C000000       MOV EBX, 12
;     024D:       BE18000000       MOV ESI, 24
;     0252:       8D460F           LEA EAX, [ESI+15]
;     0255:       83E0F8           AND EAX, -8
;     0258:       64               BYTE #X64
;     0259:       800D4800000004   OR BYTE PTR [#x48], 4
;     0260:       64               BYTE #X64
;     0261:       030520000000     ADD EAX, [#x20]
;     0267:       64               BYTE #X64
;     0268:       3B0524000000     CMP EAX, [#x24]
;     026E:       7607             JBE L21
;     0270:       E800000000       CALL L20
;     0275: L20:  EB15             JMP L22
;     0277: L21:  64               BYTE #X64
;     0278:       330520000000     XOR EAX, [#x20]
;     027E:       64               BYTE #X64
;     027F:       310520000000     XOR [#x20], EAX
;     0285:       64               BYTE #X64
;     0286:       330520000000     XOR EAX, [#x20]
;     028C: L22:  8D4007           LEA EAX, [EAX+7]
;     028F:       8948F9           MOV [EAX-7], ECX
;     0292:       8958FD           MOV [EAX-3], EBX
;     0295:       64               BYTE #X64
;     0296:       80354800000004   XOR BYTE PTR [#x48], 4
;     029D:       7403             JEQ L23
;     029F:       0F0B09           BREAK 9                    ; pending interrupt trap
;     02A2: L23:  DDD8             FSTPD FR0
;     02A4:       D9EE             FLDZ
;     02A6:       DD5001           FSTD [EAX+1]
;     02A9:       8B0D29000000     MOV ECX, [#x29]
;     02AF:       DDD8             FSTPD FR0
;     02B1:       DD4101           FLDD [ECX+1]
;     02B4:       DD5009           FSTD [EAX+9]
;     02B7:       8B0D2D000000     MOV ECX, [#x2D]
;     02BD:       DDD8             FSTPD FR0
;     02BF:       DD4101           FLDD [ECX+1]
;     02C2:       DD5011           FSTD [EAX+17]
;     02C5:       8BDC             MOV EBX, ESP
;     02C7:       83EC0C           SUB ESP, 12
;     02CA:       8B3504050008     MOV ESI, [#x8000504]
;     02D0:       8BF8             MOV EDI, EAX
;     02D2:       8B0531000000     MOV EAX, [#x31]
;     02D8:       B90C000000       MOV ECX, 12
;     02DD:       896BFC           MOV [EBX-4], EBP
;     02E0:       8BEB             MOV EBP, EBX
;     02E2:       FF5005           CALL DWORD PTR [EAX+5]
;     02E5:       7302             JNB L24
;     02E7:       8BE3             MOV ESP, EBX
;     02E9: L24:  8955B8           MOV [EBP-72], EDX
;     02EC:       B9D6000000       MOV ECX, 214
;     02F1:       BA0C000000       MOV EDX, 12
;     02F6:       BB18000000       MOV EBX, 24
;     02FB:       8D430F           LEA EAX, [EBX+15]
;     02FE:       83E0F8           AND EAX, -8
;     0301:       64               BYTE #X64
;     0302:       800D4800000004   OR BYTE PTR [#x48], 4
;     0309:       64               BYTE #X64
;     030A:       030520000000     ADD EAX, [#x20]
;     0310:       64               BYTE #X64
;     0311:       3B0524000000     CMP EAX, [#x24]
;     0317:       7607             JBE L26
;     0319:       E800000000       CALL L25
;     031E: L25:  EB15             JMP L27
;     0320: L26:  64               BYTE #X64
;     0321:       330520000000     XOR EAX, [#x20]
;     0327:       64               BYTE #X64
;     0328:       310520000000     XOR [#x20], EAX
;     032E:       64               BYTE #X64
;     032F:       330520000000     XOR EAX, [#x20]
;     0335: L27:  8D4007           LEA EAX, [EAX+7]
;     0338:       8948F9           MOV [EAX-7], ECX
;     033B:       8950FD           MOV [EAX-3], EDX
;     033E:       64               BYTE #X64
;     033F:       80354800000004   XOR BYTE PTR [#x48], 4
;     0346:       7403             JEQ L28
;     0348:       0F0B09           BREAK 9                    ; pending interrupt trap
;     034B: L28:  DDD8             FSTPD FR0
;     034D:       D9E8             FLD1
;     034F:       DD5001           FSTD [EAX+1]
;     0352:       8B0D35000000     MOV ECX, [#x35]
;     0358:       DDD8             FSTPD FR0
;     035A:       DD4101           FLDD [ECX+1]
;     035D:       DD5009           FSTD [EAX+9]
;     0360:       8B0D39000000     MOV ECX, [#x39]
;     0366:       DDD8             FSTPD FR0
;     0368:       DD4101           FLDD [ECX+1]
;     036B:       DD5011           FSTD [EAX+17]
;     036E:       DDD8             FSTPD FR0
;     0370:       DD4001           FLDD [EAX+1]
;     0373:       DDD9             FSTPD FR1
;     0375:       DD4001           FLDD [EAX+1]
;     0378:       D9C9             FXCH FR1
;     037A:       DCC9             FMUL-STI FR1
;     037C:       9B               WAIT
;     037D:       DDD8             FSTPD FR0
;     037F:       DD4009           FLDD [EAX+9]
;     0382:       DDDA             FSTPD FR2
;     0384:       DD4009           FLDD [EAX+9]
;     0387:       D9CA             FXCH FR2
;     0389:       D8CA             FMULD FR2
;     038B:       9B               WAIT
;     038C:       DCC1             FADD-STI FR1
;     038E:       9B               WAIT
;     038F:       DDD8             FSTPD FR0
;     0391:       DD4011           FLDD [EAX+17]
;     0394:       DDDA             FSTPD FR2
;     0396:       DD4011           FLDD [EAX+17]
;     0399:       D9CA             FXCH FR2
;     039B:       D8CA             FMULD FR2
;     039D:       9B               WAIT
;     039E:       D8C1             FADDD FR1
;     03A0:       9B               WAIT
;     03A1:       D9FA             FSQRT
;     03A3:       9B               WAIT
;     03A4:       DDD9             FSTPD FR1
;     03A6:       D9E8             FLD1
;     03A8:       D9C9             FXCH FR1
;     03AA:       DCF9             FDIV-STI FR1
;     03AC:       9B               WAIT
;     03AD:       DDD8             FSTPD FR0
;     03AF:       DD4001           FLDD [EAX+1]
;     03B2:       D8C9             FMULD FR1
;     03B4:       DDD2             FSTD FR2
;     03B6:       DDD8             FSTPD FR0
;     03B8:       DD4009           FLDD [EAX+9]
;     03BB:       D8C9             FMULD FR1
;     03BD:       DDD3             FSTD FR3
;     03BF:       DDD8             FSTPD FR0
;     03C1:       DD4011           FLDD [EAX+17]
;     03C4:       D8C9             FMULD FR1
;     03C6:       9B               WAIT
;     03C7:       B9D6000000       MOV ECX, 214
;     03CC:       BA0C000000       MOV EDX, 12
;     03D1:       BB18000000       MOV EBX, 24
;     03D6:       8D430F           LEA EAX, [EBX+15]
;     03D9:       83E0F8           AND EAX, -8
;     03DC:       64               BYTE #X64
;     03DD:       800D4800000004   OR BYTE PTR [#x48], 4
;     03E4:       64               BYTE #X64
;     03E5:       030520000000     ADD EAX, [#x20]
;     03EB:       64               BYTE #X64
;     03EC:       3B0524000000     CMP EAX, [#x24]
;     03F2:       7607             JBE L30
;     03F4:       E800000000       CALL L29
;     03F9: L29:  EB15             JMP L31
;     03FB: L30:  64               BYTE #X64
;     03FC:       330520000000     XOR EAX, [#x20]
;     0402:       64               BYTE #X64
;     0403:       310520000000     XOR [#x20], EAX
;     0409:       64               BYTE #X64
;     040A:       330520000000     XOR EAX, [#x20]
;     0410: L31:  8D4007           LEA EAX, [EAX+7]
;     0413:       8948F9           MOV [EAX-7], ECX
;     0416:       8950FD           MOV [EAX-3], EDX
;     0419:       64               BYTE #X64
;     041A:       80354800000004   XOR BYTE PTR [#x48], 4
;     0421:       7403             JEQ L32
;     0423:       0F0B09           BREAK 9                    ; pending interrupt trap
;     0426: L32:  8945C0           MOV [EBP-64], EAX
;     0429:       D9CA             FXCH FR2
;     042B:       DD5001           FSTD [EAX+1]
;     042E:       D9CA             FXCH FR2
;     0430:       D9CB             FXCH FR3
;     0432:       DD5009           FSTD [EAX+9]
;     0435:       D9CB             FXCH FR3
;     0437:       DD5011           FSTD [EAX+17]
;     043A:       8B45BC           MOV EAX, [EBP-68]
;     043D:       C1F802           SAR EAX, 2
;     0440:       8945F4           MOV [EBP-12], EAX
;     0443:       DDD8             FSTPD FR0
;     0445:       DB45F4           FILD [EBP-12]
;     0448:       8B0539000000     MOV EAX, [#x39]
;     044E:       DDD9             FSTPD FR1
;     0450:       DD4001           FLDD [EAX+1]
;     0453:       D9C9             FXCH FR1
;     0455:       D8F1             FDIVD FR1
;     0457:       9B               WAIT
;     0458:       DD5590           FSTD [EBP-112]
;     045B:       8B45BC           MOV EAX, [EBP-68]
;     045E:       C1F802           SAR EAX, 2
;     0461:       8945F4           MOV [EBP-12], EAX
;     0464:       DDD8             FSTPD FR0
;     0466:       DB45F4           FILD [EBP-12]
;     0469:       8B053D000000     MOV EAX, [#x3D]
;     046F:       DDD9             FSTPD FR1
;     0471:       DD4001           FLDD [EAX+1]
;     0474:       D9C9             FXCH FR1
;     0476:       D8F1             FDIVD FR1
;     0478:       9B               WAIT
;     0479:       DDD9             FSTPD FR1
;     047B:       D9E8             FLD1
;     047D:       D9C9             FXCH FR1
;     047F:       D8E1             FSUBD FR1
;     0481:       9B               WAIT
;     0482:       DD5598           FSTD [EBP-104]
;     0485:       8BDC             MOV EBX, ESP
;     0487:       83EC24           SUB ESP, 36
;     048A:       8B55F0           MOV EDX, [EBP-16]
;     048D:       8B3D41000000     MOV EDI, [#x41]
;     0493:       8B3545000000     MOV ESI, [#x45]
;     0499:       8B0549000000     MOV EAX, [#x49]
;     049F:       8943F0           MOV [EBX-16], EAX
;     04A2:       8B054D000000     MOV EAX, [#x4D]
;     04A8:       8943EC           MOV [EBX-20], EAX
;     04AB:       8B0551000000     MOV EAX, [#x51]
;     04B1:       8943E8           MOV [EBX-24], EAX
;     04B4:       8B0555000000     MOV EAX, [#x55]
;     04BA:       8943E4           MOV [EBX-28], EAX
;     04BD:       8B0559000000     MOV EAX, [#x59]
;     04C3:       8943E0           MOV [EBX-32], EAX
;     04C6:       8B055D000000     MOV EAX, [#x5D]
;     04CC:       8943DC           MOV [EBX-36], EAX
;     04CF:       8B0561000000     MOV EAX, [#x61]
;     04D5:       B924000000       MOV ECX, 36
;     04DA:       896BFC           MOV [EBX-4], EBP
;     04DD:       8BEB             MOV EBP, EBX
;     04DF:       FF5005           CALL DWORD PTR [EAX+5]
;     04E2:       7302             JNB L33
;     04E4:       8BE3             MOV ESP, EBX
;     04E6: L33:  899570FFFFFF     MOV [EBP-144], EDX
;     04EC:       B927000008       MOV ECX, 134217767
;     04F1:       64               BYTE #X64
;     04F2:       800D4800000004   OR BYTE PTR [#x48], 4
;     04F9:       B808000000       MOV EAX, 8
;     04FE:       64               BYTE #X64
;     04FF:       030520000000     ADD EAX, [#x20]
;     0505:       64               BYTE #X64
;     0506:       3B0524000000     CMP EAX, [#x24]
;     050C:       7607             JBE L35
;     050E:       E800000000       CALL L34
;     0513: L34:  EB0A             JMP L36
;     0515: L35:  64               BYTE #X64
;     0516:       890520000000     MOV [#x20], EAX
;     051C:       83E808           SUB EAX, 8
;     051F: L36:  C7003A010000     MOV DWORD PTR [EAX], 314
;     0525:       8D4007           LEA EAX, [EAX+7]
;     0528:       8948FD           MOV [EAX-3], ECX
;     052B:       64               BYTE #X64
;     052C:       80354800000004   XOR BYTE PTR [#x48], 4
;     0533:       7403             JEQ L37
;     0535:       0F0B09           BREAK 9                    ; pending interrupt trap
;     0538: L37:  898574FFFFFF     MOV [EBP-140], EAX
;     053E:       64               BYTE #X64
;     053F:       8B050C000000     MOV EAX, [#xC]
;     0545:       898564FFFFFF     MOV [EBP-156], EAX
;     054B:       8B05D8000008     MOV EAX, [#x80000D8]
;     0551:       64               BYTE #X64
;     0552:       8B00             MOV EAX, [EAX]
;     0554:       8B0D18040008     MOV ECX, [#x8000418]
;     055A:       64               BYTE #X64
;     055B:       8B09             MOV ECX, [ECX]
;     055D:       898568FFFFFF     MOV [EBP-152], EAX
;     0563:       898D6CFFFFFF     MOV [EBP-148], ECX
;     0569:       89A560FFFFFF     MOV [EBP-160], ESP
;     056F:       8D8D78FFFFFF     LEA ECX, [EBP-136]
;     0575:       8B05F8000008     MOV EAX, [#x80000F8]
;     057B:       64               BYTE #X64
;     057C:       8B00             MOV EAX, [EAX]
;     057E:       8901             MOV [ECX], EAX
;     0580:       896904           MOV [ECX+4], EBP
;     0583:       C741088E0D0000   MOV DWORD PTR [ECX+8], 3470
;     058A:       8D8578FFFFFF     LEA EAX, [EBP-136]
;     0590:       8B0DF8000008     MOV ECX, [#x80000F8]
;     0596:       64               BYTE #X64
;     0597:       8901             MOV [ECX], EAX
;     0599:       8BDC             MOV EBX, ESP
;     059B:       83EC10           SUB ESP, 16
;     059E:       BA0B000008       MOV EDX, 134217739
;     05A3:       8B3D65000000     MOV EDI, [#x65]
;     05A9:       8B75BC           MOV ESI, [EBP-68]
;     05AC:       8B45BC           MOV EAX, [EBP-68]
;     05AF:       8943F0           MOV [EBX-16], EAX
;     05B2:       8B0569000000     MOV EAX, [#x69]
;     05B8:       B910000000       MOV ECX, 16
;     05BD:       896BFC           MOV [EBX-4], EBP
;     05C0:       8BEB             MOV EBP, EBX
;     05C2:       FF5005           CALL DWORD PTR [EAX+5]
;     05C5:       7302             JNB L38
;     05C7:       8BE3             MOV ESP, EBX
;     05C9: L38:  B80B000008       MOV EAX, 134217739
;     05CE:       8955EC           MOV [EBP-20], EDX
;     05D1:       C745F000000000   MOV DWORD PTR [EBP-16], 0
;     05D8:       C745F400000000   MOV DWORD PTR [EBP-12], 0
;     05DF:       8BDC             MOV EBX, ESP
;     05E1:       55               PUSH EBP
;     05E2:       83EC08           SUB ESP, 8
;     05E5:       8BEB             MOV EBP, EBX
;     05E7:       B904000000       MOV ECX, 4
;     05EC:       FF15AC060008     CALL DWORD PTR [#x80006AC]
;     05F2:       7302             JNB L39
;     05F4:       8BE3             MOV ESP, EBX
;     05F6: L39:  8955F4           MOV [EBP-12], EDX
;     05F9: L40:  8B45F0           MOV EAX, [EBP-16]
;     05FC:       3B45F4           CMP EAX, [EBP-12]
;     05FF:       0F8C64060000     JL L82
;     0605:       DDD8             FSTPD FR0
;     0607:       DD4598           FLDD [EBP-104]
;     060A:       DD55A8           FSTD [EBP-88]
;     060D: L41:  DDD8             FSTPD FR0
;     060F:       DD45A8           FLDD [EBP-88]
;     0612:       DC5590           FCOMD [EBP-112]
;     0615:       DFE0             FNSTSW
;     0617:       80E445           AND AH, 69
;     061A:       80FC01           CMP AH, 1
;     061D:       0F84EE050000     JEQ L81
;     0623:       DDD8             FSTPD FR0
;     0625:       DD4590           FLDD [EBP-112]
;     0628:       DD55A0           FSTD [EBP-96]
;     062B:       DDD8             FSTPD FR0
;     062D:       D9EE             FLDZ
;     062F:       DD55DC           FSTD [EBP-36]
;     0632: L42:  DDD8             FSTPD FR0
;     0634:       DD45A0           FLDD [EBP-96]
;     0637:       DC5598           FCOMD [EBP-104]
;     063A:       DFE0             FNSTSW
;     063C:       80E445           AND AH, 69
;     063F:       750D             JNE L43
;     0641:       DDD8             FSTPD FR0
;     0643:       D9E8             FLD1
;     0645:       DC6DA8           FSUBRD [EBP-88]
;     0648:       9B               WAIT
;     0649:       DD55A8           FSTD [EBP-88]
;     064C:       EBBF             JMP L41
;     064E: L43:  DDD8             FSTPD FR0
;     0650:       D9EE             FLDZ
;     0652:       DD55DC           FSTD [EBP-36]
;     0655:       DDD8             FSTPD FR0
;     0657:       D9E8             FLD1
;     0659:       DC45A0           FADDD [EBP-96]
;     065C:       DD55B0           FSTD [EBP-80]
;     065F:       DDD8             FSTPD FR0
;     0661:       DD45A0           FLDD [EBP-96]
;     0664:       DD55D4           FSTD [EBP-44]
;     0667: L44:  DDD8             FSTPD FR0
;     0669:       DD45D4           FLDD [EBP-44]
;     066C:       DC55B0           FCOMD [EBP-80]
;     066F:       DFE0             FNSTSW
;     0671:       80E445           AND AH, 69
;     0674:       80FC01           CMP AH, 1
;     0677:       0F84B4000000     JEQ L51
;     067D:       8B056D000000     MOV EAX, [#x6D]
;     0683:       DDD8             FSTPD FR0
;     0685:       DD4001           FLDD [EAX+1]
;     0688:       DC7DDC           FDIVRD [EBP-36]
;     068B:       9B               WAIT
;     068C:       8B0571000000     MOV EAX, [#x71]
;     0692:       DDD9             FSTPD FR1
;     0694:       DD4001           FLDD [EAX+1]
;     0697:       D9C9             FXCH FR1
;     0699:       D8C9             FMULD FR1
;     069B:       9B               WAIT
;     069C:       8BDC             MOV EBX, ESP
;     069E:       83EC0C           SUB ESP, 12
;     06A1:       64               BYTE #X64
;     06A2:       800D4800000004   OR BYTE PTR [#x48], 4
;     06A9:       BA10000000       MOV EDX, 16
;     06AE:       64               BYTE #X64
;     06AF:       031520000000     ADD EDX, [#x20]
;     06B5:       64               BYTE #X64
;     06B6:       3B1524000000     CMP EDX, [#x24]
;     06BC:       7607             JBE L46
;     06BE:       E800000000       CALL L45
;     06C3: L45:  EB0A             JMP L47
;     06C5: L46:  64               BYTE #X64
;     06C6:       891520000000     MOV [#x20], EDX
;     06CC:       83EA10           SUB EDX, 16
;     06CF: L47:  C70216030000     MOV DWORD PTR [EDX], 790
;     06D5:       8D5207           LEA EDX, [EDX+7]
;     06D8:       DD5201           FSTD [EDX+1]
;     06DB:       64               BYTE #X64
;     06DC:       80354800000004   XOR BYTE PTR [#x48], 4
;     06E3:       7403             JEQ L48
;     06E5:       0F0B09           BREAK 9                    ; pending interrupt trap
;     06E8: L48:  8B0575000000     MOV EAX, [#x75]
;     06EE:       B904000000       MOV ECX, 4
;     06F3:       896BFC           MOV [EBX-4], EBP
;     06F6:       8BEB             MOV EBP, EBX
;     06F8:       FF5005           CALL DWORD PTR [EAX+5]
;     06FB:       7302             JNB L49
;     06FD:       8BE3             MOV ESP, EBX
;     06FF: L49:  8BDC             MOV EBX, ESP
;     0701:       83EC0C           SUB ESP, 12
;     0704:       8BBD70FFFFFF     MOV EDI, [EBP-144]
;     070A:       8B0579000000     MOV EAX, [#x79]
;     0710:       B908000000       MOV ECX, 8
;     0715:       896BFC           MOV [EBX-4], EBP
;     0718:       8BEB             MOV EBP, EBX
;     071A:       FF5005           CALL DWORD PTR [EAX+5]
;     071D:       7302             JNB L50
;     071F:       8BE3             MOV ESP, EBX
;     0721: L50:  DDD8             FSTPD FR0
;     0723:       D9E8             FLD1
;     0725:       DC45A0           FADDD [EBP-96]
;     0728:       9B               WAIT
;     0729:       DD55A0           FSTD [EBP-96]
;     072C:       E901FFFFFF       JMP L42
;     0731: L51:  DDD8             FSTPD FR0
;     0733:       D9E8             FLD1
;     0735:       DC45A8           FADDD [EBP-88]
;     0738:       DD55C4           FSTD [EBP-60]
;     073B:       DDD8             FSTPD FR0
;     073D:       DD45A8           FLDD [EBP-88]
;     0740:       DD55CC           FSTD [EBP-52]
;     0743: L52:  DDD8             FSTPD FR0
;     0745:       DD45CC           FLDD [EBP-52]
;     0748:       DC55C4           FCOMD [EBP-60]
;     074B:       DFE0             FNSTSW
;     074D:       80E445           AND AH, 69
;     0750:       80FC01           CMP AH, 1
;     0753:       7417             JEQ L53
;     0755:       8B057D000000     MOV EAX, [#x7D]
;     075B:       DDD8             FSTPD FR0
;     075D:       DD4001           FLDD [EAX+1]
;     0760:       DC45D4           FADDD [EBP-44]
;     0763:       9B               WAIT
;     0764:       DD55D4           FSTD [EBP-44]
;     0767:       E9FBFEFFFF       JMP L44
;     076C: L53:  8B75BC           MOV ESI, [EBP-68]
;     076F:       C1FE02           SAR ESI, 2
;     0772:       8975F4           MOV [EBP-12], ESI
;     0775:       DDD8             FSTPD FR0
;     0777:       DB45F4           FILD [EBP-12]
;     077A:       B9D6000000       MOV ECX, 214
;     077F:       BA0C000000       MOV EDX, 12
;     0784:       BB18000000       MOV EBX, 24
;     0789:       8D430F           LEA EAX, [EBX+15]
;     078C:       83E0F8           AND EAX, -8
;     078F:       64               BYTE #X64
;     0790:       800D4800000004   OR BYTE PTR [#x48], 4
;     0797:       64               BYTE #X64
;     0798:       030520000000     ADD EAX, [#x20]
;     079E:       64               BYTE #X64
;     079F:       3B0524000000     CMP EAX, [#x24]
;     07A5:       7607             JBE L55
;     07A7:       E800000000       CALL L54
;     07AC: L54:  EB15             JMP L56
;     07AE: L55:  64               BYTE #X64
;     07AF:       330520000000     XOR EAX, [#x20]
;     07B5:       64               BYTE #X64
;     07B6:       310520000000     XOR [#x20], EAX
;     07BC:       64               BYTE #X64
;     07BD:       330520000000     XOR EAX, [#x20]
;     07C3: L56:  8D4007           LEA EAX, [EAX+7]
;     07C6:       8948F9           MOV [EAX-7], ECX
;     07C9:       8950FD           MOV [EAX-3], EDX
;     07CC:       64               BYTE #X64
;     07CD:       80354800000004   XOR BYTE PTR [#x48], 4
;     07D4:       7403             JEQ L57
;     07D6:       0F0B09           BREAK 9                    ; pending interrupt trap
;     07D9: L57:  DDD9             FSTPD FR1
;     07DB:       DD45D4           FLDD [EBP-44]
;     07DE:       D9C9             FXCH FR1
;     07E0:       D9C9             FXCH FR1
;     07E2:       DD5001           FSTD [EAX+1]
;     07E5:       D9C9             FXCH FR1
;     07E7:       DDD9             FSTPD FR1
;     07E9:       DD45CC           FLDD [EBP-52]
;     07EC:       D9C9             FXCH FR1
;     07EE:       D9C9             FXCH FR1
;     07F0:       DD5009           FSTD [EAX+9]
;     07F3:       D9C9             FXCH FR1
;     07F5:       DD5011           FSTD [EAX+17]
;     07F8:       DDD8             FSTPD FR0
;     07FA:       DD4001           FLDD [EAX+1]
;     07FD:       DDD9             FSTPD FR1
;     07FF:       DD4001           FLDD [EAX+1]
;     0802:       D9C9             FXCH FR1
;     0804:       DCC9             FMUL-STI FR1
;     0806:       9B               WAIT
;     0807:       DDD8             FSTPD FR0
;     0809:       DD4009           FLDD [EAX+9]
;     080C:       DDDA             FSTPD FR2
;     080E:       DD4009           FLDD [EAX+9]
;     0811:       D9CA             FXCH FR2
;     0813:       D8CA             FMULD FR2
;     0815:       9B               WAIT
;     0816:       DCC1             FADD-STI FR1
;     0818:       9B               WAIT
;     0819:       DDD8             FSTPD FR0
;     081B:       DD4011           FLDD [EAX+17]
;     081E:       DDDA             FSTPD FR2
;     0820:       DD4011           FLDD [EAX+17]
;     0823:       D9CA             FXCH FR2
;     0825:       D8CA             FMULD FR2
;     0827:       9B               WAIT
;     0828:       D8C1             FADDD FR1
;     082A:       9B               WAIT
;     082B:       D9FA             FSQRT
;     082D:       9B               WAIT
;     082E:       DDD9             FSTPD FR1
;     0830:       D9E8             FLD1
;     0832:       D9C9             FXCH FR1
;     0834:       DCF9             FDIV-STI FR1
;     0836:       9B               WAIT
;     0837:       DDD8             FSTPD FR0
;     0839:       DD4001           FLDD [EAX+1]
;     083C:       D8C9             FMULD FR1
;     083E:       DDD2             FSTD FR2
;     0840:       DDD8             FSTPD FR0
;     0842:       DD4009           FLDD [EAX+9]
;     0845:       D8C9             FMULD FR1
;     0847:       DDD3             FSTD FR3
;     0849:       DDD8             FSTPD FR0
;     084B:       DD4011           FLDD [EAX+17]
;     084E:       D8C9             FMULD FR1
;     0850:       9B               WAIT
;     0851:       B8D6000000       MOV EAX, 214
;     0856:       B90C000000       MOV ECX, 12
;     085B:       BA18000000       MOV EDX, 24
;     0860:       8D7A0F           LEA EDI, [EDX+15]
;     0863:       83E7F8           AND EDI, -8
;     0866:       64               BYTE #X64
;     0867:       800D4800000004   OR BYTE PTR [#x48], 4
;     086E:       64               BYTE #X64
;     086F:       033D20000000     ADD EDI, [#x20]
;     0875:       64               BYTE #X64
;     0876:       3B3D24000000     CMP EDI, [#x24]
;     087C:       7607             JBE L59
;     087E:       E800000000       CALL L58
;     0883: L58:  EB15             JMP L60
;     0885: L59:  64               BYTE #X64
;     0886:       333D20000000     XOR EDI, [#x20]
;     088C:       64               BYTE #X64
;     088D:       313D20000000     XOR [#x20], EDI
;     0893:       64               BYTE #X64
;     0894:       333D20000000     XOR EDI, [#x20]
;     089A: L60:  8D7F07           LEA EDI, [EDI+7]
;     089D:       8947F9           MOV [EDI-7], EAX
;     08A0:       894FFD           MOV [EDI-3], ECX
;     08A3:       64               BYTE #X64
;     08A4:       80354800000004   XOR BYTE PTR [#x48], 4
;     08AB:       7403             JEQ L61
;     08AD:       0F0B09           BREAK 9                    ; pending interrupt trap
;     08B0: L61:  8BDF             MOV EBX, EDI
;     08B2:       D9CA             FXCH FR2
;     08B4:       DD5701           FSTD [EDI+1]
;     08B7:       D9CA             FXCH FR2
;     08B9:       D9CB             FXCH FR3
;     08BB:       DD5709           FSTD [EDI+9]
;     08BE:       D9CB             FXCH FR3
;     08C0:       DD5711           FSTD [EDI+17]
;     08C3:       8B0D81000000     MOV ECX, [#x81]
;     08C9:       8B4111           MOV EAX, [ECX+17]
;     08CC:       64               BYTE #X64
;     08CD:       8B00             MOV EAX, [EAX]
;     08CF:       83F85A           CMP EAX, 90
;     08D2:       7503             JNE L62
;     08D4:       8B41FD           MOV EAX, [ECX-3]
;     08D7: L62:  8945F4           MOV [EBP-12], EAX
;     08DA:       8B75F4           MOV ESI, [EBP-12]
;     08DD:       8B45B8           MOV EAX, [EBP-72]
;     08E0:       8945EC           MOV [EBP-20], EAX
;     08E3:       89BD5CFFFFFF     MOV [EBP-164], EDI
;     08E9:       8B0581000000     MOV EAX, [#x81]
;     08EF:       8B4811           MOV ECX, [EAX+17]
;     08F2:       64               BYTE #X64
;     08F3:       8B09             MOV ECX, [ECX]
;     08F5:       83F95A           CMP ECX, 90
;     08F8:       7503             JNE L63
;     08FA:       8B48FD           MOV ECX, [EAX-3]
;     08FD: L63:  896DF0           MOV [EBP-16], EBP
;     0900:       8B0585000000     MOV EAX, [#x85]
;     0906:       DDD9             FSTPD FR1
;     0908:       DD4001           FLDD [EAX+1]
;     090B:       D9C9             FXCH FR1
;     090D:       8BC4             MOV EAX, ESP
;     090F:       81ECC0000000     SUB ESP, 192
;     0915:       898858FFFFFF     MOV [EAX-168], ECX
;     091B:       8B55EC           MOV EDX, [EBP-20]
;     091E:       899054FFFFFF     MOV [EAX-172], EDX
;     0924:       8958E4           MOV [EAX-28], EBX
;     0927:       8B7DF0           MOV EDI, [EBP-16]
;     092A:       8978FC           MOV [EAX-4], EDI
;     092D:       8BE8             MOV EBP, EAX
;     092F:       C745F8040A0000   MOV DWORD PTR [EBP-8], 2564
;     0936:       E9C3040000       JMP L90
;     093B:       8BBD5CFFFFFF     MOV EDI, [EBP-164]
;     0941:       8B0585000000     MOV EAX, [#x85]
;     0947:       DDD8             FSTPD FR0
;     0949:       DD4001           FLDD [EAX+1]
;     094C:       DDE1             FUCOM FR1
;     094E:       DFE0             FNSTSW
;     0950:       80E445           AND AH, 69
;     0953:       80FC40           CMP AH, 64
;     0956:       7522             JNE L65
;     0958:       DDD8             FSTPD FR0
;     095A:       D9EE             FLDZ
;     095C: L64:  DC45DC           FADDD [EBP-36]
;     095F:       9B               WAIT
;     0960:       DD55DC           FSTD [EBP-36]
;     0963:       8B057D000000     MOV EAX, [#x7D]
;     0969:       DDD8             FSTPD FR0
;     096B:       DD4001           FLDD [EAX+1]
;     096E:       DC45CC           FADDD [EBP-52]
;     0971:       9B               WAIT
;     0972:       DD55CC           FSTD [EBP-52]
;     0975:       E9C9FDFFFF       JMP L52
;     097A: L65:  DDD8             FSTPD FR0
;     097C:       DD4101           FLDD [ECX+1]
;     097F:       8B45C0           MOV EAX, [EBP-64]
;     0982:       DDDA             FSTPD FR2
;     0984:       DD4001           FLDD [EAX+1]
;     0987:       D9CA             FXCH FR2
;     0989:       DCCA             FMUL-STI FR2
;     098B:       9B               WAIT
;     098C:       DDD8             FSTPD FR0
;     098E:       DD4109           FLDD [ECX+9]
;     0991:       8B45C0           MOV EAX, [EBP-64]
;     0994:       DDDB             FSTPD FR3
;     0996:       DD4009           FLDD [EAX+9]
;     0999:       D9CB             FXCH FR3
;     099B:       D8CB             FMULD FR3
;     099D:       9B               WAIT
;     099E:       DCC2             FADD-STI FR2
;     09A0:       9B               WAIT
;     09A1:       DDD8             FSTPD FR0
;     09A3:       DD4111           FLDD [ECX+17]
;     09A6:       8B45C0           MOV EAX, [EBP-64]
;     09A9:       DDDB             FSTPD FR3
;     09AB:       DD4011           FLDD [EAX+17]
;     09AE:       D9CB             FXCH FR3
;     09B0:       D8CB             FMULD FR3
;     09B2:       9B               WAIT
;     09B3:       D8C2             FADDD FR2
;     09B5:       DD55E4           FSTD [EBP-28]
;     09B8:       DDD8             FSTPD FR0
;     09BA:       DD45E4           FLDD [EBP-28]
;     09BD:       D9E4             FTST
;     09BF:       DFE0             FNSTSW
;     09C1:       80E445           AND AH, 69
;     09C4:       80FC01           CMP AH, 1
;     09C7:       7506             JNE L66
;     09C9:       DDD8             FSTPD FR0
;     09CB:       D9EE             FLDZ
;     09CD:       EB8D             JMP L64
;     09CF: L66:  DDD8             FSTPD FR0
;     09D1:       DD4701           FLDD [EDI+1]
;     09D4:       D8C9             FMULD FR1
;     09D6:       DDD2             FSTD FR2
;     09D8:       DDD8             FSTPD FR0
;     09DA:       DD4709           FLDD [EDI+9]
;     09DD:       D8C9             FMULD FR1
;     09DF:       DDD3             FSTD FR3
;     09E1:       DDD8             FSTPD FR0
;     09E3:       DD4711           FLDD [EDI+17]
;     09E6:       D8C9             FMULD FR1
;     09E8:       9B               WAIT
;     09E9:       BAD6000000       MOV EDX, 214
;     09EE:       BB0C000000       MOV EBX, 12
;     09F3:       BE18000000       MOV ESI, 24
;     09F8:       8D460F           LEA EAX, [ESI+15]
;     09FB:       83E0F8           AND EAX, -8
;     09FE:       64               BYTE #X64
;     09FF:       800D4800000004   OR BYTE PTR [#x48], 4
;     0A06:       64               BYTE #X64
;     0A07:       030520000000     ADD EAX, [#x20]
;     0A0D:       64               BYTE #X64
;     0A0E:       3B0524000000     CMP EAX, [#x24]
;     0A14:       7607             JBE L68
;     0A16:       E800000000       CALL L67
;     0A1B: L67:  EB15             JMP L69
;     0A1D: L68:  64               BYTE #X64
;     0A1E:       330520000000     XOR EAX, [#x20]
;     0A24:       64               BYTE #X64
;     0A25:       310520000000     XOR [#x20], EAX
;     0A2B:       64               BYTE #X64
;     0A2C:       330520000000     XOR EAX, [#x20]
;     0A32: L69:  8D4007           LEA EAX, [EAX+7]
;     0A35:       8950F9           MOV [EAX-7], EDX
;     0A38:       8958FD           MOV [EAX-3], EBX
;     0A3B:       64               BYTE #X64
;     0A3C:       80354800000004   XOR BYTE PTR [#x48], 4
;     0A43:       7403             JEQ L70
;     0A45:       0F0B09           BREAK 9                    ; pending interrupt trap
;     0A48: L70:  D9CA             FXCH FR2
;     0A4A:       DD5001           FSTD [EAX+1]
;     0A4D:       D9CA             FXCH FR2
;     0A4F:       D9CB             FXCH FR3
;     0A51:       DD5009           FSTD [EAX+9]
;     0A54:       D9CB             FXCH FR3
;     0A56:       DD5011           FSTD [EAX+17]
;     0A59:       8B55F4           MOV EDX, [EBP-12]
;     0A5C:       DDD8             FSTPD FR0
;     0A5E:       DD4201           FLDD [EDX+1]
;     0A61:       DDD9             FSTPD FR1
;     0A63:       DD4001           FLDD [EAX+1]
;     0A66:       D9C9             FXCH FR1
;     0A68:       DCC1             FADD-STI FR1
;     0A6A:       9B               WAIT
;     0A6B:       8B55F4           MOV EDX, [EBP-12]
;     0A6E:       DDD8             FSTPD FR0
;     0A70:       DD4209           FLDD [EDX+9]
;     0A73:       DDDA             FSTPD FR2
;     0A75:       DD4009           FLDD [EAX+9]
;     0A78:       D9CA             FXCH FR2
;     0A7A:       DCC2             FADD-STI FR2
;     0A7C:       9B               WAIT
;     0A7D:       8B55F4           MOV EDX, [EBP-12]
;     0A80:       DDD8             FSTPD FR0
;     0A82:       DD4211           FLDD [EDX+17]
;     0A85:       DDDB             FSTPD FR3
;     0A87:       DD4011           FLDD [EAX+17]
;     0A8A:       D9CB             FXCH FR3
;     0A8C:       D8C3             FADDD FR3
;     0A8E:       9B               WAIT
;     0A8F:       BAD6000000       MOV EDX, 214
;     0A94:       BB0C000000       MOV EBX, 12
;     0A99:       BE18000000       MOV ESI, 24
;     0A9E:       8D460F           LEA EAX, [ESI+15]
;     0AA1:       83E0F8           AND EAX, -8
;     0AA4:       64               BYTE #X64
;     0AA5:       800D4800000004   OR BYTE PTR [#x48], 4
;     0AAC:       64               BYTE #X64
;     0AAD:       030520000000     ADD EAX, [#x20]
;     0AB3:       64               BYTE #X64
;     0AB4:       3B0524000000     CMP EAX, [#x24]
;     0ABA:       7607             JBE L72
;     0ABC:       E800000000       CALL L71
;     0AC1: L71:  EB15             JMP L73
;     0AC3: L72:  64               BYTE #X64
;     0AC4:       330520000000     XOR EAX, [#x20]
;     0ACA:       64               BYTE #X64
;     0ACB:       310520000000     XOR [#x20], EAX
;     0AD1:       64               BYTE #X64
;     0AD2:       330520000000     XOR EAX, [#x20]
;     0AD8: L73:  8D4007           LEA EAX, [EAX+7]
;     0ADB:       8950F9           MOV [EAX-7], EDX
;     0ADE:       8958FD           MOV [EAX-3], EBX
;     0AE1:       64               BYTE #X64
;     0AE2:       80354800000004   XOR BYTE PTR [#x48], 4
;     0AE9:       7403             JEQ L74
;     0AEB:       0F0B09           BREAK 9                    ; pending interrupt trap
;     0AEE: L74:  D9C9             FXCH FR1
;     0AF0:       DD5001           FSTD [EAX+1]
;     0AF3:       D9C9             FXCH FR1
;     0AF5:       D9CA             FXCH FR2
;     0AF7:       DD5009           FSTD [EAX+9]
;     0AFA:       D9CA             FXCH FR2
;     0AFC:       DD5011           FSTD [EAX+17]
;     0AFF:       DDD8             FSTPD FR0
;     0B01:       DD4101           FLDD [ECX+1]
;     0B04:       8B1589000000     MOV EDX, [#x89]
;     0B0A:       DDD9             FSTPD FR1
;     0B0C:       DD4201           FLDD [EDX+1]
;     0B0F:       D9C9             FXCH FR1
;     0B11:       DCC9             FMUL-STI FR1
;     0B13:       9B               WAIT
;     0B14:       DDD8             FSTPD FR0
;     0B16:       DD4109           FLDD [ECX+9]
;     0B19:       8B1589000000     MOV EDX, [#x89]
;     0B1F:       DDDA             FSTPD FR2
;     0B21:       DD4201           FLDD [EDX+1]
;     0B24:       D9CA             FXCH FR2
;     0B26:       DCCA             FMUL-STI FR2
;     0B28:       9B               WAIT
;     0B29:       DDD8             FSTPD FR0
;     0B2B:       DD4111           FLDD [ECX+17]
;     0B2E:       8B0D89000000     MOV ECX, [#x89]
;     0B34:       DDDB             FSTPD FR3
;     0B36:       DD4101           FLDD [ECX+1]
;     0B39:       D9CB             FXCH FR3
;     0B3B:       D8CB             FMULD FR3
;     0B3D:       9B               WAIT
;     0B3E:       BAD6000000       MOV EDX, 214
;     0B43:       BB0C000000       MOV EBX, 12
;     0B48:       BE18000000       MOV ESI, 24
;     0B4D:       8D4E0F           LEA ECX, [ESI+15]
;     0B50:       83E1F8           AND ECX, -8
;     0B53:       64               BYTE #X64
;     0B54:       800D4800000004   OR BYTE PTR [#x48], 4
;     0B5B:       64               BYTE #X64
;     0B5C:       030D20000000     ADD ECX, [#x20]
;     0B62:       64               BYTE #X64
;     0B63:       3B0D24000000     CMP ECX, [#x24]
;     0B69:       7607             JBE L76
;     0B6B:       E800000000       CALL L75
;     0B70: L75:  EB15             JMP L77
;     0B72: L76:  64               BYTE #X64
;     0B73:       330D20000000     XOR ECX, [#x20]
;     0B79:       64               BYTE #X64
;     0B7A:       310D20000000     XOR [#x20], ECX
;     0B80:       64               BYTE #X64
;     0B81:       330D20000000     XOR ECX, [#x20]
;     0B87: L77:  8D4907           LEA ECX, [ECX+7]
;     0B8A:       8951F9           MOV [ECX-7], EDX
;     0B8D:       8959FD           MOV [ECX-3], EBX
;     0B90:       64               BYTE #X64
;     0B91:       80354800000004   XOR BYTE PTR [#x48], 4
;     0B98:       7403             JEQ L78
;     0B9A:       0F0B09           BREAK 9                    ; pending interrupt trap
;     0B9D: L78:  D9C9             FXCH FR1
;     0B9F:       DD5101           FSTD [ECX+1]
;     0BA2:       D9C9             FXCH FR1
;     0BA4:       D9CA             FXCH FR2
;     0BA6:       DD5109           FSTD [ECX+9]
;     0BA9:       D9CA             FXCH FR2
;     0BAB:       DD5111           FSTD [ECX+17]
;     0BAE:       8BDC             MOV EBX, ESP
;     0BB0:       83EC0C           SUB ESP, 12
;     0BB3:       8BD0             MOV EDX, EAX
;     0BB5:       8BF9             MOV EDI, ECX
;     0BB7:       8B058D000000     MOV EAX, [#x8D]
;     0BBD:       B908000000       MOV ECX, 8
;     0BC2:       896BFC           MOV [EBX-4], EBP
;     0BC5:       8BEB             MOV EBP, EBX
;     0BC7:       FF5005           CALL DWORD PTR [EAX+5]
;     0BCA:       7302             JNB L79
;     0BCC:       8BE3             MOV ESP, EBX
;     0BCE: L79:  8BDA             MOV EBX, EDX
;     0BD0:       8BF5             MOV ESI, EBP
;     0BD2:       8BC4             MOV EAX, ESP
;     0BD4:       81ECC0000000     SUB ESP, 192
;     0BDA:       8B4DEC           MOV ECX, [EBP-20]
;     0BDD:       89885CFFFFFF     MOV [EAX-164], ECX
;     0BE3:       8B55C0           MOV EDX, [EBP-64]
;     0BE6:       8970FC           MOV [EAX-4], ESI
;     0BE9:       8BE8             MOV EBP, EAX
;     0BEB:       C745F8C00C0000   MOV DWORD PTR [EBP-8], 3264
;     0BF2:       E91C070000       JMP L122
;     0BF7:       3D0B000008       CMP EAX, 134217739
;     0BFC:       7409             JEQ L80
;     0BFE:       DDD8             FSTPD FR0
;     0C00:       D9EE             FLDZ
;     0C02:       E955FDFFFF       JMP L64
;     0C07: L80:  DDD8             FSTPD FR0
;     0C09:       DD45E4           FLDD [EBP-28]
;     0C0C:       E94BFDFFFF       JMP L64
;     0C11: L81:  8B8574FFFFFF     MOV EAX, [EBP-140]
;     0C17:       B90B000008       MOV ECX, 134217739
;     0C1C:       8948FD           MOV [EAX-3], ECX
;     0C1F:       8B05F8000008     MOV EAX, [#x80000F8]
;     0C25:       64               BYTE #X64
;     0C26:       8B00             MOV EAX, [EAX]
;     0C28:       8B00             MOV EAX, [EAX]
;     0C2A:       8B0DF8000008     MOV ECX, [#x80000F8]
;     0C30:       64               BYTE #X64
;     0C31:       8901             MOV [ECX], EAX
;     0C33:       8BDD             MOV EBX, EBP
;     0C35:       8BCC             MOV ECX, ESP
;     0C37:       81ECC0000000     SUB ESP, 192
;     0C3D:       8B9574FFFFFF     MOV EDX, [EBP-140]
;     0C43:       8B8570FFFFFF     MOV EAX, [EBP-144]
;     0C49:       8959FC           MOV [ECX-4], EBX
;     0C4C:       8BE9             MOV EBP, ECX
;     0C4E:       C745F8230D0000   MOV DWORD PTR [EBP-8], 3363
;     0C55:       E9AA080000       JMP L136
;     0C5A:       BA0B000008       MOV EDX, 134217739
;     0C5F:       8D65F8           LEA ESP, [EBP-8]
;     0C62:       F8               CLC
;     0C63:       8B6DFC           MOV EBP, [EBP-4]
;     0C66:       C20400           RET 4
;     0C69: L82:  8BDC             MOV EBX, ESP
;     0C6B:       83EC0C           SUB ESP, 12
;     0C6E:       8B55EC           MOV EDX, [EBP-20]
;     0C71:       8B7DF0           MOV EDI, [EBP-16]
;     0C74:       8B0591000000     MOV EAX, [#x91]
;     0C7A:       B908000000       MOV ECX, 8
;     0C7F:       896BFC           MOV [EBX-4], EBP
;     0C82:       8BEB             MOV EBP, EBX
;     0C84:       FF5005           CALL DWORD PTR [EAX+5]
;     0C87:       7302             JNB L83
;     0C89:       8BE3             MOV ESP, EBX
;     0C8B: L83:  8BC2             MOV EAX, EDX
;     0C8D:       8B4DF0           MOV ECX, [EBP-16]
;     0C90:       83C104           ADD ECX, 4
;     0C93:       894DF0           MOV [EBP-16], ECX
;     0C96:       C1E808           SHR EAX, 8
;     0C99:       8BD0             MOV EDX, EAX
;     0C9B:       C1E202           SHL EDX, 2
;     0C9E:       8BDC             MOV EBX, ESP
;     0CA0:       83EC0C           SUB ESP, 12
;     0CA3:       8BBD70FFFFFF     MOV EDI, [EBP-144]
;     0CA9:       8B0579000000     MOV EAX, [#x79]
;     0CAF:       B908000000       MOV ECX, 8
;     0CB4:       896BFC           MOV [EBX-4], EBP
;     0CB7:       8BEB             MOV EBP, EBX
;     0CB9:       FF5005           CALL DWORD PTR [EAX+5]
;     0CBC:       7302             JNB L84
;     0CBE:       8BE3             MOV ESP, EBX
;     0CC0: L84:  E934F9FFFF       JMP L40
;     0CC5:       8955F4           MOV [EBP-12], EDX
;     0CC8:       895DF0           MOV [EBP-16], EBX
;     0CCB:       894DEC           MOV [EBP-20], ECX
;     0CCE:       8B8D68FFFFFF     MOV ECX, [EBP-152]
;     0CD4:       8B956CFFFFFF     MOV EDX, [EBP-148]
;     0CDA:       8B05D8000008     MOV EAX, [#x80000D8]
;     0CE0:       64               BYTE #X64
;     0CE1:       8908             MOV [EAX], ECX
;     0CE3:       8B0518040008     MOV EAX, [#x8000418]
;     0CE9:       64               BYTE #X64
;     0CEA:       8910             MOV [EAX], EDX
;     0CEC:       8BB564FFFFFF     MOV ESI, [EBP-156]
;     0CF2:       64               BYTE #X64
;     0CF3:       8B150C000000     MOV EDX, [#xC]
;     0CF9:       39D6             CMP ESI, EDX
;     0CFB:       742C             JEQ L87
;     0CFD: L85:  8B42FC           MOV EAX, [EDX-4]
;     0D00:       09C0             OR EAX, EAX
;     0D02:       7410             JEQ L86
;     0D04:       8B4AF8           MOV ECX, [EDX-8]
;     0D07:       8B5811           MOV EBX, [EAX+17]
;     0D0A:       64               BYTE #X64
;     0D0B:       890B             MOV [EBX], ECX
;     0D0D:       C742FC00000000   MOV DWORD PTR [EDX-4], 0
;     0D14: L86:  C742F800000000   MOV DWORD PTR [EDX-8], 0
;     0D1B:       83EA08           SUB EDX, 8
;     0D1E:       39D6             CMP ESI, EDX
;     0D20:       75DB             JNE L85
;     0D22:       64               BYTE #X64
;     0D23:       89150C000000     MOV [#xC], EDX
;     0D29: L87:  8BDD             MOV EBX, EBP
;     0D2B:       8BCC             MOV ECX, ESP
;     0D2D:       81ECC0000000     SUB ESP, 192
;     0D33:       8B9574FFFFFF     MOV EDX, [EBP-140]
;     0D39:       8B8570FFFFFF     MOV EAX, [EBP-144]
;     0D3F:       8959FC           MOV [ECX-4], EBX
;     0D42:       8BE9             MOV EBP, ECX
;     0D44:       C745F8190E0000   MOV DWORD PTR [EBP-8], 3609
;     0D4B:       E9B4070000       JMP L136
;     0D50:       8B45F4           MOV EAX, [EBP-12]
;     0D53:       8B5DF0           MOV EBX, [EBP-16]
;     0D56:       8B4DEC           MOV ECX, [EBP-20]
;     0D59:       E800000000       CALL L88
;     0D5E: L88:  8BDC             MOV EBX, ESP
;     0D60:       83EC1C           SUB ESP, 28
;     0D63:       8B1595000000     MOV EDX, [#x95]
;     0D69:       8B3D99000000     MOV EDI, [#x99]
;     0D6F:       8B359D000000     MOV ESI, [#x9D]
;     0D75:       8B05A1000000     MOV EAX, [#xA1]
;     0D7B:       8943F0           MOV [EBX-16], EAX
;     0D7E:       8B05A5000000     MOV EAX, [#xA5]
;     0D84:       8943EC           MOV [EBX-20], EAX
;     0D87:       8B05A9000000     MOV EAX, [#xA9]
;     0D8D:       8943E8           MOV [EBX-24], EAX
;     0D90:       C743E420000000   MOV DWORD PTR [EBX-28], 32
;     0D97:       8B05AD000000     MOV EAX, [#xAD]
;     0D9D:       B91C000000       MOV ECX, 28
;     0DA2:       896BFC           MOV [EBX-4], EBP
;     0DA5:       8BEB             MOV EBP, EBX
;     0DA7:       FF5005           CALL DWORD PTR [EAX+5]
;     0DAA:       7302             JNB L89
;     0DAC:       8BE3             MOV ESP, EBX
;     0DAE: L89:  8BDC             MOV EBX, ESP
;     0DB0:       83EC1C           SUB ESP, 28
;     0DB3:       8B1595000000     MOV EDX, [#x95]
;     0DB9:       8B3D99000000     MOV EDI, [#x99]
;     0DBF:       8B35B1000000     MOV ESI, [#xB1]
;     0DC5:       8B05A1000000     MOV EAX, [#xA1]
;     0DCB:       8943F0           MOV [EBX-16], EAX
;     0DCE:       8B05B5000000     MOV EAX, [#xB5]
;     0DD4:       8943EC           MOV [EBX-20], EAX
;     0DD7:       8B05A9000000     MOV EAX, [#xA9]
;     0DDD:       8943E8           MOV [EBX-24], EAX
;     0DE0:       C743E414000000   MOV DWORD PTR [EBX-28], 20
;     0DE7:       8B05AD000000     MOV EAX, [#xAD]
;     0DED:       B91C000000       MOV ECX, 28
;     0DF2:       896BFC           MOV [EBX-4], EBP
;     0DF5:       8BEB             MOV EBP, EBX
;     0DF7:       FF5005           CALL DWORD PTR [EAX+5]
;     0DFA:       7302             JNB L90
;     0DFC:       8BE3             MOV ESP, EBX
;     0DFE: L90:  8B8554FFFFFF     MOV EAX, [EBP-172]
;     0E04:       8B7807           MOV EDI, [EAX+7]
;     0E07:       8B8D54FFFFFF     MOV ECX, [EBP-172]
;     0E0D:       8B41FF           MOV EAX, [ECX-1]
;     0E10:       C1E808           SHR EAX, 8
;     0E13:       DDDB             FSTPD FR3
;     0E15:       DD4481FB         FLDD [ECX+EAX*4-5]
;     0E19:       D9CB             FXCH FR3
;     0E1B:       DDD8             FSTPD FR0
;     0E1D:       DD4701           FLDD [EDI+1]
;     0E20:       DDDA             FSTPD FR2
;     0E22:       DD4601           FLDD [ESI+1]
;     0E25:       D9CA             FXCH FR2
;     0E27:       DCE2             FSUBR-STI FR2
;     0E29:       9B               WAIT
;     0E2A:       DDD8             FSTPD FR0
;     0E2C:       DD4709           FLDD [EDI+9]
;     0E2F:       DDDC             FSTPD FR4
;     0E31:       DD4609           FLDD [ESI+9]
;     0E34:       D9CC             FXCH FR4
;     0E36:       DCE4             FSUBR-STI FR4
;     0E38:       9B               WAIT
;     0E39:       DDD8             FSTPD FR0
;     0E3B:       DD4711           FLDD [EDI+17]
;     0E3E:       DDDD             FSTPD FR5
;     0E40:       DD4611           FLDD [ESI+17]
;     0E43:       D9CD             FXCH FR5
;     0E45:       D8E5             FSUBD FR5
;     0E47:       9B               WAIT
;     0E48:       B9D6000000       MOV ECX, 214
;     0E4D:       BA0C000000       MOV EDX, 12
;     0E52:       BB18000000       MOV EBX, 24
;     0E57:       8D430F           LEA EAX, [EBX+15]
;     0E5A:       83E0F8           AND EAX, -8
;     0E5D:       64               BYTE #X64
;     0E5E:       800D4800000004   OR BYTE PTR [#x48], 4
;     0E65:       64               BYTE #X64
;     0E66:       030520000000     ADD EAX, [#x20]
;     0E6C:       64               BYTE #X64
;     0E6D:       3B0524000000     CMP EAX, [#x24]
;     0E73:       7607             JBE L92
;     0E75:       E800000000       CALL L91
;     0E7A: L91:  EB15             JMP L93
;     0E7C: L92:  64               BYTE #X64
;     0E7D:       330520000000     XOR EAX, [#x20]
;     0E83:       64               BYTE #X64
;     0E84:       310520000000     XOR [#x20], EAX
;     0E8A:       64               BYTE #X64
;     0E8B:       330520000000     XOR EAX, [#x20]
;     0E91: L93:  8D4007           LEA EAX, [EAX+7]
;     0E94:       8948F9           MOV [EAX-7], ECX
;     0E97:       8950FD           MOV [EAX-3], EDX
;     0E9A:       64               BYTE #X64
;     0E9B:       80354800000004   XOR BYTE PTR [#x48], 4
;     0EA2:       7403             JEQ L94
;     0EA4:       0F0B09           BREAK 9                    ; pending interrupt trap
;     0EA7: L94:  D9CA             FXCH FR2
;     0EA9:       DD5001           FSTD [EAX+1]
;     0EAC:       D9CA             FXCH FR2
;     0EAE:       D9CC             FXCH FR4
;     0EB0:       DD5009           FSTD [EAX+9]
;     0EB3:       D9CC             FXCH FR4
;     0EB5:       DD5011           FSTD [EAX+17]
;     0EB8:       DDD8             FSTPD FR0
;     0EBA:       DD4001           FLDD [EAX+1]
;     0EBD:       8B4DE4           MOV ECX, [EBP-28]
;     0EC0:       DDDA             FSTPD FR2
;     0EC2:       DD4101           FLDD [ECX+1]
;     0EC5:       D9CA             FXCH FR2
;     0EC7:       DCCA             FMUL-STI FR2
;     0EC9:       9B               WAIT
;     0ECA:       DDD8             FSTPD FR0
;     0ECC:       DD4009           FLDD [EAX+9]
;     0ECF:       8B4DE4           MOV ECX, [EBP-28]
;     0ED2:       DDDC             FSTPD FR4
;     0ED4:       DD4109           FLDD [ECX+9]
;     0ED7:       D9CC             FXCH FR4
;     0ED9:       D8CC             FMULD FR4
;     0EDB:       9B               WAIT
;     0EDC:       DCC2             FADD-STI FR2
;     0EDE:       9B               WAIT
;     0EDF:       DDD8             FSTPD FR0
;     0EE1:       DD4011           FLDD [EAX+17]
;     0EE4:       8B4DE4           MOV ECX, [EBP-28]
;     0EE7:       DDDC             FSTPD FR4
;     0EE9:       DD4111           FLDD [ECX+17]
;     0EEC:       D9CC             FXCH FR4
;     0EEE:       D8CC             FMULD FR4
;     0EF0:       9B               WAIT
;     0EF1:       DCC2             FADD-STI FR2
;     0EF3:       9B               WAIT
;     0EF4:       DDD8             FSTPD FR0
;     0EF6:       D9C1             FLDD FR1
;     0EF8:       D8CA             FMULD FR2
;     0EFA:       DDD4             FSTD FR4
;     0EFC:       DDD8             FSTPD FR0
;     0EFE:       DD4001           FLDD [EAX+1]
;     0F01:       DDDD             FSTPD FR5
;     0F03:       DD4001           FLDD [EAX+1]
;     0F06:       D9CD             FXCH FR5
;     0F08:       DCCD             FMUL-STI FR5
;     0F0A:       9B               WAIT
;     0F0B:       DDD8             FSTPD FR0
;     0F0D:       DD4009           FLDD [EAX+9]
;     0F10:       DDDE             FSTPD FR6
;     0F12:       DD4009           FLDD [EAX+9]
;     0F15:       D9CE             FXCH FR6
;     0F17:       D8CE             FMULD FR6
;     0F19:       9B               WAIT
;     0F1A:       DCC5             FADD-STI FR5
;     0F1C:       9B               WAIT
;     0F1D:       DDD8             FSTPD FR0
;     0F1F:       DD4011           FLDD [EAX+17]
;     0F22:       DDDE             FSTPD FR6
;     0F24:       DD4011           FLDD [EAX+17]
;     0F27:       D9CE             FXCH FR6
;     0F29:       D8CE             FMULD FR6
;     0F2B:       9B               WAIT
;     0F2C:       D8C5             FADDD FR5
;     0F2E:       9B               WAIT
;     0F2F:       DCEC             FSUB-STI FR4
;     0F31:       9B               WAIT
;     0F32:       DDD8             FSTPD FR0
;     0F34:       D9C2             FLDD FR2
;     0F36:       D8CB             FMULD FR3
;     0F38:       9B               WAIT
;     0F39:       D8C4             FADDD FR4
;     0F3B:       9B               WAIT
;     0F3C:       D9E4             FTST
;     0F3E:       DFE0             FNSTSW
;     0F40:       80E445           AND AH, 69
;     0F43:       80FC01           CMP AH, 1
;     0F46:       0F8577030000     JNE L119
;     0F4C:       8B0585000000     MOV EAX, [#x85]
;     0F52:       DDDA             FSTPD FR2
;     0F54:       DD4001           FLDD [EAX+1]
;     0F57:       D9CA             FXCH FR2
;     0F59: L95:  DDD8             FSTPD FR0
;     0F5B:       D9C1             FLDD FR1
;     0F5D:       D8D1             FCOMD FR1
;     0F5F:       DFE0             FNSTSW
;     0F61:       80E445           AND AH, 69
;     0F64:       80FC01           CMP AH, 1
;     0F67:       0F854B030000     JNE L118
;     0F6D:       8B8554FFFFFF     MOV EAX, [EBP-172]
;     0F73:       8B4003           MOV EAX, [EAX+3]
;     0F76:       3B05B9000000     CMP EAX, [#xB9]
;     0F7C:       0F84C9020000     JEQ L115
;     0F82:       8B4833           MOV ECX, [EAX+51]
;     0F85:       894DF4           MOV [EBP-12], ECX
;     0F88:       837DF40C         CMP DWORD PTR [EBP-12], 12
;     0F8C:       0F8FA7020000     JNLE L114
;     0F92: L96:  8B45E4           MOV EAX, [EBP-28]
;     0F95:       DDD8             FSTPD FR0
;     0F97:       DD4001           FLDD [EAX+1]
;     0F9A:       D8CA             FMULD FR2
;     0F9C:       DDD1             FSTD FR1
;     0F9E:       8B45E4           MOV EAX, [EBP-28]
;     0FA1:       DDD8             FSTPD FR0
;     0FA3:       DD4009           FLDD [EAX+9]
;     0FA6:       D8CA             FMULD FR2
;     0FA8:       DDD3             FSTD FR3
;     0FAA:       8B45E4           MOV EAX, [EBP-28]
;     0FAD:       DDD8             FSTPD FR0
;     0FAF:       DD4011           FLDD [EAX+17]
;     0FB2:       D8CA             FMULD FR2
;     0FB4:       9B               WAIT
;     0FB5:       B9D6000000       MOV ECX, 214
;     0FBA:       BA0C000000       MOV EDX, 12
;     0FBF:       BB18000000       MOV EBX, 24
;     0FC4:       8D430F           LEA EAX, [EBX+15]
;     0FC7:       83E0F8           AND EAX, -8
;     0FCA:       64               BYTE #X64
;     0FCB:       800D4800000004   OR BYTE PTR [#x48], 4
;     0FD2:       64               BYTE #X64
;     0FD3:       030520000000     ADD EAX, [#x20]
;     0FD9:       64               BYTE #X64
;     0FDA:       3B0524000000     CMP EAX, [#x24]
;     0FE0:       7607             JBE L98
;     0FE2:       E800000000       CALL L97
;     0FE7: L97:  EB15             JMP L99
;     0FE9: L98:  64               BYTE #X64
;     0FEA:       330520000000     XOR EAX, [#x20]
;     0FF0:       64               BYTE #X64
;     0FF1:       310520000000     XOR [#x20], EAX
;     0FF7:       64               BYTE #X64
;     0FF8:       330520000000     XOR EAX, [#x20]
;     0FFE: L99:  8D4007           LEA EAX, [EAX+7]
;     1001:       8948F9           MOV [EAX-7], ECX
;     1004:       8950FD           MOV [EAX-3], EDX
;     1007:       64               BYTE #X64
;     1008:       80354800000004   XOR BYTE PTR [#x48], 4
;     100F:       7403             JEQ L100
;     1011:       0F0B09           BREAK 9                    ; pending interrupt trap
;     1014: L100: D9C9             FXCH FR1
;     1016:       DD5001           FSTD [EAX+1]
;     1019:       D9C9             FXCH FR1
;     101B:       D9CB             FXCH FR3
;     101D:       DD5009           FSTD [EAX+9]
;     1020:       D9CB             FXCH FR3
;     1022:       DD5011           FSTD [EAX+17]
;     1025:       DDD8             FSTPD FR0
;     1027:       DD4601           FLDD [ESI+1]
;     102A:       DDD9             FSTPD FR1
;     102C:       DD4001           FLDD [EAX+1]
;     102F:       D9C9             FXCH FR1
;     1031:       DCC1             FADD-STI FR1
;     1033:       9B               WAIT
;     1034:       DDD8             FSTPD FR0
;     1036:       DD4609           FLDD [ESI+9]
;     1039:       DDDB             FSTPD FR3
;     103B:       DD4009           FLDD [EAX+9]
;     103E:       D9CB             FXCH FR3
;     1040:       DCC3             FADD-STI FR3
;     1042:       9B               WAIT
;     1043:       DDD8             FSTPD FR0
;     1045:       DD4611           FLDD [ESI+17]
;     1048:       DDDC             FSTPD FR4
;     104A:       DD4011           FLDD [EAX+17]
;     104D:       D9CC             FXCH FR4
;     104F:       D8C4             FADDD FR4
;     1051:       9B               WAIT
;     1052:       B9D6000000       MOV ECX, 214
;     1057:       BA0C000000       MOV EDX, 12
;     105C:       BB18000000       MOV EBX, 24
;     1061:       8D430F           LEA EAX, [EBX+15]
;     1064:       83E0F8           AND EAX, -8
;     1067:       64               BYTE #X64
;     1068:       800D4800000004   OR BYTE PTR [#x48], 4
;     106F:       64               BYTE #X64
;     1070:       030520000000     ADD EAX, [#x20]
;     1076:       64               BYTE #X64
;     1077:       3B0524000000     CMP EAX, [#x24]
;     107D:       7607             JBE L102
;     107F:       E800000000       CALL L101
;     1084: L101: EB15             JMP L103
;     1086: L102: 64               BYTE #X64
;     1087:       330520000000     XOR EAX, [#x20]
;     108D:       64               BYTE #X64
;     108E:       310520000000     XOR [#x20], EAX
;     1094:       64               BYTE #X64
;     1095:       330520000000     XOR EAX, [#x20]
;     109B: L103: 8D4007           LEA EAX, [EAX+7]
;     109E:       8948F9           MOV [EAX-7], ECX
;     10A1:       8950FD           MOV [EAX-3], EDX
;     10A4:       64               BYTE #X64
;     10A5:       80354800000004   XOR BYTE PTR [#x48], 4
;     10AC:       7403             JEQ L104
;     10AE:       0F0B09           BREAK 9                    ; pending interrupt trap
;     10B1: L104: D9C9             FXCH FR1
;     10B3:       DD5001           FSTD [EAX+1]
;     10B6:       D9C9             FXCH FR1
;     10B8:       D9CB             FXCH FR3
;     10BA:       DD5009           FSTD [EAX+9]
;     10BD:       D9CB             FXCH FR3
;     10BF:       DD5011           FSTD [EAX+17]
;     10C2:       DDD8             FSTPD FR0
;     10C4:       DD4001           FLDD [EAX+1]
;     10C7:       DDD9             FSTPD FR1
;     10C9:       DD4701           FLDD [EDI+1]
;     10CC:       D9C9             FXCH FR1
;     10CE:       DCE1             FSUBR-STI FR1
;     10D0:       9B               WAIT
;     10D1:       DDD8             FSTPD FR0
;     10D3:       DD4009           FLDD [EAX+9]
;     10D6:       DDDB             FSTPD FR3
;     10D8:       DD4709           FLDD [EDI+9]
;     10DB:       D9CB             FXCH FR3
;     10DD:       DCE3             FSUBR-STI FR3
;     10DF:       9B               WAIT
;     10E0:       DDD8             FSTPD FR0
;     10E2:       DD4011           FLDD [EAX+17]
;     10E5:       DDDC             FSTPD FR4
;     10E7:       DD4711           FLDD [EDI+17]
;     10EA:       D9CC             FXCH FR4
;     10EC:       D8E4             FSUBD FR4
;     10EE:       9B               WAIT
;     10EF:       B9D6000000       MOV ECX, 214
;     10F4:       BA0C000000       MOV EDX, 12
;     10F9:       BB18000000       MOV EBX, 24
;     10FE:       8D430F           LEA EAX, [EBX+15]
;     1101:       83E0F8           AND EAX, -8
;     1104:       64               BYTE #X64
;     1105:       800D4800000004   OR BYTE PTR [#x48], 4
;     110C:       64               BYTE #X64
;     110D:       030520000000     ADD EAX, [#x20]
;     1113:       64               BYTE #X64
;     1114:       3B0524000000     CMP EAX, [#x24]
;     111A:       7607             JBE L106
;     111C:       E800000000       CALL L105
;     1121: L105: EB15             JMP L107
;     1123: L106: 64               BYTE #X64
;     1124:       330520000000     XOR EAX, [#x20]
;     112A:       64               BYTE #X64
;     112B:       310520000000     XOR [#x20], EAX
;     1131:       64               BYTE #X64
;     1132:       330520000000     XOR EAX, [#x20]
;     1138: L107: 8D4007           LEA EAX, [EAX+7]
;     113B:       8948F9           MOV [EAX-7], ECX
;     113E:       8950FD           MOV [EAX-3], EDX
;     1141:       64               BYTE #X64
;     1142:       80354800000004   XOR BYTE PTR [#x48], 4
;     1149:       7403             JEQ L108
;     114B:       0F0B09           BREAK 9                    ; pending interrupt trap
;     114E: L108: D9C9             FXCH FR1
;     1150:       DD5001           FSTD [EAX+1]
;     1153:       D9C9             FXCH FR1
;     1155:       D9CB             FXCH FR3
;     1157:       DD5009           FSTD [EAX+9]
;     115A:       D9CB             FXCH FR3
;     115C:       DD5011           FSTD [EAX+17]
;     115F:       DDD8             FSTPD FR0
;     1161:       DD4001           FLDD [EAX+1]
;     1164:       DDD9             FSTPD FR1
;     1166:       DD4001           FLDD [EAX+1]
;     1169:       D9C9             FXCH FR1
;     116B:       DCC9             FMUL-STI FR1
;     116D:       9B               WAIT
;     116E:       DDD8             FSTPD FR0
;     1170:       DD4009           FLDD [EAX+9]
;     1173:       DDDB             FSTPD FR3
;     1175:       DD4009           FLDD [EAX+9]
;     1178:       D9CB             FXCH FR3
;     117A:       D8CB             FMULD FR3
;     117C:       9B               WAIT
;     117D:       DCC1             FADD-STI FR1
;     117F:       9B               WAIT
;     1180:       DDD8             FSTPD FR0
;     1182:       DD4011           FLDD [EAX+17]
;     1185:       DDDB             FSTPD FR3
;     1187:       DD4011           FLDD [EAX+17]
;     118A:       D9CB             FXCH FR3
;     118C:       D8CB             FMULD FR3
;     118E:       9B               WAIT
;     118F:       D8C1             FADDD FR1
;     1191:       9B               WAIT
;     1192:       D9FA             FSQRT
;     1194:       9B               WAIT
;     1195:       DDD9             FSTPD FR1
;     1197:       D9E8             FLD1
;     1199:       D9C9             FXCH FR1
;     119B:       DCF9             FDIV-STI FR1
;     119D:       9B               WAIT
;     119E:       DDD8             FSTPD FR0
;     11A0:       DD4001           FLDD [EAX+1]
;     11A3:       D8C9             FMULD FR1
;     11A5:       DDD3             FSTD FR3
;     11A7:       DDD8             FSTPD FR0
;     11A9:       DD4009           FLDD [EAX+9]
;     11AC:       D8C9             FMULD FR1
;     11AE:       DDD4             FSTD FR4
;     11B0:       DDD8             FSTPD FR0
;     11B2:       DD4011           FLDD [EAX+17]
;     11B5:       D8C9             FMULD FR1
;     11B7:       9B               WAIT
;     11B8:       B9D6000000       MOV ECX, 214
;     11BD:       BA0C000000       MOV EDX, 12
;     11C2:       BB18000000       MOV EBX, 24
;     11C7:       8D430F           LEA EAX, [EBX+15]
;     11CA:       83E0F8           AND EAX, -8
;     11CD:       64               BYTE #X64
;     11CE:       800D4800000004   OR BYTE PTR [#x48], 4
;     11D5:       64               BYTE #X64
;     11D6:       030520000000     ADD EAX, [#x20]
;     11DC:       64               BYTE #X64
;     11DD:       3B0524000000     CMP EAX, [#x24]
;     11E3:       7607             JBE L110
;     11E5:       E800000000       CALL L109
;     11EA: L109: EB15             JMP L111
;     11EC: L110: 64               BYTE #X64
;     11ED:       330520000000     XOR EAX, [#x20]
;     11F3:       64               BYTE #X64
;     11F4:       310520000000     XOR [#x20], EAX
;     11FA:       64               BYTE #X64
;     11FB:       330520000000     XOR EAX, [#x20]
;     1201: L111: 8D4007           LEA EAX, [EAX+7]
;     1204:       8948F9           MOV [EAX-7], ECX
;     1207:       8950FD           MOV [EAX-3], EDX
;     120A:       64               BYTE #X64
;     120B:       80354800000004   XOR BYTE PTR [#x48], 4
;     1212:       7403             JEQ L112
;     1214:       0F0B09           BREAK 9                    ; pending interrupt trap
;     1217: L112: D9CB             FXCH FR3
;     1219:       DD5001           FSTD [EAX+1]
;     121C:       D9CB             FXCH FR3
;     121E:       D9CC             FXCH FR4
;     1220:       DD5009           FSTD [EAX+9]
;     1223:       D9CC             FXCH FR4
;     1225:       DD5011           FSTD [EAX+17]
;     1228:       D9CA             FXCH FR2
;     122A:       DDD1             FSTD FR1
;     122C:       D9CA             FXCH FR2
;     122E:       8BC8             MOV ECX, EAX
;     1230: L113: 8D65F8           LEA ESP, [EBP-8]
;     1233:       8B6DFC           MOV EBP, [EBP-4]
;     1236:       C20400           RET 4
;     1239: L114: 8B402F           MOV EAX, [EAX+47]
;     123C:       8B400D           MOV EAX, [EAX+13]
;     123F:       3B05B9000000     CMP EAX, [#xB9]
;     1245:       0F8547FDFFFF     JNE L96
;     124B: L115: 8B8554FFFFFF     MOV EAX, [EBP-172]
;     1251:       8B780B           MOV EDI, [EAX+11]
;     1254:       EB4F             JMP L117
;     1256: L116: 8B57FD           MOV EDX, [EDI-3]
;     1259:       8B7F01           MOV EDI, [EDI+1]
;     125C:       897DF0           MOV [EBP-16], EDI
;     125F:       8975E8           MOV [EBP-24], ESI
;     1262:       8B8D58FFFFFF     MOV ECX, [EBP-168]
;     1268:       896DF4           MOV [EBP-12], EBP
;     126B:       8BC4             MOV EAX, ESP
;     126D:       81ECC0000000     SUB ESP, 192
;     1273:       898858FFFFFF     MOV [EAX-168], ECX
;     1279:       899054FFFFFF     MOV [EAX-172], EDX
;     127F:       8B4DE4           MOV ECX, [EBP-28]
;     1282:       8948E4           MOV [EAX-28], ECX
;     1285:       8B4DF4           MOV ECX, [EBP-12]
;     1288:       8948FC           MOV [EAX-4], ECX
;     128B:       8BE8             MOV EBP, EAX
;     128D:       C745F862130000   MOV DWORD PTR [EBP-8], 4962
;     1294:       E965FBFFFF       JMP L90
;     1299:       8B75E8           MOV ESI, [EBP-24]
;     129C:       8B7DF0           MOV EDI, [EBP-16]
;     129F:       898D58FFFFFF     MOV [EBP-168], ECX
;     12A5: L117: 81FF0B000008     CMP EDI, 134217739
;     12AB:       75A9             JNE L116
;     12AD:       8B8D58FFFFFF     MOV ECX, [EBP-168]
;     12B3:       E978FFFFFF       JMP L113
;     12B8: L118: 8B8D58FFFFFF     MOV ECX, [EBP-168]
;     12BE:       E96DFFFFFF       JMP L113
;     12C3: L119: D9FA             FSQRT
;     12C5:       DDD3             FSTD FR3
;     12C7:       DDD8             FSTPD FR0
;     12C9:       D9C1             FLDD FR1
;     12CB:       D8C3             FADDD FR3
;     12CD:       DDD4             FSTD FR4
;     12CF:       DDD8             FSTPD FR0
;     12D1:       D9C1             FLDD FR1
;     12D3:       D8E3             FSUBD FR3
;     12D5:       9B               WAIT
;     12D6:       D9CC             FXCH FR4
;     12D8:       D9E4             FTST
;     12DA:       D9CC             FXCH FR4
;     12DC:       DFE0             FNSTSW
;     12DE:       80E445           AND AH, 69
;     12E1:       80FC01           CMP AH, 1
;     12E4:       7512             JNE L120
;     12E6:       8B0585000000     MOV EAX, [#x85]
;     12EC:       DDDA             FSTPD FR2
;     12EE:       DD4001           FLDD [EAX+1]
;     12F1:       D9CA             FXCH FR2
;     12F3:       E961FCFFFF       JMP L95
;     12F8: L120: D9E4             FTST
;     12FA:       DFE0             FNSTSW
;     12FC:       80E445           AND AH, 69
;     12FF:       740B             JEQ L121
;     1301:       D9CC             FXCH FR4
;     1303:       DDD2             FSTD FR2
;     1305:       D9CC             FXCH FR4
;     1307:       E94DFCFFFF       JMP L95
;     130C: L121: DDD2             FSTD FR2
;     130E:       E946FCFFFF       JMP L95
;     1313: L122: 8B855CFFFFFF     MOV EAX, [EBP-164]
;     1319:       8B7007           MOV ESI, [EAX+7]
;     131C:       8B8D5CFFFFFF     MOV ECX, [EBP-164]
;     1322:       8B41FF           MOV EAX, [ECX-1]
;     1325:       C1E808           SHR EAX, 8
;     1328:       DDDA             FSTPD FR2
;     132A:       DD4481FB         FLDD [ECX+EAX*4-5]
;     132E:       D9CA             FXCH FR2
;     1330:       DDD8             FSTPD FR0
;     1332:       DD4601           FLDD [ESI+1]
;     1335:       DDD9             FSTPD FR1
;     1337:       DD4301           FLDD [EBX+1]
;     133A:       D9C9             FXCH FR1
;     133C:       DCE1             FSUBR-STI FR1
;     133E:       9B               WAIT
;     133F:       DDD8             FSTPD FR0
;     1341:       DD4609           FLDD [ESI+9]
;     1344:       DDDB             FSTPD FR3
;     1346:       DD4309           FLDD [EBX+9]
;     1349:       D9CB             FXCH FR3
;     134B:       DCE3             FSUBR-STI FR3
;     134D:       9B               WAIT
;     134E:       DDD8             FSTPD FR0
;     1350:       DD4611           FLDD [ESI+17]
;     1353:       DDDC             FSTPD FR4
;     1355:       DD4311           FLDD [EBX+17]
;     1358:       D9CC             FXCH FR4
;     135A:       D8E4             FSUBD FR4
;     135C:       9B               WAIT
;     135D:       BED6000000       MOV ESI, 214
;     1362:       BF0C000000       MOV EDI, 12
;     1367:       B918000000       MOV ECX, 24
;     136C:       8D410F           LEA EAX, [ECX+15]
;     136F:       83E0F8           AND EAX, -8
;     1372:       64               BYTE #X64
;     1373:       800D4800000004   OR BYTE PTR [#x48], 4
;     137A:       64               BYTE #X64
;     137B:       030520000000     ADD EAX, [#x20]
;     1381:       64               BYTE #X64
;     1382:       3B0524000000     CMP EAX, [#x24]
;     1388:       7607             JBE L124
;     138A:       E800000000       CALL L123
;     138F: L123: EB15             JMP L125
;     1391: L124: 64               BYTE #X64
;     1392:       330520000000     XOR EAX, [#x20]
;     1398:       64               BYTE #X64
;     1399:       310520000000     XOR [#x20], EAX
;     139F:       64               BYTE #X64
;     13A0:       330520000000     XOR EAX, [#x20]
;     13A6: L125: 8D4007           LEA EAX, [EAX+7]
;     13A9:       8970F9           MOV [EAX-7], ESI
;     13AC:       8978FD           MOV [EAX-3], EDI
;     13AF:       64               BYTE #X64
;     13B0:       80354800000004   XOR BYTE PTR [#x48], 4
;     13B7:       7403             JEQ L126
;     13B9:       0F0B09           BREAK 9                    ; pending interrupt trap
;     13BC: L126: D9C9             FXCH FR1
;     13BE:       DD5001           FSTD [EAX+1]
;     13C1:       D9C9             FXCH FR1
;     13C3:       D9CB             FXCH FR3
;     13C5:       DD5009           FSTD [EAX+9]
;     13C8:       D9CB             FXCH FR3
;     13CA:       DD5011           FSTD [EAX+17]
;     13CD:       DDD8             FSTPD FR0
;     13CF:       DD4001           FLDD [EAX+1]
;     13D2:       DDD9             FSTPD FR1
;     13D4:       DD4201           FLDD [EDX+1]
;     13D7:       D9C9             FXCH FR1
;     13D9:       DCC9             FMUL-STI FR1
;     13DB:       9B               WAIT
;     13DC:       DDD8             FSTPD FR0
;     13DE:       DD4009           FLDD [EAX+9]
;     13E1:       DDDB             FSTPD FR3
;     13E3:       DD4209           FLDD [EDX+9]
;     13E6:       D9CB             FXCH FR3
;     13E8:       D8CB             FMULD FR3
;     13EA:       9B               WAIT
;     13EB:       DCC1             FADD-STI FR1
;     13ED:       9B               WAIT
;     13EE:       DDD8             FSTPD FR0
;     13F0:       DD4011           FLDD [EAX+17]
;     13F3:       DDDB             FSTPD FR3
;     13F5:       DD4211           FLDD [EDX+17]
;     13F8:       D9CB             FXCH FR3
;     13FA:       D8CB             FMULD FR3
;     13FC:       9B               WAIT
;     13FD:       DCC1             FADD-STI FR1
;     13FF:       9B               WAIT
;     1400:       DDD8             FSTPD FR0
;     1402:       D9C0             FLDD FR0
;     1404:       D8C9             FMULD FR1
;     1406:       DDD3             FSTD FR3
;     1408:       DDD8             FSTPD FR0
;     140A:       DD4001           FLDD [EAX+1]
;     140D:       DDDC             FSTPD FR4
;     140F:       DD4001           FLDD [EAX+1]
;     1412:       D9CC             FXCH FR4
;     1414:       DCCC             FMUL-STI FR4
;     1416:       9B               WAIT
;     1417:       DDD8             FSTPD FR0
;     1419:       DD4009           FLDD [EAX+9]
;     141C:       DDDD             FSTPD FR5
;     141E:       DD4009           FLDD [EAX+9]
;     1421:       D9CD             FXCH FR5
;     1423:       D8CD             FMULD FR5
;     1425:       9B               WAIT
;     1426:       DCC4             FADD-STI FR4
;     1428:       9B               WAIT
;     1429:       DDD8             FSTPD FR0
;     142B:       DD4011           FLDD [EAX+17]
;     142E:       DDDD             FSTPD FR5
;     1430:       DD4011           FLDD [EAX+17]
;     1433:       D9CD             FXCH FR5
;     1435:       D8CD             FMULD FR5
;     1437:       9B               WAIT
;     1438:       D8C4             FADDD FR4
;     143A:       9B               WAIT
;     143B:       DCEB             FSUB-STI FR3
;     143D:       9B               WAIT
;     143E:       DDD8             FSTPD FR0
;     1440:       D9C1             FLDD FR1
;     1442:       D8CA             FMULD FR2
;     1444:       9B               WAIT
;     1445:       D8C3             FADDD FR3
;     1447:       9B               WAIT
;     1448:       D9E4             FTST
;     144A:       DFE0             FNSTSW
;     144C:       80E445           AND AH, 69
;     144F:       80FC01           CMP AH, 1
;     1452:       750E             JNE L129
;     1454: L127: B80B000008       MOV EAX, 134217739
;     1459: L128: 8D65F8           LEA ESP, [EBP-8]
;     145C:       8B6DFC           MOV EBP, [EBP-4]
;     145F:       C20400           RET 4
;     1462: L129: D9FA             FSQRT
;     1464:       9B               WAIT
;     1465:       D8C1             FADDD FR1
;     1467:       9B               WAIT
;     1468:       D9E4             FTST
;     146A:       DFE0             FNSTSW
;     146C:       80E445           AND AH, 69
;     146F:       80FC01           CMP AH, 1
;     1472:       74E0             JEQ L127
;     1474:       8B855CFFFFFF     MOV EAX, [EBP-164]
;     147A:       8B4003           MOV EAX, [EAX+3]
;     147D:       3B05B9000000     CMP EAX, [#xB9]
;     1483:       741D             JEQ L132
;     1485:       8B7033           MOV ESI, [EAX+51]
;     1488:       83FE0C           CMP ESI, 12
;     148B:       7F07             JNLE L131
;     148D: L130: B827000008       MOV EAX, 134217767
;     1492:       EBC5             JMP L128
;     1494: L131: 8B402F           MOV EAX, [EAX+47]
;     1497:       8B400D           MOV EAX, [EAX+13]
;     149A:       3B05B9000000     CMP EAX, [#xB9]
;     14A0:       75EB             JNE L130
;     14A2: L132: 8B855CFFFFFF     MOV EAX, [EBP-164]
;     14A8:       8B700B           MOV ESI, [EAX+11]
;     14AB:       EB45             JMP L135
;     14AD: L133: 8975F4           MOV [EBP-12], ESI
;     14B0:       895DF0           MOV [EBP-16], EBX
;     14B3:       8955EC           MOV [EBP-20], EDX
;     14B6:       8B4EFD           MOV ECX, [ESI-3]
;     14B9:       8BFD             MOV EDI, EBP
;     14BB:       8BC4             MOV EAX, ESP
;     14BD:       81ECC0000000     SUB ESP, 192
;     14C3:       89885CFFFFFF     MOV [EAX-164], ECX
;     14C9:       8978FC           MOV [EAX-4], EDI
;     14CC:       8BE8             MOV EBP, EAX
;     14CE:       C745F8A3150000   MOV DWORD PTR [EBP-8], 5539
;     14D5:       E939FEFFFF       JMP L122
;     14DA:       8B55EC           MOV EDX, [EBP-20]
;     14DD:       8B5DF0           MOV EBX, [EBP-16]
;     14E0:       8B75F4           MOV ESI, [EBP-12]
;     14E3:       3D0B000008       CMP EAX, 134217739
;     14E8:       7405             JEQ L134
;     14EA:       E96AFFFFFF       JMP L128
;     14EF: L134: 8B7601           MOV ESI, [ESI+1]
;     14F2: L135: 81FE0B000008     CMP ESI, 134217739
;     14F8:       75B3             JNE L133
;     14FA:       B80B000008       MOV EAX, 134217739
;     14FF:       E955FFFFFF       JMP L128
;     1504: L136: 3D0B000008       CMP EAX, 134217739
;     1509:       750E             JNE L138
;     150B: L137: B80B000008       MOV EAX, 134217739
;     1510:       8D65F8           LEA ESP, [EBP-8]
;     1513:       8B6DFC           MOV EBP, [EBP-4]
;     1516:       C20400           RET 4
;     1519: L138: 8B72FD           MOV ESI, [EDX-3]
;     151C:       8BDC             MOV EBX, ESP
;     151E:       83EC0C           SUB ESP, 12
;     1521:       8BD0             MOV EDX, EAX
;     1523:       8B3DBD000000     MOV EDI, [#xBD]
;     1529:       8B05C1000000     MOV EAX, [#xC1]
;     152F:       B90C000000       MOV ECX, 12
;     1534:       896BFC           MOV [EBX-4], EBP
;     1537:       8BEB             MOV EBP, EBX
;     1539:       FF5005           CALL DWORD PTR [EAX+5]
;     153C:       7302             JNB L139
;     153E:       8BE3             MOV ESP, EBX
;     1540: L139: EBC9             JMP L137
;     1542:       90               NOP
;     1543:       90               NOP
;     1544:       90               NOP
;     1545:       90               NOP
;     1546:       90               NOP
;     1547:       90               NOP
