(screamer:define-screamer-package :sudoku-screamer
    (:nicknames :ss)
  (:use :iterate :cl)
  (:export :sudoku-solve :*test-grid*))

(in-package :sudoku-screamer)

(defparameter *test-grid* #2a((0 0 2 3 0 0 7 0 0) 
			      (0 0 4 0 0 9 0 0 0) 
			      (6 0 0 0 0 0 0 5 0) 
			      (0 7 0 0 0 2 0 6 0) 
			      (0 0 3 7 0 0 4 0 0) 
			      (0 1 0 0 0 0 0 2 0) 
			      (0 3 0 0 0 0 0 0 9) 
			      (0 0 0 4 0 0 6 0 0) 
			      (0 0 5 0 0 8 2 0 0)))

(defparameter *hard-sudoku* #2a((7 0 0 0 0 0 0 1 9)
                                (4 6 0 1 9 0 0 0 0)
                                (0 0 0 6 8 2 7 0 4)
                                (0 9 0 0 0 0 0 0 7)
                                (0 0 0 3 0 0 4 0 5)
                                (0 0 6 7 0 0 0 0 0)
                                (0 0 1 0 0 0 0 0 0)
                                (2 0 0 0 7 4 0 0 0)
                                (0 0 0 2 0 0 3 0 0)))

(defparameter *hard-sudoku2* #2A((0 0 0 0 0 0 0 0 0)
				 (0 0 0 0 0 0 9 0 0)
				 (9 7 0 3 0 0 0 0 0)
				 (0 1 0 0 6 0 5 0 0)
				 (0 0 4 7 0 8 0 0 2)
				 (0 0 0 0 0 2 0 0 6)
				 (0 3 1 0 0 4 0 0 0)
				 (0 0 0 8 0 0 1 6 7)
				 (0 8 7 0 0 0 0 0 0)))



(defun setup-cell (grid row column)
  (if (/= 0 (aref grid row column))
    (aref grid row column)
    (an-integer-betweenv 1 9)))

(defun sudoku-solve (grid)
  (let (
        (a00 (setup-cell grid 0 0))
        (a01 (setup-cell grid 0 1))
        (a02 (setup-cell grid 0 2))
        (a03 (setup-cell grid 0 3))
        (a04 (setup-cell grid 0 4))
        (a05 (setup-cell grid 0 5))
        (a06 (setup-cell grid 0 6))
        (a07 (setup-cell grid 0 7))
        (a08 (setup-cell grid 0 8))
        (a10 (setup-cell grid 1 0))
        (a11 (setup-cell grid 1 1))
        (a12 (setup-cell grid 1 2))
        (a13 (setup-cell grid 1 3))
        (a14 (setup-cell grid 1 4))
        (a15 (setup-cell grid 1 5))
        (a16 (setup-cell grid 1 6))
        (a17 (setup-cell grid 1 7))
        (a18 (setup-cell grid 1 8))
        (a20 (setup-cell grid 2 0))
        (a21 (setup-cell grid 2 1))
        (a22 (setup-cell grid 2 2))
        (a23 (setup-cell grid 2 3))
        (a24 (setup-cell grid 2 4))
        (a25 (setup-cell grid 2 5))
        (a26 (setup-cell grid 2 6))
        (a27 (setup-cell grid 2 7))
        (a28 (setup-cell grid 2 8))
        (a30 (setup-cell grid 3 0))
        (a31 (setup-cell grid 3 1))
        (a32 (setup-cell grid 3 2))
        (a33 (setup-cell grid 3 3))
        (a34 (setup-cell grid 3 4))
        (a35 (setup-cell grid 3 5))
        (a36 (setup-cell grid 3 6))
        (a37 (setup-cell grid 3 7))
        (a38 (setup-cell grid 3 8))
        (a40 (setup-cell grid 4 0))
        (a41 (setup-cell grid 4 1))
        (a42 (setup-cell grid 4 2))
        (a43 (setup-cell grid 4 3))
        (a44 (setup-cell grid 4 4))
        (a45 (setup-cell grid 4 5))
        (a46 (setup-cell grid 4 6))
        (a47 (setup-cell grid 4 7))
        (a48 (setup-cell grid 4 8))
        (a50 (setup-cell grid 5 0))
        (a51 (setup-cell grid 5 1))
        (a52 (setup-cell grid 5 2))
        (a53 (setup-cell grid 5 3))
        (a54 (setup-cell grid 5 4))
        (a55 (setup-cell grid 5 5))
        (a56 (setup-cell grid 5 6))
        (a57 (setup-cell grid 5 7))
        (a58 (setup-cell grid 5 8))
        (a60 (setup-cell grid 6 0))
        (a61 (setup-cell grid 6 1))
        (a62 (setup-cell grid 6 2))
        (a63 (setup-cell grid 6 3))
        (a64 (setup-cell grid 6 4))
        (a65 (setup-cell grid 6 5))
        (a66 (setup-cell grid 6 6))
        (a67 (setup-cell grid 6 7))
        (a68 (setup-cell grid 6 8))
        (a70 (setup-cell grid 7 0))
        (a71 (setup-cell grid 7 1))
        (a72 (setup-cell grid 7 2))
        (a73 (setup-cell grid 7 3))
        (a74 (setup-cell grid 7 4))
        (a75 (setup-cell grid 7 5))
        (a76 (setup-cell grid 7 6))
        (a77 (setup-cell grid 7 7))
        (a78 (setup-cell grid 7 8))
        (a80 (setup-cell grid 8 0))
        (a81 (setup-cell grid 8 1))
        (a82 (setup-cell grid 8 2))
        (a83 (setup-cell grid 8 3))
        (a84 (setup-cell grid 8 4))
        (a85 (setup-cell grid 8 5))
        (a86 (setup-cell grid 8 6))
        (a87 (setup-cell grid 8 7))
        (a88 (setup-cell grid 8 8))
	)


    (assert! (/=v a00 a01 a02 a03 a04 a05 a06 a07 a08))
    (assert! (/=v a10 a11 a12 a13 a14 a15 a16 a17 a18))
    (assert! (/=v a20 a21 a22 a23 a24 a25 a26 a27 a28))
    (assert! (/=v a30 a31 a32 a33 a34 a35 a36 a37 a38))
    (assert! (/=v a40 a41 a42 a43 a44 a45 a46 a47 a48))
    (assert! (/=v a50 a51 a52 a53 a54 a55 a56 a57 a58))
    (assert! (/=v a60 a61 a62 a63 a64 a65 a66 a67 a68))
    (assert! (/=v a70 a71 a72 a73 a74 a75 a76 a77 a78))
    (assert! (/=v a80 a81 a82 a83 a84 a85 a86 a87 a88))

    (assert! (/=v a00 a10 a20 a30 a40 a50 a60 a70 a80))
    (assert! (/=v a01 a11 a21 a31 a41 a51 a61 a71 a81))
    (assert! (/=v a02 a12 a22 a32 a42 a52 a62 a72 a82))
    (assert! (/=v a03 a13 a23 a33 a43 a53 a63 a73 a83))
    (assert! (/=v a04 a14 a24 a34 a44 a54 a64 a74 a84))
    (assert! (/=v a05 a15 a25 a35 a45 a55 a65 a75 a85))
    (assert! (/=v a06 a16 a26 a36 a46 a56 a66 a76 a86))
    (assert! (/=v a07 a17 a27 a37 a47 a57 a67 a77 a87))
    (assert! (/=v a08 a18 a28 a38 a48 a58 a68 a78 a88))

    (assert! (/=v a00 a01 a02 a10 a11 a12 a20 a21 a22))
    (assert! (/=v a03 a04 a05 a13 a14 a15 a23 a24 a25))
    (assert! (/=v a06 a07 a08 a16 a17 a18 a26 a27 a28))
    (assert! (/=v a30 a31 a32 a40 a41 a42 a50 a51 a52))
    (assert! (/=v a33 a34 a35 a43 a44 a45 a53 a54 a55))
    (assert! (/=v a36 a37 a38 a46 a47 a48 a56 a57 a58))
    (assert! (/=v a60 a61 a62 a70 a71 a72 a80 a81 a82))
    (assert! (/=v a63 a64 a65 a73 a74 a75 a83 a84 a85))
    (assert! (/=v a66 a67 a68 a76 a77 a78 a86 a87 a88))
    
    (mapcar
     (lambda (solution)
       (make-array '(9 9)
		   :initial-contents
		   solution))
     (all-values (solution (list 
			    (list a00 a01 a02 a03 a04 a05 a06 a07 a08)
			    (list a10 a11 a12 a13 a14 a15 a16 a17 a18)
			    (list a20 a21 a22 a23 a24 a25 a26 a27 a28)
			    (list a30 a31 a32 a33 a34 a35 a36 a37 a38)
			    (list a40 a41 a42 a43 a44 a45 a46 a47 a48)
			    (list a50 a51 a52 a53 a54 a55 a56 a57 a58)
			    (list a60 a61 a62 a63 a64 a65 a66 a67 a68)
			    (list a70 a71 a72 a73 a74 a75 a76 a77 a78)
			    (list a80 a81 a82 a83 a84 a85 a86 a87 a88)
			    )
			   (reorder #'domain-size
				    #'(lambda (x) (declare (ignore x)) nil)
				    #'<
				    #'linear-force))))))




;; solving sudoku17
(defun solve-file (filename)
  (let ((problem-matrix (make-array '(9 9))))
    (labels ((string->matrix (str)
	       (iter (for e in-string str with-index i)
		     (for (values row col) = (floor i 9))
		     (setf (aref problem-matrix row col) (hjs.meta.type:char->num e)))))
      (with-open-file (f filename)
	(iter (for line = (read-line f nil nil))
	      (for i from 1)
	      (while line)
	      (string->matrix line)
	      (sudoku-solve problem-matrix)
	      (format t "Sudoku: ~a solved!~&" i)
	      (force-output))))))
