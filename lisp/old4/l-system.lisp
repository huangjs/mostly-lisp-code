(defpackage :l-systems
  (:use :cl :vecto))
(in-package :l-systems)

(defstruct turtle-position
  (distance) (theta)
  (current-angle 0)
  (x 0) (y 0))

(defun rotate-cw (turtle-position)
  (incf (turtle-position-current-angle turtle-position)))

(defun rotate-ccw (turtle-position)
  (decf (turtle-position-current-angle turtle-position)))

(defun step-forward (turtle-position)
  (incf (turtle-position-x turtle-position)
        (sin (* (turtle-position-current-angle turtle-position)
                (turtle-position-theta turtle-position))))
  (incf (turtle-position-y turtle-position)
        (cos (* (turtle-position-current-angle turtle-position)
                (turtle-position-theta turtle-position)))))

(defun turtle-position->xy (turtle-position)
  (values (* (turtle-position-x turtle-position) (turtle-position-distance turtle-position))
          (* (turtle-position-y turtle-position) (turtle-position-distance turtle-position))))

(defstruct l-system (rewrite-rules) (ignored-symbols))

(defun l-system (ignore &rest rewrite-rules)
  "Construct an L-System object from some rewrite rules,
Rewrite rules are of the form (<Symbol> -> <Symbol>*)
For example: (l-system '(A -> B - A - B) '(B -> A + B + A))"
  (let ((rules-table (make-hash-table)))
    (dolist (rewrite-rule rewrite-rules)
      (assert (>= (length rewrite-rule) 2))
      (assert (eql (second rewrite-rule) '->))
      (setf (gethash (first rewrite-rule) rules-table)
            (rest (rest rewrite-rule))))
    (make-l-system :rewrite-rules rules-table
                   :ignored-symbols ignore)))

(defun rewrite-symbol (symbol l-system)
  (or (gethash symbol (l-system-rewrite-rules l-system)) (list symbol)))

(defun perform-rewrite (string l-system)
  (loop for symbol in string appending (rewrite-symbol symbol l-system)))

(defun perform-rewrites (string iterations l-system)
  (loop repeat iterations do (setf string (perform-rewrite string l-system)))
  string)

(defun render-l-system (string iterations angle size l-system filename &optional (format :png))
  "Runs the l-system on initial string \"iterations\" times, where + and - rotate CW and CCW and any other symbol means move forward. Writes out data of a specified format (by default png)."
  (let ((ignored-rules (l-system-ignored-symbols l-system))
        (text (perform-rewrites string iterations l-system))
        left right top bottom)
    (flet ((run-l-system (line-thunk move-thunk)
             (let (states (turtle (make-turtle-position :distance size :theta (* (/ pi 180) angle))))
               (loop for action in text
                     when (eql action '+)
                       do (rotate-cw turtle)
                     when (eql action '-)
                       do (rotate-ccw turtle)
                     when (eql action '[)
                       do (push (copy-turtle-position turtle) states)
                     when (eql action '])
                       do (progn (setf turtle (pop states))
                                 (apply move-thunk (multiple-value-list (turtle-position->xy turtle))))
                     when (and (not (member action '(+ - [ ])))
                               (not (member action ignored-rules)))
                       do (progn (step-forward turtle)
                                 (apply line-thunk (multiple-value-list (turtle-position->xy turtle))))))))
      (run-l-system #'(lambda (x y)
                        (setf left (min (or left x) x))
                        (setf right (max (or right x) x))
                        (setf bottom (min (or bottom y) y))
                        (setf top (max (or top y) y)))
                    #'(lambda (x y) (declare (ignore x y))))
      (ecase format
        (:png
         (let* ((padding 10)
                (width (+ (* padding 2) (- right left)))
                (height (+ (* padding 2) (- top bottom)))
                (tx (+ padding (- left)))
                (ty (+ padding (- bottom))))
           (with-canvas (:width (round width) :height (round height))
             (move-to tx ty)
             (run-l-system #'(lambda (x y)
                               (line-to (+ tx x) (+ ty y)))
                           #'(lambda (x y)
                               (move-to (+ tx x) (+ ty y))))
             (stroke)
             (save-png filename))))
        ;;(:postscript
        ;;)
        ))))

(defun examples (directory)
  (write-line "seirpinski..")
  (render-l-system '(A) 8 60 3 (l-system ()
                                         '(A -> B - A - B)
                                         '(B -> A + B + A))
                   (concatenate 'string directory "sierpinksi.png"))
  (write-line "dragon..")
  (render-l-system '(F X) 15 90 1 (l-system ()
                                            '(X -> X + Y F +)
                                            '(Y -> - F X - Y))
                   (concatenate 'string directory  "dragon.png"))
  (write-line "koch..")
  (render-l-system '(F + + F + + F + + F + + F + + F) 3 60 8 (l-system ()
                                                                       '(F -> F - F + + F - F))
                   (concatenate 'string directory  "koch.png"))
  (write-line "carpet..")
  (render-l-system '(F) 5 90 6 (l-system ()
                                         '(F -> F + F - F - F - G + F + F + F - F) '(G -> G G G))
                   (concatenate 'string directory  "carpet.png"))
  (write-line "bush..")
  (render-l-system '(F) 5 22.5 10 (l-system ()
                                            '(F -> F F - [ - F + F + F ] + [ + F - F - F ]))
                   (concatenate 'string directory "bush.png"))
  (write-line "tree..")
  (render-l-system '(F) 5 26 6 (l-system ()
                                         '(F -> F [ - F ] F [ + F ] [ F ]))
                   (concatenate 'string directory  "tree.png"))
  (write-line "peano gosper..")
  (render-l-system '(X) 4 60 5 (l-system ()
                                         '(X -> X + Y F + + Y F - F X - - F X F X - Y F +)
                                         '(Y -> - F X + Y F Y F + + Y F + F X - - F X - Y))
                   (concatenate 'string directory "peano-gosper.png"))
  (write-line "hilbert..")
  (render-l-system '(X) 5 90 10 (l-system '(X Y)
                                          '(X -> - Y F + X F X + F Y -)
                                          '(Y -> + X F - Y F Y - F X +))
                   (concatenate 'string directory "hibert.png"))
  (write-line "tiling..")
  (render-l-system '([ B ] + + [ B ] + + [ B ] + + [ B ] + + [ B ]) 4 36 15
                   (l-system '(A)
                             '(C -> D A + + E A - - - - B A [ - D A - - - - C A ] + +)
                             '(B -> + D A - - E A [ - - - C A - - B A ] +)
                             '(D -> - C A + + B A [ + + + D A + + E A ] -)
                             '(E -> - - D A + + + + C A [ + E A + + + + B A ] - - B A)
                             '(A ->))
                   (concatenate 'string directory "tiling.png"))
  (write-line "done."))
