(define struct-update-table (make-table test: eq? weak-keys: #t))

(define (concat-map fn list)
  (let loop ((list list) (acc '()))
    (if (null? list)
        (reverse acc)
        (loop (cdr list)
              (append (reverse (fn (car list)))
                      acc)))))

(define (hash-consed-equal? x y)
  (if (and (##structure? x)
           (##structure? y))
      (eq? x y)
      (equal? x y)))

(define (make-struct-table)
  ;; should be weak on value
  (make-table 
   test: (lambda (x y)
           (let loop ((x x) (y y))
             (cond ((null? x))
                   ((hash-consed-equal? (car x) (car y))
                    (loop (cdr x) (cdr y)))
                   (else #f))))
   hash: (lambda (x)
           (equal?-hash
            (map (lambda (x)
                   (if (##structure? x)
                       (eq?-hash x)
                       x))
                 x)))))

(define (generate-struct-update-function type)
  (let* ((field-info  (##type-all-fields type))
         (field-defns (let loop ((info field-info)
                                 (names '())
                                 (count 1))
                        (if (null? info)
                            (reverse names)
                            (loop (cdddr info)
                                  (cons (cons (car info) count)
                                        names)
                                  (+ count 1)))))
         (_type   (gensym 'type))
         (_struct (gensym 'struct))
         (_hash   (gensym 'hash))
         (function ((eval 
                     `(lambda (,_type ,_hash)
                        (lambda (,_struct
                                 #!key
                                 ,@(map (lambda (field)
                                          (let ((name (car field))
                                                (idx  (cdr field)))
                                            `(,name (##structure-ref ,_struct ,idx ,_type #f))))
                                        field-defns))
                          (let ((params (list ,@(map car field-defns))))
                            (or (table-ref ,_hash params #f)
                                (let ((struct (##structure ,_type ,@(map car field-defns))))
                                  (table-set! ,_hash params struct)
                                  struct))))))
                    type (make-struct-table))))
    function))

(define (get-struct-update-function type)
  (or (table-ref struct-update-table type #f)
      (let ((fun (generate-struct-update-function type)))
        (table-set! struct-update-table type fun)
        fun)))

(define (update-struct struct . args)
  (apply (get-struct-update-function (##structure-type struct))
         struct
         args))
