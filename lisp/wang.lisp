;; ~, ^, v, =>, <=>,
;; (wang true-wffs false-wffs)

(defun atomic-p (wff)
  (symbolp wff))

(defmacro def-bin-op-p (name op)
  `(defun ,name (wff)
     (and (listp wff)
          (eq (first wff) ',op))))

(def-bin-op-p negation-p ~)
(def-bin-op-p conjunction-p ^)
(def-bin-op-p disjunction-p v)
(def-bin-op-p implication-p =>)
(def-bin-op-p biconditional-p <=>)

(defun add-wff (wff wffs)
  (adjoin wff wffs :test 'equal))

;; e.g.
;; (wang nil '((v (v a b) (^ (~ a) (~ b)))))
(defun wang (true-wffs false-wffs)
  "wffs is a list of wff"
  (if (intersection true-wffs false-wffs :test #'equal)
      'tautology
      (let (wff)
        (cond ((setf wff (find-if-not #'atomic-p true-wffs))
               (cond ((negation-p wff)
                      (wang (remove wff true-wffs)
                            (add-wff (second wff) false-wffs)))
                     ((conjunction-p wff)
                      (wang (add-wff (second wff)
                                     (add-wff (third wff)
                                              (remove wff true-wffs)))
                            false-wffs))
                     ((disjunction-p wff)
                      (and (wang (add-wff (second wff)
                                          (remove wff true-wffs))
                                 false-wffs)
                           (wang (add-wff (third wff)
                                          (remove wff true-wffs))
                                 false-wffs)))
                     ((implication-p wff)
                      (and (wang (add-wff (third wff)
                                          (remove wff true-wffs))
                                 false-wffs)
                           (wang (remove wff true-wffs)
                                 (add-wff (second wff) false-wffs))))
                     ((biconditional-p wff)
                      (and (wang (add-wff (second wff)
                                          (add-wff (third wff)
                                                   (remove wff true-wffs)))
                                 false-wffs)
                           (wang (remove wff true-wffs)
                                 (add-wff (second wff)
                                          (add-wff (third wff)
                                                   (remove wff false-wffs))))))
                     (t (error "Unknown WFF: ~a" wff))))
              ((setf wff (find-if-not #'atomic-p false-wffs))
               (cond ((negation-p wff)
                      (wang (add-wff (second wff) true-wffs)
                            (remove wff false-wffs)))
                     ((conjunction-p wff)
                      (and (wang true-wffs (add-wff (second wff)
                                                    (remove wff false-wffs)))
                           (wang true-wffs (add-wff (third wff)
                                                    (remove wff false-wffs)))))
                     ((disjunction-p wff)
                      (wang true-wffs
                            (add-wff (second wff)
                                     (add-wff (third wff)
                                              (remove wff false-wffs)))))
                     ((implication-p wff)
                      (wang (add-wff (second wff) true-wffs)
                            (add-wff (third wff)
                                     (remove wff false-wffs))))
                     ((biconditional-p wff)
                      (and (wang (add-wff (second wff) true-wffs)
                                 (add-wff (third wff)
                                          (remove wff false-wffs)))
                           (wang (add-wff (third wff) true-wffs)
                                 (add-wff (second wff)
                                          (remove wff false-wffs)))))
                     (t (error "Unknown WFF: ~a" wff))))
              (t nil)))))
